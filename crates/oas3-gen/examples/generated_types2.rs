//! AUTO-GENERATED CODE - DO NOT EDIT!
//!
//! OData Service for namespace microsoft.graph - Subset
//! Source: specs/msgraph.json
//! Version: v1.0
//! Generated by `openapi-gen`
//!
//! This OData service is located at https://graph.microsoft.com/v1.0
#![allow(clippy::large_enum_variant)]

use serde::{Deserialize, Serialize};
use validator::Validate;
use oas3_gen_support::Default;
use oas3_gen_support::discriminated_enum;
static REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET: std::sync::LazyLock<
    regex::Regex,
> = std::sync::LazyLock::new(|| {
    regex::Regex::new("^-?P([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+([.][0-9]+)?S)?)?$")
        .expect("invalid regex")
});
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct BaseCollectionPaginationCountResponse {
    #[serde(rename = "@odata.count")]
    pub odata_count: Option<i64>,
    #[serde(rename = "@odata.nextLink")]
    pub odata_next_link: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct BaseDeltaFunctionResponse {
    #[serde(rename = "@odata.deltaLink")]
    pub odata_delta_link: Option<String>,
    #[serde(rename = "@odata.nextLink")]
    pub odata_next_link: Option<String>,
}
///Use this API to create a new mail folder in the root folder of the user's mailbox. If you intend a new folder to be hidden, you must set the isHidden property to true on creation.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeCreateMailFoldersRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Create an open extension (openTypeExtension object) and add custom properties in a new or existing instance of a resource. You can create an open extension in a resource instance and store custom data to it all in the same operation, except for specific resources. The table in the Permissions section lists the resources that support open extensions.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeCreateMessagesRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Delete the specified mailFolder. The folder can be a mailSearchFolder. You can specify a mail folder by its folder ID, or by its well-known folder name, if one exists.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeDeleteMailFoldersRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Delete eventMessage.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeDeleteMessagesContentRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Delete eventMessage.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeDeleteMessagesRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Retrieve the properties and relationships of a message folder object. The following list shows the two existing scenarios where an app can get another user's mail folder:
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeGetMailFoldersRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///Get the messages in the signed-in user's mailbox (including the Deleted Items and Clutter folders). Depending on the page size and mailbox data, getting messages from a mailbox can incur multiple requests. The default page size is 10 messages. Use $top to customize the page size, within the range of 1 and 1000. To improve the operation response time, use $select to specify the exact properties you need; see example 1 below. Fine-tune the values for $select and $top, especially when you must use a larger page size, as returning a page with hundreds of messages each with a full response payload may trigger the gateway timeout (HTTP 504). To get the next page of messages, simply apply the entire URL returned in @odata.nextLink to the next get-messages request. This URL includes any query parameters you may have specified in the initial request. Do not try to extract the $skip value from the @odata.nextLink URL to manipulate responses. This API uses the $skip value to keep count of all the items it has gone through in the user's mailbox to return a page of message-type items. It's therefore possible that even in the initial response, the $skip value is larger than the page size. For more information, see Paging Microsoft Graph data in your app. Currently, this operation returns message bodies in only HTML format. There are two scenarios where an app can get messages in another user's mail folder:
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeGetMessagesContentRequest {
    ///Query parameter
    ///Include Hidden Messages
    #[serde(rename = "includeHiddenMessages")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include_hidden_messages: Option<String>,
}
///You can get a single resource instance expanded with a specific extended property, or a collection of resource instances
///that include extended properties matching a filter. Using the query parameter $expand allows you to get the specified resource instance expanded with a specific extended
///property. Use a $filter and eq operator on the id property to specify the extended property. This is currently the only way to get the singleValueLegacyExtendedProperty object that represents an extended property. To get resource instances that have certain extended properties, use the $filter query parameter and apply an eq operator
///on the id property. In addition, for numeric extended properties, apply one of the following operators on the value property:
///eq, ne,ge, gt, le, or lt. For string-typed extended properties, apply a contains, startswith, eq, or ne operator on value. The filter is applied to all instances of the resource in the signed-in user's mailbox. Filtering the string name (Name) in the id of an extended property is case-sensitive. Filtering the value property of an extended
///property is case-insensitive. The following user resources are supported: As well as the following group resources: See Extended properties overview for more information about when to use
///open extensions or extended properties, and how to specify extended properties.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeGetMessagesRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///Get the mail folder collection directly under the root folder of the signed-in user. The returned collection includes any mail search folders directly under the root. By default, this operation does not return hidden folders. Use a query parameter includeHiddenFolders to include them in the response. This operation does not return all mail folders in a mailbox, only the child folders of the root folder. To return all mail folders in a mailbox, each child folder must be traversed separately.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeListMailFoldersRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
    ///Query parameter
    ///Include Hidden Folders
    #[serde(rename = "includeHiddenFolders")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include_hidden_folders: Option<String>,
}
///Get the messages in the signed-in user's mailbox (including the Deleted Items and Clutter folders). Depending on the page size and mailbox data, getting messages from a mailbox can incur multiple requests. The default page size is 10 messages. Use $top to customize the page size, within the range of 1 and 1000. To improve the operation response time, use $select to specify the exact properties you need; see example 1 below. Fine-tune the values for $select and $top, especially when you must use a larger page size, as returning a page with hundreds of messages each with a full response payload may trigger the gateway timeout (HTTP 504). To get the next page of messages, simply apply the entire URL returned in @odata.nextLink to the next get-messages request. This URL includes any query parameters you may have specified in the initial request. Do not try to extract the $skip value from the @odata.nextLink URL to manipulate responses. This API uses the $skip value to keep count of all the items it has gone through in the user's mailbox to return a page of message-type items. It's therefore possible that even in the initial response, the $skip value is larger than the page size. For more information, see Paging Microsoft Graph data in your app. Currently, this operation returns message bodies in only HTML format. There are two scenarios where an app can get messages in another user's mail folder:
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeListMessagesRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
    ///Query parameter
    ///Include Hidden Messages
    #[serde(rename = "includeHiddenMessages")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include_hidden_messages: Option<String>,
}
///Create new navigation property to messageRules for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersCreateMessageRulesRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Create new navigation property to messages for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersCreateMessagesRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Delete navigation property messageRules for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersDeleteMessageRulesRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///The unique identifier for an entity. Read-only.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersDeleteMessagesContentRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Delete navigation property messages for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersDeleteMessagesRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersGetCount25bcRequest {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Include Hidden Folders
    #[serde(rename = "includeHiddenFolders")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include_hidden_folders: Option<String>,
}
///The collection of rules that apply to the user's Inbox folder.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersGetMessageRulesRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///The collection of messages in the mailFolder.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersGetMessagesRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///The collection of rules that apply to the user's Inbox folder.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersListMessageRulesRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///The collection of messages in the mailFolder.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersListMessagesRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessageRulesGetCount6a96Request {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesAttachmentsGetCount65b2Request {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
}
///Create new navigation property to attachments for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesCreateAttachmentsRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Create new navigation property to extensions for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesCreateExtensionsRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Delete navigation property attachments for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesDeleteAttachmentsRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Delete navigation property extensions for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesDeleteExtensionsRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesExtensionsGetCountCf94Request {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
}
///The fileAttachment and itemAttachment attachments for the message.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesGetAttachmentsRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesGetCount56daRequest {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
}
///The collection of open extensions defined for the message. Nullable.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesGetExtensionsRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///The fileAttachment and itemAttachment attachments for the message.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesListAttachmentsRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///The collection of open extensions defined for the message. Nullable.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesListExtensionsRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///Update the navigation property extensions in me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersMessagesUpdateExtensionsRequest {
    ///New navigation property values
    pub body: serde_json::Value,
}
///Update the navigation property messageRules in me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersUpdateMessageRulesRequest {
    ///New navigation property values
    pub body: serde_json::Value,
}
///The unique identifier for an entity. Read-only.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersUpdateMessagesContentRequest {
    ///New media content.
    pub body: Vec<u8>,
}
///Update the navigation property messages in me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersChildFoldersUpdateMessagesRequest {
    ///New navigation property values
    pub body: serde_json::Value,
}
///Create a new mailSearchFolder in the specified user's mailbox.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersCreateChildFoldersRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Create a messageRule object by specifying a set of conditions and actions. Outlook carries out those actions if an incoming message in the user's Inbox meets the specified conditions.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersCreateMessageRulesRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Use this API to create a new Message in a mailfolder.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersCreateMessagesRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Delete navigation property childFolders for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersDeleteChildFoldersRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Delete the specified messageRule object.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersDeleteMessageRulesRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///The unique identifier for an entity. Read-only.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersDeleteMessagesContentRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Delete navigation property messages for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersDeleteMessagesRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Get a set of mail folders that have been added, deleted, or removed from the user's mailbox. A delta function call for mail folders in a mailbox is similar to a GET request, except that by appropriately
///applying state tokens in one or more of these calls,
///you can query for incremental changes in the mail folders. This allows you to maintain and synchronize
///a local store of a user's mail folders without having to fetch all the mail folders of that mailbox from the server every time.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersDeltaRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///The collection of child folders in the mailFolder.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersGetChildFoldersRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Include Hidden Folders
    #[serde(rename = "includeHiddenFolders")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include_hidden_folders: Option<String>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersGetCountC00eRequest {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Include Hidden Folders
    #[serde(rename = "includeHiddenFolders")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include_hidden_folders: Option<String>,
}
///Get the properties and relationships of a messageRule object.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersGetMessageRulesRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///The collection of messages in the mailFolder.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersGetMessagesRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///Get the folder collection under the specified folder. You can use the .../me/mailFolders shortcut to get the top-level
///folder collection and navigate to another folder. By default, this operation does not return hidden folders. Use a query parameter includeHiddenFolders to include them in the response.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersListChildFoldersRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
    ///Query parameter
    ///Include Hidden Folders
    #[serde(rename = "includeHiddenFolders")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include_hidden_folders: Option<String>,
}
///Get all the messageRule objects defined for the user's inbox.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersListMessageRulesRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///Get all the messages in the specified user's mailbox, or those messages in a specified folder in the mailbox.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersListMessagesRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///Get a set of mail folders that have been added, deleted, or removed from the user's mailbox. A delta function call for mail folders in a mailbox is similar to a GET request, except that by appropriately
///applying state tokens in one or more of these calls,
///you can query for incremental changes in the mail folders. This allows you to maintain and synchronize
///a local store of a user's mail folders without having to fetch all the mail folders of that mailbox from the server every time.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersDeltaRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///Copy a mailfolder and its contents to another mailfolder.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderCopyRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderChildFoldersMailFolderCopyRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderCopyRequestBody {
    #[serde(rename = "DestinationId")]
    pub destination_id: Option<String>,
}
///Get a set of messages that have been added, deleted, or updated in a specified folder. A delta function call for messages in a folder is similar to a GET request, except that by appropriately
///applying state tokens in one or more of these calls, you can [query for incremental changes in the messages in
///that folder](/graph/delta-query-messages). This allows you to maintain and synchronize a local store of a user's messages without
///having to fetch the entire set of messages from the server every time.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesDeltaRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
    ///Query parameter
    ///A custom query option to filter the delta response based on the type of change. Supported values are created, updated or deleted.
    #[serde(rename = "changeType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub change_type: Option<String>,
}
///Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageAttachmentsCreateUploadSessionRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageAttachmentsCreateUploadSessionRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageAttachmentsCreateUploadSessionRequestBody {
    #[serde(rename = "AttachmentItem")]
    pub attachment_item: Option<MicrosoftGraphAttachmentItem>,
}
///Copy a message to a folder within the user's mailbox.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCopyRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCopyRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCopyRequestBody {
    #[serde(rename = "DestinationId")]
    pub destination_id: Option<String>,
}
///Create a draft to forward an existing message, in either JSON or MIME format. When using JSON format, you can:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error.
///- Update the draft later to add content to the body or change other message properties. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, forward a message in a single operation.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
    #[serde(rename = "ToRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
}
///Create a draft to reply to the sender and all recipients of a message in either JSON or MIME format. When using JSON format:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), you should send the reply to the recipients in the replyTo and toRecipients properties, and not the recipients in the from and toRecipients properties.
///- You can update the draft later to add reply content to the body or change other message properties. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply-all to a message in a single action.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateReplyAllRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateReplyAllRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateReplyAllRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Create a draft to reply to the sender of a message in either JSON or MIME format. When using JSON format:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- If replyTo is specified in the original message, per Internet Message Format (RFC 2822), you should send the reply to the recipients in replyTo, and not the recipients in from.
///- You can update the draft later to add reply content to the body or change other message properties. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply to a message in a single operation.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateReplyRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateReplyRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateReplyRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Forward a message using either JSON or MIME format. When using JSON format, you can:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to forward a message, and send it later.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageForwardRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageForwardRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageForwardRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
    #[serde(rename = "ToRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
}
///Move a message to another folder within the specified user's mailbox. This creates a new copy of the message in the destination folder and removes the original message.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequestBody {
    #[serde(rename = "DestinationId")]
    pub destination_id: Option<String>,
}
///Reply to all recipients of a message using either JSON or MIME format. When using JSON format:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply-all to a message and send it later.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageReplyAllRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageReplyAllRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageReplyAllRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Reply to the sender of a message using either JSON or MIME format. When using JSON format:
///* Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///* If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply to an existing message and send it later.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageReplyRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageReplyRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageReplyRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Move a mailfolder and its contents to another mailfolder.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMoveRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderChildFoldersMailFolderMoveRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderChildFoldersMailFolderMoveRequestBody {
    #[serde(rename = "DestinationId")]
    pub destination_id: Option<String>,
}
///Copy a mailfolder and its contents to another mailfolder.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderCopyRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderCopyRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderCopyRequestBody {
    #[serde(rename = "DestinationId")]
    pub destination_id: Option<String>,
}
///Get a set of messages that have been added, deleted, or updated in a specified folder. A delta function call for messages in a folder is similar to a GET request, except that by appropriately
///applying state tokens in one or more of these calls, you can [query for incremental changes in the messages in
///that folder](/graph/delta-query-messages). This allows you to maintain and synchronize a local store of a user's messages without
///having to fetch the entire set of messages from the server every time.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesDeltaRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
    ///Query parameter
    ///A custom query option to filter the delta response based on the type of change. Supported values are created, updated or deleted.
    #[serde(rename = "changeType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub change_type: Option<String>,
}
///Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageAttachmentsCreateUploadSessionRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderMessagesMessageAttachmentsCreateUploadSessionRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageAttachmentsCreateUploadSessionRequestBody {
    #[serde(rename = "AttachmentItem")]
    pub attachment_item: Option<MicrosoftGraphAttachmentItem>,
}
///Copy a message to a folder within the user's mailbox.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageCopyRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderMessagesMessageCopyRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageCopyRequestBody {
    #[serde(rename = "DestinationId")]
    pub destination_id: Option<String>,
}
///Create a draft to forward an existing message, in either JSON or MIME format. When using JSON format, you can:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error.
///- Update the draft later to add content to the body or change other message properties. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, forward a message in a single operation.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageCreateForwardRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderMessagesMessageCreateForwardRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageCreateForwardRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
    #[serde(rename = "ToRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
}
///Create a draft to reply to the sender and all recipients of a message in either JSON or MIME format. When using JSON format:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), you should send the reply to the recipients in the replyTo and toRecipients properties, and not the recipients in the from and toRecipients properties.
///- You can update the draft later to add reply content to the body or change other message properties. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply-all to a message in a single action.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageCreateReplyAllRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderMessagesMessageCreateReplyAllRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageCreateReplyAllRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Create a draft to reply to the sender of a message in either JSON or MIME format. When using JSON format:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- If replyTo is specified in the original message, per Internet Message Format (RFC 2822), you should send the reply to the recipients in replyTo, and not the recipients in from.
///- You can update the draft later to add reply content to the body or change other message properties. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply to a message in a single operation.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageCreateReplyRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderMessagesMessageCreateReplyRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageCreateReplyRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Forward a message using either JSON or MIME format. When using JSON format, you can:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to forward a message, and send it later.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageForwardRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderMessagesMessageForwardRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageForwardRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
    #[serde(rename = "ToRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
}
///Move a message to another folder within the specified user's mailbox. This creates a new copy of the message in the destination folder and removes the original message.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageMoveRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderMessagesMessageMoveRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageMoveRequestBody {
    #[serde(rename = "DestinationId")]
    pub destination_id: Option<String>,
}
///Reply to all recipients of a message using either JSON or MIME format. When using JSON format:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply-all to a message and send it later.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageReplyAllRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderMessagesMessageReplyAllRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageReplyAllRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Reply to the sender of a message using either JSON or MIME format. When using JSON format:
///* Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///* If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply to an existing message and send it later.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageReplyRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderMessagesMessageReplyRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMessagesMessageReplyRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Move a mailfolder and its contents to another mailfolder.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMoveRequest {
    ///Action parameters
    pub body: MeMailFoldersMailFolderMoveRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMailFoldersMailFolderMoveRequestBody {
    #[serde(rename = "DestinationId")]
    pub destination_id: Option<String>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessageRulesGetCount3d24Request {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesAttachmentsGetCount16faRequest {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
}
///Create new navigation property to attachments for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesCreateAttachmentsRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Create new navigation property to extensions for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesCreateExtensionsRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Delete navigation property attachments for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesDeleteAttachmentsRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Delete navigation property extensions for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesDeleteExtensionsRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesExtensionsGetCount8860Request {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
}
///The fileAttachment and itemAttachment attachments for the message.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesGetAttachmentsRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesGetCount363aRequest {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
}
///The collection of open extensions defined for the message. Nullable.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesGetExtensionsRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///The fileAttachment and itemAttachment attachments for the message.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesListAttachmentsRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///The collection of open extensions defined for the message. Nullable.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesListExtensionsRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///Update the navigation property extensions in me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersMessagesUpdateExtensionsRequest {
    ///New navigation property values
    pub body: serde_json::Value,
}
///Update the navigation property childFolders in me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersUpdateChildFoldersRequest {
    ///New navigation property values
    pub body: serde_json::Value,
}
///Change writable properties on a messageRule object and save the changes.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersUpdateMessageRulesRequest {
    ///New navigation property values
    pub body: serde_json::Value,
}
///The unique identifier for an entity. Read-only.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersUpdateMessagesContentRequest {
    ///New media content.
    pub body: Vec<u8>,
}
///Update the navigation property messages in me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMailFoldersUpdateMessagesRequest {
    ///New navigation property values
    pub body: serde_json::Value,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesAttachmentsGetCount2181Request {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
}
///Use this API to create a new Attachment. An attachment can be one of the following types: All these types of attachment resources are derived from the attachment
///resource.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesCreateAttachmentsRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Create an open extension (openTypeExtension object) and add custom properties in a new or existing instance of a resource. You can create an open extension in a resource instance and store custom data to it all in the same operation, except for specific resources. The table in the Permissions section lists the resources that support open extensions.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesCreateExtensionsRequest {
    ///New navigation property
    pub body: serde_json::Value,
}
///Delete navigation property attachments for me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesDeleteAttachmentsRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Delete an open extension (openTypeExtension object) from the specified instance of a resource.  For the list of resources that support open extensions, see the table in the Permissions section.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesDeleteExtensionsRequest {
    ///Header parameter
    ///ETag
    #[serde(rename = "If-Match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub if_match: Option<String>,
}
///Get a set of messages that have been added, deleted, or updated in a specified folder. A delta function call for messages in a folder is similar to a GET request, except that by appropriately
///applying state tokens in one or more of these calls, you can [query for incremental changes in the messages in
///that folder](/graph/delta-query-messages). This allows you to maintain and synchronize a local store of a user's messages without
///having to fetch the entire set of messages from the server every time.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesDeltaRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
    ///Query parameter
    ///A custom query option to filter the delta response based on the type of change. Supported values are created, updated or deleted.
    #[serde(rename = "changeType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub change_type: Option<String>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesExtensionsGetCountD960Request {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
}
///Read the properties, relationships, or raw contents of an attachment that is attached to a user event, message, or group post. An attachment can be one of the following types: All these types of attachments are derived from the attachment resource.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesGetAttachmentsRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///Get the number of the resource
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesGetCountA82eRequest {
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Include Hidden Messages
    #[serde(rename = "includeHiddenMessages")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include_hidden_messages: Option<String>,
}
///Get an open extension (openTypeExtension object) identified by name or fully qualified name. The table in the Permissions section lists the resources that support open extensions. The following table lists the three scenarios where you can get an open extension from a supported resource instance.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesGetExtensionsRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
}
///Retrieve a list of attachment objects.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesListAttachmentsRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///Get an open extension (openTypeExtension object) identified by name or fully qualified name. The table in the Permissions section lists the resources that support open extensions. The following table lists the three scenarios where you can get an open extension from a supported resource instance.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesListExtensionsRequest {
    ///Query parameter
    ///Include count of items
    #[serde(rename = "$count")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<bool>,
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Filter items by property values
    #[serde(rename = "$filter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    ///Query parameter
    ///Order items by property values
    #[serde(rename = "$orderby")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderby: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Search items by search phrases
    #[serde(rename = "$search")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Skip the first n items
    #[serde(rename = "$skip")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub skip: Option<i64>,
    ///Query parameter
    ///Show only the first n items
    #[serde(rename = "$top")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(range(min = 0i64))]
    pub top: Option<i64>,
}
///Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesMessageAttachmentsCreateUploadSessionRequest {
    ///Action parameters
    pub body: MeMessagesMessageAttachmentsCreateUploadSessionRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMessagesMessageAttachmentsCreateUploadSessionRequestBody {
    #[serde(rename = "AttachmentItem")]
    pub attachment_item: Option<MicrosoftGraphAttachmentItem>,
}
///Copy a message to a folder within the user's mailbox.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesMessageCopyRequest {
    ///Action parameters
    pub body: MeMessagesMessageCopyRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMessagesMessageCopyRequestBody {
    #[serde(rename = "DestinationId")]
    pub destination_id: Option<String>,
}
///Create a draft to forward an existing message, in either JSON or MIME format. When using JSON format, you can:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error.
///- Update the draft later to add content to the body or change other message properties. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, forward a message in a single operation.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesMessageCreateForwardRequest {
    ///Action parameters
    pub body: MeMessagesMessageCreateForwardRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMessagesMessageCreateForwardRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
    #[serde(rename = "ToRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
}
///Create a draft to reply to the sender and all recipients of a message in either JSON or MIME format. When using JSON format:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), you should send the reply to the recipients in the replyTo and toRecipients properties, and not the recipients in the from and toRecipients properties.
///- You can update the draft later to add reply content to the body or change other message properties. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply-all to a message in a single action.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesMessageCreateReplyAllRequest {
    ///Action parameters
    pub body: MeMessagesMessageCreateReplyAllRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMessagesMessageCreateReplyAllRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Create a draft to reply to the sender of a message in either JSON or MIME format. When using JSON format:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- If replyTo is specified in the original message, per Internet Message Format (RFC 2822), you should send the reply to the recipients in replyTo, and not the recipients in from.
///- You can update the draft later to add reply content to the body or change other message properties. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply to a message in a single operation.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesMessageCreateReplyRequest {
    ///Action parameters
    pub body: MeMessagesMessageCreateReplyRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMessagesMessageCreateReplyRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Forward a message using either JSON or MIME format. When using JSON format, you can:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to forward a message, and send it later.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesMessageForwardRequest {
    ///Action parameters
    pub body: MeMessagesMessageForwardRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMessagesMessageForwardRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
    #[serde(rename = "ToRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
}
///Move a message to another folder within the specified user's mailbox. This creates a new copy of the message in the destination folder and removes the original message.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesMessageMoveRequest {
    ///Action parameters
    pub body: MeMessagesMessageMoveRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMessagesMessageMoveRequestBody {
    #[serde(rename = "DestinationId")]
    pub destination_id: Option<String>,
}
///Reply to all recipients of a message using either JSON or MIME format. When using JSON format:
///- Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///- If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply-all to a message and send it later.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesMessageReplyAllRequest {
    ///Action parameters
    pub body: MeMessagesMessageReplyAllRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMessagesMessageReplyAllRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Reply to the sender of a message using either JSON or MIME format. When using JSON format:
///* Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error.
///* If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format:
///- Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body.
///- Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply to an existing message and send it later.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesMessageReplyRequest {
    ///Action parameters
    pub body: MeMessagesMessageReplyRequestBody,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MeMessagesMessageReplyRequestBody {
    #[serde(rename = "Comment")]
    pub comment: Option<String>,
    #[serde(rename = "Message")]
    pub message: Option<MicrosoftGraphMessage>,
}
///Update the navigation property extensions in me
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeMessagesUpdateExtensionsRequest {
    ///New navigation property values
    pub body: serde_json::Value,
}
///Update the properties of mailfolder object.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeUpdateMailFoldersRequest {
    ///New navigation property values
    pub body: serde_json::Value,
}
///Update the properties of a message object.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeUpdateMessagesContentRequest {
    ///New media content.
    pub body: Vec<u8>,
}
///Update the properties of a message object.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeUpdateMessagesRequest {
    ///New navigation property values
    pub body: serde_json::Value,
}
///Returns the user or organizational contact assigned as the user's manager. Optionally, you can expand the manager's chain up to the root node.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeUserGetUserRequest {
    ///Query parameter
    ///Expand related entities
    #[serde(rename = "$expand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<indexmap::IndexSet<String>>,
    ///Query parameter
    ///Select properties to be returned
    #[serde(rename = "$select")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub select: Option<indexmap::IndexSet<String>>,
    ///Header parameter
    ///Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    #[serde(rename = "ConsistencyLevel")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub consistency_level: Option<String>,
}
///Update the properties of a user object.
#[derive(Debug, Clone, PartialEq, Serialize, Validate, Default)]
pub struct MeUserUpdateUserRequest {
    ///New property values
    pub body: serde_json::Value,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAadUserConversationMember {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.aadUserConversationMember".to_string())]
    pub odata_type: String,
    ///The display name of the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The email address of the user.
    pub email: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The roles for that user. This property contains more qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member shouldn't have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role.
    pub roles: Option<Vec<Option<String>>>,
    ///TenantId which the Microsoft Entra user belongs to.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    pub user: Option<Box<MicrosoftGraphUser>>,
    ///The guid of the user.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.
    #[serde(rename = "visibleHistoryStartDateTime")]
    pub visible_history_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessAction {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackage".to_string())]
    pub odata_type: String,
    ///The access packages that are incompatible with this package. Read-only.
    #[serde(rename = "accessPackagesIncompatibleWith")]
    pub access_packages_incompatible_with: Option<Vec<MicrosoftGraphAccessPackage>>,
    ///Read-only. Nullable. Supports $expand.
    #[serde(rename = "assignmentPolicies")]
    pub assignment_policies: Option<Vec<MicrosoftGraphAccessPackageAssignmentPolicy>>,
    ///Required when creating the access package. Read-only. Nullable.
    pub catalog: Option<Box<MicrosoftGraphAccessPackageCatalog>>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the access package.
    pub description: Option<String>,
    ///Required. The display name of the access package. Supports $filter (eq, contains).
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The access packages whose assigned users are ineligible to be assigned this access package.
    #[serde(rename = "incompatibleAccessPackages")]
    pub incompatible_access_packages: Option<Vec<MicrosoftGraphAccessPackage>>,
    ///The groups whose members are ineligible to be assigned this access package.
    #[serde(rename = "incompatibleGroups")]
    pub incompatible_groups: Option<Vec<MicrosoftGraphGroup>>,
    ///Indicates whether the access package is hidden from the requestor.
    #[serde(rename = "isHidden")]
    pub is_hidden: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The resource roles and scopes in this access package.
    #[serde(rename = "resourceRoleScopes")]
    pub resource_role_scopes: Option<Vec<MicrosoftGraphAccessPackageResourceRoleScope>>,
}
discriminated_enum! {
    pub enum MicrosoftGraphAccessPackageAnswer { discriminator : "@odata.type", variants
    : [("#microsoft.graph.accessPackageAnswerString", String(Box <
    MicrosoftGraphAccessPackageAnswerString >))], fallback : AccessPackageAnswer(Box <
    MicrosoftGraphAccessPackageAnswerBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAnswerBase {
    #[serde(rename = "answeredQuestion")]
    pub answered_question: Option<MicrosoftGraphAccessPackageQuestion>,
    ///The localized display value shown to the requestor and approvers.
    #[serde(rename = "displayValue")]
    pub display_value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAnswerChoice {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The actual value of the selected choice. This is typically a string value which is understandable by applications. Required.
    #[serde(rename = "actualValue")]
    pub actual_value: Option<String>,
    ///The text of the answer choice represented in a format for a specific locale.
    pub localizations: Option<Vec<MicrosoftGraphAccessPackageLocalizedText>>,
    ///The string to display for this answer; if an Accept-Language header is provided, and there is a matching localization in localizations, this string will be the matching localized string; otherwise, this string remains as the default non-localized string. Required.
    pub text: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAnswerString {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageAnswerString".to_string())]
    pub odata_type: String,
    #[serde(rename = "answeredQuestion")]
    pub answered_question: Option<MicrosoftGraphAccessPackageQuestion>,
    ///The localized display value shown to the requestor and approvers.
    #[serde(rename = "displayValue")]
    pub display_value: Option<String>,
    ///The value stored on the requestor's user profile, if this answer is configured to be stored as a specific attribute.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageApprovalStage {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The number of days that a request can be pending a response before it is automatically denied.
    #[serde(rename = "durationBeforeAutomaticDenial")]
    pub duration_before_automatic_denial: Option<String>,
    ///If escalation is required, the time a request can be pending a response from a primary approver.
    #[serde(rename = "durationBeforeEscalation")]
    pub duration_before_escalation: Option<String>,
    ///If escalation is enabled and the primary approvers do not respond before the escalation time, the escalationApprovers are the users who will be asked to approve requests.
    #[serde(rename = "escalationApprovers")]
    pub escalation_approvers: Option<Vec<MicrosoftGraphSubjectSet>>,
    ///The subjects, typically users, who are the fallback escalation approvers.
    #[serde(rename = "fallbackEscalationApprovers")]
    pub fallback_escalation_approvers: Option<Vec<MicrosoftGraphSubjectSet>>,
    ///The subjects, typically users, who are the fallback primary approvers.
    #[serde(rename = "fallbackPrimaryApprovers")]
    pub fallback_primary_approvers: Option<Vec<MicrosoftGraphSubjectSet>>,
    ///Indicates whether the approver is required to provide a justification for approving a request.
    #[serde(rename = "isApproverJustificationRequired")]
    pub is_approver_justification_required: Option<bool>,
    ///If true, then one or more escalationApprovers are configured in this approval stage.
    #[serde(rename = "isEscalationEnabled")]
    pub is_escalation_enabled: Option<bool>,
    ///The subjects, typically users, who will be asked to approve requests. A collection of singleUser, groupMembers, requestorManager, internalSponsors, externalSponsors, or targetUserSponsors.
    #[serde(rename = "primaryApprovers")]
    pub primary_approvers: Option<Vec<MicrosoftGraphSubjectSet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageAssignment".to_string())]
    pub odata_type: String,
    ///Read-only. Nullable. Supports $filter (eq) on the id property and $expand query parameters.
    #[serde(rename = "accessPackage")]
    pub access_package: Option<Box<MicrosoftGraphAccessPackage>>,
    ///Read-only. Supports $filter (eq) on the id property and $expand query parameters.
    #[serde(rename = "assignmentPolicy")]
    pub assignment_policy: Option<Box<MicrosoftGraphAccessPackageAssignmentPolicy>>,
    ///Information about all the custom extension calls that were made during the access package assignment workflow.
    #[serde(rename = "customExtensionCalloutInstances")]
    pub custom_extension_callout_instances: Option<
        Vec<MicrosoftGraphCustomExtensionCalloutInstance>,
    >,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "expiredDateTime")]
    pub expired_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When the access assignment is to be in place. Read-only.
    pub schedule: Option<MicrosoftGraphEntitlementManagementSchedule>,
    ///The state of the access package assignment. The possible values are: delivering, partiallyDelivered, delivered, expired, deliveryFailed, unknownFutureValue. Read-only. Supports $filter (eq).
    pub state: Option<MicrosoftGraphAccessPackageAssignmentState>,
    ///More information about the assignment lifecycle. Possible values include Delivering, Delivered, AutoAssignmentInGracePeriod, NearExpiry1DayNotificationTriggered, or ExpiredNotificationTriggered. Read-only.
    pub status: Option<String>,
    ///The subject of the access package assignment. Read-only. Nullable. Supports $expand. Supports $filter (eq) on objectId.
    pub target: Option<MicrosoftGraphAccessPackageSubject>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAssignmentApprovalSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If false, then approval isn't required for new requests in this policy.
    #[serde(rename = "isApprovalRequiredForAdd")]
    pub is_approval_required_for_add: Option<bool>,
    ///If false, then approval isn't required for updates to requests in this policy.
    #[serde(rename = "isApprovalRequiredForUpdate")]
    pub is_approval_required_for_update: Option<bool>,
    ///If false, then requestor justification isn't required for updates to requests in this policy.
    #[serde(rename = "isRequestorJustificationRequired")]
    pub is_requestor_justification_required: Option<bool>,
    ///If approval is required, the one, two or three elements of this collection define each of the stages of approval. An empty array is present if no approval is required.
    pub stages: Option<Vec<MicrosoftGraphAccessPackageApprovalStage>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAssignmentPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageAssignmentPolicy".to_string())]
    pub odata_type: String,
    ///Access package containing this policy. Read-only.  Supports $expand.
    #[serde(rename = "accessPackage")]
    pub access_package: Option<Box<MicrosoftGraphAccessPackage>>,
    ///Principals that can be assigned the access package through this policy. The possible values are: notSpecified, specificDirectoryUsers, specificConnectedOrganizationUsers, specificDirectoryServicePrincipals, allMemberUsers, allDirectoryUsers, allDirectoryServicePrincipals, allConfiguredConnectedOrganizationUsers, allExternalUsers, unknownFutureValue.
    #[serde(rename = "allowedTargetScope")]
    pub allowed_target_scope: Option<MicrosoftGraphAllowedTargetScope>,
    ///This property is only present for an auto assignment policy; if absent, this is a request-based policy.
    #[serde(rename = "automaticRequestSettings")]
    pub automatic_request_settings: Option<
        MicrosoftGraphAccessPackageAutomaticRequestSettings,
    >,
    ///Catalog of the access package containing this policy. Read-only.
    pub catalog: Option<Box<MicrosoftGraphAccessPackageCatalog>>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of stages when to execute one or more custom access package workflow extensions. Supports $expand.
    #[serde(rename = "customExtensionStageSettings")]
    pub custom_extension_stage_settings: Option<
        Vec<MicrosoftGraphCustomExtensionStageSetting>,
    >,
    ///The description of the policy.
    pub description: Option<String>,
    ///The display name of the policy.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The expiration date for assignments created in this policy.
    pub expiration: Option<MicrosoftGraphExpirationPattern>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "notificationSettings")]
    pub notification_settings: Option<MicrosoftGraphAccessPackageNotificationSettings>,
    ///Questions that are posed to the  requestor.
    pub questions: Option<Vec<MicrosoftGraphAccessPackageQuestion>>,
    ///Specifies the settings for approval of requests for an access package assignment through this policy. For example, if approval is required for new requests.
    #[serde(rename = "requestApprovalSettings")]
    pub request_approval_settings: Option<
        MicrosoftGraphAccessPackageAssignmentApprovalSettings,
    >,
    ///Provides additional settings to select who can create a request for an access package assignment through this policy, and what they can include in their request.
    #[serde(rename = "requestorSettings")]
    pub requestor_settings: Option<
        MicrosoftGraphAccessPackageAssignmentRequestorSettings,
    >,
    ///Settings for access reviews of assignments through this policy.
    #[serde(rename = "reviewSettings")]
    pub review_settings: Option<MicrosoftGraphAccessPackageAssignmentReviewSettings>,
    ///The principals that can be assigned access from an access package through this policy.
    #[serde(rename = "specificAllowedTargets")]
    pub specific_allowed_targets: Option<Vec<MicrosoftGraphSubjectSet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAssignmentRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageAssignmentRequest".to_string())]
    pub odata_type: String,
    ///The access package associated with the accessPackageAssignmentRequest. An access package defines the collections of resource roles and the policies for how one or more users can get access to those resources. Read-only. Nullable.  Supports $expand.
    #[serde(rename = "accessPackage")]
    pub access_package: Option<Box<MicrosoftGraphAccessPackage>>,
    ///Answers provided by the requestor to accessPackageQuestions asked of them at the time of request.
    pub answers: Option<Vec<MicrosoftGraphAccessPackageAnswer>>,
    ///For a requestType of userAdd or adminAdd, this is an access package assignment requested to be created. For a requestType of userRemove, adminRemove or systemRemove, this has the id property of an existing assignment to be removed.   Supports $expand.
    pub assignment: Option<MicrosoftGraphAccessPackageAssignment>,
    ///The date of the end of processing, either successful or failure, of a request. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Supports $filter.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Information about all the custom extension calls that were made during the access package assignment workflow.
    #[serde(rename = "customExtensionCalloutInstances")]
    pub custom_extension_callout_instances: Option<
        Vec<MicrosoftGraphCustomExtensionCalloutInstance>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The requestor's supplied justification.
    pub justification: Option<String>,
    ///The type of the request. The possible values are: notSpecified, userAdd, UserExtend, userUpdate, userRemove, adminAdd, adminUpdate, adminRemove, systemAdd, systemUpdate, systemRemove, onBehalfAdd (not supported), unknownFutureValue. Requests from the user have a requestType of userAdd, userUpdate, or userRemove. This property can't be changed once set.
    #[serde(rename = "requestType")]
    pub request_type: Option<MicrosoftGraphAccessPackageRequestType>,
    ///The subject who requested or, if a direct assignment, was assigned. Read-only. Nullable. Supports $expand.
    pub requestor: Option<MicrosoftGraphAccessPackageSubject>,
    ///The range of dates that access is to be assigned to the requestor. This property can't be changed once set, but a new schedule for an assignment can be included in another userUpdate or UserExtend or adminUpdate assignment request.
    pub schedule: Option<MicrosoftGraphEntitlementManagementSchedule>,
    ///The state of the request. The possible values are: submitted, pendingApproval, delivering, delivered, deliveryFailed, denied, scheduled, canceled, partiallyDelivered, unknownFutureValue. Read-only. Supports $filter (eq).
    pub state: Option<MicrosoftGraphAccessPackageRequestState>,
    ///More information on the request processing status. Read-only.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAssignmentRequestWorkflowExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.accessPackageAssignmentRequestWorkflowExtension".to_string()
    )]
    pub odata_type: String,
    ///Configuration for securing the API call to the logic app. For example, using OAuth client credentials flow.
    #[serde(rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<
        MicrosoftGraphCustomExtensionAuthenticationConfiguration,
    >,
    ///The callback configuration for a custom extension.
    #[serde(rename = "callbackConfiguration")]
    pub callback_configuration: Option<
        MicrosoftGraphCustomExtensionCallbackConfiguration,
    >,
    ///HTTP connection settings that define how long Microsoft Entra ID can wait for a connection to a logic app, how many times you can retry a timed-out connection and the exception scenarios when retries are allowed.
    #[serde(rename = "clientConfiguration")]
    pub client_configuration: Option<MicrosoftGraphCustomExtensionClientConfiguration>,
    ///The userPrincipalName of the user or identity of the subject that created this resource. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<String>,
    ///When the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for the customCalloutExtension object.
    pub description: Option<String>,
    ///Display name for the customCalloutExtension object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The type and details for configuring the endpoint to call the logic app's workflow.
    #[serde(rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<
        MicrosoftGraphCustomExtensionEndpointConfiguration,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The userPrincipalName of the identity that last modified the object.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<String>,
    ///When the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAssignmentRequestorSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///False indicates that the requestor isn't permitted to include a schedule in their request.
    #[serde(rename = "allowCustomAssignmentSchedule")]
    pub allow_custom_assignment_schedule: Option<bool>,
    ///True allows on-behalf-of requestors to create a request to add access for another principal.
    #[serde(rename = "enableOnBehalfRequestorsToAddAccess")]
    pub enable_on_behalf_requestors_to_add_access: Option<bool>,
    ///True allows on-behalf-of requestors to create a request to remove access for another principal.
    #[serde(rename = "enableOnBehalfRequestorsToRemoveAccess")]
    pub enable_on_behalf_requestors_to_remove_access: Option<bool>,
    ///True allows on-behalf-of requestors to create a request to update access for another principal.
    #[serde(rename = "enableOnBehalfRequestorsToUpdateAccess")]
    pub enable_on_behalf_requestors_to_update_access: Option<bool>,
    ///True allows requestors to create a request to add access for themselves.
    #[serde(rename = "enableTargetsToSelfAddAccess")]
    pub enable_targets_to_self_add_access: Option<bool>,
    ///True allows requestors to create a request to remove their access.
    #[serde(rename = "enableTargetsToSelfRemoveAccess")]
    pub enable_targets_to_self_remove_access: Option<bool>,
    ///True allows requestors to create a request to update their access.
    #[serde(rename = "enableTargetsToSelfUpdateAccess")]
    pub enable_targets_to_self_update_access: Option<bool>,
    ///The principals who can request on-behalf-of others.
    #[serde(rename = "onBehalfRequestors")]
    pub on_behalf_requestors: Option<Vec<MicrosoftGraphSubjectSet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAssignmentReviewSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The default decision to apply if the access is not reviewed. The possible values are: keepAccess, removeAccess, acceptAccessRecommendation, unknownFutureValue.
    #[serde(rename = "expirationBehavior")]
    pub expiration_behavior: Option<MicrosoftGraphAccessReviewExpirationBehavior>,
    ///This collection specifies the users who will be the fallback reviewers when the primary reviewers don't respond.
    #[serde(rename = "fallbackReviewers")]
    pub fallback_reviewers: Option<Vec<MicrosoftGraphSubjectSet>>,
    ///If true, access reviews are required for assignments through this policy.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Specifies whether to display recommendations to the reviewer. The default value is true.
    #[serde(rename = "isRecommendationEnabled")]
    pub is_recommendation_enabled: Option<bool>,
    ///Specifies whether the reviewer must provide justification for the approval. The default value is true.
    #[serde(rename = "isReviewerJustificationRequired")]
    pub is_reviewer_justification_required: Option<bool>,
    ///Specifies whether the principals can review their own assignments.
    #[serde(rename = "isSelfReview")]
    pub is_self_review: Option<bool>,
    ///This collection specifies the users or group of users who will review the access package assignments.
    #[serde(rename = "primaryReviewers")]
    pub primary_reviewers: Option<Vec<MicrosoftGraphSubjectSet>>,
    ///When the first review should start and how often it should recur.
    pub schedule: Option<MicrosoftGraphEntitlementManagementSchedule>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccessPackageAssignmentState {
    #[serde(rename = "delivering")]
    #[default]
    Delivering,
    #[serde(rename = "partiallyDelivered")]
    PartiallyDelivered,
    #[serde(rename = "delivered")]
    Delivered,
    #[serde(rename = "expired")]
    Expired,
    #[serde(rename = "deliveryFailed")]
    DeliveryFailed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAssignmentWorkflowExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageAssignmentWorkflowExtension".to_string())]
    pub odata_type: String,
    ///Configuration for securing the API call to the logic app. For example, using OAuth client credentials flow.
    #[serde(rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<
        MicrosoftGraphCustomExtensionAuthenticationConfiguration,
    >,
    ///The callback configuration for a custom extension.
    #[serde(rename = "callbackConfiguration")]
    pub callback_configuration: Option<
        MicrosoftGraphCustomExtensionCallbackConfiguration,
    >,
    ///HTTP connection settings that define how long Microsoft Entra ID can wait for a connection to a logic app, how many times you can retry a timed-out connection and the exception scenarios when retries are allowed.
    #[serde(rename = "clientConfiguration")]
    pub client_configuration: Option<MicrosoftGraphCustomExtensionClientConfiguration>,
    ///The userPrincipalName of the user or identity of the subject that created this resource. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<String>,
    ///When the entity was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for the customCalloutExtension object.
    pub description: Option<String>,
    ///Display name for the customCalloutExtension object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The type and details for configuring the endpoint to call the logic app's workflow.
    #[serde(rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<
        MicrosoftGraphCustomExtensionEndpointConfiguration,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The userPrincipalName of the identity that last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<String>,
    ///When the entity was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageAutomaticRequestSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The duration for which access must be retained before the target's access is revoked once they leave the allowed target scope.
    #[serde(rename = "gracePeriodBeforeAccessRemoval")]
    pub grace_period_before_access_removal: Option<String>,
    ///Indicates whether automatic assignment must be removed for targets who move out of the allowed target scope.
    #[serde(rename = "removeAccessWhenTargetLeavesAllowedTargets")]
    pub remove_access_when_target_leaves_allowed_targets: Option<bool>,
    ///If set to true, automatic assignments will be created for targets in the allowed target scope.
    #[serde(rename = "requestAccessForAllowedTargets")]
    pub request_access_for_allowed_targets: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageCatalog {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageCatalog".to_string())]
    pub odata_type: String,
    ///The access packages in this catalog. Read-only. Nullable.
    #[serde(rename = "accessPackages")]
    pub access_packages: Option<Vec<MicrosoftGraphAccessPackage>>,
    ///Whether the catalog is created by a user or entitlement management. The possible values are: userManaged, serviceDefault, serviceManaged, unknownFutureValue.
    #[serde(rename = "catalogType")]
    pub catalog_type: Option<MicrosoftGraphAccessPackageCatalogType>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "customWorkflowExtensions")]
    pub custom_workflow_extensions: Option<Vec<MicrosoftGraphCustomCalloutExtension>>,
    ///The description of the access package catalog.
    pub description: Option<String>,
    ///The display name of the access package catalog.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Whether the access packages in this catalog can be requested by users outside of the tenant.
    #[serde(rename = "isExternallyVisible")]
    pub is_externally_visible: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "resourceRoles")]
    pub resource_roles: Option<Vec<MicrosoftGraphAccessPackageResourceRole>>,
    #[serde(rename = "resourceScopes")]
    pub resource_scopes: Option<Vec<MicrosoftGraphAccessPackageResourceScope>>,
    ///Access package resources in this catalog.
    pub resources: Option<Vec<MicrosoftGraphAccessPackageResource>>,
    ///Has the value published if the access packages are available for management. The possible values are: unpublished, published, unknownFutureValue.
    pub state: Option<MicrosoftGraphAccessPackageCatalogState>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccessPackageCatalogState {
    #[serde(rename = "unpublished")]
    #[default]
    Unpublished,
    #[serde(rename = "published")]
    Published,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccessPackageCatalogType {
    #[serde(rename = "userManaged")]
    #[default]
    UserManaged,
    #[serde(rename = "serviceDefault")]
    ServiceDefault,
    #[serde(rename = "serviceManaged")]
    ServiceManaged,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccessPackageCustomExtensionStage {
    #[serde(rename = "assignmentRequestCreated")]
    #[default]
    AssignmentRequestCreated,
    #[serde(rename = "assignmentRequestApproved")]
    AssignmentRequestApproved,
    #[serde(rename = "assignmentRequestGranted")]
    AssignmentRequestGranted,
    #[serde(rename = "assignmentRequestRemoved")]
    AssignmentRequestRemoved,
    #[serde(rename = "assignmentFourteenDaysBeforeExpiration")]
    AssignmentFourteenDaysBeforeExpiration,
    #[serde(rename = "assignmentOneDayBeforeExpiration")]
    AssignmentOneDayBeforeExpiration,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccessPackageExternalUserLifecycleAction {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "blockSignIn")]
    BlockSignIn,
    #[serde(rename = "blockSignInAndDelete")]
    BlockSignInAndDelete,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageLocalizedText {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The language code that text is in. For example, 'en-us'. The language component follows 2-letter codes as defined in ISO 639-1, and the country component follows 2-letter codes as defined in ISO 3166-1 alpha-2. Required.
    #[serde(rename = "languageCode")]
    pub language_code: Option<String>,
    ///The question in the specific language. Required.
    pub text: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageMultipleChoiceQuestion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageMultipleChoiceQuestion".to_string())]
    pub odata_type: String,
    ///List of answer choices.
    pub choices: Option<Vec<MicrosoftGraphAccessPackageAnswerChoice>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the requestor is allowed to edit answers to questions for an assignment by posting an update to accessPackageAssignmentRequest.
    #[serde(rename = "isAnswerEditable")]
    pub is_answer_editable: Option<bool>,
    ///Indicates whether requestor can select multiple choices as their answer.
    #[serde(rename = "isMultipleSelectionAllowed")]
    pub is_multiple_selection_allowed: Option<bool>,
    ///Whether the requestor is required to supply an answer or not.
    #[serde(rename = "isRequired")]
    pub is_required: Option<bool>,
    ///The text of the question represented in a format for a specific locale.
    pub localizations: Option<Vec<MicrosoftGraphAccessPackageLocalizedText>>,
    ///Relative position of this question when displaying a list of questions to the requestor.
    pub sequence: Option<f64>,
    ///The text of the question to show to the requestor.
    pub text: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageNotificationSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates if notification emails for an access package are disabled within an access package assignment policy.
    #[serde(rename = "isAssignmentNotificationDisabled")]
    pub is_assignment_notification_disabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageQuestion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageQuestion".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the requestor is allowed to edit answers to questions for an assignment by posting an update to accessPackageAssignmentRequest.
    #[serde(rename = "isAnswerEditable")]
    pub is_answer_editable: Option<bool>,
    ///Whether the requestor is required to supply an answer or not.
    #[serde(rename = "isRequired")]
    pub is_required: Option<bool>,
    ///The text of the question represented in a format for a specific locale.
    pub localizations: Option<Vec<MicrosoftGraphAccessPackageLocalizedText>>,
    ///Relative position of this question when displaying a list of questions to the requestor.
    pub sequence: Option<f64>,
    ///The text of the question to show to the requestor.
    pub text: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccessPackageRequestState {
    #[serde(rename = "submitted")]
    #[default]
    Submitted,
    #[serde(rename = "pendingApproval")]
    PendingApproval,
    #[serde(rename = "delivering")]
    Delivering,
    #[serde(rename = "delivered")]
    Delivered,
    #[serde(rename = "deliveryFailed")]
    DeliveryFailed,
    #[serde(rename = "denied")]
    Denied,
    #[serde(rename = "scheduled")]
    Scheduled,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "partiallyDelivered")]
    PartiallyDelivered,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccessPackageRequestType {
    #[serde(rename = "notSpecified")]
    #[default]
    NotSpecified,
    #[serde(rename = "userAdd")]
    UserAdd,
    #[serde(rename = "userUpdate")]
    UserUpdate,
    #[serde(rename = "userRemove")]
    UserRemove,
    #[serde(rename = "adminAdd")]
    AdminAdd,
    #[serde(rename = "adminUpdate")]
    AdminUpdate,
    #[serde(rename = "adminRemove")]
    AdminRemove,
    #[serde(rename = "systemAdd")]
    SystemAdd,
    #[serde(rename = "systemUpdate")]
    SystemUpdate,
    #[serde(rename = "systemRemove")]
    SystemRemove,
    #[serde(rename = "onBehalfAdd")]
    OnBehalfAdd,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageResource".to_string())]
    pub odata_type: String,
    ///Contains information about the attributes to be collected from the requestor and sent to the resource application.
    pub attributes: Option<Vec<MicrosoftGraphAccessPackageResourceAttribute>>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A description for the resource.
    pub description: Option<String>,
    ///The display name of the resource, such as the application name, group name or site name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.
    pub environment: Option<Box<MicrosoftGraphAccessPackageResourceEnvironment>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier of the resource in the origin system. For a Microsoft Entra group, this is the identifier of the group.
    #[serde(rename = "originId")]
    pub origin_id: Option<String>,
    ///The type of the resource in the origin system, such as SharePointOnline, AadApplication or AadGroup.
    #[serde(rename = "originSystem")]
    pub origin_system: Option<String>,
    ///Read-only. Nullable. Supports $expand.
    pub roles: Option<Vec<MicrosoftGraphAccessPackageResourceRole>>,
    ///Read-only. Nullable. Supports $expand.
    pub scopes: Option<Vec<MicrosoftGraphAccessPackageResourceScope>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageResourceAttribute {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Information about how to set the attribute, currently a accessPackageUserDirectoryAttributeStore type.
    pub destination: Option<MicrosoftGraphAccessPackageResourceAttributeDestination>,
    #[serde(rename = "isEditable")]
    pub is_editable: Option<bool>,
    #[serde(rename = "isPersistedOnAssignmentRemoval")]
    pub is_persisted_on_assignment_removal: Option<bool>,
    ///The name of the attribute in the end system. If the destination is accessPackageUserDirectoryAttributeStore, then a user property such as jobTitle or a directory schema extension for the user object type, such as extension2b676109c7c74ae2b41549205f1947edpersonalTitle.
    pub name: Option<String>,
    ///Information about how to populate the attribute value when an accessPackageAssignmentRequest is being fulfilled, currently a accessPackageResourceAttributeQuestion type.
    pub source: Option<MicrosoftGraphAccessPackageResourceAttributeSource>,
}
discriminated_enum! {
    pub enum MicrosoftGraphAccessPackageResourceAttributeDestination { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.accessPackageUserDirectoryAttributeStore",
    MicrosoftGraphAccessPackageUserDirectoryAttributeStore(Box <
    MicrosoftGraphAccessPackageUserDirectoryAttributeStore >))], fallback :
    AccessPackageResourceAttributeDestination(Box <
    MicrosoftGraphAccessPackageResourceAttributeDestinationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageResourceAttributeDestinationBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageResourceAttributeQuestion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageResourceAttributeQuestion".to_string())]
    pub odata_type: String,
    pub question: Option<MicrosoftGraphAccessPackageQuestion>,
}
discriminated_enum! {
    pub enum MicrosoftGraphAccessPackageResourceAttributeSource { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.accessPackageResourceAttributeQuestion",
    MicrosoftGraphAccessPackageResourceAttributeQuestion(Box <
    MicrosoftGraphAccessPackageResourceAttributeQuestion >))], fallback :
    AccessPackageResourceAttributeSource(Box <
    MicrosoftGraphAccessPackageResourceAttributeSourceBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageResourceAttributeSourceBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageResourceEnvironment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageResourceEnvironment".to_string())]
    pub odata_type: String,
    ///Connection information of an environment used to connect to a resource.
    #[serde(rename = "connectionInfo")]
    pub connection_info: Option<MicrosoftGraphConnectionInfo>,
    ///The date and time that this object was created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of this object.
    pub description: Option<String>,
    ///The display name of this object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines whether this is default environment or not. It is set to true for all static origin systems, such as Microsoft Entra groups and Microsoft Entra Applications.
    #[serde(rename = "isDefaultEnvironment")]
    pub is_default_environment: Option<bool>,
    ///The date and time that this object was last modified. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier of this environment in the origin system.
    #[serde(rename = "originId")]
    pub origin_id: Option<String>,
    ///The type of the resource in the origin system, that is, SharePointOnline. Requires $filter (eq).
    #[serde(rename = "originSystem")]
    pub origin_system: Option<String>,
    ///Read-only. Required.
    pub resources: Option<Vec<MicrosoftGraphAccessPackageResource>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageResourceRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageResourceRequest".to_string())]
    pub odata_type: String,
    pub catalog: Option<Box<MicrosoftGraphAccessPackageCatalog>>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The type of the request. Use adminAdd to add a resource, if the caller is an administrator or resource owner, adminUpdate to update a resource, or adminRemove to remove a resource.
    #[serde(rename = "requestType")]
    pub request_type: Option<MicrosoftGraphAccessPackageRequestType>,
    pub resource: Option<Box<MicrosoftGraphAccessPackageResource>>,
    ///The outcome of whether the service was able to add the resource to the catalog. The value is delivered if the resource was added or removed, and deliveryFailed if it couldn't be added or removed. Read-only.
    pub state: Option<MicrosoftGraphAccessPackageRequestState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageResourceRole {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageResourceRole".to_string())]
    pub odata_type: String,
    ///A description for the resource role.
    pub description: Option<String>,
    ///The display name of the resource role such as the role defined by the application.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The unique identifier of the resource role in the origin system. For a SharePoint Online site, the originId is the sequence number of the role in the site.
    #[serde(rename = "originId")]
    pub origin_id: Option<String>,
    ///The type of the resource in the origin system, such as SharePointOnline, AadApplication, or AadGroup.
    #[serde(rename = "originSystem")]
    pub origin_system: Option<String>,
    pub resource: Option<Box<MicrosoftGraphAccessPackageResource>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageResourceRoleScope {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageResourceRoleScope".to_string())]
    pub odata_type: String,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub role: Option<Box<MicrosoftGraphAccessPackageResourceRole>>,
    pub scope: Option<Box<MicrosoftGraphAccessPackageResourceScope>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageResourceScope {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageResourceScope".to_string())]
    pub odata_type: String,
    ///The description of the scope.
    pub description: Option<String>,
    ///The display name of the scope.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///True if the scopes are arranged in a hierarchy and this is the top or root scope of the resource.
    #[serde(rename = "isRootScope")]
    pub is_root_scope: Option<bool>,
    ///The unique identifier for the scope in the resource as defined in the origin system.
    #[serde(rename = "originId")]
    pub origin_id: Option<String>,
    ///The origin system for the scope.
    #[serde(rename = "originSystem")]
    pub origin_system: Option<String>,
    pub resource: Option<Box<MicrosoftGraphAccessPackageResource>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageSubject {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageSubject".to_string())]
    pub odata_type: String,
    ///The connected organization of the subject. Read-only. Nullable.
    #[serde(rename = "connectedOrganization")]
    pub connected_organization: Option<MicrosoftGraphConnectedOrganization>,
    ///The display name of the subject.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The email address of the subject.
    pub email: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The object identifier of the subject. null if the subject isn't yet a user in the tenant.
    #[serde(rename = "objectId")]
    pub object_id: Option<String>,
    ///A string representation of the principal's security identifier, if known, or null if the subject doesn't have a security identifier.
    #[serde(rename = "onPremisesSecurityIdentifier")]
    pub on_premises_security_identifier: Option<String>,
    ///The principal name, if known, of the subject.
    #[serde(rename = "principalName")]
    pub principal_name: Option<String>,
    ///The resource type of the subject. The possible values are: notSpecified, user, servicePrincipal, unknownFutureValue.
    #[serde(rename = "subjectType")]
    pub subject_type: Option<MicrosoftGraphAccessPackageSubjectType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccessPackageSubjectType {
    #[serde(rename = "notSpecified")]
    #[default]
    NotSpecified,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "servicePrincipal")]
    ServicePrincipal,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageTextInputQuestion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageTextInputQuestion".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the requestor is allowed to edit answers to questions for an assignment by posting an update to accessPackageAssignmentRequest.
    #[serde(rename = "isAnswerEditable")]
    pub is_answer_editable: Option<bool>,
    ///Whether the requestor is required to supply an answer or not.
    #[serde(rename = "isRequired")]
    pub is_required: Option<bool>,
    ///Indicates whether the answer is in single or multiple line format.
    #[serde(rename = "isSingleLineQuestion")]
    pub is_single_line_question: Option<bool>,
    ///The text of the question represented in a format for a specific locale.
    pub localizations: Option<Vec<MicrosoftGraphAccessPackageLocalizedText>>,
    ///The regular expression pattern that any answer to this question must match.
    #[serde(rename = "regexPattern")]
    pub regex_pattern: Option<String>,
    ///Relative position of this question when displaying a list of questions to the requestor.
    pub sequence: Option<f64>,
    ///The text of the question to show to the requestor.
    pub text: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessPackageUserDirectoryAttributeStore {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessPackageUserDirectoryAttributeStore".to_string())]
    pub odata_type: String,
}
discriminated_enum! {
    pub enum MicrosoftGraphAccessReviewApplyAction { discriminator : "@odata.type",
    variants : [("#microsoft.graph.disableAndDeleteUserApplyAction",
    MicrosoftGraphDisableAndDeleteUserApplyAction(Box <
    MicrosoftGraphDisableAndDeleteUserApplyAction >)),
    ("#microsoft.graph.removeAccessApplyAction",
    MicrosoftGraphRemoveAccessApplyAction(Box < MicrosoftGraphRemoveAccessApplyAction
    >))], fallback : AccessReviewApplyAction(Box <
    MicrosoftGraphAccessReviewApplyActionBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewApplyActionBase {}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccessReviewExpirationBehavior {
    #[serde(rename = "keepAccess")]
    #[default]
    KeepAccess,
    #[serde(rename = "removeAccess")]
    RemoveAccess,
    #[serde(rename = "acceptAccessRecommendation")]
    AcceptAccessRecommendation,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccessReviewHistoryDecisionFilter {
    #[serde(rename = "approve")]
    #[default]
    Approve,
    #[serde(rename = "deny")]
    Deny,
    #[serde(rename = "notReviewed")]
    NotReviewed,
    #[serde(rename = "dontKnow")]
    DontKnow,
    #[serde(rename = "notNotified")]
    NotNotified,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewHistoryDefinition {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessReviewHistoryDefinition".to_string())]
    pub odata_type: String,
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphUserIdentity>,
    ///Timestamp when the access review definition was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Determines which review decisions will be included in the fetched review history data if specified. Optional on create. All decisions are included by default if no decisions are provided on create. Possible values are: approve, deny, dontKnow, notReviewed, and notNotified.
    pub decisions: Option<Vec<MicrosoftGraphAccessReviewHistoryDecisionFilter>>,
    ///Name for the access review history data collection. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If the accessReviewHistoryDefinition is a recurring definition, instances represent each recurrence. A definition that doesn't recur will have exactly one instance.
    pub instances: Option<Vec<MicrosoftGraphAccessReviewHistoryInstance>>,
    ///A timestamp. Reviews ending on or before this date will be included in the fetched history data. Only required if scheduleSettings isn't defined.
    #[serde(rename = "reviewHistoryPeriodEndDateTime")]
    pub review_history_period_end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A timestamp. Reviews starting on or before this date will be included in the fetched history data. Only required if scheduleSettings isn't defined.
    #[serde(rename = "reviewHistoryPeriodStartDateTime")]
    pub review_history_period_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The settings for a recurring access review history definition series. Only required if reviewHistoryPeriodStartDateTime or reviewHistoryPeriodEndDateTime aren't defined. Not supported yet.
    #[serde(rename = "scheduleSettings")]
    pub schedule_settings: Option<MicrosoftGraphAccessReviewHistoryScheduleSettings>,
    ///Used to scope what reviews are included in the fetched history data. Fetches reviews whose scope matches with this provided scope. Required.
    pub scopes: Option<Vec<MicrosoftGraphAccessReviewScope>>,
    ///Represents the status of the review history data collection. The possible values are: done, inProgress, error, requested, unknownFutureValue.
    pub status: Option<MicrosoftGraphAccessReviewHistoryStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewHistoryInstance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessReviewHistoryInstance".to_string())]
    pub odata_type: String,
    ///Uri that can be used to retrieve review history data. This URI will be active for 24 hours after being generated. Required.
    #[serde(rename = "downloadUri")]
    pub download_uri: Option<String>,
    ///Timestamp when this instance and associated data expires and the history is deleted. Required.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Timestamp when all of the available data for this instance was collected and is set after this instance's status is set to done. Required.
    #[serde(rename = "fulfilledDateTime")]
    pub fulfilled_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Timestamp reviews ending on or before this date will be included in the fetched history data.
    #[serde(rename = "reviewHistoryPeriodEndDateTime")]
    pub review_history_period_end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Timestamp reviews starting on or after this date will be included in the fetched history data.
    #[serde(rename = "reviewHistoryPeriodStartDateTime")]
    pub review_history_period_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Timestamp when the instance's history data is scheduled to be generated.
    #[serde(rename = "runDateTime")]
    pub run_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Represents the status of the review history data collection. The possible values are: done, inProgress, error, requested, unknownFutureValue. Once the status has been marked as done, a link can be generated to retrieve the instance's data by calling generateDownloadUri method.
    pub status: Option<MicrosoftGraphAccessReviewHistoryStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewHistoryScheduleSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub recurrence: Option<MicrosoftGraphPatternedRecurrence>,
    ///A duration string in ISO 8601 duration format specifying the lookback period of the generated review history data. For example, if a history definition is scheduled to run on the first of every month, the reportRange is P1M. In this case, on the first of every month, access review history data is collected containing only the previous month's review data. Note: Only years, months, and days ISO 8601 properties are supported. Required.
    #[serde(rename = "reportRange")]
    pub report_range: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccessReviewHistoryStatus {
    #[serde(rename = "done")]
    #[default]
    Done,
    #[serde(rename = "inprogress")]
    Inprogress,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewInactiveUsersQueryScope {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessReviewInactiveUsersQueryScope".to_string())]
    pub odata_type: String,
    ///Defines the duration of inactivity. Inactivity is based on the last sign in date of the user compared to the access review instance's start date. If this property is not specified, it's assigned the default value PT0S.
    #[serde(rename = "inactiveDuration")]
    pub inactive_duration: Option<String>,
    ///The query representing what will be reviewed in an access review.
    pub query: Option<String>,
    ///In the scenario where reviewers need to be specified dynamically, this property is used to indicate the relative source of the query. This property is only required if a relative query is specified. For example, ./manager.
    #[serde(rename = "queryRoot")]
    pub query_root: Option<String>,
    ///Indicates the type of query. Types include MicrosoftGraph and ARM.
    #[serde(rename = "queryType")]
    pub query_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewInstance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessReviewInstance".to_string())]
    pub odata_type: String,
    ///Returns the collection of reviewers who were contacted to complete this review. While the reviewers and fallbackReviewers properties of the accessReviewScheduleDefinition might specify group owners or managers as reviewers, contactedReviewers returns their individual identities. Supports $select. Read-only.
    #[serde(rename = "contactedReviewers")]
    pub contacted_reviewers: Option<Vec<MicrosoftGraphAccessReviewReviewer>>,
    ///Each user reviewed in an accessReviewInstance has a decision item representing if they were approved, denied, or not yet reviewed.
    pub decisions: Option<Vec<MicrosoftGraphAccessReviewInstanceDecisionItem>>,
    ///DateTime when review instance is scheduled to end.The DatetimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $select. Read-only.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///This collection of reviewer scopes is used to define the list of fallback reviewers. These fallback reviewers will be notified to take action if no users are found from the list of reviewers specified. This could occur when either the group owner is specified as the reviewer but the group owner does not exist, or manager is specified as reviewer but a user's manager does not exist. Supports $select.
    #[serde(rename = "fallbackReviewers")]
    pub fallback_reviewers: Option<Vec<MicrosoftGraphAccessReviewReviewerScope>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///This collection of access review scopes is used to define who the reviewers are. Supports $select. For examples of options for assigning reviewers, see Assign reviewers to your access review definition using the Microsoft Graph API.
    pub reviewers: Option<Vec<MicrosoftGraphAccessReviewReviewerScope>>,
    ///Created based on scope and instanceEnumerationScope at the accessReviewScheduleDefinition level. Defines the scope of users reviewed in a group. Supports $select and $filter (contains only). Read-only.
    pub scope: Option<MicrosoftGraphAccessReviewScope>,
    ///If the instance has multiple stages, this returns the collection of stages. A new stage will only be created when the previous stage ends. The existence, number, and settings of stages on a review instance are created based on the accessReviewStageSettings on the parent accessReviewScheduleDefinition.
    pub stages: Option<Vec<MicrosoftGraphAccessReviewStage>>,
    ///DateTime when review instance is scheduled to start. May be in the future. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $select. Read-only.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies the status of an accessReview. Possible values: Initializing, NotStarted, Starting, InProgress, Completing, Completed, AutoReviewing, and AutoReviewed. Supports $select, $orderby, and $filter (eq only). Read-only.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewInstanceDecisionItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessReviewInstanceDecisionItem".to_string())]
    pub odata_type: String,
    ///The identifier of the accessReviewInstance parent. Supports $select. Read-only.
    #[serde(rename = "accessReviewId")]
    pub access_review_id: Option<String>,
    ///The identifier of the user who applied the decision. Read-only.
    #[serde(rename = "appliedBy")]
    pub applied_by: Option<MicrosoftGraphUserIdentity>,
    ///The timestamp when the approval decision was applied.00000000-0000-0000-0000-000000000000 if the assigned reviewer hasn't applied the decision or it was automatically applied. The DatetimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.  Supports $select. Read-only.
    #[serde(rename = "appliedDateTime")]
    pub applied_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The result of applying the decision. Possible values: New, AppliedSuccessfully, AppliedWithUnknownFailure, AppliedSuccessfullyButObjectNotFound and ApplyNotSupported. Supports $select, $orderby, and $filter (eq only). Read-only.
    #[serde(rename = "applyResult")]
    pub apply_result: Option<String>,
    ///Result of the review. Possible values: Approve, Deny, NotReviewed, or DontKnow. Supports $select, $orderby, and $filter (eq only).
    pub decision: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Insights are recommendations to reviewers on whether to approve or deny a decision. There can be multiple insights associated with an accessReviewInstanceDecisionItem.
    pub insights: Option<Vec<MicrosoftGraphGovernanceInsight>>,
    ///Justification left by the reviewer when they made the decision.
    pub justification: Option<String>,
    ///Every decision item in an access review represents a principal's access to a resource. This property represents details of the principal. For example, if a decision item represents access of User 'Bob' to Group 'Sales' - The principal is 'Bob' and the resource is 'Sales'. Principals can be of two types - userIdentity and servicePrincipalIdentity. Supports $select. Read-only.
    pub principal: Option<MicrosoftGraphIdentity>,
    ///A link to the principal object. For example, https://graph.microsoft.com/v1.0/users/a6c7aecb-cbfd-4763-87ef-e91b4bd509d9. Read-only.
    #[serde(rename = "principalLink")]
    pub principal_link: Option<String>,
    ///A system-generated recommendation for the approval decision based off last interactive sign-in to tenant. The value is Approve if the sign-in is fewer than 30 days after the start of review, Deny if the sign-in is greater than 30 days after, or NoInfoAvailable. Possible values: Approve, Deny, or NoInfoAvailable. Supports $select, $orderby, and $filter (eq only). Read-only.
    pub recommendation: Option<String>,
    ///Every decision item in an access review represents a principal's access to a resource. This property represents details of the resource. For example, if a decision item represents access of User 'Bob' to Group 'Sales' - The principal is Bob and the resource is 'Sales'. Resources can be of multiple types. See accessReviewInstanceDecisionItemResource. Read-only.
    pub resource: Option<MicrosoftGraphAccessReviewInstanceDecisionItemResource>,
    ///A link to the resource. For example, https://graph.microsoft.com/v1.0/servicePrincipals/c86300f3-8695-4320-9f6e-32a2555f5ff8. Supports $select. Read-only.
    #[serde(rename = "resourceLink")]
    pub resource_link: Option<String>,
    ///The identifier of the reviewer.00000000-0000-0000-0000-000000000000 if the assigned reviewer hasn't reviewed. Supports $select. Read-only.
    #[serde(rename = "reviewedBy")]
    pub reviewed_by: Option<MicrosoftGraphUserIdentity>,
    ///The timestamp when the review decision occurred. Supports $select. Read-only.
    #[serde(rename = "reviewedDateTime")]
    pub reviewed_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.accessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource".to_string(

        )
    )]
    pub odata_type: String,
    ///Display name of the access package to which access has been granted.
    #[serde(rename = "accessPackageDisplayName")]
    pub access_package_display_name: Option<String>,
    ///Identifier of the access package to which access has been granted.
    #[serde(rename = "accessPackageId")]
    pub access_package_id: Option<String>,
    ///Display name of the resource
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Identifier of the resource
    pub id: Option<String>,
    ///Type of resource. Types include: Group, ServicePrincipal, DirectoryRole, AzureRole, AccessPackageAssignmentPolicy.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewInstanceDecisionItemAzureRoleResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.accessReviewInstanceDecisionItemAzureRoleResource".to_string()
    )]
    pub odata_type: String,
    ///Display name of the resource
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Identifier of the resource
    pub id: Option<String>,
    ///Details of the scope this role is associated with.
    pub scope: Option<MicrosoftGraphAccessReviewInstanceDecisionItemResource>,
    ///Type of resource. Types include: Group, ServicePrincipal, DirectoryRole, AzureRole, AccessPackageAssignmentPolicy.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphAccessReviewInstanceDecisionItemResource { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.accessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource",
    MicrosoftGraphAccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource(Box
    < MicrosoftGraphAccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource
    >)), ("#microsoft.graph.accessReviewInstanceDecisionItemAzureRoleResource",
    MicrosoftGraphAccessReviewInstanceDecisionItemAzureRoleResource(Box <
    MicrosoftGraphAccessReviewInstanceDecisionItemAzureRoleResource >)),
    ("#microsoft.graph.accessReviewInstanceDecisionItemServicePrincipalResource",
    MicrosoftGraphAccessReviewInstanceDecisionItemServicePrincipalResource(Box <
    MicrosoftGraphAccessReviewInstanceDecisionItemServicePrincipalResource >))], fallback
    : AccessReviewInstanceDecisionItemResource(Box <
    MicrosoftGraphAccessReviewInstanceDecisionItemResourceBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewInstanceDecisionItemResourceBase {
    ///Display name of the resource
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Identifier of the resource
    pub id: Option<String>,
    ///Type of resource. Types include: Group, ServicePrincipal, DirectoryRole, AzureRole, AccessPackageAssignmentPolicy.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewInstanceDecisionItemServicePrincipalResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.accessReviewInstanceDecisionItemServicePrincipalResource".to_string(

        )
    )]
    pub odata_type: String,
    ///The globally unique identifier of the application to which access has been granted.
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///Display name of the resource
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Identifier of the resource
    pub id: Option<String>,
    ///Type of resource. Types include: Group, ServicePrincipal, DirectoryRole, AzureRole, AccessPackageAssignmentPolicy.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewNotificationRecipientItem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Determines the recipient of the notification email.
    #[serde(rename = "notificationRecipientScope")]
    pub notification_recipient_scope: Option<
        MicrosoftGraphAccessReviewNotificationRecipientScope,
    >,
    ///Indicates the type of access review email to be sent. Supported template type is CompletedAdditionalRecipients, which sends review completion notifications to the recipients.
    #[serde(rename = "notificationTemplateType")]
    pub notification_template_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewNotificationRecipientQueryScope {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.accessReviewNotificationRecipientQueryScope".to_string()
    )]
    pub odata_type: String,
    ///Represents the query for who the recipients are. For example, /groups/{group id}/members for group members and /users/{user id} for a specific user.
    pub query: Option<String>,
    ///In the scenario where reviewers need to be specified dynamically, indicates the relative source of the query. This property is only required if a relative query (that is, ./manager) is specified.
    #[serde(rename = "queryRoot")]
    pub query_root: Option<String>,
    ///Indicates the type of query. Allowed value is MicrosoftGraph.
    #[serde(rename = "queryType")]
    pub query_type: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphAccessReviewNotificationRecipientScope { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.accessReviewNotificationRecipientQueryScope",
    MicrosoftGraphAccessReviewNotificationRecipientQueryScope(Box <
    MicrosoftGraphAccessReviewNotificationRecipientQueryScope >))], fallback :
    AccessReviewNotificationRecipientScope(Box <
    MicrosoftGraphAccessReviewNotificationRecipientScopeBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewNotificationRecipientScopeBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewQueryScope {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessReviewQueryScope".to_string())]
    pub odata_type: String,
    ///The query representing what will be reviewed in an access review.
    pub query: Option<String>,
    ///In the scenario where reviewers need to be specified dynamically, this property is used to indicate the relative source of the query. This property is only required if a relative query is specified. For example, ./manager.
    #[serde(rename = "queryRoot")]
    pub query_root: Option<String>,
    ///Indicates the type of query. Types include MicrosoftGraph and ARM.
    #[serde(rename = "queryType")]
    pub query_type: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphAccessReviewRecommendationInsightSetting { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.groupPeerOutlierRecommendationInsightSettings",
    MicrosoftGraphGroupPeerOutlierRecommendationInsightSettings(Box <
    MicrosoftGraphGroupPeerOutlierRecommendationInsightSettings >)),
    ("#microsoft.graph.userLastSignInRecommendationInsightSetting",
    MicrosoftGraphUserLastSignInRecommendationInsightSetting(Box <
    MicrosoftGraphUserLastSignInRecommendationInsightSetting >))], fallback :
    AccessReviewRecommendationInsightSetting(Box <
    MicrosoftGraphAccessReviewRecommendationInsightSettingBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewRecommendationInsightSettingBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewReviewer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessReviewReviewer".to_string())]
    pub odata_type: String,
    ///The date when the reviewer was added for the access review.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Name of reviewer.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///User principal name of the reviewer.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewReviewerScope {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The query specifying who will be the reviewer.
    pub query: Option<String>,
    ///In the scenario where reviewers need to be specified dynamically, this property is used to indicate the relative source of the query. This property is only required if a relative query, for example, ./manager, is specified. Possible value: decisions.
    #[serde(rename = "queryRoot")]
    pub query_root: Option<String>,
    ///The type of query. Examples include MicrosoftGraph and ARM.
    #[serde(rename = "queryType")]
    pub query_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewScheduleDefinition {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessReviewScheduleDefinition".to_string())]
    pub odata_type: String,
    ///Defines the list of additional users or group members to be notified of the access review progress.
    #[serde(rename = "additionalNotificationRecipients")]
    pub additional_notification_recipients: Option<
        Vec<MicrosoftGraphAccessReviewNotificationRecipientItem>,
    >,
    ///User who created this review. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphUserIdentity>,
    ///Timestamp when the access review series was created. Supports $select. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description provided by review creators to provide more context of the review to admins. Supports $select.
    #[serde(rename = "descriptionForAdmins")]
    pub description_for_admins: Option<String>,
    ///Description provided  by review creators to provide more context of the review to reviewers. Reviewers see this description in the email sent to them requesting their review. Email notifications support up to 256 characters. Supports $select.
    #[serde(rename = "descriptionForReviewers")]
    pub description_for_reviewers: Option<String>,
    ///Name of the access review series. Supports $select and $orderby. Required on create.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///This collection of reviewer scopes is used to define the list of fallback reviewers. These fallback reviewers are notified to take action if no users are found from the list of reviewers specified. This could occur when either the group owner is specified as the reviewer but the group owner doesn't exist, or manager is specified as reviewer but a user's manager doesn't exist. See accessReviewReviewerScope. Replaces backupReviewers. Supports $select. NOTE: The value of this property will be ignored if fallback reviewers are assigned through the stageSettings property.
    #[serde(rename = "fallbackReviewers")]
    pub fallback_reviewers: Option<Vec<MicrosoftGraphAccessReviewReviewerScope>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///This property is required when scoping a review to guest users' access across all Microsoft 365 groups and determines which Microsoft 365 groups are reviewed. Each group becomes a unique accessReviewInstance of the access review series.  For supported scopes, see accessReviewScope. Supports $select. For examples of options for configuring instanceEnumerationScope, see Configure the scope of your access review definition using the Microsoft Graph API.
    #[serde(rename = "instanceEnumerationScope")]
    pub instance_enumeration_scope: Option<MicrosoftGraphAccessReviewScope>,
    ///If the accessReviewScheduleDefinition is a recurring access review, instances represent each recurrence. A review that doesn't recur will have exactly one instance. Instances also represent each unique resource under review in the accessReviewScheduleDefinition. If a review has multiple resources and multiple instances, each resource has a unique instance for each recurrence.
    pub instances: Option<Vec<MicrosoftGraphAccessReviewInstance>>,
    ///Timestamp when the access review series was last modified. Supports $select. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///This collection of access review scopes is used to define who are the reviewers. The reviewers property is only updatable if individual users are assigned as reviewers. Required on create. Supports $select. For examples of options for assigning reviewers, see Assign reviewers to your access review definition using the Microsoft Graph API. NOTE: The value of this property will be ignored if reviewers are assigned through the stageSettings property.
    pub reviewers: Option<Vec<MicrosoftGraphAccessReviewReviewerScope>>,
    ///Defines the entities whose access is reviewed. For supported scopes, see accessReviewScope. Required on create. Supports $select and $filter (contains only). For examples of options for configuring scope, see Configure the scope of your access review definition using the Microsoft Graph API.
    pub scope: Option<MicrosoftGraphAccessReviewScope>,
    ///The settings for an access review series, see type definition below. Supports $select. Required on create.
    pub settings: Option<MicrosoftGraphAccessReviewScheduleSettings>,
    ///Required only for a multi-stage access review to define the stages and their settings. You can break down each review instance into up to three sequential stages, where each stage can have a different set of reviewers, fallback reviewers, and settings. Stages are created sequentially based on the dependsOn property. Optional.  When this property is defined, its settings are used instead of the corresponding settings in the accessReviewScheduleDefinition object and its settings, reviewers, and fallbackReviewers properties.
    #[serde(rename = "stageSettings")]
    pub stage_settings: Option<Vec<MicrosoftGraphAccessReviewStageSettings>>,
    ///This read-only field specifies the status of an access review. The typical states include Initializing, NotStarted, Starting, InProgress, Completing, Completed, AutoReviewing, and AutoReviewed.  Supports $select, $orderby, and $filter (eq only). Read-only.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewScheduleSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Optional field. Describes the  actions to take once a review is complete. There are two types that are currently supported: removeAccessApplyAction (default) and disableAndDeleteUserApplyAction. Field only needs to be specified in the case of disableAndDeleteUserApplyAction.
    #[serde(rename = "applyActions")]
    pub apply_actions: Option<Vec<MicrosoftGraphAccessReviewApplyAction>>,
    ///Indicates whether decisions are automatically applied. When set to false, an admin must apply the decisions manually once the reviewer completes the access review. When set to true, decisions are applied automatically after the access review instance duration ends, whether or not the reviewers have responded. Default value is false.  CAUTION: If both autoApplyDecisionsEnabled and defaultDecisionEnabled are true, all access for the principals to the resource risks being revoked if the reviewers fail to respond.
    #[serde(rename = "autoApplyDecisionsEnabled")]
    pub auto_apply_decisions_enabled: Option<bool>,
    ///Indicates whether decisions on previous access review stages are available for reviewers on an accessReviewInstance with multiple subsequent stages. If not provided, the default is disabled (false).
    #[serde(rename = "decisionHistoriesForReviewersEnabled")]
    pub decision_histories_for_reviewers_enabled: Option<bool>,
    ///Decision chosen if defaultDecisionEnabled is enabled. Can be one of Approve, Deny, or Recommendation.
    #[serde(rename = "defaultDecision")]
    pub default_decision: Option<String>,
    ///Indicates whether the default decision is enabled or disabled when reviewers do not respond. Default value is false.  CAUTION: If both autoApplyDecisionsEnabled and defaultDecisionEnabled are true, all access for the principals to the resource risks being revoked if the reviewers fail to respond.
    #[serde(rename = "defaultDecisionEnabled")]
    pub default_decision_enabled: Option<bool>,
    ///Duration of an access review instance in days. NOTE: If the stageSettings of the accessReviewScheduleDefinition object is defined, its durationInDays setting will be used instead of the value of this property.
    #[serde(rename = "instanceDurationInDays")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub instance_duration_in_days: Option<f64>,
    ///Indicates whether reviewers are required to provide justification with their decision. Default value is false.
    #[serde(rename = "justificationRequiredOnApproval")]
    pub justification_required_on_approval: Option<bool>,
    ///Indicates whether emails are enabled or disabled. Default value is false.
    #[serde(rename = "mailNotificationsEnabled")]
    pub mail_notifications_enabled: Option<bool>,
    ///Optional. Describes the types of insights that aid reviewers to make access review decisions. NOTE: If the stageSettings of the accessReviewScheduleDefinition object is defined, its recommendationInsightSettings setting will be used instead of the value of this property.
    #[serde(rename = "recommendationInsightSettings")]
    pub recommendation_insight_settings: Option<
        Vec<MicrosoftGraphAccessReviewRecommendationInsightSetting>,
    >,
    ///Optional field. Indicates the period of inactivity (with respect to the start date of the review instance) that recommendations will be configured from. The recommendation will be to deny if the user is inactive during the look-back duration. For reviews of groups and Microsoft Entra roles, any duration is accepted. For reviews of applications, 30 days is the maximum duration. If not specified, the duration is 30 days. NOTE: If the stageSettings of the accessReviewScheduleDefinition object is defined, its recommendationLookBackDuration setting will be used instead of the value of this property.
    #[serde(rename = "recommendationLookBackDuration")]
    pub recommendation_look_back_duration: Option<String>,
    ///Indicates whether decision recommendations are enabled or disabled. NOTE: If the stageSettings of the accessReviewScheduleDefinition object is defined, its recommendationsEnabled setting will be used instead of the value of this property.
    #[serde(rename = "recommendationsEnabled")]
    pub recommendations_enabled: Option<bool>,
    ///Detailed settings for recurrence using the standard Outlook recurrence object. Note: Only dayOfMonth, interval, and type (weekly, absoluteMonthly) properties are supported. Use the property startDate on recurrenceRange to determine the day the review starts.
    pub recurrence: Option<MicrosoftGraphPatternedRecurrence>,
    ///Indicates whether reminders are enabled or disabled. Default value is false.
    #[serde(rename = "reminderNotificationsEnabled")]
    pub reminder_notifications_enabled: Option<bool>,
}
discriminated_enum! {
    pub enum MicrosoftGraphAccessReviewScope { discriminator : "@odata.type", variants :
    [("#microsoft.graph.accessReviewInactiveUsersQueryScope",
    MicrosoftGraphAccessReviewInactiveUsersQueryScope(Box <
    MicrosoftGraphAccessReviewInactiveUsersQueryScope >)),
    ("#microsoft.graph.accessReviewQueryScope", MicrosoftGraphAccessReviewQueryScope(Box
    < MicrosoftGraphAccessReviewQueryScope >)),
    ("#microsoft.graph.principalResourceMembershipsScope",
    MicrosoftGraphPrincipalResourceMembershipsScope(Box <
    MicrosoftGraphPrincipalResourceMembershipsScope >))], fallback :
    AccessReviewScope(Box < MicrosoftGraphAccessReviewScopeBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewScopeBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewSet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessReviewSet".to_string())]
    pub odata_type: String,
    ///Represents the template and scheduling for an access review.
    pub definitions: Option<Vec<MicrosoftGraphAccessReviewScheduleDefinition>>,
    ///Represents a collection of access review history data and the scopes used to collect that data.
    #[serde(rename = "historyDefinitions")]
    pub history_definitions: Option<Vec<MicrosoftGraphAccessReviewHistoryDefinition>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewStage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.accessReviewStage".to_string())]
    pub odata_type: String,
    ///Each user reviewed in an accessReviewStage has a decision item representing if they were approved, denied, or not yet reviewed.
    pub decisions: Option<Vec<MicrosoftGraphAccessReviewInstanceDecisionItem>>,
    ///The date and time in ISO 8601 format and UTC time when the review stage is scheduled to end. This property is the cumulative total of the durationInDays for all stages. Read-only.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///This collection of reviewer scopes is used to define the list of fallback reviewers. These fallback reviewers are notified to take action if no users are found from the list of reviewers specified. This could occur when either the group owner is specified as the reviewer but the group owner doesn't exist, or manager is specified as reviewer but a user's manager doesn't exist.
    #[serde(rename = "fallbackReviewers")]
    pub fallback_reviewers: Option<Vec<MicrosoftGraphAccessReviewReviewerScope>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///This collection of access review scopes is used to define who the reviewers are. For examples of options for assigning reviewers, see Assign reviewers to your access review definition using the Microsoft Graph API.
    pub reviewers: Option<Vec<MicrosoftGraphAccessReviewReviewerScope>>,
    ///The date and time in ISO 8601 format and UTC time when the review stage is scheduled to start. Read-only.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies the status of an accessReviewStage. Possible values: Initializing, NotStarted, Starting, InProgress, Completing, Completed, AutoReviewing, and AutoReviewed. Supports $orderby, and $filter (eq only). Read-only.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccessReviewStageSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicate which decisions will go to the next stage. Can be a subset of Approve, Deny, Recommendation, or NotReviewed. If not provided, all decisions will go to the next stage. Optional.
    #[serde(rename = "decisionsThatWillMoveToNextStage")]
    pub decisions_that_will_move_to_next_stage: Option<Vec<Option<String>>>,
    ///Defines the sequential or parallel order of the stages and depends on the stageId. Only sequential stages are currently supported. For example, if stageId is 2, then dependsOn must be 1. If stageId is 1, don't specify dependsOn. Required if stageId isn't 1.
    #[serde(rename = "dependsOn")]
    pub depends_on: Option<Vec<String>>,
    ///The duration of the stage. Required.  NOTE: The cumulative value of this property across all stages  1. Will override the instanceDurationInDays setting on the accessReviewScheduleDefinition object. 2. Can't exceed the length of one recurrence. That is, if the review recurs weekly, the cumulative durationInDays can't exceed 7.
    #[serde(rename = "durationInDays")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub duration_in_days: Option<f64>,
    ///If provided, the fallback reviewers are asked to complete a review if the primary reviewers don't exist. For example, if managers are selected as reviewers and a principal under review doesn't have a manager in Microsoft Entra ID, the fallback reviewers are asked to review that principal. NOTE: The value of this property overrides the corresponding setting on the accessReviewScheduleDefinition object.
    #[serde(rename = "fallbackReviewers")]
    pub fallback_reviewers: Option<Vec<MicrosoftGraphAccessReviewReviewerScope>>,
    #[serde(rename = "recommendationInsightSettings")]
    pub recommendation_insight_settings: Option<
        Vec<MicrosoftGraphAccessReviewRecommendationInsightSetting>,
    >,
    ///Indicates whether showing recommendations to reviewers is enabled. Required. NOTE: The value of this property overrides override the corresponding setting on the accessReviewScheduleDefinition object.
    #[serde(rename = "recommendationsEnabled")]
    pub recommendations_enabled: Option<bool>,
    ///Defines who the reviewers are. If none is specified, the review is a self-review (users review their own access).  For examples of options for assigning reviewers, see Assign reviewers to your access review definition using the Microsoft Graph API. NOTE: The value of this property overrides the corresponding setting on the accessReviewScheduleDefinition.
    pub reviewers: Option<Vec<MicrosoftGraphAccessReviewReviewerScope>>,
    ///Unique identifier of the accessReviewStageSettings object. The stageId is used by the dependsOn property to indicate the order of the stages. Required.
    #[serde(rename = "stageId")]
    pub stage_id: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphAccountTargetContent { discriminator : "@odata.type", variants
    : [("#microsoft.graph.addressBookAccountTargetContent",
    MicrosoftGraphAddressBookAccountTargetContent(Box <
    MicrosoftGraphAddressBookAccountTargetContent >)),
    ("#microsoft.graph.includeAllAccountTargetContent",
    MicrosoftGraphIncludeAllAccountTargetContent(Box <
    MicrosoftGraphIncludeAllAccountTargetContent >))], fallback :
    AccountTargetContent(Box < MicrosoftGraphAccountTargetContentBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAccountTargetContentBase {
    ///The type of account target content. Possible values are: unknown, includeAll, addressBook, unknownFutureValue.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphAccountTargetContentType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAccountTargetContentType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "includeAll")]
    IncludeAll,
    #[serde(rename = "addressBook")]
    AddressBook,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///State of the action on the device
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphActionState {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "done")]
    Done,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "notSupported")]
    NotSupported,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphActivitiesContainer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.activitiesContainer".to_string())]
    pub odata_type: String,
    ///Collection of activity logs related to content processing.
    #[serde(rename = "contentActivities")]
    pub content_activities: Option<Vec<MicrosoftGraphContentActivity>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphActivityBasedTimeoutPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.activityBasedTimeoutPolicy".to_string())]
    pub odata_type: String,
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///A string collection containing a JSON string that defines the rules and settings for a policy. The syntax for the definition differs for each derived policy type. Required.
    pub definition: Option<Vec<String>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If set to true, activates this policy. There can be many policies for the same policy type, but only one can be activated as the organization default. Optional, default value is false.
    #[serde(rename = "isOrganizationDefault")]
    pub is_organization_default: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphActivityHistoryItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.activityHistoryItem".to_string())]
    pub odata_type: String,
    ///Optional. The duration of active user engagement. if not supplied, this is calculated from the startedDateTime and lastActiveDateTime.
    #[serde(rename = "activeDurationSeconds")]
    pub active_duration_seconds: Option<f64>,
    pub activity: Option<Box<MicrosoftGraphUserActivity>>,
    ///Set by the server. DateTime in UTC when the object was created on the server.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Optional. UTC DateTime when the activityHistoryItem will undergo hard-delete. Can be set by the client.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Optional. UTC DateTime when the activityHistoryItem (activity session) was last understood as active or finished - if null, activityHistoryItem status should be Ongoing.
    #[serde(rename = "lastActiveDateTime")]
    pub last_active_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Set by the server. DateTime in UTC when the object was modified on the server.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Required. UTC DateTime when the activityHistoryItem (activity session) was started. Required for timeline history.
    #[serde(rename = "startedDateTime")]
    pub started_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored.
    pub status: Option<MicrosoftGraphStatus>,
    ///Optional. The timezone in which the user's device used to generate the activity was located at activity creation time. Values supplied as Olson IDs in order to support cross-platform representation.
    #[serde(rename = "userTimezone")]
    pub user_timezone: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphActivityMetadata {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub activity: Option<MicrosoftGraphUserActivityType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphActivityType {
    #[serde(rename = "signin")]
    #[default]
    Signin,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "servicePrincipal")]
    ServicePrincipal,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAddIn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The unique identifier for the addIn object.
    pub id: Option<uuid::Uuid>,
    ///The collection of key-value pairs that define parameters that the consuming service can use or call. You must specify this property when performing a POST or a PATCH operation on the addIns collection. Required.
    pub properties: Option<Vec<MicrosoftGraphKeyValue>>,
    ///The unique name for the functionality exposed by the app.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAddLargeGalleryViewOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.addLargeGalleryViewOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAddressBookAccountTargetContent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.addressBookAccountTargetContent".to_string())]
    pub odata_type: String,
    ///List of user emails targeted for an attack simulation training campaign.
    #[serde(rename = "accountTargetEmails")]
    pub account_target_emails: Option<Vec<Option<String>>>,
    ///The type of account target content. Possible values are: unknown, includeAll, addressBook, unknownFutureValue.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphAccountTargetContentType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAdminConsentRequestPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.adminConsentRequestPolicy".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the admin consent request feature is enabled or disabled. Required.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Specifies whether reviewers will receive notifications. Required.
    #[serde(rename = "notifyReviewers")]
    pub notify_reviewers: Option<bool>,
    ///Specifies whether reviewers will receive reminder emails. Required.
    #[serde(rename = "remindersEnabled")]
    pub reminders_enabled: Option<bool>,
    ///Specifies the duration the request is active before it automatically expires if no decision is applied.
    #[serde(rename = "requestDurationInDays")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub request_duration_in_days: Option<f64>,
    ///The list of reviewers for the admin consent. Required.
    pub reviewers: Option<Vec<MicrosoftGraphAccessReviewReviewerScope>>,
    ///Specifies the version of this policy. When the policy is updated, this version is updated. Read-only.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAdminMicrosoft365Apps {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.adminMicrosoft365Apps".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A container for tenant-level settings for Microsoft 365 applications.
    #[serde(rename = "installationOptions")]
    pub installation_options: Option<MicrosoftGraphM365AppsInstallationOptions>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAdminReportSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.adminReportSettings".to_string())]
    pub odata_type: String,
    ///If set to true, all reports conceal user information such as usernames, groups, and sites. If false, all reports show identifiable information. This property represents a setting in the Microsoft 365 admin center. Required.
    #[serde(rename = "displayConcealedNames")]
    pub display_concealed_names: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAdministrativeUnit {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.administrativeUnit".to_string())]
    pub odata_type: String,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///An optional description for the administrative unit. Supports $filter (eq, ne, in, startsWith), $search.
    pub description: Option<String>,
    ///Display name for the administrative unit. Maximum length is 256 characters. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The collection of open extensions defined for this administrative unit. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///true if members of this administrative unit should be treated as sensitive, which requires specific permissions to manage. If not set, the default value is null and the default behavior is false. Use this property to define administrative units with roles that don't inherit from tenant-level administrators, and where the management of individual member objects is limited to administrators scoped to a restricted management administrative unit. This property is immutable and can't be changed later.  For more information on how to work with restricted management administrative units, see Restricted management administrative units in Microsoft Entra ID.
    #[serde(rename = "isMemberManagementRestricted")]
    pub is_member_management_restricted: Option<bool>,
    ///Users and groups that are members of this administrative unit. Supports $expand.
    pub members: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The dynamic membership rule for the administrative unit. For more information about the rules you can use for dynamic administrative units and dynamic groups, see Manage rules for dynamic membership groups in Microsoft Entra ID.
    #[serde(rename = "membershipRule")]
    pub membership_rule: Option<String>,
    ///Controls whether the dynamic membership rule is actively processed. Set to On to activate the dynamic membership rule, or Paused to stop updating membership dynamically.
    #[serde(rename = "membershipRuleProcessingState")]
    pub membership_rule_processing_state: Option<String>,
    ///Indicates the membership type for the administrative unit. The possible values are: dynamic, assigned. If not set, the default value is null and the default behavior is assigned.
    #[serde(rename = "membershipType")]
    pub membership_type: Option<String>,
    ///Scoped-role members of this administrative unit.
    #[serde(rename = "scopedRoleMembers")]
    pub scoped_role_members: Option<Vec<MicrosoftGraphScopedRoleMembership>>,
    ///Controls whether the administrative unit and its members are hidden or public. Can be set to HiddenMembership. If not set, the default value is null and the default behavior is public. When set to HiddenMembership, only members of the administrative unit can list other members of the administrative unit.
    pub visibility: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAdvancedConfigState {
    #[serde(rename = "default")]
    #[default]
    Default,
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAgreement {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.agreement".to_string())]
    pub odata_type: String,
    ///Read-only. Information about acceptances of this agreement.
    pub acceptances: Option<Vec<MicrosoftGraphAgreementAcceptance>>,
    ///Display name of the agreement. The display name is used for internal tracking of the agreement but isn't shown to end users who view the agreement. Supports $filter (eq).
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Default PDF linked to this agreement.
    pub file: Option<MicrosoftGraphAgreementFile>,
    ///PDFs linked to this agreement. This property is in the process of being deprecated. Use the  file property instead. Supports $expand.
    pub files: Option<Vec<MicrosoftGraphAgreementFileLocalization>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether end users are required to accept this agreement on every device that they access it from. The end user is required to register their device in Microsoft Entra ID, if they haven't already done so. Supports $filter (eq).
    #[serde(rename = "isPerDeviceAcceptanceRequired")]
    pub is_per_device_acceptance_required: Option<bool>,
    ///Indicates whether the user has to expand the agreement before accepting. Supports $filter (eq).
    #[serde(rename = "isViewingBeforeAcceptanceRequired")]
    pub is_viewing_before_acceptance_required: Option<bool>,
    ///Expiration schedule and frequency of agreement for all users. Supports $filter (eq).
    #[serde(rename = "termsExpiration")]
    pub terms_expiration: Option<MicrosoftGraphTermsExpiration>,
    ///The duration after which the user must reaccept the terms of use. The value is represented in ISO 8601 format for durations. Supports $filter (eq).
    #[serde(rename = "userReacceptRequiredFrequency")]
    pub user_reaccept_required_frequency: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAgreementAcceptance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.agreementAcceptance".to_string())]
    pub odata_type: String,
    ///The identifier of the agreement file accepted by the user.
    #[serde(rename = "agreementFileId")]
    pub agreement_file_id: Option<String>,
    ///The identifier of the agreement.
    #[serde(rename = "agreementId")]
    pub agreement_id: Option<String>,
    ///The display name of the device used for accepting the agreement.
    #[serde(rename = "deviceDisplayName")]
    pub device_display_name: Option<String>,
    ///The unique identifier of the device used for accepting the agreement. Supports $filter (eq) and eq for null values.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///The operating system used to accept the agreement.
    #[serde(rename = "deviceOSType")]
    pub device_ostype: Option<String>,
    ///The operating system version of the device used to accept the agreement.
    #[serde(rename = "deviceOSVersion")]
    pub device_osversion: Option<String>,
    ///The expiration date time of the acceptance. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ge, le) and eq for null values.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "recordedDateTime")]
    pub recorded_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The state of the agreement acceptance. Possible values are: accepted, declined. Supports $filter (eq).
    pub state: Option<MicrosoftGraphAgreementAcceptanceState>,
    ///Display name of the user when the acceptance was recorded.
    #[serde(rename = "userDisplayName")]
    pub user_display_name: Option<String>,
    ///Email of the user when the acceptance was recorded.
    #[serde(rename = "userEmail")]
    pub user_email: Option<String>,
    ///The identifier of the user who accepted the agreement. Supports $filter (eq).
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///UPN of the user when the acceptance was recorded.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAgreementAcceptanceState {
    #[serde(rename = "accepted")]
    #[default]
    Accepted,
    #[serde(rename = "declined")]
    Declined,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAgreementFile {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.agreementFile".to_string())]
    pub odata_type: String,
    ///The date time representing when the file was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Localized display name of the policy file of an agreement. The localized display name is shown to end users who view the agreement.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Data that represents the terms of use PDF document. Read-only.
    #[serde(rename = "fileData")]
    pub file_data: Option<MicrosoftGraphAgreementFileData>,
    ///Name of the agreement file (for example, TOU.pdf). Read-only.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If none of the languages matches the client preference, indicates whether this is the default agreement file. If none of the files are marked as default, the first one is treated as the default. Read-only.
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    ///Indicates whether the agreement file is a major version update. Major version updates invalidate the agreement's acceptances on the corresponding language.
    #[serde(rename = "isMajorVersion")]
    pub is_major_version: Option<bool>,
    ///The language of the agreement file in the format 'languagecode2-country/regioncode2'. 'languagecode2' is a lowercase two-letter code derived from ISO 639-1, while 'country/regioncode2' is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag. For example, U.S. English is en-US. Read-only.
    pub language: Option<String>,
    ///The localized version of the terms of use agreement files attached to the agreement.
    pub localizations: Option<Vec<MicrosoftGraphAgreementFileLocalization>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAgreementFileData {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Data that represents the terms of use PDF document. Read-only.
    pub data: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAgreementFileLocalization {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.agreementFileLocalization".to_string())]
    pub odata_type: String,
    ///The date time representing when the file was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Localized display name of the policy file of an agreement. The localized display name is shown to end users who view the agreement.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Data that represents the terms of use PDF document. Read-only.
    #[serde(rename = "fileData")]
    pub file_data: Option<MicrosoftGraphAgreementFileData>,
    ///Name of the agreement file (for example, TOU.pdf). Read-only.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If none of the languages matches the client preference, indicates whether this is the default agreement file. If none of the files are marked as default, the first one is treated as the default. Read-only.
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    ///Indicates whether the agreement file is a major version update. Major version updates invalidate the agreement's acceptances on the corresponding language.
    #[serde(rename = "isMajorVersion")]
    pub is_major_version: Option<bool>,
    ///The language of the agreement file in the format 'languagecode2-country/regioncode2'. 'languagecode2' is a lowercase two-letter code derived from ISO 639-1, while 'country/regioncode2' is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag. For example, U.S. English is en-US. Read-only.
    pub language: Option<String>,
    ///Read-only. Customized versions of the terms of use agreement in the Microsoft Entra tenant.
    pub versions: Option<Vec<MicrosoftGraphAgreementFileVersion>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAgreementFileProperties {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.agreementFileProperties".to_string())]
    pub odata_type: String,
    ///The date time representing when the file was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Localized display name of the policy file of an agreement. The localized display name is shown to end users who view the agreement.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Data that represents the terms of use PDF document. Read-only.
    #[serde(rename = "fileData")]
    pub file_data: Option<MicrosoftGraphAgreementFileData>,
    ///Name of the agreement file (for example, TOU.pdf). Read-only.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If none of the languages matches the client preference, indicates whether this is the default agreement file. If none of the files are marked as default, the first one is treated as the default. Read-only.
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    ///Indicates whether the agreement file is a major version update. Major version updates invalidate the agreement's acceptances on the corresponding language.
    #[serde(rename = "isMajorVersion")]
    pub is_major_version: Option<bool>,
    ///The language of the agreement file in the format 'languagecode2-country/regioncode2'. 'languagecode2' is a lowercase two-letter code derived from ISO 639-1, while 'country/regioncode2' is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag. For example, U.S. English is en-US. Read-only.
    pub language: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAgreementFileVersion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.agreementFileVersion".to_string())]
    pub odata_type: String,
    ///The date time representing when the file was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Localized display name of the policy file of an agreement. The localized display name is shown to end users who view the agreement.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Data that represents the terms of use PDF document. Read-only.
    #[serde(rename = "fileData")]
    pub file_data: Option<MicrosoftGraphAgreementFileData>,
    ///Name of the agreement file (for example, TOU.pdf). Read-only.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If none of the languages matches the client preference, indicates whether this is the default agreement file. If none of the files are marked as default, the first one is treated as the default. Read-only.
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    ///Indicates whether the agreement file is a major version update. Major version updates invalidate the agreement's acceptances on the corresponding language.
    #[serde(rename = "isMajorVersion")]
    pub is_major_version: Option<bool>,
    ///The language of the agreement file in the format 'languagecode2-country/regioncode2'. 'languagecode2' is a lowercase two-letter code derived from ISO 639-1, while 'country/regioncode2' is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag. For example, U.S. English is en-US. Read-only.
    pub language: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAiInteraction {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.aiInteraction".to_string())]
    pub odata_type: String,
    #[serde(rename = "appClass")]
    pub app_class: Option<String>,
    pub attachments: Option<Vec<MicrosoftGraphAiInteractionAttachment>>,
    pub body: Option<MicrosoftGraphItemBody>,
    pub contexts: Option<Vec<MicrosoftGraphAiInteractionContext>>,
    #[serde(rename = "conversationType")]
    pub conversation_type: Option<String>,
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub etag: Option<String>,
    pub from: Option<MicrosoftGraphIdentitySet>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "interactionType")]
    pub interaction_type: Option<MicrosoftGraphAiInteractionType>,
    pub links: Option<Vec<MicrosoftGraphAiInteractionLink>>,
    pub locale: Option<String>,
    pub mentions: Option<Vec<MicrosoftGraphAiInteractionMention>>,
    #[serde(rename = "requestId")]
    pub request_id: Option<String>,
    #[serde(rename = "sessionId")]
    pub session_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAiInteractionAttachment {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "attachmentId")]
    pub attachment_id: Option<String>,
    pub content: Option<String>,
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(rename = "contentUrl")]
    pub content_url: Option<String>,
    pub name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAiInteractionContext {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "contextReference")]
    pub context_reference: Option<String>,
    #[serde(rename = "contextType")]
    pub context_type: Option<String>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAiInteractionHistory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.aiInteractionHistory".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAiInteractionLink {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(rename = "linkType")]
    pub link_type: Option<String>,
    #[serde(rename = "linkUrl")]
    pub link_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAiInteractionMention {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "mentionId")]
    pub mention_id: Option<f64>,
    #[serde(rename = "mentionText")]
    pub mention_text: Option<String>,
    pub mentioned: Option<MicrosoftGraphAiInteractionMentionedIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAiInteractionMentionedIdentitySet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.aiInteractionMentionedIdentitySet".to_string())]
    pub odata_type: String,
    ///Optional. The application associated with this action.
    pub application: Option<MicrosoftGraphIdentity>,
    pub conversation: Option<MicrosoftGraphTeamworkConversationIdentity>,
    ///Optional. The device associated with this action.
    pub device: Option<MicrosoftGraphIdentity>,
    pub tag: Option<MicrosoftGraphTeamworkTagIdentity>,
    ///Optional. The user associated with this action.
    pub user: Option<MicrosoftGraphIdentity>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAiInteractionPlugin {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The unique identifier of the plugin.
    pub identifier: Option<String>,
    ///The display name of the plugin.
    pub name: Option<String>,
    ///The version of the plugin used.
    pub version: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAiInteractionType {
    #[serde(rename = "userPrompt")]
    #[default]
    UserPrompt,
    #[serde(rename = "aiResponse")]
    AiResponse,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAiUser {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.aiUser".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "interactionHistory")]
    pub interaction_history: Option<MicrosoftGraphAiInteractionHistory>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAlbum {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Unique identifier of the driveItem that is the cover of the album.
    #[serde(rename = "coverImageItemId")]
    pub cover_image_item_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAlert {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.alert".to_string())]
    pub odata_type: String,
    ///Name or alias of the activity group (attacker) this alert is attributed to.
    #[serde(rename = "activityGroupName")]
    pub activity_group_name: Option<String>,
    #[serde(rename = "alertDetections")]
    pub alert_detections: Option<Vec<MicrosoftGraphAlertDetection>>,
    ///Name of the analyst the alert is assigned to for triage, investigation, or remediation (supports update).
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<String>,
    ///Azure subscription ID, present if this alert is related to an Azure resource.
    #[serde(rename = "azureSubscriptionId")]
    pub azure_subscription_id: Option<String>,
    ///Microsoft Entra tenant ID. Required.
    #[serde(rename = "azureTenantId")]
    pub azure_tenant_id: Option<String>,
    ///Category of the alert (for example, credentialTheft, ransomware).
    pub category: Option<String>,
    ///Time at which the alert was closed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z (supports update).
    #[serde(rename = "closedDateTime")]
    pub closed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Security-related stateful information generated by the provider about the cloud application/s related to this alert.
    #[serde(rename = "cloudAppStates")]
    pub cloud_app_states: Option<Vec<MicrosoftGraphCloudAppSecurityState>>,
    ///Customer-provided comments on alert (for customer alert management) (supports update).
    pub comments: Option<Vec<Option<String>>>,
    ///Confidence of the detection logic (percentage between 1-100).
    pub confidence: Option<f64>,
    ///Time at which the alert was created by the alert provider. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Alert description.
    pub description: Option<String>,
    ///Set of alerts related to this alert entity (each alert is pushed to the SIEM as a separate record).
    #[serde(rename = "detectionIds")]
    pub detection_ids: Option<Vec<Option<String>>>,
    ///Time at which the event or events that served as the trigger to generate the alert occurred. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
    #[serde(rename = "eventDateTime")]
    pub event_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Analyst feedback on the alert. Possible values are: unknown, truePositive, falsePositive, benignPositive. Supports update.
    pub feedback: Option<MicrosoftGraphAlertFeedback>,
    ///Security-related stateful information generated by the provider about the file(s) related to this alert.
    #[serde(rename = "fileStates")]
    pub file_states: Option<Vec<MicrosoftGraphFileSecurityState>>,
    #[serde(rename = "historyStates")]
    pub history_states: Option<Vec<MicrosoftGraphAlertHistoryState>>,
    ///Security-related stateful information generated by the provider about the host(s) related to this alert.
    #[serde(rename = "hostStates")]
    pub host_states: Option<Vec<MicrosoftGraphHostSecurityState>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///IDs of incidents related to current alert.
    #[serde(rename = "incidentIds")]
    pub incident_ids: Option<Vec<Option<String>>>,
    #[serde(rename = "investigationSecurityStates")]
    pub investigation_security_states: Option<
        Vec<MicrosoftGraphInvestigationSecurityState>,
    >,
    #[serde(rename = "lastEventDateTime")]
    pub last_event_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Time at which the alert entity was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Threat Intelligence pertaining to malware related to this alert.
    #[serde(rename = "malwareStates")]
    pub malware_states: Option<Vec<MicrosoftGraphMalwareState>>,
    #[serde(rename = "messageSecurityStates")]
    pub message_security_states: Option<Vec<MicrosoftGraphMessageSecurityState>>,
    ///Security-related stateful information generated by the provider about the network connection(s) related to this alert.
    #[serde(rename = "networkConnections")]
    pub network_connections: Option<Vec<MicrosoftGraphNetworkConnection>>,
    ///Security-related stateful information generated by the provider about the process or processes related to this alert.
    pub processes: Option<Vec<MicrosoftGraphProcess>>,
    ///Vendor/provider recommended action(s) to take as a result of the alert (for example, isolate machine, enforce2FA, reimage host).
    #[serde(rename = "recommendedActions")]
    pub recommended_actions: Option<Vec<Option<String>>>,
    ///Security-related stateful information generated by the provider about the registry keys related to this alert.
    #[serde(rename = "registryKeyStates")]
    pub registry_key_states: Option<Vec<MicrosoftGraphRegistryKeyState>>,
    ///Resources related to current alert. For example, for some alerts this can have the Azure Resource value.
    #[serde(rename = "securityResources")]
    pub security_resources: Option<Vec<MicrosoftGraphSecurityResource>>,
    pub severity: Option<MicrosoftGraphAlertSeverity>,
    ///Hyperlinks (URIs) to the source material related to the alert, for example, provider's user interface for alerts or log search.
    #[serde(rename = "sourceMaterials")]
    pub source_materials: Option<Vec<Option<String>>>,
    pub status: Option<MicrosoftGraphAlertStatus>,
    ///User-definable labels that can be applied to an alert and can serve as filter conditions (for example 'HVA', 'SAW') (supports update).
    pub tags: Option<Vec<Option<String>>>,
    ///Alert title. Required.
    pub title: Option<String>,
    ///Security-related information about the specific properties that triggered the alert (properties appearing in the alert). Alerts might contain information about multiple users, hosts, files, ip addresses. This field indicates which properties triggered the alert generation.
    pub triggers: Option<Vec<MicrosoftGraphAlertTrigger>>,
    #[serde(rename = "uriClickSecurityStates")]
    pub uri_click_security_states: Option<Vec<MicrosoftGraphUriClickSecurityState>>,
    ///Security-related stateful information generated by the provider about the user accounts related to this alert.
    #[serde(rename = "userStates")]
    pub user_states: Option<Vec<MicrosoftGraphUserSecurityState>>,
    ///Complex type containing details about the security product/service vendor, provider, and subprovider (for example, vendor=Microsoft; provider=Windows Defender ATP; subProvider=AppLocker). Required.
    #[serde(rename = "vendorInformation")]
    pub vendor_information: Option<MicrosoftGraphSecurityVendorInformation>,
    ///Threat intelligence pertaining to one or more vulnerabilities related to this alert.
    #[serde(rename = "vulnerabilityStates")]
    pub vulnerability_states: Option<Vec<MicrosoftGraphVulnerabilityState>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAlertDetection {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "detectionType")]
    pub detection_type: Option<String>,
    pub method: Option<String>,
    pub name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAlertFeedback {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "truePositive")]
    TruePositive,
    #[serde(rename = "falsePositive")]
    FalsePositive,
    #[serde(rename = "benignPositive")]
    BenignPositive,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAlertHistoryState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<String>,
    pub comments: Option<Vec<Option<String>>>,
    pub feedback: Option<MicrosoftGraphAlertFeedback>,
    pub status: Option<MicrosoftGraphAlertStatus>,
    #[serde(rename = "updatedDateTime")]
    pub updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub user: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAlertSeverity {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "informational")]
    Informational,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAlertStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "newAlert")]
    NewAlert,
    #[serde(rename = "inProgress")]
    InProgress,
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAlertTrigger {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Name of the property serving as a detection trigger.
    pub name: Option<String>,
    ///Type of the property in the key:value pair for interpretation. For example, String, Boolean etc.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
    ///Value of the property serving as a detection trigger.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAllDeviceRegistrationMembership {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.allDeviceRegistrationMembership".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAllDevicesAssignmentTarget {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.allDevicesAssignmentTarget".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAllLicensedUsersAssignmentTarget {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.allLicensedUsersAssignmentTarget".to_string())]
    pub odata_type: String,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAllowInvitesFrom {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "adminsAndGuestInviters")]
    AdminsAndGuestInviters,
    #[serde(rename = "adminsGuestInvitersAndAllMembers")]
    AdminsGuestInvitersAndAllMembers,
    #[serde(rename = "everyone")]
    Everyone,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAllowedLobbyAdmitterRoles {
    #[serde(rename = "organizerAndCoOrganizersAndPresenters")]
    #[default]
    OrganizerAndCoOrganizersAndPresenters,
    #[serde(rename = "organizerAndCoOrganizers")]
    OrganizerAndCoOrganizers,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAllowedTargetScope {
    #[serde(rename = "notSpecified")]
    #[default]
    NotSpecified,
    #[serde(rename = "specificDirectoryUsers")]
    SpecificDirectoryUsers,
    #[serde(rename = "specificConnectedOrganizationUsers")]
    SpecificConnectedOrganizationUsers,
    #[serde(rename = "specificDirectoryServicePrincipals")]
    SpecificDirectoryServicePrincipals,
    #[serde(rename = "allMemberUsers")]
    AllMemberUsers,
    #[serde(rename = "allDirectoryUsers")]
    AllDirectoryUsers,
    #[serde(rename = "allDirectoryServicePrincipals")]
    AllDirectoryServicePrincipals,
    #[serde(rename = "allConfiguredConnectedOrganizationUsers")]
    AllConfiguredConnectedOrganizationUsers,
    #[serde(rename = "allExternalUsers")]
    AllExternalUsers,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAllowedValue {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.allowedValue".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the predefined value is active or deactivated. If set to false, this predefined value can't be assigned to any other supported directory objects.
    #[serde(rename = "isActive")]
    pub is_active: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAlternativeSecurityId {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///For internal use only.
    #[serde(rename = "identityProvider")]
    pub identity_provider: Option<String>,
    ///For internal use only.
    pub key: Option<String>,
    ///For internal use only.
    #[serde(rename = "type")]
    pub r#type: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidCompliancePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.androidCompliancePolicy".to_string())]
    pub odata_type: String,
    ///The collection of assignments for this compliance policy.
    pub assignments: Option<Vec<MicrosoftGraphDeviceCompliancePolicyAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Compliance Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device compliance devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceComplianceDeviceOverview>,
    ///List of DeviceComplianceDeviceStatus.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceComplianceDeviceStatus>>,
    ///Require that devices have enabled device threat protection.
    #[serde(rename = "deviceThreatProtectionEnabled")]
    pub device_threat_protection_enabled: Option<bool>,
    ///Device threat protection levels for the Device Threat Protection API.
    #[serde(rename = "deviceThreatProtectionRequiredSecurityLevel")]
    pub device_threat_protection_required_security_level: Option<
        MicrosoftGraphDeviceThreatProtectionLevel,
    >,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Minimum Android security patch level.
    #[serde(rename = "minAndroidSecurityPatchLevel")]
    pub min_android_security_patch_level: Option<String>,
    ///Maximum Android version.
    #[serde(rename = "osMaximumVersion")]
    pub os_maximum_version: Option<String>,
    ///Minimum Android version.
    #[serde(rename = "osMinimumVersion")]
    pub os_minimum_version: Option<String>,
    ///Number of days before the password expires. Valid values 1 to 365
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///Minimum password length. Valid values 4 to 16
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///Minutes of inactivity before a password is required.
    #[serde(rename = "passwordMinutesOfInactivityBeforeLock")]
    pub password_minutes_of_inactivity_before_lock: Option<f64>,
    ///Number of previous passwords to block. Valid values 1 to 24
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Require a password to unlock device.
    #[serde(rename = "passwordRequired")]
    pub password_required: Option<bool>,
    ///Android required password type.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphAndroidRequiredPasswordType>,
    ///The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.
    #[serde(rename = "scheduledActionsForRule")]
    pub scheduled_actions_for_rule: Option<
        Vec<MicrosoftGraphDeviceComplianceScheduledActionForRule>,
    >,
    ///Devices must not be jailbroken or rooted.
    #[serde(rename = "securityBlockJailbrokenDevices")]
    pub security_block_jailbroken_devices: Option<bool>,
    ///Disable USB debugging on Android devices.
    #[serde(rename = "securityDisableUsbDebugging")]
    pub security_disable_usb_debugging: Option<bool>,
    ///Require that devices disallow installation of apps from unknown sources.
    #[serde(rename = "securityPreventInstallAppsFromUnknownSources")]
    pub security_prevent_install_apps_from_unknown_sources: Option<bool>,
    ///Require the device to pass the Company Portal client app runtime integrity check.
    #[serde(rename = "securityRequireCompanyPortalAppIntegrity")]
    pub security_require_company_portal_app_integrity: Option<bool>,
    ///Require Google Play Services to be installed and enabled on the device.
    #[serde(rename = "securityRequireGooglePlayServices")]
    pub security_require_google_play_services: Option<bool>,
    ///Require the device to pass the SafetyNet basic integrity check.
    #[serde(rename = "securityRequireSafetyNetAttestationBasicIntegrity")]
    pub security_require_safety_net_attestation_basic_integrity: Option<bool>,
    ///Require the device to pass the SafetyNet certified device check.
    #[serde(rename = "securityRequireSafetyNetAttestationCertifiedDevice")]
    pub security_require_safety_net_attestation_certified_device: Option<bool>,
    ///Require the device to have up to date security providers. The device will require Google Play Services to be enabled and up to date.
    #[serde(rename = "securityRequireUpToDateSecurityProviders")]
    pub security_require_up_to_date_security_providers: Option<bool>,
    ///Require the Android Verify apps feature is turned on.
    #[serde(rename = "securityRequireVerifyApps")]
    pub security_require_verify_apps: Option<bool>,
    ///Require encryption on Android devices.
    #[serde(rename = "storageRequireEncryption")]
    pub storage_require_encryption: Option<bool>,
    ///Device compliance users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceComplianceUserOverview>,
    ///List of DeviceComplianceUserStatus.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceComplianceUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidCustomConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.androidCustomConfiguration".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///OMA settings. This collection can contain a maximum of 1000 elements.
    #[serde(rename = "omaSettings")]
    pub oma_settings: Option<Vec<MicrosoftGraphOmaSetting>>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidGeneralDeviceConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.androidGeneralDeviceConfiguration".to_string())]
    pub odata_type: String,
    ///Indicates whether or not to block clipboard sharing to copy and paste between applications.
    #[serde(rename = "appsBlockClipboardSharing")]
    pub apps_block_clipboard_sharing: Option<bool>,
    ///Indicates whether or not to block copy and paste within applications.
    #[serde(rename = "appsBlockCopyPaste")]
    pub apps_block_copy_paste: Option<bool>,
    ///Indicates whether or not to block the YouTube app.
    #[serde(rename = "appsBlockYouTube")]
    pub apps_block_you_tube: Option<bool>,
    ///List of apps to be hidden on the KNOX device. This collection can contain a maximum of 500 elements.
    #[serde(rename = "appsHideList")]
    pub apps_hide_list: Option<Vec<MicrosoftGraphAppListItem>>,
    ///List of apps which can be installed on the KNOX device. This collection can contain a maximum of 500 elements.
    #[serde(rename = "appsInstallAllowList")]
    pub apps_install_allow_list: Option<Vec<MicrosoftGraphAppListItem>>,
    ///List of apps which are blocked from being launched on the KNOX device. This collection can contain a maximum of 500 elements.
    #[serde(rename = "appsLaunchBlockList")]
    pub apps_launch_block_list: Option<Vec<MicrosoftGraphAppListItem>>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///Indicates whether or not to block Bluetooth.
    #[serde(rename = "bluetoothBlocked")]
    pub bluetooth_blocked: Option<bool>,
    ///Indicates whether or not to block the use of the camera.
    #[serde(rename = "cameraBlocked")]
    pub camera_blocked: Option<bool>,
    ///Indicates whether or not to block data roaming.
    #[serde(rename = "cellularBlockDataRoaming")]
    pub cellular_block_data_roaming: Option<bool>,
    ///Indicates whether or not to block SMS/MMS messaging.
    #[serde(rename = "cellularBlockMessaging")]
    pub cellular_block_messaging: Option<bool>,
    ///Indicates whether or not to block voice roaming.
    #[serde(rename = "cellularBlockVoiceRoaming")]
    pub cellular_block_voice_roaming: Option<bool>,
    ///Indicates whether or not to block syncing Wi-Fi tethering.
    #[serde(rename = "cellularBlockWiFiTethering")]
    pub cellular_block_wi_fi_tethering: Option<bool>,
    ///Possible values of the compliance app list.
    #[serde(rename = "compliantAppListType")]
    pub compliant_app_list_type: Option<MicrosoftGraphAppListType>,
    ///List of apps in the compliance (either allow list or block list, controlled by CompliantAppListType). This collection can contain a maximum of 10000 elements.
    #[serde(rename = "compliantAppsList")]
    pub compliant_apps_list: Option<Vec<MicrosoftGraphAppListItem>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Indicates whether or not to allow device sharing mode.
    #[serde(rename = "deviceSharingAllowed")]
    pub device_sharing_allowed: Option<bool>,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Indicates whether or not to block diagnostic data submission.
    #[serde(rename = "diagnosticDataBlockSubmission")]
    pub diagnostic_data_block_submission: Option<bool>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Indicates whether or not to block user performing a factory reset.
    #[serde(rename = "factoryResetBlocked")]
    pub factory_reset_blocked: Option<bool>,
    ///Indicates whether or not to block Google account auto sync.
    #[serde(rename = "googleAccountBlockAutoSync")]
    pub google_account_block_auto_sync: Option<bool>,
    ///Indicates whether or not to block the Google Play store.
    #[serde(rename = "googlePlayStoreBlocked")]
    pub google_play_store_blocked: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A list of apps that will be allowed to run when the device is in Kiosk Mode. This collection can contain a maximum of 500 elements.
    #[serde(rename = "kioskModeApps")]
    pub kiosk_mode_apps: Option<Vec<MicrosoftGraphAppListItem>>,
    ///Indicates whether or not to block the screen sleep button while in Kiosk Mode.
    #[serde(rename = "kioskModeBlockSleepButton")]
    pub kiosk_mode_block_sleep_button: Option<bool>,
    ///Indicates whether or not to block the volume buttons while in Kiosk Mode.
    #[serde(rename = "kioskModeBlockVolumeButtons")]
    pub kiosk_mode_block_volume_buttons: Option<bool>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether or not to block location services.
    #[serde(rename = "locationServicesBlocked")]
    pub location_services_blocked: Option<bool>,
    ///Indicates whether or not to block Near-Field Communication.
    #[serde(rename = "nfcBlocked")]
    pub nfc_blocked: Option<bool>,
    ///Indicates whether or not to block fingerprint unlock.
    #[serde(rename = "passwordBlockFingerprintUnlock")]
    pub password_block_fingerprint_unlock: Option<bool>,
    ///Indicates whether or not to block Smart Lock and other trust agents.
    #[serde(rename = "passwordBlockTrustAgents")]
    pub password_block_trust_agents: Option<bool>,
    ///Number of days before the password expires. Valid values 1 to 365
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///Minimum length of passwords. Valid values 4 to 16
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///Minutes of inactivity before the screen times out.
    #[serde(rename = "passwordMinutesOfInactivityBeforeScreenTimeout")]
    pub password_minutes_of_inactivity_before_screen_timeout: Option<f64>,
    ///Number of previous passwords to block. Valid values 0 to 24
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Indicates whether or not to require a password.
    #[serde(rename = "passwordRequired")]
    pub password_required: Option<bool>,
    ///Android required password type.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphAndroidRequiredPasswordType>,
    ///Number of sign in failures allowed before factory reset. Valid values 1 to 16
    #[serde(rename = "passwordSignInFailureCountBeforeFactoryReset")]
    pub password_sign_in_failure_count_before_factory_reset: Option<f64>,
    ///Indicates whether or not to block powering off the device.
    #[serde(rename = "powerOffBlocked")]
    pub power_off_blocked: Option<bool>,
    ///Indicates whether or not to block screenshots.
    #[serde(rename = "screenCaptureBlocked")]
    pub screen_capture_blocked: Option<bool>,
    ///Require the Android Verify apps feature is turned on.
    #[serde(rename = "securityRequireVerifyApps")]
    pub security_require_verify_apps: Option<bool>,
    ///Indicates whether or not to block Google Backup.
    #[serde(rename = "storageBlockGoogleBackup")]
    pub storage_block_google_backup: Option<bool>,
    ///Indicates whether or not to block removable storage usage.
    #[serde(rename = "storageBlockRemovableStorage")]
    pub storage_block_removable_storage: Option<bool>,
    ///Indicates whether or not to require device encryption.
    #[serde(rename = "storageRequireDeviceEncryption")]
    pub storage_require_device_encryption: Option<bool>,
    ///Indicates whether or not to require removable storage encryption.
    #[serde(rename = "storageRequireRemovableStorageEncryption")]
    pub storage_require_removable_storage_encryption: Option<bool>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
    ///Indicates whether or not to block the use of the Voice Assistant.
    #[serde(rename = "voiceAssistantBlocked")]
    pub voice_assistant_blocked: Option<bool>,
    ///Indicates whether or not to block voice dialing.
    #[serde(rename = "voiceDialingBlocked")]
    pub voice_dialing_blocked: Option<bool>,
    ///Indicates whether or not to block the web browser's auto fill feature.
    #[serde(rename = "webBrowserBlockAutofill")]
    pub web_browser_block_autofill: Option<bool>,
    ///Indicates whether or not to block JavaScript within the web browser.
    #[serde(rename = "webBrowserBlockJavaScript")]
    pub web_browser_block_java_script: Option<bool>,
    ///Indicates whether or not to block popups within the web browser.
    #[serde(rename = "webBrowserBlockPopups")]
    pub web_browser_block_popups: Option<bool>,
    ///Indicates whether or not to block the web browser.
    #[serde(rename = "webBrowserBlocked")]
    pub web_browser_blocked: Option<bool>,
    ///Web Browser Cookie Settings.
    #[serde(rename = "webBrowserCookieSettings")]
    pub web_browser_cookie_settings: Option<MicrosoftGraphWebBrowserCookieSettings>,
    ///Indicates whether or not to block syncing Wi-Fi.
    #[serde(rename = "wiFiBlocked")]
    pub wi_fi_blocked: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidLobApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.androidLobApp".to_string())]
    pub odata_type: String,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The value for the minimum applicable operating system.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphAndroidMinimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The package identifier.
    #[serde(rename = "packageId")]
    pub package_id: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
    ///The version code of Android Line of Business (LoB) app.
    #[serde(rename = "versionCode")]
    pub version_code: Option<String>,
    ///The version name of Android Line of Business (LoB) app.
    #[serde(rename = "versionName")]
    pub version_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidManagedAppProtection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.androidManagedAppProtection".to_string())]
    pub odata_type: String,
    ///Data storage locations where a user may store managed data.
    #[serde(rename = "allowedDataStorageLocations")]
    pub allowed_data_storage_locations: Option<
        Vec<MicrosoftGraphManagedAppDataStorageLocation>,
    >,
    ///Data can be transferred from/to these classes of apps
    #[serde(rename = "allowedInboundDataTransferSources")]
    pub allowed_inbound_data_transfer_sources: Option<
        MicrosoftGraphManagedAppDataTransferLevel,
    >,
    ///Represents the level to which the device's clipboard may be shared between apps
    #[serde(rename = "allowedOutboundClipboardSharingLevel")]
    pub allowed_outbound_clipboard_sharing_level: Option<
        MicrosoftGraphManagedAppClipboardSharingLevel,
    >,
    ///Data can be transferred from/to these classes of apps
    #[serde(rename = "allowedOutboundDataTransferDestinations")]
    pub allowed_outbound_data_transfer_destinations: Option<
        MicrosoftGraphManagedAppDataTransferLevel,
    >,
    ///List of apps to which the policy is deployed.
    pub apps: Option<Vec<MicrosoftGraphManagedMobileApp>>,
    ///Navigation property to list of inclusion and exclusion groups to which the policy is deployed.
    pub assignments: Option<Vec<MicrosoftGraphTargetedManagedAppPolicyAssignment>>,
    ///Indicates whether contacts can be synced to the user's device.
    #[serde(rename = "contactSyncBlocked")]
    pub contact_sync_blocked: Option<bool>,
    ///The date and time the policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Friendly name of the preferred custom browser to open weblink on Android. When this property is configured, ManagedBrowserToOpenLinksRequired should be true.
    #[serde(rename = "customBrowserDisplayName")]
    pub custom_browser_display_name: Option<String>,
    ///Unique identifier of the preferred custom browser to open weblink on Android. When this property is configured, ManagedBrowserToOpenLinksRequired should be true.
    #[serde(rename = "customBrowserPackageId")]
    pub custom_browser_package_id: Option<String>,
    ///Indicates whether the backup of a managed app's data is blocked.
    #[serde(rename = "dataBackupBlocked")]
    pub data_backup_blocked: Option<bool>,
    ///Count of apps to which the current policy is deployed.
    #[serde(rename = "deployedAppCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub deployed_app_count: Option<f64>,
    ///Navigation property to deployment summary of the configuration.
    #[serde(rename = "deploymentSummary")]
    pub deployment_summary: Option<MicrosoftGraphManagedAppPolicyDeploymentSummary>,
    ///The policy's description.
    pub description: Option<String>,
    ///Indicates whether device compliance is required.
    #[serde(rename = "deviceComplianceRequired")]
    pub device_compliance_required: Option<bool>,
    ///When this setting is enabled, app level encryption is disabled if device level encryption is enabled
    #[serde(rename = "disableAppEncryptionIfDeviceEncryptionIsEnabled")]
    pub disable_app_encryption_if_device_encryption_is_enabled: Option<bool>,
    ///Indicates whether use of the app pin is required if the device pin is set.
    #[serde(rename = "disableAppPinIfDevicePinIsSet")]
    pub disable_app_pin_if_device_pin_is_set: Option<bool>,
    ///Policy display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Indicates whether application data for managed apps should be encrypted
    #[serde(rename = "encryptAppData")]
    pub encrypt_app_data: Option<bool>,
    ///Indicates whether use of the fingerprint reader is allowed in place of a pin if PinRequired is set to True.
    #[serde(rename = "fingerprintBlocked")]
    pub fingerprint_blocked: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates if the policy is deployed to any inclusion groups or not.
    #[serde(rename = "isAssigned")]
    pub is_assigned: Option<bool>,
    ///Last time the policy was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Type of managed browser
    #[serde(rename = "managedBrowser")]
    pub managed_browser: Option<MicrosoftGraphManagedBrowserType>,
    ///Indicates whether internet links should be opened in the managed browser app, or any custom browser specified by CustomBrowserProtocol (for iOS) or CustomBrowserPackageId/CustomBrowserDisplayName (for Android)
    #[serde(rename = "managedBrowserToOpenLinksRequired")]
    pub managed_browser_to_open_links_required: Option<bool>,
    ///Maximum number of incorrect pin retry attempts before the managed app is either blocked or wiped.
    #[serde(rename = "maximumPinRetries")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub maximum_pin_retries: Option<f64>,
    ///Minimum pin length required for an app-level pin if PinRequired is set to True
    #[serde(rename = "minimumPinLength")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub minimum_pin_length: Option<f64>,
    ///Versions less than the specified version will block the managed app from accessing company data.
    #[serde(rename = "minimumRequiredAppVersion")]
    pub minimum_required_app_version: Option<String>,
    ///Versions less than the specified version will block the managed app from accessing company data.
    #[serde(rename = "minimumRequiredOsVersion")]
    pub minimum_required_os_version: Option<String>,
    ///Define the oldest required Android security patch level a user can have to gain secure access to the app.
    #[serde(rename = "minimumRequiredPatchVersion")]
    pub minimum_required_patch_version: Option<String>,
    ///Versions less than the specified version will result in warning message on the managed app.
    #[serde(rename = "minimumWarningAppVersion")]
    pub minimum_warning_app_version: Option<String>,
    ///Versions less than the specified version will result in warning message on the managed app from accessing company data.
    #[serde(rename = "minimumWarningOsVersion")]
    pub minimum_warning_os_version: Option<String>,
    ///Define the oldest recommended Android security patch level a user can have for secure access to the app.
    #[serde(rename = "minimumWarningPatchVersion")]
    pub minimum_warning_patch_version: Option<String>,
    ///Indicates whether organizational credentials are required for app use.
    #[serde(rename = "organizationalCredentialsRequired")]
    pub organizational_credentials_required: Option<bool>,
    ///TimePeriod before the all-level pin must be reset if PinRequired is set to True.
    #[serde(rename = "periodBeforePinReset")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_before_pin_reset: Option<String>,
    ///The period after which access is checked when the device is not connected to the internet.
    #[serde(rename = "periodOfflineBeforeAccessCheck")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_offline_before_access_check: Option<String>,
    ///The amount of time an app is allowed to remain disconnected from the internet before all managed data it is wiped.
    #[serde(rename = "periodOfflineBeforeWipeIsEnforced")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_offline_before_wipe_is_enforced: Option<String>,
    ///The period after which access is checked when the device is connected to the internet.
    #[serde(rename = "periodOnlineBeforeAccessCheck")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_online_before_access_check: Option<String>,
    ///Character set which is to be used for a user's app PIN
    #[serde(rename = "pinCharacterSet")]
    pub pin_character_set: Option<MicrosoftGraphManagedAppPinCharacterSet>,
    ///Indicates whether an app-level pin is required.
    #[serde(rename = "pinRequired")]
    pub pin_required: Option<bool>,
    ///Indicates whether printing is allowed from managed apps.
    #[serde(rename = "printBlocked")]
    pub print_blocked: Option<bool>,
    ///Indicates whether users may use the 'Save As' menu item to save a copy of protected files.
    #[serde(rename = "saveAsBlocked")]
    pub save_as_blocked: Option<bool>,
    ///Indicates whether a managed user can take screen captures of managed apps
    #[serde(rename = "screenCaptureBlocked")]
    pub screen_capture_blocked: Option<bool>,
    ///Indicates whether simplePin is blocked.
    #[serde(rename = "simplePinBlocked")]
    pub simple_pin_blocked: Option<bool>,
    ///Version of the entity.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidManagedAppRegistration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.androidManagedAppRegistration".to_string())]
    pub odata_type: String,
    ///The app package Identifier
    #[serde(rename = "appIdentifier")]
    pub app_identifier: Option<MicrosoftGraphMobileAppIdentifier>,
    ///App version
    #[serde(rename = "applicationVersion")]
    pub application_version: Option<String>,
    ///Zero or more policys already applied on the registered app when it last synchronized with managment service.
    #[serde(rename = "appliedPolicies")]
    pub applied_policies: Option<Vec<MicrosoftGraphManagedAppPolicy>>,
    ///Date and time of creation
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Host device name
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    ///App management SDK generated tag, which helps relate apps hosted on the same device. Not guaranteed to relate apps in all conditions.
    #[serde(rename = "deviceTag")]
    pub device_tag: Option<String>,
    ///Host device type
    #[serde(rename = "deviceType")]
    pub device_type: Option<String>,
    ///Zero or more reasons an app registration is flagged. E.g. app running on rooted device
    #[serde(rename = "flaggedReasons")]
    pub flagged_reasons: Option<Vec<MicrosoftGraphManagedAppFlaggedReason>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Zero or more policies admin intended for the app as of now.
    #[serde(rename = "intendedPolicies")]
    pub intended_policies: Option<Vec<MicrosoftGraphManagedAppPolicy>>,
    ///Date and time of last the app synced with management service.
    #[serde(rename = "lastSyncDateTime")]
    pub last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///App management SDK version
    #[serde(rename = "managementSdkVersion")]
    pub management_sdk_version: Option<String>,
    ///Zero or more long running operations triggered on the app registration.
    pub operations: Option<Vec<MicrosoftGraphManagedAppOperation>>,
    ///Operating System version
    #[serde(rename = "platformVersion")]
    pub platform_version: Option<String>,
    ///The user Id to who this app registration belongs.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///Version of the entity.
    pub version: Option<String>,
}
///Contains properties for the minimum operating system required for an Android mobile app.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidMinimumOperatingSystem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///When TRUE, only Version 10.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v10_0: Option<bool>,
    ///When TRUE, only Version 11.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v11_0: Option<bool>,
    ///When TRUE, only Version 4.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v4_0: Option<bool>,
    ///When TRUE, only Version 4.0.3 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v4_0_3: Option<bool>,
    ///When TRUE, only Version 4.1 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v4_1: Option<bool>,
    ///When TRUE, only Version 4.2 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v4_2: Option<bool>,
    ///When TRUE, only Version 4.3 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v4_3: Option<bool>,
    ///When TRUE, only Version 4.4 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v4_4: Option<bool>,
    ///When TRUE, only Version 5.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v5_0: Option<bool>,
    ///When TRUE, only Version 5.1 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v5_1: Option<bool>,
    ///When TRUE, only Version 6.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v6_0: Option<bool>,
    ///When TRUE, only Version 7.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v7_0: Option<bool>,
    ///When TRUE, only Version 7.1 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v7_1: Option<bool>,
    ///When TRUE, only Version 8.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v8_0: Option<bool>,
    ///When TRUE, only Version 8.1 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v8_1: Option<bool>,
    ///When TRUE, only Version 9.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v9_0: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidMobileAppIdentifier {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.androidMobileAppIdentifier".to_string())]
    pub odata_type: String,
    ///The identifier for an app, as specified in the play store.
    #[serde(rename = "packageId")]
    pub package_id: Option<String>,
}
///Android required password type.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAndroidRequiredPasswordType {
    #[serde(rename = "deviceDefault")]
    #[default]
    DeviceDefault,
    #[serde(rename = "alphabetic")]
    Alphabetic,
    #[serde(rename = "alphanumeric")]
    Alphanumeric,
    #[serde(rename = "alphanumericWithSymbols")]
    AlphanumericWithSymbols,
    #[serde(rename = "lowSecurityBiometric")]
    LowSecurityBiometric,
    #[serde(rename = "numeric")]
    Numeric,
    #[serde(rename = "numericComplex")]
    NumericComplex,
    #[serde(rename = "any")]
    Any,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidStoreApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.androidStoreApp".to_string())]
    pub odata_type: String,
    ///The Android app store URL.
    #[serde(rename = "appStoreUrl")]
    pub app_store_url: Option<String>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The value for the minimum applicable operating system.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphAndroidMinimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The package identifier.
    #[serde(rename = "packageId")]
    pub package_id: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidWorkProfileCompliancePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.androidWorkProfileCompliancePolicy".to_string())]
    pub odata_type: String,
    ///The collection of assignments for this compliance policy.
    pub assignments: Option<Vec<MicrosoftGraphDeviceCompliancePolicyAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Compliance Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device compliance devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceComplianceDeviceOverview>,
    ///List of DeviceComplianceDeviceStatus.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceComplianceDeviceStatus>>,
    ///Require that devices have enabled device threat protection.
    #[serde(rename = "deviceThreatProtectionEnabled")]
    pub device_threat_protection_enabled: Option<bool>,
    ///Device threat protection levels for the Device Threat Protection API.
    #[serde(rename = "deviceThreatProtectionRequiredSecurityLevel")]
    pub device_threat_protection_required_security_level: Option<
        MicrosoftGraphDeviceThreatProtectionLevel,
    >,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Minimum Android security patch level.
    #[serde(rename = "minAndroidSecurityPatchLevel")]
    pub min_android_security_patch_level: Option<String>,
    ///Maximum Android version.
    #[serde(rename = "osMaximumVersion")]
    pub os_maximum_version: Option<String>,
    ///Minimum Android version.
    #[serde(rename = "osMinimumVersion")]
    pub os_minimum_version: Option<String>,
    ///Number of days before the password expires. Valid values 1 to 365
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///Minimum password length. Valid values 4 to 16
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///Minutes of inactivity before a password is required.
    #[serde(rename = "passwordMinutesOfInactivityBeforeLock")]
    pub password_minutes_of_inactivity_before_lock: Option<f64>,
    ///Number of previous passwords to block. Valid values 1 to 24
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Require a password to unlock device.
    #[serde(rename = "passwordRequired")]
    pub password_required: Option<bool>,
    ///Android required password type.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphAndroidRequiredPasswordType>,
    ///The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.
    #[serde(rename = "scheduledActionsForRule")]
    pub scheduled_actions_for_rule: Option<
        Vec<MicrosoftGraphDeviceComplianceScheduledActionForRule>,
    >,
    ///Devices must not be jailbroken or rooted.
    #[serde(rename = "securityBlockJailbrokenDevices")]
    pub security_block_jailbroken_devices: Option<bool>,
    ///Disable USB debugging on Android devices.
    #[serde(rename = "securityDisableUsbDebugging")]
    pub security_disable_usb_debugging: Option<bool>,
    ///Require that devices disallow installation of apps from unknown sources.
    #[serde(rename = "securityPreventInstallAppsFromUnknownSources")]
    pub security_prevent_install_apps_from_unknown_sources: Option<bool>,
    ///Require the device to pass the Company Portal client app runtime integrity check.
    #[serde(rename = "securityRequireCompanyPortalAppIntegrity")]
    pub security_require_company_portal_app_integrity: Option<bool>,
    ///Require Google Play Services to be installed and enabled on the device.
    #[serde(rename = "securityRequireGooglePlayServices")]
    pub security_require_google_play_services: Option<bool>,
    ///Require the device to pass the SafetyNet basic integrity check.
    #[serde(rename = "securityRequireSafetyNetAttestationBasicIntegrity")]
    pub security_require_safety_net_attestation_basic_integrity: Option<bool>,
    ///Require the device to pass the SafetyNet certified device check.
    #[serde(rename = "securityRequireSafetyNetAttestationCertifiedDevice")]
    pub security_require_safety_net_attestation_certified_device: Option<bool>,
    ///Require the device to have up to date security providers. The device will require Google Play Services to be enabled and up to date.
    #[serde(rename = "securityRequireUpToDateSecurityProviders")]
    pub security_require_up_to_date_security_providers: Option<bool>,
    ///Require the Android Verify apps feature is turned on.
    #[serde(rename = "securityRequireVerifyApps")]
    pub security_require_verify_apps: Option<bool>,
    ///Require encryption on Android devices.
    #[serde(rename = "storageRequireEncryption")]
    pub storage_require_encryption: Option<bool>,
    ///Device compliance users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceComplianceUserOverview>,
    ///List of DeviceComplianceUserStatus.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceComplianceUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Android Work Profile cross profile data sharing type.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAndroidWorkProfileCrossProfileDataSharingType {
    #[serde(rename = "deviceDefault")]
    #[default]
    DeviceDefault,
    #[serde(rename = "preventAny")]
    PreventAny,
    #[serde(rename = "allowPersonalToWork")]
    AllowPersonalToWork,
    #[serde(rename = "noRestrictions")]
    NoRestrictions,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidWorkProfileCustomConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.androidWorkProfileCustomConfiguration".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///OMA settings. This collection can contain a maximum of 500 elements.
    #[serde(rename = "omaSettings")]
    pub oma_settings: Option<Vec<MicrosoftGraphOmaSetting>>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Android Work Profile default app permission policy type.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAndroidWorkProfileDefaultAppPermissionPolicyType {
    #[serde(rename = "deviceDefault")]
    #[default]
    DeviceDefault,
    #[serde(rename = "prompt")]
    Prompt,
    #[serde(rename = "autoGrant")]
    AutoGrant,
    #[serde(rename = "autoDeny")]
    AutoDeny,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAndroidWorkProfileGeneralDeviceConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.androidWorkProfileGeneralDeviceConfiguration".to_string()
    )]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether or not to block fingerprint unlock.
    #[serde(rename = "passwordBlockFingerprintUnlock")]
    pub password_block_fingerprint_unlock: Option<bool>,
    ///Indicates whether or not to block Smart Lock and other trust agents.
    #[serde(rename = "passwordBlockTrustAgents")]
    pub password_block_trust_agents: Option<bool>,
    ///Number of days before the password expires. Valid values 1 to 365
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///Minimum length of passwords. Valid values 4 to 16
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///Minutes of inactivity before the screen times out.
    #[serde(rename = "passwordMinutesOfInactivityBeforeScreenTimeout")]
    pub password_minutes_of_inactivity_before_screen_timeout: Option<f64>,
    ///Number of previous passwords to block. Valid values 0 to 24
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Android Work Profile required password type.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<
        MicrosoftGraphAndroidWorkProfileRequiredPasswordType,
    >,
    ///Number of sign in failures allowed before factory reset. Valid values 1 to 16
    #[serde(rename = "passwordSignInFailureCountBeforeFactoryReset")]
    pub password_sign_in_failure_count_before_factory_reset: Option<f64>,
    ///Require the Android Verify apps feature is turned on.
    #[serde(rename = "securityRequireVerifyApps")]
    pub security_require_verify_apps: Option<bool>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
    ///Block users from adding/removing accounts in work profile.
    #[serde(rename = "workProfileBlockAddingAccounts")]
    pub work_profile_block_adding_accounts: Option<bool>,
    ///Block work profile camera.
    #[serde(rename = "workProfileBlockCamera")]
    pub work_profile_block_camera: Option<bool>,
    ///Block display work profile caller ID in personal profile.
    #[serde(rename = "workProfileBlockCrossProfileCallerId")]
    pub work_profile_block_cross_profile_caller_id: Option<bool>,
    ///Block work profile contacts availability in personal profile.
    #[serde(rename = "workProfileBlockCrossProfileContactsSearch")]
    pub work_profile_block_cross_profile_contacts_search: Option<bool>,
    ///Boolean that indicates if the setting disallow cross profile copy/paste is enabled.
    #[serde(rename = "workProfileBlockCrossProfileCopyPaste")]
    pub work_profile_block_cross_profile_copy_paste: Option<bool>,
    ///Indicates whether or not to block notifications while device locked.
    #[serde(rename = "workProfileBlockNotificationsWhileDeviceLocked")]
    pub work_profile_block_notifications_while_device_locked: Option<bool>,
    ///Block screen capture in work profile.
    #[serde(rename = "workProfileBlockScreenCapture")]
    pub work_profile_block_screen_capture: Option<bool>,
    ///Allow bluetooth devices to access enterprise contacts.
    #[serde(rename = "workProfileBluetoothEnableContactSharing")]
    pub work_profile_bluetooth_enable_contact_sharing: Option<bool>,
    ///Android Work Profile cross profile data sharing type.
    #[serde(rename = "workProfileDataSharingType")]
    pub work_profile_data_sharing_type: Option<
        MicrosoftGraphAndroidWorkProfileCrossProfileDataSharingType,
    >,
    ///Android Work Profile default app permission policy type.
    #[serde(rename = "workProfileDefaultAppPermissionPolicy")]
    pub work_profile_default_app_permission_policy: Option<
        MicrosoftGraphAndroidWorkProfileDefaultAppPermissionPolicyType,
    >,
    ///Indicates whether or not to block fingerprint unlock for work profile.
    #[serde(rename = "workProfilePasswordBlockFingerprintUnlock")]
    pub work_profile_password_block_fingerprint_unlock: Option<bool>,
    ///Indicates whether or not to block Smart Lock and other trust agents for work profile.
    #[serde(rename = "workProfilePasswordBlockTrustAgents")]
    pub work_profile_password_block_trust_agents: Option<bool>,
    ///Number of days before the work profile password expires. Valid values 1 to 365
    #[serde(rename = "workProfilePasswordExpirationDays")]
    pub work_profile_password_expiration_days: Option<f64>,
    ///Minimum # of letter characters required in work profile password. Valid values 1 to 10
    #[serde(rename = "workProfilePasswordMinLetterCharacters")]
    pub work_profile_password_min_letter_characters: Option<f64>,
    ///Minimum # of lower-case characters required in work profile password. Valid values 1 to 10
    #[serde(rename = "workProfilePasswordMinLowerCaseCharacters")]
    pub work_profile_password_min_lower_case_characters: Option<f64>,
    ///Minimum # of non-letter characters required in work profile password. Valid values 1 to 10
    #[serde(rename = "workProfilePasswordMinNonLetterCharacters")]
    pub work_profile_password_min_non_letter_characters: Option<f64>,
    ///Minimum # of numeric characters required in work profile password. Valid values 1 to 10
    #[serde(rename = "workProfilePasswordMinNumericCharacters")]
    pub work_profile_password_min_numeric_characters: Option<f64>,
    ///Minimum # of symbols required in work profile password. Valid values 1 to 10
    #[serde(rename = "workProfilePasswordMinSymbolCharacters")]
    pub work_profile_password_min_symbol_characters: Option<f64>,
    ///Minimum # of upper-case characters required in work profile password. Valid values 1 to 10
    #[serde(rename = "workProfilePasswordMinUpperCaseCharacters")]
    pub work_profile_password_min_upper_case_characters: Option<f64>,
    ///Minimum length of work profile password. Valid values 4 to 16
    #[serde(rename = "workProfilePasswordMinimumLength")]
    pub work_profile_password_minimum_length: Option<f64>,
    ///Minutes of inactivity before the screen times out.
    #[serde(rename = "workProfilePasswordMinutesOfInactivityBeforeScreenTimeout")]
    pub work_profile_password_minutes_of_inactivity_before_screen_timeout: Option<f64>,
    ///Number of previous work profile passwords to block. Valid values 0 to 24
    #[serde(rename = "workProfilePasswordPreviousPasswordBlockCount")]
    pub work_profile_password_previous_password_block_count: Option<f64>,
    ///Android Work Profile required password type.
    #[serde(rename = "workProfilePasswordRequiredType")]
    pub work_profile_password_required_type: Option<
        MicrosoftGraphAndroidWorkProfileRequiredPasswordType,
    >,
    ///Number of sign in failures allowed before work profile is removed and all corporate data deleted. Valid values 1 to 16
    #[serde(rename = "workProfilePasswordSignInFailureCountBeforeFactoryReset")]
    pub work_profile_password_sign_in_failure_count_before_factory_reset: Option<f64>,
    ///Password is required or not for work profile
    #[serde(rename = "workProfileRequirePassword")]
    pub work_profile_require_password: Option<bool>,
}
///Android Work Profile required password type.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAndroidWorkProfileRequiredPasswordType {
    #[serde(rename = "deviceDefault")]
    #[default]
    DeviceDefault,
    #[serde(rename = "lowSecurityBiometric")]
    LowSecurityBiometric,
    #[serde(rename = "required")]
    Required,
    #[serde(rename = "atLeastNumeric")]
    AtLeastNumeric,
    #[serde(rename = "numericComplex")]
    NumericComplex,
    #[serde(rename = "atLeastAlphabetic")]
    AtLeastAlphabetic,
    #[serde(rename = "atLeastAlphanumeric")]
    AtLeastAlphanumeric,
    #[serde(rename = "alphanumericWithSymbols")]
    AlphanumericWithSymbols,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAnonymousGuestConversationMember {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.anonymousGuestConversationMember".to_string())]
    pub odata_type: String,
    ///Unique ID that represents the user. Note: This ID can change if the user leaves and rejoins the meeting, or joins from a different device.
    #[serde(rename = "anonymousGuestId")]
    pub anonymous_guest_id: Option<String>,
    ///The display name of the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The roles for that user. This property contains more qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member shouldn't have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role.
    pub roles: Option<Vec<Option<String>>>,
    ///The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.
    #[serde(rename = "visibleHistoryStartDateTime")]
    pub visible_history_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAnswerInputType {
    #[serde(rename = "text")]
    #[default]
    Text,
    #[serde(rename = "radioButton")]
    RadioButton,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphApiApplication {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///When true, allows an application to use claims mapping without specifying a custom signing key.
    #[serde(rename = "acceptMappedClaims")]
    pub accept_mapped_claims: Option<bool>,
    ///Used for bundling consent if you have a solution that contains two parts: a client app and a custom web API app. If you set the appID of the client app to this value, the user only consents once to the client app. Microsoft Entra ID knows that consenting to the client means implicitly consenting to the web API and automatically provisions service principals for both APIs at the same time. Both the client and the web API app must be registered in the same tenant.
    #[serde(rename = "knownClientApplications")]
    pub known_client_applications: Option<Vec<Option<uuid::Uuid>>>,
    ///The definition of the delegated permissions exposed by the web API represented by this application registration. These delegated permissions may be requested by a client application, and may be granted by users or administrators during consent. Delegated permissions are sometimes referred to as OAuth 2.0 scopes.
    #[serde(rename = "oauth2PermissionScopes")]
    pub oauth2permission_scopes: Option<Vec<MicrosoftGraphPermissionScope>>,
    ///Lists the client applications that are preauthorized with the specified delegated permissions to access this application's APIs. Users aren't required to consent to any preauthorized application (for the permissions specified). However, any other permissions not listed in preAuthorizedApplications (requested through incremental consent for example) will require user consent.
    #[serde(rename = "preAuthorizedApplications")]
    pub pre_authorized_applications: Option<Vec<MicrosoftGraphPreAuthorizedApplication>>,
    ///Specifies the access token version expected by this resource. This changes the version and format of the JWT produced independent of the endpoint or client used to request the access token.  The endpoint used, v1.0 or v2.0, is chosen by the client and only impacts the version of id_tokens. Resources need to explicitly configure requestedAccessTokenVersion to indicate the supported access token format.  Possible values for requestedAccessTokenVersion are 1, 2, or null. If the value is null, this defaults to 1, which corresponds to the v1.0 endpoint.  If signInAudience on the application is configured as AzureADandPersonalMicrosoftAccount or PersonalMicrosoftAccount, the value for this property must be 2.
    #[serde(rename = "requestedAccessTokenVersion")]
    pub requested_access_token_version: Option<f64>,
}
discriminated_enum! {
    pub enum MicrosoftGraphApiAuthenticationConfigurationBase { discriminator :
    "@odata.type", variants : [("#microsoft.graph.basicAuthentication",
    MicrosoftGraphBasicAuthentication(Box < MicrosoftGraphBasicAuthentication >)),
    ("#microsoft.graph.clientCertificateAuthentication",
    MicrosoftGraphClientCertificateAuthentication(Box <
    MicrosoftGraphClientCertificateAuthentication >)),
    ("#microsoft.graph.pkcs12Certificate", MicrosoftGraphPkcs12Certificate(Box <
    MicrosoftGraphPkcs12Certificate >))], fallback :
    ApiAuthenticationConfigurationBase(Box <
    MicrosoftGraphApiAuthenticationConfigurationBaseBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphApiAuthenticationConfigurationBaseBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppCatalogs {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appCatalogs".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "teamsApps")]
    pub teams_apps: Option<Vec<MicrosoftGraphTeamsApp>>,
}
///Contains properties for App configuration setting item.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppConfigurationSettingItem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///app configuration key.
    #[serde(rename = "appConfigKey")]
    pub app_config_key: Option<String>,
    ///App configuration key types.
    #[serde(rename = "appConfigKeyType")]
    pub app_config_key_type: Option<MicrosoftGraphMdmAppConfigKeyType>,
    ///app configuration key value.
    #[serde(rename = "appConfigKeyValue")]
    pub app_config_key_value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppConsentApprovalRoute {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appConsentApprovalRoute".to_string())]
    pub odata_type: String,
    ///A collection of appConsentRequest objects representing apps for which admin consent has been requested by one or more users.
    #[serde(rename = "appConsentRequests")]
    pub app_consent_requests: Option<Vec<MicrosoftGraphAppConsentRequest>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppConsentRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appConsentRequest".to_string())]
    pub odata_type: String,
    ///The display name of the app for which consent is requested. Required. Supports $filter (eq only) and $orderby.
    #[serde(rename = "appDisplayName")]
    pub app_display_name: Option<String>,
    ///The identifier of the application. Required. Supports $filter (eq only) and $orderby.
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A list of pending scopes waiting for approval. Required.
    #[serde(rename = "pendingScopes")]
    pub pending_scopes: Option<Vec<MicrosoftGraphAppConsentRequestScope>>,
    ///A list of pending user consent requests. Supports $filter (eq).
    #[serde(rename = "userConsentRequests")]
    pub user_consent_requests: Option<Vec<MicrosoftGraphUserConsentRequest>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppConsentRequestScope {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The name of the scope.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAppCredentialRestrictionType {
    #[serde(rename = "passwordAddition")]
    #[default]
    PasswordAddition,
    #[serde(rename = "passwordLifetime")]
    PasswordLifetime,
    #[serde(rename = "symmetricKeyAddition")]
    SymmetricKeyAddition,
    #[serde(rename = "symmetricKeyLifetime")]
    SymmetricKeyLifetime,
    #[serde(rename = "customPasswordAddition")]
    CustomPasswordAddition,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppHostedMediaConfig {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appHostedMediaConfig".to_string())]
    pub odata_type: String,
    ///The media configuration blob generated by smart media agent.
    pub blob: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppIdentity {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Refers to the unique ID representing application in Microsoft Entra ID.
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///Refers to the application name displayed in the Microsoft Entra admin center.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Refers to the unique ID for the service principal in Microsoft Entra ID.
    #[serde(rename = "servicePrincipalId")]
    pub service_principal_id: Option<String>,
    ///Refers to the Service Principal Name is the Application name in the tenant.
    #[serde(rename = "servicePrincipalName")]
    pub service_principal_name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAppKeyCredentialRestrictionType {
    #[serde(rename = "asymmetricKeyLifetime")]
    #[default]
    AsymmetricKeyLifetime,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///Represents an app in the list of managed applications
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppListItem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The application or bundle identifier of the application
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///The Store URL of the application
    #[serde(rename = "appStoreUrl")]
    pub app_store_url: Option<String>,
    ///The application name
    pub name: Option<String>,
    ///The publisher of the application
    pub publisher: Option<String>,
}
///Possible values of the compliance app list.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAppListType {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "appsInListCompliant")]
    AppsInListCompliant,
    #[serde(rename = "appsNotInListCompliant")]
    AppsNotInListCompliant,
}
///Possible values of AppLocker Application Control Types
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAppLockerApplicationControlType {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "enforceComponentsAndStoreApps")]
    EnforceComponentsAndStoreApps,
    #[serde(rename = "auditComponentsAndStoreApps")]
    AuditComponentsAndStoreApps,
    #[serde(rename = "enforceComponentsStoreAppsAndSmartlocker")]
    EnforceComponentsStoreAppsAndSmartlocker,
    #[serde(rename = "auditComponentsStoreAppsAndSmartlocker")]
    AuditComponentsStoreAppsAndSmartlocker,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppLogCollectionRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appLogCollectionRequest".to_string())]
    pub odata_type: String,
    ///Time at which the upload log request reached a completed state if not completed yet NULL will be returned.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///List of log folders.
    #[serde(rename = "customLogFolders")]
    pub custom_log_folders: Option<Vec<Option<String>>>,
    ///Indicates error message if any during the upload process.
    #[serde(rename = "errorMessage")]
    pub error_message: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///AppLogUploadStatus
    pub status: Option<MicrosoftGraphAppLogUploadState>,
}
///AppLogUploadStatus
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAppLogUploadState {
    #[serde(rename = "pending")]
    #[default]
    Pending,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppManagementApplicationConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appManagementApplicationConfiguration".to_string())]
    pub odata_type: String,
    ///Collection of keyCredential restrictions settings to be applied to an application or service principal.
    #[serde(rename = "keyCredentials")]
    pub key_credentials: Option<Vec<MicrosoftGraphKeyCredentialConfiguration>>,
    ///Collection of password restrictions settings to be applied to an application or service principal.
    #[serde(rename = "passwordCredentials")]
    pub password_credentials: Option<Vec<MicrosoftGraphPasswordCredentialConfiguration>>,
}
discriminated_enum! {
    pub enum MicrosoftGraphAppManagementConfiguration { discriminator : "@odata.type",
    variants : [("#microsoft.graph.appManagementApplicationConfiguration",
    MicrosoftGraphAppManagementApplicationConfiguration(Box <
    MicrosoftGraphAppManagementApplicationConfiguration >)),
    ("#microsoft.graph.appManagementServicePrincipalConfiguration",
    MicrosoftGraphAppManagementServicePrincipalConfiguration(Box <
    MicrosoftGraphAppManagementServicePrincipalConfiguration >)),
    ("#microsoft.graph.customAppManagementConfiguration",
    MicrosoftGraphCustomAppManagementConfiguration(Box <
    MicrosoftGraphCustomAppManagementConfiguration >))], fallback :
    AppManagementConfiguration(Box < MicrosoftGraphAppManagementConfigurationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppManagementConfigurationBase {
    ///Collection of keyCredential restrictions settings to be applied to an application or service principal.
    #[serde(rename = "keyCredentials")]
    pub key_credentials: Option<Vec<MicrosoftGraphKeyCredentialConfiguration>>,
    ///Collection of password restrictions settings to be applied to an application or service principal.
    #[serde(rename = "passwordCredentials")]
    pub password_credentials: Option<Vec<MicrosoftGraphPasswordCredentialConfiguration>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppManagementPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appManagementPolicy".to_string())]
    pub odata_type: String,
    ///Collection of applications and service principals to which the policy is applied.
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Denotes whether the policy is enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Restrictions that apply to an application or service principal object.
    pub restrictions: Option<MicrosoftGraphCustomAppManagementConfiguration>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAppManagementRestrictionState {
    #[serde(rename = "enabled")]
    #[default]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppManagementServicePrincipalConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appManagementServicePrincipalConfiguration".to_string())]
    pub odata_type: String,
    ///Collection of keyCredential restrictions settings to be applied to an application or service principal.
    #[serde(rename = "keyCredentials")]
    pub key_credentials: Option<Vec<MicrosoftGraphKeyCredentialConfiguration>>,
    ///Collection of password restrictions settings to be applied to an application or service principal.
    #[serde(rename = "passwordCredentials")]
    pub password_credentials: Option<Vec<MicrosoftGraphPasswordCredentialConfiguration>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppRole {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies whether this app role can be assigned to users and groups (by setting to ['User']), to other application's (by setting to ['Application'], or both (by setting to ['User', 'Application']). App roles supporting assignment to other applications' service principals are also known as application permissions. The 'Application' value is only supported for app roles defined on application entities.
    #[serde(rename = "allowedMemberTypes")]
    pub allowed_member_types: Option<Vec<String>>,
    ///The description for the app role. This is displayed when the app role is being assigned and, if the app role functions as an application permission, during  consent experiences.
    pub description: Option<String>,
    ///Display name for the permission that appears in the app role assignment and consent experiences.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique role identifier inside the appRoles collection. When creating a new app role, a new GUID identifier must be provided.
    pub id: Option<uuid::Uuid>,
    ///When creating or updating an app role, this must be set to true (which is the default). To delete a role, this must first be set to false.  At that point, in a subsequent call, this role may be removed.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Specifies if the app role is defined on the application object or on the servicePrincipal entity. Must not be included in any POST or PATCH requests. Read-only.
    pub origin: Option<String>,
    ///Specifies the value to include in the roles claim in ID tokens and access tokens authenticating an assigned user or service principal. Must not exceed 120 characters in length. Allowed characters are : ! # $ % & ' ( ) * + , - . / : ;  =  ? @ [ ] ^ + _  {  } ~, and characters in the ranges 0-9, A-Z and a-z. Any other character, including the space character, aren't allowed. May not begin with ..
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppRoleAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appRoleAssignment".to_string())]
    pub odata_type: String,
    ///The identifier (id) for the app role that's assigned to the principal. This app role must be exposed in the appRoles property on the resource application's service principal (resourceId). If the resource application hasn't declared any app roles, a default app role ID of 00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to the resource app without any specific app roles. Required on create.
    #[serde(rename = "appRoleId")]
    pub app_role_id: Option<uuid::Uuid>,
    ///The time when the app role assignment was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The display name of the user, group, or service principal that was granted the app role assignment. Maximum length is 256 characters. Read-only. Supports $filter (eq and startswith).
    #[serde(rename = "principalDisplayName")]
    pub principal_display_name: Option<String>,
    ///The unique identifier (id) for the user, security group, or service principal being granted the app role. Security groups with dynamic memberships are supported. Required on create.
    #[serde(rename = "principalId")]
    pub principal_id: Option<uuid::Uuid>,
    ///The type of the assigned principal. This can either be User, Group, or ServicePrincipal. Read-only.
    #[serde(rename = "principalType")]
    pub principal_type: Option<String>,
    ///The display name of the resource app's service principal to which the assignment is made. Maximum length is 256 characters.
    #[serde(rename = "resourceDisplayName")]
    pub resource_display_name: Option<String>,
    ///The unique identifier (id) for the resource service principal for which the assignment is made. Required on create. Supports $filter (eq only).
    #[serde(rename = "resourceId")]
    pub resource_id: Option<uuid::Uuid>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppScope {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appScope".to_string())]
    pub odata_type: String,
    ///Provides the display name of the app-specific resource represented by the app scope. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Describes the type of app-specific resource represented by the app scope. Read-only.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppleDeviceFeaturesConfigurationBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appleDeviceFeaturesConfigurationBase".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppleManagedIdentityProvider {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.appleManagedIdentityProvider".to_string())]
    pub odata_type: String,
    ///The certificate data, which is a long string of text from the certificate. Can be null.
    #[serde(rename = "certificateData")]
    pub certificate_data: Option<String>,
    ///The Apple developer identifier. Required.
    #[serde(rename = "developerId")]
    pub developer_id: Option<String>,
    ///The display name of the identity provider.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Apple key identifier. Required.
    #[serde(rename = "keyId")]
    pub key_id: Option<String>,
    ///The Apple service identifier. Required.
    #[serde(rename = "serviceId")]
    pub service_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphApplePushNotificationCertificate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.applePushNotificationCertificate".to_string())]
    pub odata_type: String,
    ///Apple Id of the account used to create the MDM push certificate.
    #[serde(rename = "appleIdentifier")]
    pub apple_identifier: Option<String>,
    ///Not yet documented
    pub certificate: Option<String>,
    ///Certificate serial number. This property is read-only.
    #[serde(rename = "certificateSerialNumber")]
    pub certificate_serial_number: Option<String>,
    ///The reason the certificate upload failed.
    #[serde(rename = "certificateUploadFailureReason")]
    pub certificate_upload_failure_reason: Option<String>,
    ///The certificate upload status.
    #[serde(rename = "certificateUploadStatus")]
    pub certificate_upload_status: Option<String>,
    ///The expiration date and time for Apple push notification certificate.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date and time for Apple push notification certificate.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Topic Id.
    #[serde(rename = "topicIdentifier")]
    pub topic_identifier: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphApplication {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.application".to_string())]
    pub odata_type: String,
    ///Defines custom behavior that a consuming service can use to call an app in specific contexts. For example, applications that can render file streams can set the addIns property for its 'FileHandler' functionality. This lets services like Microsoft 365 call the application in the context of a document the user is working on.
    #[serde(rename = "addIns")]
    pub add_ins: Option<Vec<MicrosoftGraphAddIn>>,
    ///Specifies settings for an application that implements a web API.
    pub api: Option<MicrosoftGraphApiApplication>,
    ///The unique identifier for the application that is assigned to an application by Microsoft Entra ID. Not nullable. Read-only. Alternate key. Supports $filter (eq).
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///The appManagementPolicy applied to this application.
    #[serde(rename = "appManagementPolicies")]
    pub app_management_policies: Option<Vec<MicrosoftGraphAppManagementPolicy>>,
    ///The collection of roles defined for the application. With app role assignments, these roles can be assigned to users, groups, or service principals associated with other applications. Not nullable.
    #[serde(rename = "appRoles")]
    pub app_roles: Option<Vec<MicrosoftGraphAppRole>>,
    ///Unique identifier of the applicationTemplate. Supports $filter (eq, not, ne). Read-only. null if the app wasn't created from an application template.
    #[serde(rename = "applicationTemplateId")]
    pub application_template_id: Option<String>,
    #[serde(rename = "authenticationBehaviors")]
    pub authentication_behaviors: Option<MicrosoftGraphAuthenticationBehaviors>,
    ///Specifies the certification status of the application.
    pub certification: Option<MicrosoftGraphCertification>,
    ///The date and time the application was registered. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.  Supports $filter (eq, ne, not, ge, le, in, and eq on null values) and $orderby.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Supports $filter (/$count eq 0, /$count ne 0). Read-only.
    #[serde(rename = "createdOnBehalfOf")]
    pub created_on_behalf_of: Option<MicrosoftGraphDirectoryObject>,
    #[serde(rename = "defaultRedirectUri")]
    pub default_redirect_uri: Option<String>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Free text field to provide a description of the application object to end users. The maximum allowed size is 1,024 characters. Supports $filter (eq, ne, not, ge, le, startsWith) and $search.
    pub description: Option<String>,
    ///Specifies whether Microsoft has disabled the registered application. Possible values are: null (default value), NotDisabled, and DisabledDueToViolationOfServicesAgreement (reasons include suspicious, abusive, or malicious activity, or a violation of the Microsoft Services Agreement).  Supports $filter (eq, ne, not).
    #[serde(rename = "disabledByMicrosoftStatus")]
    pub disabled_by_microsoft_status: Option<String>,
    ///The display name for the application. Maximum length is 256 characters. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Read-only. Nullable. Supports $expand and $filter (/$count eq 0, /$count ne 0).
    #[serde(rename = "extensionProperties")]
    pub extension_properties: Option<Vec<MicrosoftGraphExtensionProperty>>,
    ///Federated identities for applications. Supports $expand and $filter (startsWith, /$count eq 0, /$count ne 0).
    #[serde(rename = "federatedIdentityCredentials")]
    pub federated_identity_credentials: Option<
        Vec<MicrosoftGraphFederatedIdentityCredential>,
    >,
    ///Configures the groups claim issued in a user or OAuth 2.0 access token that the application expects. To set this attribute, use one of the following valid string values: None, SecurityGroup (for security groups and Microsoft Entra roles), All (this gets all of the security groups, distribution groups, and Microsoft Entra directory roles that the signed-in user is a member of).
    #[serde(rename = "groupMembershipClaims")]
    pub group_membership_claims: Option<String>,
    #[serde(rename = "homeRealmDiscoveryPolicies")]
    pub home_realm_discovery_policies: Option<
        Vec<MicrosoftGraphHomeRealmDiscoveryPolicy>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Also known as App ID URI, this value is set when an application is used as a resource app. The identifierUris acts as the prefix for the scopes you reference in your API's code, and it must be globally unique across Microsoft Entra ID. For more information on valid identifierUris patterns and best practices, see Microsoft Entra application registration security best practices. Not nullable. Supports $filter (eq, ne, ge, le, startsWith).
    #[serde(rename = "identifierUris")]
    pub identifier_uris: Option<Vec<String>>,
    ///Basic profile information of the application such as  app's marketing, support, terms of service and privacy statement URLs. The terms of service and privacy statement are surfaced to users through the user consent experience. For more info, see How to: Add Terms of service and privacy statement for registered Microsoft Entra apps. Supports $filter (eq, ne, not, ge, le, and eq on null values).
    pub info: Option<MicrosoftGraphInformationalUrl>,
    ///Specifies whether this application supports device authentication without a user. The default is false.
    #[serde(rename = "isDeviceOnlyAuthSupported")]
    pub is_device_only_auth_supported: Option<bool>,
    ///Specifies the fallback application type as public client, such as an installed application running on a mobile device. The default value is false, which means the fallback application type is confidential client such as a web app. There are certain scenarios where Microsoft Entra ID can't determine the client application type. For example, the ROPC flow where it's configured without specifying a redirect URI. In those cases, Microsoft Entra ID interprets the application type based on the value of this property.
    #[serde(rename = "isFallbackPublicClient")]
    pub is_fallback_public_client: Option<bool>,
    ///The collection of key credentials associated with the application. Not nullable. Supports $filter (eq, not, ge, le).
    #[serde(rename = "keyCredentials")]
    pub key_credentials: Option<Vec<MicrosoftGraphKeyCredential>>,
    ///The main logo for the application. Not nullable.
    pub logo: Option<String>,
    ///Specifies whether the Native Authentication APIs are enabled for the application. The possible values are: none and all. Default is none. For more information, see Native Authentication.
    #[serde(rename = "nativeAuthenticationApisEnabled")]
    pub native_authentication_apis_enabled: Option<
        MicrosoftGraphNativeAuthenticationApisEnabled,
    >,
    ///Notes relevant for the management of the application.
    pub notes: Option<String>,
    #[serde(rename = "oauth2RequirePostResponse")]
    pub oauth2require_post_response: Option<bool>,
    ///Application developers can configure optional claims in their Microsoft Entra applications to specify the claims that are sent to their application by the Microsoft security token service. For more information, see How to: Provide optional claims to your app.
    #[serde(rename = "optionalClaims")]
    pub optional_claims: Option<MicrosoftGraphOptionalClaims>,
    ///Directory objects that are owners of this application. The owners are a set of nonadmin users or service principals who are allowed to modify this object. Supports $expand, $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1), and $select nested in $expand.
    pub owners: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Specifies parental control settings for an application.
    #[serde(rename = "parentalControlSettings")]
    pub parental_control_settings: Option<MicrosoftGraphParentalControlSettings>,
    ///The collection of password credentials associated with the application. Not nullable.
    #[serde(rename = "passwordCredentials")]
    pub password_credentials: Option<Vec<MicrosoftGraphPasswordCredential>>,
    ///Specifies settings for installed clients such as desktop or mobile devices.
    #[serde(rename = "publicClient")]
    pub public_client: Option<MicrosoftGraphPublicClientApplication>,
    ///The verified publisher domain for the application. Read-only. For more information, see How to: Configure an application's publisher domain. Supports $filter (eq, ne, ge, le, startsWith).
    #[serde(rename = "publisherDomain")]
    pub publisher_domain: Option<String>,
    ///Specifies whether this application requires Microsoft Entra ID to verify the signed authentication requests.
    #[serde(rename = "requestSignatureVerification")]
    pub request_signature_verification: Option<
        MicrosoftGraphRequestSignatureVerification,
    >,
    ///Specifies the resources that the application needs to access. This property also specifies the set of delegated permissions and application roles that it needs for each of those resources. This configuration of access to the required resources drives the consent experience. No more than 50 resource services (APIs) can be configured. Beginning mid-October 2021, the total number of required permissions must not exceed 400. For more information, see Limits on requested permissions per app. Not nullable. Supports $filter (eq, not, ge, le).
    #[serde(rename = "requiredResourceAccess")]
    pub required_resource_access: Option<Vec<MicrosoftGraphRequiredResourceAccess>>,
    ///The URL where the service exposes SAML metadata for federation. This property is valid only for single-tenant applications. Nullable.
    #[serde(rename = "samlMetadataUrl")]
    pub saml_metadata_url: Option<String>,
    ///References application or service contact information from a Service or Asset Management database. Nullable.
    #[serde(rename = "serviceManagementReference")]
    pub service_management_reference: Option<String>,
    ///Specifies whether sensitive properties of a multitenant application should be locked for editing after the application is provisioned in a tenant. Nullable. null by default.
    #[serde(rename = "servicePrincipalLockConfiguration")]
    pub service_principal_lock_configuration: Option<
        MicrosoftGraphServicePrincipalLockConfiguration,
    >,
    ///Specifies the Microsoft accounts that are supported for the current application. The possible values are: AzureADMyOrg (default), AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, and PersonalMicrosoftAccount. See more in the table. The value of this object also limits the number of permissions an app can request. For more information, see Limits on requested permissions per app. The value for this property has implications on other app object properties. As a result, if you change this property, you might need to change other properties first. For more information, see Validation differences for signInAudience.Supports $filter (eq, ne, not).
    #[serde(rename = "signInAudience")]
    pub sign_in_audience: Option<String>,
    ///Specifies settings for a single-page application, including sign out URLs and redirect URIs for authorization codes and access tokens.
    pub spa: Option<MicrosoftGraphSpaApplication>,
    ///Represents the capability for Microsoft Entra identity synchronization through the Microsoft Graph API.
    pub synchronization: Option<MicrosoftGraphSynchronization>,
    ///Custom strings that can be used to categorize and identify the application. Not nullable. Strings added here will also appear in the tags property of any associated service principals.Supports $filter (eq, not, ge, le, startsWith) and $search.
    pub tags: Option<Vec<String>>,
    ///Specifies the keyId of a public key from the keyCredentials collection. When configured, Microsoft Entra ID encrypts all the tokens it emits by using the key this property points to. The application code that receives the encrypted token must use the matching private key to decrypt the token before it can be used for the signed-in user.
    #[serde(rename = "tokenEncryptionKeyId")]
    pub token_encryption_key_id: Option<uuid::Uuid>,
    #[serde(rename = "tokenIssuancePolicies")]
    pub token_issuance_policies: Option<Vec<MicrosoftGraphTokenIssuancePolicy>>,
    #[serde(rename = "tokenLifetimePolicies")]
    pub token_lifetime_policies: Option<Vec<MicrosoftGraphTokenLifetimePolicy>>,
    ///The unique identifier that can be assigned to an application and used as an alternate key. Immutable. Read-only.
    #[serde(rename = "uniqueName")]
    pub unique_name: Option<String>,
    ///Specifies the verified publisher of the application. For more information about how publisher verification helps support application security, trustworthiness, and compliance, see Publisher verification.
    #[serde(rename = "verifiedPublisher")]
    pub verified_publisher: Option<MicrosoftGraphVerifiedPublisher>,
    ///Specifies settings for a web application.
    pub web: Option<MicrosoftGraphWebApplication>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphApplicationEnforcedRestrictionsSessionControl {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.applicationEnforcedRestrictionsSessionControl".to_string()
    )]
    pub odata_type: String,
    ///Specifies whether the session control is enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
}
///Possible values for applicationGuardBlockClipboardSharingType
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphApplicationGuardBlockClipboardSharingType {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "blockBoth")]
    BlockBoth,
    #[serde(rename = "blockHostToContainer")]
    BlockHostToContainer,
    #[serde(rename = "blockContainerToHost")]
    BlockContainerToHost,
    #[serde(rename = "blockNone")]
    BlockNone,
}
///Possible values for applicationGuardBlockFileTransfer
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphApplicationGuardBlockFileTransferType {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "blockImageAndTextFile")]
    BlockImageAndTextFile,
    #[serde(rename = "blockImageFile")]
    BlockImageFile,
    #[serde(rename = "blockNone")]
    BlockNone,
    #[serde(rename = "blockTextFile")]
    BlockTextFile,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphApplicationTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.applicationTemplate".to_string())]
    pub odata_type: String,
    ///The list of categories for the application. Supported values can be: Collaboration, Business Management, Consumer, Content management, CRM, Data services, Developer services, E-commerce, Education, ERP, Finance, Health, Human resources, IT infrastructure, Mail, Management, Marketing, Media, Productivity, Project management, Telecommunications, Tools, Travel, and Web design & hosting.
    pub categories: Option<Vec<Option<String>>>,
    ///A description of the application.
    pub description: Option<String>,
    ///The name of the application.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The home page URL of the application.
    #[serde(rename = "homePageUrl")]
    pub home_page_url: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The URL to get the logo for this application.
    #[serde(rename = "logoUrl")]
    pub logo_url: Option<String>,
    ///The name of the publisher for this application.
    pub publisher: Option<String>,
    ///The list of provisioning modes supported by this application. The only valid value is sync.
    #[serde(rename = "supportedProvisioningTypes")]
    pub supported_provisioning_types: Option<Vec<Option<String>>>,
    ///The list of single sign-on modes supported by this application. The supported values are oidc, password, saml, and notSupported.
    #[serde(rename = "supportedSingleSignOnModes")]
    pub supported_single_sign_on_modes: Option<Vec<Option<String>>>,
}
///Possible types of Application
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphApplicationType {
    #[serde(rename = "universal")]
    #[default]
    Universal,
    #[serde(rename = "desktop")]
    Desktop,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppliedConditionalAccessPolicy {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Refers to the name of the conditional access policy (example: 'Require MFA for Salesforce').
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Refers to the grant controls enforced by the conditional access policy (example: 'Require multifactor authentication').
    #[serde(rename = "enforcedGrantControls")]
    pub enforced_grant_controls: Option<Vec<Option<String>>>,
    ///Refers to the session controls enforced by the conditional access policy (example: 'Require app enforced controls').
    #[serde(rename = "enforcedSessionControls")]
    pub enforced_session_controls: Option<Vec<Option<String>>>,
    ///An identifier of the conditional access policy. Supports $filter (eq).
    pub id: Option<String>,
    ///Indicates the result of the CA policy that was triggered. Possible values are: success, failure, notApplied (policy isn't applied because policy conditions weren't met), notEnabled (This is due to the policy in a disabled state), unknown, unknownFutureValue, reportOnlySuccess, reportOnlyFailure, reportOnlyNotApplied, reportOnlyInterrupted. Use the Prefer: include-unknown-enum-members request header to get the following values in this evolvable enum: reportOnlySuccess, reportOnlyFailure, reportOnlyNotApplied, reportOnlyInterrupted.
    pub result: Option<MicrosoftGraphAppliedConditionalAccessPolicyResult>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAppliedConditionalAccessPolicyResult {
    #[serde(rename = "success")]
    #[default]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "notApplied")]
    NotApplied,
    #[serde(rename = "notEnabled")]
    NotEnabled,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "reportOnlySuccess")]
    ReportOnlySuccess,
    #[serde(rename = "reportOnlyFailure")]
    ReportOnlyFailure,
    #[serde(rename = "reportOnlyNotApplied")]
    ReportOnlyNotApplied,
    #[serde(rename = "reportOnlyInterrupted")]
    ReportOnlyInterrupted,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphApproval {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.approval".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of stages in the approval decision.
    pub stages: Option<Vec<MicrosoftGraphApprovalStage>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphApprovalSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///One of SingleStage, Serial, Parallel, NoApproval (default). NoApproval is used when isApprovalRequired is false.
    #[serde(rename = "approvalMode")]
    pub approval_mode: Option<String>,
    ///If approval is required, the one or two elements of this collection define each of the stages of approval. An empty array if no approval is required.
    #[serde(rename = "approvalStages")]
    pub approval_stages: Option<Vec<MicrosoftGraphUnifiedApprovalStage>>,
    ///Indicates whether approval is required for requests in this policy.
    #[serde(rename = "isApprovalRequired")]
    pub is_approval_required: Option<bool>,
    ///Indicates whether approval is required for a user to extend their assignment.
    #[serde(rename = "isApprovalRequiredForExtension")]
    pub is_approval_required_for_extension: Option<bool>,
    ///Indicates whether the requestor is required to supply a justification in their request.
    #[serde(rename = "isRequestorJustificationRequired")]
    pub is_requestor_justification_required: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphApprovalStage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.approvalStage".to_string())]
    pub odata_type: String,
    ///Indicates whether the stage is assigned to the calling user to review. Read-only.
    #[serde(rename = "assignedToMe")]
    pub assigned_to_me: Option<bool>,
    ///The label provided by the policy creator to identify an approval stage. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The justification associated with the approval stage decision.
    pub justification: Option<String>,
    ///The result of this approval record. Possible values include: NotReviewed, Approved, Denied.
    #[serde(rename = "reviewResult")]
    pub review_result: Option<String>,
    ///The identifier of the reviewer. 00000000-0000-0000-0000-000000000000 if the assigned reviewer hasn't reviewed. Read-only.
    #[serde(rename = "reviewedBy")]
    pub reviewed_by: Option<MicrosoftGraphIdentity>,
    ///The date and time when a decision was recorded. The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "reviewedDateTime")]
    pub reviewed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The stage status. Possible values: InProgress, Initializing, Completed, Expired. Read-only.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppsInstallationOptionsForMac {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies whether users can install Microsoft 365 apps on their MAC devices. The default value is true.
    #[serde(rename = "isMicrosoft365AppsEnabled")]
    pub is_microsoft365apps_enabled: Option<bool>,
    ///Specifies whether users can install Skype for Business on their MAC devices running OS X El Capitan 10.11 or later. The default value is true.
    #[serde(rename = "isSkypeForBusinessEnabled")]
    pub is_skype_for_business_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAppsInstallationOptionsForWindows {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies whether users can install Microsoft 365 apps, including Skype for Business, on their Windows devices. The default value is true.
    #[serde(rename = "isMicrosoft365AppsEnabled")]
    pub is_microsoft365apps_enabled: Option<bool>,
    ///Specifies whether users can install Microsoft Project on their Windows devices. The default value is true.
    #[serde(rename = "isProjectEnabled")]
    pub is_project_enabled: Option<bool>,
    ///Specifies whether users can install Skype for Business (standalone) on their Windows devices. The default value is true.
    #[serde(rename = "isSkypeForBusinessEnabled")]
    pub is_skype_for_business_enabled: Option<bool>,
    ///Specifies whether users can install Visio on their Windows devices. The default value is true.
    #[serde(rename = "isVisioEnabled")]
    pub is_visio_enabled: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAppsUpdateChannelType {
    #[serde(rename = "current")]
    #[default]
    Current,
    #[serde(rename = "monthlyEnterprise")]
    MonthlyEnterprise,
    #[serde(rename = "semiAnnual")]
    SemiAnnual,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphArtifactRestoreStatus {
    #[serde(rename = "added")]
    #[default]
    Added,
    #[serde(rename = "scheduling")]
    Scheduling,
    #[serde(rename = "scheduled")]
    Scheduled,
    #[serde(rename = "inProgress")]
    InProgress,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAssignedLabel {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The display name of the label. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier of the label.
    #[serde(rename = "labelId")]
    pub label_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAssignedLicense {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A collection of the unique identifiers for plans that have been disabled. IDs are available in servicePlans > servicePlanId in the tenant's subscribedSkus or serviceStatus > servicePlanId in the tenant's companySubscription.
    #[serde(rename = "disabledPlans")]
    pub disabled_plans: Option<Vec<uuid::Uuid>>,
    ///The unique identifier for the SKU. Corresponds to the skuId from subscribedSkus or companySubscription.
    #[serde(rename = "skuId")]
    pub sku_id: Option<uuid::Uuid>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAssignedPlan {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The date and time at which the plan was assigned. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "assignedDateTime")]
    pub assigned_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Condition of the capability assignment. The possible values are Enabled, Warning, Suspended, Deleted, LockedOut. See a detailed description of each value.
    #[serde(rename = "capabilityStatus")]
    pub capability_status: Option<String>,
    ///The name of the service; for example, exchange.
    pub service: Option<String>,
    ///A GUID that identifies the service plan. For a complete list of GUIDs and their equivalent friendly service names, see Product names and service plan identifiers for licensing.
    #[serde(rename = "servicePlanId")]
    pub service_plan_id: Option<uuid::Uuid>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAssignedTrainingInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Number of users who were assigned the training in an attack simulation and training campaign.
    #[serde(rename = "assignedUserCount")]
    pub assigned_user_count: Option<f64>,
    ///Number of users who completed the training in an attack simulation and training campaign.
    #[serde(rename = "completedUserCount")]
    pub completed_user_count: Option<f64>,
    ///Display name of the training in an attack simulation and training campaign.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAssignmentType {
    #[serde(rename = "required")]
    #[default]
    Required,
    #[serde(rename = "recommended")]
    Recommended,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "peerRecommended")]
    PeerRecommended,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAssociatedTeamInfo {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.associatedTeamInfo".to_string())]
    pub odata_type: String,
    ///The name of the team.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub team: Option<Box<MicrosoftGraphTeam>>,
    ///The ID of the Microsoft Entra tenant.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttachment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.attachment".to_string())]
    pub odata_type: String,
    ///The MIME type.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///true if the attachment is an inline attachment; otherwise, false.
    #[serde(rename = "isInline")]
    pub is_inline: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The attachment's file name.
    pub name: Option<String>,
    ///The length of the attachment in bytes.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttachmentBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.attachmentBase".to_string())]
    pub odata_type: String,
    ///The MIME type.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The display name of the attachment. This doesn't need to be the actual file name.
    pub name: Option<String>,
    ///The length of the attachment in bytes.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttachmentCollectionResponse {
    #[serde(rename = "@odata.count")]
    pub odata_count: Option<i64>,
    #[serde(rename = "@odata.nextLink")]
    pub odata_next_link: Option<String>,
    pub value: Option<Vec<MicrosoftGraphAttachment>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttachmentItem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The type of attachment. Possible values are: file, item, reference. Required.
    #[serde(rename = "attachmentType")]
    pub attachment_type: Option<MicrosoftGraphAttachmentType>,
    ///The CID or Content-Id of the attachment for referencing for the in-line attachments using the <img src='cid:contentId'> tag in HTML messages. Optional.
    #[serde(rename = "contentId")]
    pub content_id: Option<String>,
    ///The nature of the data in the attachment. Optional.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///true if the attachment is an inline attachment; otherwise, false. Optional.
    #[serde(rename = "isInline")]
    pub is_inline: Option<bool>,
    ///The display name of the attachment. This can be a descriptive string and doesn't have to be the actual file name. Required.
    pub name: Option<String>,
    ///The length of the attachment in bytes. Required.
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttachmentSession {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.attachmentSession".to_string())]
    pub odata_type: String,
    ///The content streams that are uploaded.
    pub content: Option<String>,
    ///The date and time in UTC when the upload session will expire. The complete file must be uploaded before this expiration time is reached.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates a single value {start} that represents the location in the file where the next upload should begin.
    #[serde(rename = "nextExpectedRanges")]
    pub next_expected_ranges: Option<Vec<Option<String>>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAttachmentType {
    #[serde(rename = "file")]
    #[default]
    File,
    #[serde(rename = "item")]
    Item,
    #[serde(rename = "reference")]
    Reference,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttackSimulationOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.attackSimulationOperation".to_string())]
    pub odata_type: String,
    ///The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The time of the last action in the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Percentage of completion of the respective operation.
    #[serde(rename = "percentageCompleted")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub percentage_completed: Option<f64>,
    ///URI of the resource that the operation is performed on.
    #[serde(rename = "resourceLocation")]
    pub resource_location: Option<String>,
    ///The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphLongRunningOperationStatus>,
    ///Details about the status of the operation.
    #[serde(rename = "statusDetail")]
    pub status_detail: Option<String>,
    ///Tenant identifier.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    ///The attack simulation operation type. Possible values are: createSimulation, updateSimulation, unknownFutureValue.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphAttackSimulationOperationType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAttackSimulationOperationType {
    #[serde(rename = "createSimualation")]
    #[default]
    CreateSimualation,
    #[serde(rename = "updateSimulation")]
    UpdateSimulation,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttackSimulationRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.attackSimulationRoot".to_string())]
    pub odata_type: String,
    ///Represents an end user's notification for an attack simulation training.
    #[serde(rename = "endUserNotifications")]
    pub end_user_notifications: Option<Vec<MicrosoftGraphEndUserNotification>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents an attack simulation training landing page.
    #[serde(rename = "landingPages")]
    pub landing_pages: Option<Vec<MicrosoftGraphLandingPage>>,
    ///Represents an attack simulation training login page.
    #[serde(rename = "loginPages")]
    pub login_pages: Option<Vec<MicrosoftGraphLoginPage>>,
    ///Represents an attack simulation training operation.
    pub operations: Option<Vec<MicrosoftGraphAttackSimulationOperation>>,
    ///Represents an attack simulation training campaign payload in a tenant.
    pub payloads: Option<Vec<MicrosoftGraphPayload>>,
    ///Represents simulation automation created to run on a tenant.
    #[serde(rename = "simulationAutomations")]
    pub simulation_automations: Option<Vec<MicrosoftGraphSimulationAutomation>>,
    ///Represents an attack simulation training campaign in a tenant.
    pub simulations: Option<Vec<MicrosoftGraphSimulation>>,
    ///Represents details about attack simulation trainings.
    pub trainings: Option<Vec<MicrosoftGraphTraining>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttackSimulationUser {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Display name of the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Email address of the user.
    pub email: Option<String>,
    ///This is the id property value of the user resource that represents the user in the Microsoft Entra tenant.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttendanceInterval {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Duration of the meeting interval in seconds; that is, the difference between joinDateTime and leaveDateTime.
    #[serde(rename = "durationInSeconds")]
    pub duration_in_seconds: Option<f64>,
    ///The time the attendee joined in UTC.
    #[serde(rename = "joinDateTime")]
    pub join_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The time the attendee left in UTC.
    #[serde(rename = "leaveDateTime")]
    pub leave_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttendanceRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.attendanceRecord".to_string())]
    pub odata_type: String,
    ///List of time periods between joining and leaving a meeting.
    #[serde(rename = "attendanceIntervals")]
    pub attendance_intervals: Option<Vec<MicrosoftGraphAttendanceInterval>>,
    ///Email address of the user associated with this attendance record.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<String>,
    ///The external information for a virtualEventRegistration.
    #[serde(rename = "externalRegistrationInformation")]
    pub external_registration_information: Option<
        MicrosoftGraphVirtualEventExternalRegistrationInformation,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the user associated with this attendance record. The specific type is one of the following derived types of identity, depending on the user type: communicationsUserIdentity, azureCommunicationServicesUserIdentity.
    pub identity: Option<MicrosoftGraphIdentity>,
    ///Unique identifier of a virtualEventRegistration that is available to all participants registered for the virtualEventWebinar.
    #[serde(rename = "registrationId")]
    pub registration_id: Option<String>,
    ///Role of the attendee. Possible values are: None, Attendee, Presenter, and Organizer.
    pub role: Option<String>,
    ///Total duration of the attendances in seconds.
    #[serde(rename = "totalAttendanceInSeconds")]
    pub total_attendance_in_seconds: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttendee {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.attendee".to_string())]
    pub odata_type: String,
    ///The recipient's email address.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<MicrosoftGraphEmailAddress>,
    ///An alternate date/time proposed by the attendee for a meeting request to start and end. If the attendee hasn't proposed another time, then this property isn't included in a response of a GET event.
    #[serde(rename = "proposedNewTime")]
    pub proposed_new_time: Option<MicrosoftGraphTimeSlot>,
    ///The attendee's response (none, accepted, declined, etc.) for the event and date-time that the response was sent.
    pub status: Option<MicrosoftGraphResponseStatus>,
    ///The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphAttendeeType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttendeeBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.attendeeBase".to_string())]
    pub odata_type: String,
    ///The recipient's email address.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<MicrosoftGraphEmailAddress>,
    ///The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphAttendeeType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAttendeeType {
    #[serde(rename = "required")]
    #[default]
    Required,
    #[serde(rename = "optional")]
    Optional,
    #[serde(rename = "resource")]
    Resource,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAttestationLevel {
    #[serde(rename = "attested")]
    #[default]
    Attested,
    #[serde(rename = "notAttested")]
    NotAttested,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttributeDefinition {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///true if the attribute should be used as the anchor for the object. Anchor attributes must have a unique value identifying an object, and must be immutable. Default is false. One, and only one, of the object's attributes must be designated as the anchor to support synchronization.
    pub anchor: Option<bool>,
    #[serde(rename = "apiExpressions")]
    pub api_expressions: Option<Vec<MicrosoftGraphStringKeyStringValuePair>>,
    ///true if value of this attribute should be treated as case-sensitive. This setting affects how the synchronization engine detects changes for the attribute.
    #[serde(rename = "caseExact")]
    pub case_exact: Option<bool>,
    ///The default value of the attribute.
    #[serde(rename = "defaultValue")]
    pub default_value: Option<String>,
    ///'true' to allow null values for attributes.
    #[serde(rename = "flowNullValues")]
    pub flow_null_values: Option<bool>,
    ///Metadata for the given object.
    pub metadata: Option<Vec<MicrosoftGraphAttributeDefinitionMetadataEntry>>,
    ///true if an attribute can have multiple values. Default is false.
    pub multivalued: Option<bool>,
    pub mutability: Option<MicrosoftGraphMutability>,
    ///Name of the attribute. Must be unique within the object definition. Not nullable.
    pub name: Option<String>,
    ///For attributes with reference type, lists referenced objects (for example, the manager attribute would list User as the referenced object).
    #[serde(rename = "referencedObjects")]
    pub referenced_objects: Option<Vec<MicrosoftGraphReferencedObject>>,
    ///true if attribute is required. Object can not be created if any of the required attributes are missing. If during synchronization, the required attribute has no value, the default value will be used. If default the value was not set, synchronization will record an error.
    pub required: Option<bool>,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphAttributeType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAttributeDefinitionMetadata {
    #[serde(rename = "BaseAttributeName")]
    #[default]
    BaseAttributeName,
    #[serde(rename = "ComplexObjectDefinition")]
    ComplexObjectDefinition,
    #[serde(rename = "IsContainer")]
    IsContainer,
    #[serde(rename = "IsCustomerDefined")]
    IsCustomerDefined,
    #[serde(rename = "IsDomainQualified")]
    IsDomainQualified,
    #[serde(rename = "LinkPropertyNames")]
    LinkPropertyNames,
    #[serde(rename = "LinkTypeName")]
    LinkTypeName,
    #[serde(rename = "MaximumLength")]
    MaximumLength,
    #[serde(rename = "ReferencedProperty")]
    ReferencedProperty,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttributeDefinitionMetadataEntry {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Possible values are: BaseAttributeName, ComplexObjectDefinition, IsContainer, IsCustomerDefined, IsDomainQualified, LinkPropertyNames, LinkTypeName, MaximumLength, ReferencedProperty.
    pub key: Option<MicrosoftGraphAttributeDefinitionMetadata>,
    ///Value of the metadata property.
    pub value: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAttributeFlowBehavior {
    #[serde(rename = "FlowWhenChanged")]
    #[default]
    FlowWhenChanged,
    #[serde(rename = "FlowAlways")]
    FlowAlways,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAttributeFlowType {
    #[serde(rename = "Always")]
    #[default]
    Always,
    #[serde(rename = "ObjectAddOnly")]
    ObjectAddOnly,
    #[serde(rename = "MultiValueAddOnly")]
    MultiValueAddOnly,
    #[serde(rename = "ValueAddOnly")]
    ValueAddOnly,
    #[serde(rename = "AttributeAddOnly")]
    AttributeAddOnly,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttributeMapping {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Default value to be used in case the source property was evaluated to null. Optional.
    #[serde(rename = "defaultValue")]
    pub default_value: Option<String>,
    ///For internal use only.
    #[serde(rename = "exportMissingReferences")]
    pub export_missing_references: Option<bool>,
    #[serde(rename = "flowBehavior")]
    pub flow_behavior: Option<MicrosoftGraphAttributeFlowBehavior>,
    #[serde(rename = "flowType")]
    pub flow_type: Option<MicrosoftGraphAttributeFlowType>,
    ///If higher than 0, this attribute will be used to perform an initial match of the objects between source and target directories. The synchronization engine will try to find the matching object using attribute with lowest value of matching priority first. If not found, the attribute with the next matching priority will be used, and so on a until match is found or no more matching attributes are left. Only attributes that are expected to have unique values, such as email, should be used as matching attributes.
    #[serde(rename = "matchingPriority")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub matching_priority: Option<f64>,
    ///Defines how a value should be extracted (or transformed) from the source object.
    pub source: Option<Box<MicrosoftGraphAttributeMappingSource>>,
    ///Name of the attribute on the target object.
    #[serde(rename = "targetAttributeName")]
    pub target_attribute_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttributeMappingFunctionSchema {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.attributeMappingFunctionSchema".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Collection of function parameters.
    pub parameters: Option<Vec<MicrosoftGraphAttributeMappingParameterSchema>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttributeMappingParameterSchema {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The given parameter can be provided multiple times (for example, multiple input strings in the Concatenate(string,string,...) function).
    #[serde(rename = "allowMultipleOccurrences")]
    pub allow_multiple_occurrences: Option<bool>,
    ///Parameter name.
    pub name: Option<String>,
    ///true if the parameter is required; otherwise false.
    pub required: Option<bool>,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphAttributeType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttributeMappingSource {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Equivalent expression representation of this attributeMappingSource object.
    pub expression: Option<String>,
    ///Name parameter of the mapping source. Depending on the type property value, this can be the name of the function, the name of the source attribute, or a constant value to be used.
    pub name: Option<String>,
    ///If this object represents a function, lists function parameters. Parameters consist of attributeMappingSource objects themselves, allowing for complex expressions. If type isn't Function, this property is null/empty array.
    pub parameters: Option<Vec<MicrosoftGraphStringKeyAttributeMappingSourceValuePair>>,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphAttributeMappingSourceType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAttributeMappingSourceType {
    #[serde(rename = "Attribute")]
    #[default]
    Attribute,
    #[serde(rename = "Constant")]
    Constant,
    #[serde(rename = "Function")]
    Function,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttributeRuleMembers {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.attributeRuleMembers".to_string())]
    pub odata_type: String,
    ///A description of the membership rule.
    pub description: Option<String>,
    ///Determines the allowed target users for this policy. For more information about the syntax of the membership rule, see Membership Rules syntax.
    #[serde(rename = "membershipRule")]
    pub membership_rule: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAttributeSet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.attributeSet".to_string())]
    pub odata_type: String,
    ///Description of the attribute set. Can be up to 128 characters long and include Unicode characters. Can be changed later.
    pub description: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Maximum number of custom security attributes that can be defined in this attribute set. Default value is null. If not specified, the administrator can add up to the maximum of 500 active attributes per tenant. Can be changed later.
    #[serde(rename = "maxAttributesPerSet")]
    pub max_attributes_per_set: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAttributeType {
    #[serde(rename = "String")]
    #[default]
    String,
    #[serde(rename = "Integer")]
    Integer,
    #[serde(rename = "Reference")]
    Reference,
    #[serde(rename = "Binary")]
    Binary,
    #[serde(rename = "Boolean")]
    Boolean,
    #[serde(rename = "DateTime")]
    DateTime,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAudio {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The title of the album for this audio file.
    pub album: Option<String>,
    ///The artist named on the album for the audio file.
    #[serde(rename = "albumArtist")]
    pub album_artist: Option<String>,
    ///The performing artist for the audio file.
    pub artist: Option<String>,
    ///Bitrate expressed in kbps.
    pub bitrate: Option<f64>,
    ///The name of the composer of the audio file.
    pub composers: Option<String>,
    ///Copyright information for the audio file.
    pub copyright: Option<String>,
    ///The number of the disc this audio file came from.
    pub disc: Option<f64>,
    ///The total number of discs in this album.
    #[serde(rename = "discCount")]
    pub disc_count: Option<f64>,
    ///Duration of the audio file, expressed in milliseconds
    pub duration: Option<f64>,
    ///The genre of this audio file.
    pub genre: Option<String>,
    ///Indicates if the file is protected with digital rights management.
    #[serde(rename = "hasDrm")]
    pub has_drm: Option<bool>,
    ///Indicates if the file is encoded with a variable bitrate.
    #[serde(rename = "isVariableBitrate")]
    pub is_variable_bitrate: Option<bool>,
    ///The title of the audio file.
    pub title: Option<String>,
    ///The number of the track on the original disc for this audio file.
    pub track: Option<f64>,
    ///The total number of tracks on the original disc for this audio file.
    #[serde(rename = "trackCount")]
    pub track_count: Option<f64>,
    ///The year the audio file was recorded.
    pub year: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAudioConferencing {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The conference id of the online meeting.
    #[serde(rename = "conferenceId")]
    pub conference_id: Option<String>,
    ///A URL to the externally-accessible web page that contains dial-in information.
    #[serde(rename = "dialinUrl")]
    pub dialin_url: Option<String>,
    ///The toll-free number that connects to the Audio Conference Provider.
    #[serde(rename = "tollFreeNumber")]
    pub toll_free_number: Option<String>,
    ///List of toll-free numbers that are displayed in the meeting invite.
    #[serde(rename = "tollFreeNumbers")]
    pub toll_free_numbers: Option<Vec<Option<String>>>,
    ///The toll number that connects to the Audio Conference Provider.
    #[serde(rename = "tollNumber")]
    pub toll_number: Option<String>,
    ///List of toll numbers that are displayed in the meeting invite.
    #[serde(rename = "tollNumbers")]
    pub toll_numbers: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAudioRoutingGroup {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.audioRoutingGroup".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///List of receiving participant ids.
    pub receivers: Option<Vec<Option<String>>>,
    #[serde(rename = "routingMode")]
    pub routing_mode: Option<MicrosoftGraphRoutingMode>,
    ///List of source participant ids.
    pub sources: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuditActivityInitiator {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If the resource initiating the activity is an app, this property indicates all the app related information like appId and name.
    pub app: Option<MicrosoftGraphAppIdentity>,
    ///If the resource initiating the activity is a user, this property Indicates all the user related information like user ID and userPrincipalName.
    pub user: Option<MicrosoftGraphUserIdentity>,
}
///A class containing the properties for Audit Actor.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuditActor {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Name of the Application.
    #[serde(rename = "applicationDisplayName")]
    pub application_display_name: Option<String>,
    ///AAD Application Id.
    #[serde(rename = "applicationId")]
    pub application_id: Option<String>,
    ///Actor Type.
    #[serde(rename = "auditActorType")]
    pub audit_actor_type: Option<String>,
    ///IPAddress.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///Service Principal Name (SPN).
    #[serde(rename = "servicePrincipalName")]
    pub service_principal_name: Option<String>,
    ///User Id.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///List of user permissions when the audit was performed.
    #[serde(rename = "userPermissions")]
    pub user_permissions: Option<Vec<Option<String>>>,
    ///User Principal Name (UPN).
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuditEvent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.auditEvent".to_string())]
    pub odata_type: String,
    ///Friendly name of the activity.
    pub activity: Option<String>,
    ///The date time in UTC when the activity was performed.
    #[serde(rename = "activityDateTime")]
    pub activity_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The HTTP operation type of the activity.
    #[serde(rename = "activityOperationType")]
    pub activity_operation_type: Option<String>,
    ///The result of the activity.
    #[serde(rename = "activityResult")]
    pub activity_result: Option<String>,
    ///The type of activity that was being performed.
    #[serde(rename = "activityType")]
    pub activity_type: Option<String>,
    ///AAD user and application that are associated with the audit event.
    pub actor: Option<MicrosoftGraphAuditActor>,
    ///Audit category.
    pub category: Option<String>,
    ///Component name.
    #[serde(rename = "componentName")]
    pub component_name: Option<String>,
    ///The client request Id that is used to correlate activity within the system.
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<uuid::Uuid>,
    ///Event display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Resources being modified.
    pub resources: Option<Vec<MicrosoftGraphAuditResource>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuditLogRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.auditLogRoot".to_string())]
    pub odata_type: String,
    #[serde(rename = "directoryAudits")]
    pub directory_audits: Option<Vec<MicrosoftGraphDirectoryAudit>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub provisioning: Option<Vec<MicrosoftGraphProvisioningObjectSummary>>,
    #[serde(rename = "signIns")]
    pub sign_ins: Option<Vec<MicrosoftGraphSignIn>>,
}
///A class containing the properties for Audit Property.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuditProperty {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///New value.
    #[serde(rename = "newValue")]
    pub new_value: Option<String>,
    ///Old value.
    #[serde(rename = "oldValue")]
    pub old_value: Option<String>,
}
///A class containing the properties for Audit Resource.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuditResource {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Audit resource's type.
    #[serde(rename = "auditResourceType")]
    pub audit_resource_type: Option<String>,
    ///Display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///List of modified properties.
    #[serde(rename = "modifiedProperties")]
    pub modified_properties: Option<Vec<MicrosoftGraphAuditProperty>>,
    ///Audit resource's Id.
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthentication {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authentication".to_string())]
    pub odata_type: String,
    ///The email address registered to a user for authentication.
    #[serde(rename = "emailMethods")]
    pub email_methods: Option<Vec<MicrosoftGraphEmailAuthenticationMethod>>,
    ///Represents the FIDO2 security keys registered to a user for authentication.
    #[serde(rename = "fido2Methods")]
    pub fido2methods: Option<Vec<MicrosoftGraphFido2AuthenticationMethod>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents all authentication methods registered to a user.
    pub methods: Option<Vec<MicrosoftGraphAuthenticationMethod>>,
    ///The details of the Microsoft Authenticator app registered to a user for authentication.
    #[serde(rename = "microsoftAuthenticatorMethods")]
    pub microsoft_authenticator_methods: Option<
        Vec<MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod>,
    >,
    ///Represents the status of a long-running operation, such as a password reset operation.
    pub operations: Option<Vec<MicrosoftGraphLongRunningOperation>>,
    ///Represents the password registered to a user for authentication. For security, the password itself is never returned in the object, but action can be taken to reset a password.
    #[serde(rename = "passwordMethods")]
    pub password_methods: Option<Vec<MicrosoftGraphPasswordAuthenticationMethod>>,
    ///The phone numbers registered to a user for authentication.
    #[serde(rename = "phoneMethods")]
    pub phone_methods: Option<Vec<MicrosoftGraphPhoneAuthenticationMethod>>,
    ///Represents a platform credential instance registered to a user on Mac OS.
    #[serde(rename = "platformCredentialMethods")]
    pub platform_credential_methods: Option<
        Vec<MicrosoftGraphPlatformCredentialAuthenticationMethod>,
    >,
    ///The software OATH time-based one-time password (TOTP) applications registered to a user for authentication.
    #[serde(rename = "softwareOathMethods")]
    pub software_oath_methods: Option<
        Vec<MicrosoftGraphSoftwareOathAuthenticationMethod>,
    >,
    ///Represents a Temporary Access Pass registered to a user for authentication through time-limited passcodes.
    #[serde(rename = "temporaryAccessPassMethods")]
    pub temporary_access_pass_methods: Option<
        Vec<MicrosoftGraphTemporaryAccessPassAuthenticationMethod>,
    >,
    ///Represents the Windows Hello for Business authentication method registered to a user for authentication.
    #[serde(rename = "windowsHelloForBusinessMethods")]
    pub windows_hello_for_business_methods: Option<
        Vec<MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationAttributeCollectionInputConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The built-in or custom attribute for which a value is being collected.
    pub attribute: Option<String>,
    ///The default value of the attribute displayed to the end user. The capability to set the default value isn't available through the Microsoft Entra admin center.
    #[serde(rename = "defaultValue")]
    pub default_value: Option<String>,
    ///Defines whether the attribute is editable by the end user.
    pub editable: Option<bool>,
    ///Defines whether the attribute is displayed to the end user. The capability to hide isn't available through the Microsoft Entra admin center.
    pub hidden: Option<bool>,
    #[serde(rename = "inputType")]
    pub input_type: Option<MicrosoftGraphAuthenticationAttributeCollectionInputType>,
    ///The label of the attribute field that's displayed to end user, unless overridden.
    pub label: Option<String>,
    ///The option values for certain multiple-option input types.
    pub options: Option<
        Vec<MicrosoftGraphAuthenticationAttributeCollectionOptionConfiguration>,
    >,
    ///Defines whether the field is required.
    pub required: Option<bool>,
    ///The regex for the value of the field. For more information about the supported regexes, see validationRegEx values for inputType objects. To understand how to specify regexes, see the Regular expressions cheat sheet.
    #[serde(rename = "validationRegEx")]
    pub validation_reg_ex: Option<String>,
    ///Defines whether Microsoft Entra ID stores the value that it collects.
    #[serde(rename = "writeToDirectory")]
    pub write_to_directory: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationAttributeCollectionInputType {
    #[serde(rename = "text")]
    #[default]
    Text,
    #[serde(rename = "radioSingleSelect")]
    RadioSingleSelect,
    #[serde(rename = "checkboxMultiSelect")]
    CheckboxMultiSelect,
    #[serde(rename = "boolean")]
    Boolean,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationAttributeCollectionOptionConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The label of the option that will be displayed to user, unless overridden.
    pub label: Option<String>,
    ///The value of the option that will be stored.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationAttributeCollectionPage {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A collection of displays of the attribute collection page.
    pub views: Option<
        Vec<MicrosoftGraphAuthenticationAttributeCollectionPageViewConfiguration>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationAttributeCollectionPageViewConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The description of the page.
    pub description: Option<String>,
    ///The display configuration of attributes being collected on the attribute collection page. You must specify all attributes that you want to retain, otherwise they're removed from the user flow.
    pub inputs: Option<
        Vec<MicrosoftGraphAuthenticationAttributeCollectionInputConfiguration>,
    >,
    ///The title of the attribute collection page.
    pub title: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationBehaviors {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "blockAzureADGraphAccess")]
    pub block_azure_adgraph_access: Option<bool>,
    #[serde(rename = "removeUnverifiedEmailClaim")]
    pub remove_unverified_email_claim: Option<bool>,
    #[serde(rename = "requireClientServicePrincipal")]
    pub require_client_service_principal: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationCombinationConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationCombinationConfiguration".to_string())]
    pub odata_type: String,
    ///Which authentication method combinations this configuration applies to. Must be an allowedCombinations object, part of the authenticationStrengthPolicy. The only possible value for fido2combinationConfigurations is 'fido2'.
    #[serde(rename = "appliesToCombinations")]
    pub applies_to_combinations: Option<Vec<MicrosoftGraphAuthenticationMethodModes>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationConditionApplication {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The identifier for an application corresponding to a condition which will trigger an authenticationEventListener.
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationConditions {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Applications which trigger a custom authentication extension.
    pub applications: Option<MicrosoftGraphAuthenticationConditionsApplications>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationConditionsApplications {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "includeApplications")]
    pub include_applications: Option<
        Vec<MicrosoftGraphAuthenticationConditionApplication>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationContextClassReference {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationContextClassReference".to_string())]
    pub odata_type: String,
    ///A short explanation of the policies that are enforced by authenticationContextClassReference. This value should be used to provide secondary text to describe the authentication context class reference when building user-facing admin experiences. For example, a selection UX.
    pub description: Option<String>,
    ///The display name is the friendly name of the authenticationContextClassReference object. This value should be used to identify the authentication context class reference when building user-facing admin experiences. For example, a selection UX.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the authenticationContextClassReference has been published by the security admin and is ready for use by apps. When it's set to false, it shouldn't be shown in authentication context selection UX, or used to protect app resources. It's shown and available for Conditional Access policy authoring. The default value is false.  Supports $filter (eq).
    #[serde(rename = "isAvailable")]
    pub is_available: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationEventListener {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationEventListener".to_string())]
    pub odata_type: String,
    ///The identifier of the authenticationEventsFlow object.
    #[serde(rename = "authenticationEventsFlowId")]
    pub authentication_events_flow_id: Option<String>,
    ///The conditions on which this authenticationEventListener should trigger.
    pub conditions: Option<MicrosoftGraphAuthenticationConditions>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationEventsFlow {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationEventsFlow".to_string())]
    pub odata_type: String,
    ///The conditions representing the context of the authentication request that's used to decide whether the events policy is invoked.  Supports $filter (eq). See support for filtering on user flows for syntax information.
    pub conditions: Option<MicrosoftGraphAuthenticationConditions>,
    ///The description of the events policy.
    pub description: Option<String>,
    ///Required. The display name for the events policy.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationFlowsPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationFlowsPolicy".to_string())]
    pub odata_type: String,
    ///Inherited property. A description of the policy. Optional. Read-only.
    pub description: Option<String>,
    ///Inherited property. The human-readable name of the policy. Optional. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Contains selfServiceSignUpAuthenticationFlowConfiguration settings that convey whether self-service sign-up is enabled or disabled. Optional. Read-only.
    #[serde(rename = "selfServiceSignUp")]
    pub self_service_sign_up: Option<
        MicrosoftGraphSelfServiceSignUpAuthenticationFlowConfiguration,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationMethod {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationMethod".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationMethodConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationMethodConfiguration".to_string())]
    pub odata_type: String,
    ///Groups of users that are excluded from a policy.
    #[serde(rename = "excludeTargets")]
    pub exclude_targets: Option<Vec<MicrosoftGraphExcludeTarget>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The state of the policy. Possible values are: enabled, disabled.
    pub state: Option<MicrosoftGraphAuthenticationMethodState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationMethodFeatureConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A single entity that is excluded from this feature.
    #[serde(rename = "excludeTarget")]
    pub exclude_target: Option<MicrosoftGraphFeatureTarget>,
    ///A single entity that is included in this feature.
    #[serde(rename = "includeTarget")]
    pub include_target: Option<MicrosoftGraphFeatureTarget>,
    ///Enable or disable the feature. Possible values are: default, enabled, disabled, unknownFutureValue. The default value is used when the configuration hasn't been explicitly set and uses the default behavior of Microsoft Entra ID for the setting. The default value is disabled.
    pub state: Option<MicrosoftGraphAdvancedConfigState>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationMethodKeyStrength {
    #[serde(rename = "normal")]
    #[default]
    Normal,
    #[serde(rename = "weak")]
    Weak,
    #[serde(rename = "unknown")]
    Unknown,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationMethodModeDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationMethodModeDetail".to_string())]
    pub odata_type: String,
    #[serde(rename = "authenticationMethod")]
    pub authentication_method: Option<MicrosoftGraphBaseAuthenticationMethod>,
    ///The display name of this mode
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationMethodModes {
    #[serde(rename = "password")]
    #[default]
    Password,
    #[serde(rename = "voice")]
    Voice,
    #[serde(rename = "hardwareOath")]
    HardwareOath,
    #[serde(rename = "softwareOath")]
    SoftwareOath,
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "fido2")]
    Fido2,
    #[serde(rename = "windowsHelloForBusiness")]
    WindowsHelloForBusiness,
    #[serde(rename = "microsoftAuthenticatorPush")]
    MicrosoftAuthenticatorPush,
    #[serde(rename = "deviceBasedPush")]
    DeviceBasedPush,
    #[serde(rename = "temporaryAccessPassOneTime")]
    TemporaryAccessPassOneTime,
    #[serde(rename = "temporaryAccessPassMultiUse")]
    TemporaryAccessPassMultiUse,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "x509CertificateSingleFactor")]
    X509CertificateSingleFactor,
    #[serde(rename = "x509CertificateMultiFactor")]
    X509CertificateMultiFactor,
    #[serde(rename = "federatedSingleFactor")]
    FederatedSingleFactor,
    #[serde(rename = "federatedMultiFactor")]
    FederatedMultiFactor,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationMethodPlatform {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "windows")]
    Windows,
    #[serde(rename = "macOS")]
    MacOs,
    #[serde(rename = "iOS")]
    IOs,
    #[serde(rename = "android")]
    Android,
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationMethodSignInState {
    #[serde(rename = "notSupported")]
    #[default]
    NotSupported,
    #[serde(rename = "notAllowedByPolicy")]
    NotAllowedByPolicy,
    #[serde(rename = "notEnabled")]
    NotEnabled,
    #[serde(rename = "phoneNumberNotUnique")]
    PhoneNumberNotUnique,
    #[serde(rename = "ready")]
    Ready,
    #[serde(rename = "notConfigured")]
    NotConfigured,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationMethodState {
    #[serde(rename = "enabled")]
    #[default]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationMethodTarget {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationMethodTarget".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines if the user is enforced to register the authentication method.
    #[serde(rename = "isRegistrationRequired")]
    pub is_registration_required: Option<bool>,
    #[serde(rename = "targetType")]
    pub target_type: Option<MicrosoftGraphAuthenticationMethodTargetType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationMethodTargetType {
    #[serde(rename = "user")]
    #[default]
    User,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationMethodsPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationMethodsPolicy".to_string())]
    pub odata_type: String,
    ///Represents the settings for each authentication method. Automatically expanded on GET /policies/authenticationMethodsPolicy.
    #[serde(rename = "authenticationMethodConfigurations")]
    pub authentication_method_configurations: Option<
        Vec<MicrosoftGraphAuthenticationMethodConfiguration>,
    >,
    ///A description of the policy. Read-only.
    pub description: Option<String>,
    ///The name of the policy. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time of the last update to the policy. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The state of migration of the authentication methods policy from the legacy multifactor authentication and self-service password reset (SSPR) policies. The possible values are: premigration - means the authentication methods policy is used for authentication only, legacy policies are respected. migrationInProgress - means the authentication methods policy is used for both authentication and SSPR, legacy policies are respected. migrationComplete - means the authentication methods policy is used for authentication and SSPR, legacy policies are ignored. unknownFutureValue - Evolvable enumeration sentinel value. Do not use.
    #[serde(rename = "policyMigrationState")]
    pub policy_migration_state: Option<
        MicrosoftGraphAuthenticationMethodsPolicyMigrationState,
    >,
    ///The version of the policy in use. Read-only.
    #[serde(rename = "policyVersion")]
    pub policy_version: Option<String>,
    #[serde(rename = "reconfirmationInDays")]
    pub reconfirmation_in_days: Option<f64>,
    ///Enforce registration at sign-in time. This property can be used to remind users to set up targeted authentication methods.
    #[serde(rename = "registrationEnforcement")]
    pub registration_enforcement: Option<MicrosoftGraphRegistrationEnforcement>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationMethodsPolicyMigrationState {
    #[serde(rename = "preMigration")]
    #[default]
    PreMigration,
    #[serde(rename = "migrationInProgress")]
    MigrationInProgress,
    #[serde(rename = "migrationComplete")]
    MigrationComplete,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationMethodsRegistrationCampaign {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Users and groups of users that are excluded from being prompted to set up the authentication method.
    #[serde(rename = "excludeTargets")]
    pub exclude_targets: Option<Vec<MicrosoftGraphExcludeTarget>>,
    ///Users and groups of users that are prompted to set up the authentication method.
    #[serde(rename = "includeTargets")]
    pub include_targets: Option<
        Vec<MicrosoftGraphAuthenticationMethodsRegistrationCampaignIncludeTarget>,
    >,
    ///Specifies the number of days that the user sees a prompt again if they select 'Not now' and snoozes the prompt. Minimum: 0 days. Maximum: 14 days. If the value is '0', the user is prompted during every MFA attempt.
    #[serde(rename = "snoozeDurationInDays")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub snooze_duration_in_days: Option<f64>,
    pub state: Option<MicrosoftGraphAdvancedConfigState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationMethodsRegistrationCampaignIncludeTarget {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The object identifier of a Microsoft Entra user or group.
    pub id: Option<String>,
    #[serde(rename = "targetType")]
    pub target_type: Option<MicrosoftGraphAuthenticationMethodTargetType>,
    ///The authentication method that the user is prompted to register. The value must be microsoftAuthenticator.
    #[serde(rename = "targetedAuthenticationMethod")]
    pub targeted_authentication_method: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationMethodsRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationMethodsRoot".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the state of a user's authentication methods, including which methods are registered and which features the user is registered and capable of (such as multifactor authentication, self-service password reset, and passwordless authentication).
    #[serde(rename = "userRegistrationDetails")]
    pub user_registration_details: Option<Vec<MicrosoftGraphUserRegistrationDetails>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationPhoneType {
    #[serde(rename = "mobile")]
    #[default]
    Mobile,
    #[serde(rename = "alternateMobile")]
    AlternateMobile,
    #[serde(rename = "office")]
    Office,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationProtocol {
    #[serde(rename = "wsFed")]
    #[default]
    WsFed,
    #[serde(rename = "saml")]
    Saml,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationStrengthPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationStrengthPolicy".to_string())]
    pub odata_type: String,
    ///A collection of authentication method modes that are required be used to satify this authentication strength.
    #[serde(rename = "allowedCombinations")]
    pub allowed_combinations: Option<Vec<MicrosoftGraphAuthenticationMethodModes>>,
    ///Settings that may be used to require specific types or instances of an authentication method to be used when authenticating with a specified combination of authentication methods.
    #[serde(rename = "combinationConfigurations")]
    pub combination_configurations: Option<
        Vec<MicrosoftGraphAuthenticationCombinationConfiguration>,
    >,
    ///The datetime when this policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The human-readable description of this policy.
    pub description: Option<String>,
    ///The human-readable display name of this policy. Supports $filter (eq, ne, not , and in).
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The datetime when this policy was last modified.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "policyType")]
    pub policy_type: Option<MicrosoftGraphAuthenticationStrengthPolicyType>,
    #[serde(rename = "requirementsSatisfied")]
    pub requirements_satisfied: Option<MicrosoftGraphAuthenticationStrengthRequirements>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationStrengthPolicyType {
    #[serde(rename = "builtIn")]
    #[default]
    BuiltIn,
    #[serde(rename = "custom")]
    Custom,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAuthenticationStrengthRequirements {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "mfa")]
    Mfa,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthenticationStrengthRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authenticationStrengthRoot".to_string())]
    pub odata_type: String,
    ///Names and descriptions of all valid authentication method modes in the system.
    #[serde(rename = "authenticationMethodModes")]
    pub authentication_method_modes: Option<
        Vec<MicrosoftGraphAuthenticationMethodModeDetail>,
    >,
    pub combinations: Option<Vec<MicrosoftGraphAuthenticationMethodModes>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of authentication strength policies that exist for this tenant, including both built-in and custom policies.
    pub policies: Option<Vec<MicrosoftGraphAuthenticationStrengthPolicy>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthoredNote {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authoredNote".to_string())]
    pub odata_type: String,
    ///Identity information about the note's author.
    pub author: Option<MicrosoftGraphIdentity>,
    ///The content of the note.
    pub content: Option<MicrosoftGraphItemBody>,
    ///The date and time when the entity was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthorizationInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "certificateUserIds")]
    pub certificate_user_ids: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAuthorizationPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.authorizationPolicy".to_string())]
    pub odata_type: String,
    ///Indicates whether a user can join the tenant by email validation.
    #[serde(rename = "allowEmailVerifiedUsersToJoinOrganization")]
    pub allow_email_verified_users_to_join_organization: Option<bool>,
    ///Indicates who can invite guests to the organization. Possible values are: none, adminsAndGuestInviters, adminsGuestInvitersAndAllMembers, everyone.  everyone is the default setting for all cloud environments except US Government. For more information, see allowInvitesFrom values.
    #[serde(rename = "allowInvitesFrom")]
    pub allow_invites_from: Option<MicrosoftGraphAllowInvitesFrom>,
    ///Indicates whether user consent for risky apps is allowed. We recommend keeping allowUserConsentForRiskyApps as false. Default value is false.
    #[serde(rename = "allowUserConsentForRiskyApps")]
    pub allow_user_consent_for_risky_apps: Option<bool>,
    ///Indicates whether users can sign up for email based subscriptions.
    #[serde(rename = "allowedToSignUpEmailBasedSubscriptions")]
    pub allowed_to_sign_up_email_based_subscriptions: Option<bool>,
    ///Indicates whether administrators of the tenant can use the Self-Service Password Reset (SSPR). For more information, see Self-service password reset for administrators.
    #[serde(rename = "allowedToUseSSPR")]
    pub allowed_to_use_sspr: Option<bool>,
    ///To disable the use of MSOL PowerShell, set this property to true. This also disables user-based access to the legacy service endpoint used by MSOL PowerShell. This doesn't affect Microsoft Entra Connect or Microsoft Graph.
    #[serde(rename = "blockMsolPowerShell")]
    pub block_msol_power_shell: Option<bool>,
    #[serde(rename = "defaultUserRolePermissions")]
    pub default_user_role_permissions: Option<MicrosoftGraphDefaultUserRolePermissions>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Represents role templateId for the role that should be granted to guests. Currently following roles are supported:  User (a0b1b346-4d3e-4e8b-98f8-753987be4970), Guest User (10dae51f-b6af-4016-8d66-8c2a99b929b3), and Restricted Guest User (2af84b1e-32c8-42b7-82bc-daa82404023b).
    #[serde(rename = "guestUserRoleId")]
    pub guest_user_role_id: Option<uuid::Uuid>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
///Auto restart required notification dismissal method
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAutoRestartNotificationDismissalMethod {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "automatic")]
    Automatic,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAutomaticRepliesSetting {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The set of audience external to the signed-in user's organization who will receive the ExternalReplyMessage, if Status is AlwaysEnabled or Scheduled. The possible values are: none, contactsOnly, all.
    #[serde(rename = "externalAudience")]
    pub external_audience: Option<MicrosoftGraphExternalAudienceScope>,
    ///The automatic reply to send to the specified external audience, if Status is AlwaysEnabled or Scheduled.
    #[serde(rename = "externalReplyMessage")]
    pub external_reply_message: Option<String>,
    ///The automatic reply to send to the audience internal to the signed-in user's organization, if Status is AlwaysEnabled or Scheduled.
    #[serde(rename = "internalReplyMessage")]
    pub internal_reply_message: Option<String>,
    ///The date and time that automatic replies are set to end, if Status is set to Scheduled.
    #[serde(rename = "scheduledEndDateTime")]
    pub scheduled_end_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The date and time that automatic replies are set to begin, if Status is set to Scheduled.
    #[serde(rename = "scheduledStartDateTime")]
    pub scheduled_start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///Configurations status for automatic replies. The possible values are: disabled, alwaysEnabled, scheduled.
    pub status: Option<MicrosoftGraphAutomaticRepliesStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAutomaticRepliesStatus {
    #[serde(rename = "disabled")]
    #[default]
    Disabled,
    #[serde(rename = "alwaysEnabled")]
    AlwaysEnabled,
    #[serde(rename = "scheduled")]
    Scheduled,
}
///Possible values for automatic update mode.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAutomaticUpdateMode {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "notifyDownload")]
    NotifyDownload,
    #[serde(rename = "autoInstallAtMaintenanceTime")]
    AutoInstallAtMaintenanceTime,
    #[serde(rename = "autoInstallAndRebootAtMaintenanceTime")]
    AutoInstallAndRebootAtMaintenanceTime,
    #[serde(rename = "autoInstallAndRebootAtScheduledTime")]
    AutoInstallAndRebootAtScheduledTime,
    #[serde(rename = "autoInstallAndRebootWithoutEndUserControl")]
    AutoInstallAndRebootWithoutEndUserControl,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAverageComparativeScore {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Average score within specified basis.
    #[serde(rename = "averageScore")]
    pub average_score: Option<MicrosoftGraphAverageComparativeScoreAverageScore>,
    ///Scope type. The possible values are: AllTenants, TotalSeats, IndustryTypes.
    pub basis: Option<String>,
}
///Average score within specified basis.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphAverageComparativeScoreAverageScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAzureActiveDirectoryTenant {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.azureActiveDirectoryTenant".to_string())]
    pub odata_type: String,
    ///The name of the Microsoft Entra tenant. Read only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The ID of the Microsoft Entra tenant. Read only.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAzureAdPopTokenAuthentication {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.azureAdPopTokenAuthentication".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAzureAdTokenAuthentication {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.azureAdTokenAuthentication".to_string())]
    pub odata_type: String,
    ///The appID of the Microsoft Entra application to use to authenticate an app with a custom extension.
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAzureAdjoinPolicy {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "allowedToJoin")]
    pub allowed_to_join: Option<MicrosoftGraphDeviceRegistrationMembership>,
    #[serde(rename = "isAdminConfigurable")]
    pub is_admin_configurable: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAzureAdregistrationPolicy {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "allowedToRegister")]
    pub allowed_to_register: Option<MicrosoftGraphDeviceRegistrationMembership>,
    #[serde(rename = "isAdminConfigurable")]
    pub is_admin_configurable: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAzureCommunicationServicesUserConversationMember {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.azureCommunicationServicesUserConversationMember".to_string()
    )]
    pub odata_type: String,
    ///Azure Communication Services ID of the user.
    #[serde(rename = "azureCommunicationServicesId")]
    pub azure_communication_services_id: Option<String>,
    ///The display name of the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The roles for that user. This property contains more qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member shouldn't have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role.
    pub roles: Option<Vec<Option<String>>>,
    ///The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.
    #[serde(rename = "visibleHistoryStartDateTime")]
    pub visible_history_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphAzureCommunicationServicesUserIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.azureCommunicationServicesUserIdentity".to_string())]
    pub odata_type: String,
    ///The Azure Communication Services resource ID associated with the user.
    #[serde(rename = "azureCommunicationServicesResourceId")]
    pub azure_communication_services_resource_id: Option<String>,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphB2bIdentityProvidersType {
    #[serde(rename = "azureActiveDirectory")]
    #[default]
    AzureActiveDirectory,
    #[serde(rename = "externalFederation")]
    ExternalFederation,
    #[serde(rename = "socialIdentityProviders")]
    SocialIdentityProviders,
    #[serde(rename = "emailOneTimePasscode")]
    EmailOneTimePasscode,
    #[serde(rename = "microsoftAccount")]
    MicrosoftAccount,
    #[serde(rename = "defaultConfiguredIdp")]
    DefaultConfiguredIdp,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphB2xIdentityUserFlow {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.b2xIdentityUserFlow".to_string())]
    pub odata_type: String,
    ///Configuration for enabling an API connector for use as part of the self-service sign-up user flow. You can only obtain the value of this object using Get userFlowApiConnectorConfiguration.
    #[serde(rename = "apiConnectorConfiguration")]
    pub api_connector_configuration: Option<
        MicrosoftGraphUserFlowApiConnectorConfiguration,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity providers included in the user flow.
    #[serde(rename = "identityProviders")]
    pub identity_providers: Option<Vec<MicrosoftGraphIdentityProvider>>,
    ///The languages supported for customization within the user flow. Language customization is enabled by default in self-service sign-up user flow. You can't create custom languages in self-service sign-up user flows.
    pub languages: Option<Vec<MicrosoftGraphUserFlowLanguageConfiguration>>,
    ///The user attribute assignments included in the user flow.
    #[serde(rename = "userAttributeAssignments")]
    pub user_attribute_assignments: Option<
        Vec<MicrosoftGraphIdentityUserFlowAttributeAssignment>,
    >,
    #[serde(rename = "userFlowIdentityProviders")]
    pub user_flow_identity_providers: Option<Vec<MicrosoftGraphIdentityProviderBase>>,
    #[serde(rename = "userFlowType")]
    pub user_flow_type: Option<MicrosoftGraphUserFlowType>,
    #[serde(rename = "userFlowTypeVersion")]
    pub user_flow_type_version: Option<
        MicrosoftGraphB2xIdentityUserFlowUserFlowTypeVersion,
    >,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphB2xIdentityUserFlowUserFlowTypeVersion {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBackupRestoreRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.backupRestoreRoot".to_string())]
    pub odata_type: String,
    ///The list of drive inclusion rules applied to the tenant.
    #[serde(rename = "driveInclusionRules")]
    pub drive_inclusion_rules: Option<Vec<MicrosoftGraphDriveProtectionRule>>,
    ///The list of drive protection units in the tenant.
    #[serde(rename = "driveProtectionUnits")]
    pub drive_protection_units: Option<Vec<MicrosoftGraphDriveProtectionUnit>>,
    #[serde(rename = "driveProtectionUnitsBulkAdditionJobs")]
    pub drive_protection_units_bulk_addition_jobs: Option<
        Vec<MicrosoftGraphDriveProtectionUnitsBulkAdditionJob>,
    >,
    ///The list of Exchange protection policies in the tenant.
    #[serde(rename = "exchangeProtectionPolicies")]
    pub exchange_protection_policies: Option<
        Vec<MicrosoftGraphExchangeProtectionPolicy>,
    >,
    ///The list of Exchange restore sessions available in the tenant.
    #[serde(rename = "exchangeRestoreSessions")]
    pub exchange_restore_sessions: Option<Vec<MicrosoftGraphExchangeRestoreSession>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The list of mailbox inclusion rules applied to the tenant.
    #[serde(rename = "mailboxInclusionRules")]
    pub mailbox_inclusion_rules: Option<Vec<MicrosoftGraphMailboxProtectionRule>>,
    ///The list of mailbox protection units in the tenant.
    #[serde(rename = "mailboxProtectionUnits")]
    pub mailbox_protection_units: Option<Vec<MicrosoftGraphMailboxProtectionUnit>>,
    #[serde(rename = "mailboxProtectionUnitsBulkAdditionJobs")]
    pub mailbox_protection_units_bulk_addition_jobs: Option<
        Vec<MicrosoftGraphMailboxProtectionUnitsBulkAdditionJob>,
    >,
    ///The list of OneDrive for Business protection policies in the tenant.
    #[serde(rename = "oneDriveForBusinessProtectionPolicies")]
    pub one_drive_for_business_protection_policies: Option<
        Vec<MicrosoftGraphOneDriveForBusinessProtectionPolicy>,
    >,
    ///The list of OneDrive for Business restore sessions available in the tenant.
    #[serde(rename = "oneDriveForBusinessRestoreSessions")]
    pub one_drive_for_business_restore_sessions: Option<
        Vec<MicrosoftGraphOneDriveForBusinessRestoreSession>,
    >,
    ///List of protection policies in the tenant.
    #[serde(rename = "protectionPolicies")]
    pub protection_policies: Option<Vec<MicrosoftGraphProtectionPolicyBase>>,
    ///List of protection units in the tenant.
    #[serde(rename = "protectionUnits")]
    pub protection_units: Option<Vec<MicrosoftGraphProtectionUnitBase>>,
    ///List of restore points in the tenant.
    #[serde(rename = "restorePoints")]
    pub restore_points: Option<Vec<MicrosoftGraphRestorePoint>>,
    ///List of restore sessions in the tenant.
    #[serde(rename = "restoreSessions")]
    pub restore_sessions: Option<Vec<MicrosoftGraphRestoreSessionBase>>,
    ///List of Backup Storage apps in the tenant.
    #[serde(rename = "serviceApps")]
    pub service_apps: Option<Vec<MicrosoftGraphServiceApp>>,
    ///Represents the tenant-level status of the Backup Storage service.
    #[serde(rename = "serviceStatus")]
    pub service_status: Option<MicrosoftGraphServiceStatus>,
    ///The list of SharePoint protection policies in the tenant.
    #[serde(rename = "sharePointProtectionPolicies")]
    pub share_point_protection_policies: Option<
        Vec<MicrosoftGraphSharePointProtectionPolicy>,
    >,
    ///The list of SharePoint restore sessions available in the tenant.
    #[serde(rename = "sharePointRestoreSessions")]
    pub share_point_restore_sessions: Option<
        Vec<MicrosoftGraphSharePointRestoreSession>,
    >,
    ///The list of site inclusion rules applied to the tenant.
    #[serde(rename = "siteInclusionRules")]
    pub site_inclusion_rules: Option<Vec<MicrosoftGraphSiteProtectionRule>>,
    ///The list of site protection units in the tenant.
    #[serde(rename = "siteProtectionUnits")]
    pub site_protection_units: Option<Vec<MicrosoftGraphSiteProtectionUnit>>,
    #[serde(rename = "siteProtectionUnitsBulkAdditionJobs")]
    pub site_protection_units_bulk_addition_jobs: Option<
        Vec<MicrosoftGraphSiteProtectionUnitsBulkAdditionJob>,
    >,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBackupServiceConsumer {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "firstparty")]
    Firstparty,
    #[serde(rename = "thirdparty")]
    Thirdparty,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBackupServiceStatus {
    #[serde(rename = "disabled")]
    #[default]
    Disabled,
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "protectionChangeLocked")]
    ProtectionChangeLocked,
    #[serde(rename = "restoreLocked")]
    RestoreLocked,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBaseAuthenticationMethod {
    #[serde(rename = "password")]
    #[default]
    Password,
    #[serde(rename = "voice")]
    Voice,
    #[serde(rename = "hardwareOath")]
    HardwareOath,
    #[serde(rename = "softwareOath")]
    SoftwareOath,
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "fido2")]
    Fido2,
    #[serde(rename = "windowsHelloForBusiness")]
    WindowsHelloForBusiness,
    #[serde(rename = "microsoftAuthenticator")]
    MicrosoftAuthenticator,
    #[serde(rename = "temporaryAccessPass")]
    TemporaryAccessPass,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "x509Certificate")]
    X509Certificate,
    #[serde(rename = "federation")]
    Federation,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
discriminated_enum! {
    pub enum MicrosoftGraphBaseEndUserNotification { discriminator : "@odata.type",
    variants : [("#microsoft.graph.positiveReinforcementNotification",
    MicrosoftGraphPositiveReinforcementNotification(Box <
    MicrosoftGraphPositiveReinforcementNotification >)),
    ("#microsoft.graph.simulationNotification", MicrosoftGraphSimulationNotification(Box
    < MicrosoftGraphSimulationNotification >)),
    ("#microsoft.graph.trainingReminderNotification",
    MicrosoftGraphTrainingReminderNotification(Box <
    MicrosoftGraphTrainingReminderNotification >))], fallback :
    BaseEndUserNotification(Box < MicrosoftGraphBaseEndUserNotificationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBaseEndUserNotificationBase {
    ///The default language for the end user notification.
    #[serde(rename = "defaultLanguage")]
    pub default_language: Option<String>,
    #[serde(rename = "endUserNotification")]
    pub end_user_notification: Option<MicrosoftGraphEndUserNotification>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBaseItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.baseItem".to_string())]
    pub odata_type: String,
    ///Identity of the user, device, or application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who created the item. Read-only.
    #[serde(rename = "createdByUser")]
    pub created_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Provides a user-visible description of the item. Optional.
    pub description: Option<String>,
    ///ETag for the item. Read-only.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user, device, and application that last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who last modified the item. Read-only.
    #[serde(rename = "lastModifiedByUser")]
    pub last_modified_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the item. Read-write.
    pub name: Option<String>,
    ///Parent information, if the item has a parent. Read-write.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    ///URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBaseItemVersion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.baseItemVersion".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user which last modified the version. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Date and time the version was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the publication status of this particular version. Read-only.
    pub publication: Option<MicrosoftGraphPublicationFacet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBaseSitePage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.baseSitePage".to_string())]
    pub odata_type: String,
    ///Identity of the user, device, or application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who created the item. Read-only.
    #[serde(rename = "createdByUser")]
    pub created_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Provides a user-visible description of the item. Optional.
    pub description: Option<String>,
    ///ETag for the item. Read-only.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user, device, and application that last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who last modified the item. Read-only.
    #[serde(rename = "lastModifiedByUser")]
    pub last_modified_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the item. Read-write.
    pub name: Option<String>,
    ///The name of the page layout of the page. The possible values are: microsoftReserved, article, home, unknownFutureValue.
    #[serde(rename = "pageLayout")]
    pub page_layout: Option<MicrosoftGraphPageLayoutType>,
    ///Parent information, if the item has a parent. Read-write.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    ///The publishing status and the MM.mm version of the page.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphPublicationFacet>,
    ///Title of the sitePage.
    pub title: Option<String>,
    ///URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBasicAuthentication {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.basicAuthentication".to_string())]
    pub odata_type: String,
    ///The password. It isn't returned in the responses.
    pub password: Option<String>,
    ///The username.
    pub username: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBinaryContent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.binaryContent".to_string())]
    pub odata_type: String,
    ///The binary content, encoded as a Base64 string. Inherited from contentBase.
    pub data: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBinaryOperator {
    #[serde(rename = "or")]
    #[default]
    Or,
    #[serde(rename = "and")]
    And,
}
///BitLockerEncryptionMethod types
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBitLockerEncryptionMethod {
    #[serde(rename = "aesCbc128")]
    #[default]
    AesCbc128,
    #[serde(rename = "aesCbc256")]
    AesCbc256,
    #[serde(rename = "xtsAes128")]
    XtsAes128,
    #[serde(rename = "xtsAes256")]
    XtsAes256,
}
///BitLocker Removable Drive Policies.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBitLockerRemovableDrivePolicy {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///This policy setting determines whether BitLocker protection is required for removable data drives to be writable on a computer.
    #[serde(rename = "blockCrossOrganizationWriteAccess")]
    pub block_cross_organization_write_access: Option<bool>,
    ///Select the encryption method for removable  drives. Possible values are: aesCbc128, aesCbc256, xtsAes128, xtsAes256.
    #[serde(rename = "encryptionMethod")]
    pub encryption_method: Option<MicrosoftGraphBitLockerEncryptionMethod>,
    ///Indicates whether to block write access to devices configured in another organization.  If requireEncryptionForWriteAccess is false, this value does not affect.
    #[serde(rename = "requireEncryptionForWriteAccess")]
    pub require_encryption_for_write_access: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBitlocker {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bitlocker".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The recovery keys associated with the bitlocker entity.
    #[serde(rename = "recoveryKeys")]
    pub recovery_keys: Option<Vec<MicrosoftGraphBitlockerRecoveryKey>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBitlockerRecoveryKey {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bitlockerRecoveryKey".to_string())]
    pub odata_type: String,
    ///The date and time when the key was originally backed up to Microsoft Entra ID. Not nullable.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Identifier of the device the BitLocker key is originally backed up from. Supports $filter (eq).
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The BitLocker recovery key. Returned only on $select. Not nullable.
    pub key: Option<String>,
    ///Indicates the type of volume the BitLocker key is associated with. The possible values are: 1 (for operatingSystemVolume), 2 (for fixedDataVolume), 3 (for removableDataVolume), and 4 (for unknownFutureValue).
    #[serde(rename = "volumeType")]
    pub volume_type: Option<MicrosoftGraphVolumeType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBodyType {
    #[serde(rename = "text")]
    #[default]
    Text,
    #[serde(rename = "html")]
    Html,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingAppointment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bookingAppointment".to_string())]
    pub odata_type: String,
    ///Additional information that is sent to the customer when an appointment is confirmed.
    #[serde(rename = "additionalInformation")]
    pub additional_information: Option<String>,
    ///The URL of the meeting to join anonymously.
    #[serde(rename = "anonymousJoinWebUrl")]
    pub anonymous_join_web_url: Option<String>,
    ///The custom label that can be stamped on this appointment by users.
    #[serde(rename = "appointmentLabel")]
    pub appointment_label: Option<String>,
    ///The date, time, and time zone when the appointment was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The SMTP address of the bookingCustomer who books the appointment.
    #[serde(rename = "customerEmailAddress")]
    pub customer_email_address: Option<String>,
    ///The customer's name.
    #[serde(rename = "customerName")]
    pub customer_name: Option<String>,
    ///Notes from the customer associated with this appointment. You can get the value only when you read this bookingAppointment by its ID. You can set this property only when you initially create an appointment with a new customer.
    #[serde(rename = "customerNotes")]
    pub customer_notes: Option<String>,
    ///The customer's phone number.
    #[serde(rename = "customerPhone")]
    pub customer_phone: Option<String>,
    ///The time zone of the customer. For a list of possible values, see dateTimeTimeZone.
    #[serde(rename = "customerTimeZone")]
    pub customer_time_zone: Option<String>,
    ///A collection of customer properties for an appointment. An appointment contains a list of customer information and each unit will indicate the properties of a customer who is part of that appointment. Optional.
    pub customers: Option<Vec<MicrosoftGraphBookingCustomerInformationBase>>,
    ///The length of the appointment, denoted in ISO8601 format.
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub duration: Option<String>,
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The current number of customers in the appointment.
    #[serde(rename = "filledAttendeesCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub filled_attendees_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates that the customer can manage bookings created by the staff. The default value is false.
    #[serde(rename = "isCustomerAllowedToManageBooking")]
    pub is_customer_allowed_to_manage_booking: Option<bool>,
    ///Indicates that the appointment is held online. The default value is false.
    #[serde(rename = "isLocationOnline")]
    pub is_location_online: Option<bool>,
    ///The URL of the online meeting for the appointment.
    #[serde(rename = "joinWebUrl")]
    pub join_web_url: Option<String>,
    ///The date, time, and time zone when the booking business was last updated. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The maximum number of customers allowed in an appointment. If maximumAttendeesCount of the service is greater than 1, pass valid customer IDs while creating or updating an appointment. To create a customer, use the Create bookingCustomer operation.
    #[serde(rename = "maximumAttendeesCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub maximum_attendees_count: Option<f64>,
    ///If true indicates that the bookingCustomer for this appointment doesn't wish to receive a confirmation for this appointment.
    #[serde(rename = "optOutOfCustomerEmail")]
    pub opt_out_of_customer_email: Option<bool>,
    ///The amount of time to reserve after the appointment ends, for cleaning up, as an example. The value is expressed in ISO8601 format.
    #[serde(rename = "postBuffer")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub post_buffer: Option<String>,
    ///The amount of time to reserve before the appointment begins, for preparation, as an example. The value is expressed in ISO8601 format.
    #[serde(rename = "preBuffer")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub pre_buffer: Option<String>,
    ///The regular price for an appointment for the specified bookingService.
    pub price: Option<MicrosoftGraphBookingAppointmentPrice>,
    ///Represents the type of pricing of a booking service.
    #[serde(rename = "priceType")]
    pub price_type: Option<MicrosoftGraphBookingPriceType>,
    ///The collection of customer reminders sent for this appointment. The value of this property is available only when reading this bookingAppointment by its ID.
    pub reminders: Option<Vec<MicrosoftGraphBookingReminder>>,
    ///Another tracking ID for the appointment, if the appointment was created directly by the customer on the scheduling page, as opposed to by a staff member on behalf of the customer.
    #[serde(rename = "selfServiceAppointmentId")]
    pub self_service_appointment_id: Option<String>,
    ///The ID of the bookingService associated with this appointment.
    #[serde(rename = "serviceId")]
    pub service_id: Option<String>,
    ///The location where the service is delivered.
    #[serde(rename = "serviceLocation")]
    pub service_location: Option<MicrosoftGraphLocation>,
    ///The name of the bookingService associated with this appointment.This property is optional when creating a new appointment. If not specified, it's computed from the service associated with the appointment by the serviceId property.
    #[serde(rename = "serviceName")]
    pub service_name: Option<String>,
    ///Notes from a bookingStaffMember. The value of this property is available only when reading this bookingAppointment by its ID.
    #[serde(rename = "serviceNotes")]
    pub service_notes: Option<String>,
    ///If true, indicates SMS notifications will be sent to the customers for the appointment. Default value is false.
    #[serde(rename = "smsNotificationsEnabled")]
    pub sms_notifications_enabled: Option<bool>,
    ///The ID of each bookingStaffMember who is scheduled in this appointment.
    #[serde(rename = "staffMemberIds")]
    pub staff_member_ids: Option<Vec<Option<String>>>,
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
}
///The regular price for an appointment for the specified bookingService.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBookingAppointmentPrice {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingBusiness {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bookingBusiness".to_string())]
    pub odata_type: String,
    ///The street address of the business. The address property, together with phone and webSiteUrl, appear in the footer of a business scheduling page. The attribute type of physicalAddress is not supported in v1.0. Internally we map the addresses to the type others.
    pub address: Option<MicrosoftGraphPhysicalAddress>,
    ///All the appointments of this business. Read-only. Nullable.
    pub appointments: Option<Vec<MicrosoftGraphBookingAppointment>>,
    ///Settings for the published booking page.
    #[serde(rename = "bookingPageSettings")]
    pub booking_page_settings: Option<MicrosoftGraphBookingPageSettings>,
    ///The hours of operation for the business.
    #[serde(rename = "businessHours")]
    pub business_hours: Option<Vec<MicrosoftGraphBookingWorkHours>>,
    ///The type of business.
    #[serde(rename = "businessType")]
    pub business_type: Option<String>,
    ///The set of appointments of this business in a specified date range. Read-only. Nullable.
    #[serde(rename = "calendarView")]
    pub calendar_view: Option<Vec<MicrosoftGraphBookingAppointment>>,
    ///The date, time, and time zone when the booking business was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///All the custom questions of this business. Read-only. Nullable.
    #[serde(rename = "customQuestions")]
    pub custom_questions: Option<Vec<MicrosoftGraphBookingCustomQuestion>>,
    ///All the customers of this business. Read-only. Nullable.
    pub customers: Option<Vec<MicrosoftGraphBookingCustomerBase>>,
    ///The code for the currency that the business operates in on Microsoft Bookings.
    #[serde(rename = "defaultCurrencyIso")]
    pub default_currency_iso: Option<String>,
    ///The name of the business, which interfaces with customers. This name appears at the top of the business scheduling page.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The email address for the business.
    pub email: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The scheduling page has been made available to external customers. Use the publish and unpublish actions to set this property. Read-only.
    #[serde(rename = "isPublished")]
    pub is_published: Option<bool>,
    ///The language of the self-service booking page.
    #[serde(rename = "languageTag")]
    pub language_tag: Option<String>,
    ///The date, time, and time zone when the booking business was last updated. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The telephone number for the business. The phone property, together with address and webSiteUrl, appear in the footer of a business scheduling page.
    pub phone: Option<String>,
    ///The URL for the scheduling page, which is set after you publish or unpublish the page. Read-only.
    #[serde(rename = "publicUrl")]
    pub public_url: Option<String>,
    ///Specifies how bookings can be created for this business.
    #[serde(rename = "schedulingPolicy")]
    pub scheduling_policy: Option<MicrosoftGraphBookingSchedulingPolicy>,
    ///All the services offered by this business. Read-only. Nullable.
    pub services: Option<Vec<MicrosoftGraphBookingService>>,
    ///All the staff members that provide services in this business. Read-only. Nullable.
    #[serde(rename = "staffMembers")]
    pub staff_members: Option<Vec<MicrosoftGraphBookingStaffMemberBase>>,
    ///The URL of the business web site. The webSiteUrl property, together with address, phone, appear in the footer of a business scheduling page.
    #[serde(rename = "webSiteUrl")]
    pub web_site_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingCurrency {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bookingCurrency".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The currency symbol. For example, the currency symbol for the US dollar and for the Australian dollar is $.
    pub symbol: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingCustomQuestion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bookingCustomQuestion".to_string())]
    pub odata_type: String,
    ///The expected answer type. The possible values are: text, radioButton, unknownFutureValue.
    #[serde(rename = "answerInputType")]
    pub answer_input_type: Option<MicrosoftGraphAnswerInputType>,
    ///List of possible answer values.
    #[serde(rename = "answerOptions")]
    pub answer_options: Option<Vec<Option<String>>>,
    ///The date, time, and time zone when the custom question was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The question.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date, time, and time zone when the custom question was last updated. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingCustomer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bookingCustomer".to_string())]
    pub odata_type: String,
    ///Addresses associated with the customer. The attribute type of physicalAddress isn't supported in v1.0. Internally we map the addresses to the type others.
    pub addresses: Option<Vec<MicrosoftGraphPhysicalAddress>>,
    ///The date, time, and time zone when the customer was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the customer.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The SMTP address of the customer.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date, time, and time zone when the customer was last updated. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Phone numbers associated with the customer, including home, business, and mobile numbers.
    pub phones: Option<Vec<MicrosoftGraphPhone>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingCustomerBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bookingCustomerBase".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingCustomerInformation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bookingCustomerInformation".to_string())]
    pub odata_type: String,
    ///It consists of the list of custom questions and answers given by the customer as part of the appointment
    #[serde(rename = "customQuestionAnswers")]
    pub custom_question_answers: Option<Vec<MicrosoftGraphBookingQuestionAnswer>>,
    ///The ID of the bookingCustomer for this appointment. If no ID is specified when an appointment is created, then a new bookingCustomer object is created. Once set, you should consider the customerId immutable.
    #[serde(rename = "customerId")]
    pub customer_id: Option<String>,
    ///The SMTP address of the bookingCustomer who is booking the appointment
    #[serde(rename = "emailAddress")]
    pub email_address: Option<String>,
    ///Represents location information for the bookingCustomer who is booking the appointment.
    pub location: Option<MicrosoftGraphLocation>,
    ///The customer's name.
    pub name: Option<String>,
    ///Notes from the customer associated with this appointment. You can get the value only when reading this bookingAppointment by its ID. You can set this property only when initially creating an appointment with a new customer. After that point, the value is computed from the customer represented by the customerId.
    pub notes: Option<String>,
    ///The customer's phone number.
    pub phone: Option<String>,
    ///The time zone of the customer. For a list of possible values, see dateTimeTimeZone.
    #[serde(rename = "timeZone")]
    pub time_zone: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphBookingCustomerInformationBase { discriminator :
    "@odata.type", variants : [("#microsoft.graph.bookingCustomerInformation",
    MicrosoftGraphBookingCustomerInformation(Box <
    MicrosoftGraphBookingCustomerInformation >))], fallback :
    BookingCustomerInformationBase(Box < MicrosoftGraphBookingCustomerInformationBaseBase
    >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingCustomerInformationBaseBase {}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBookingPageAccessControl {
    #[serde(rename = "unrestricted")]
    #[default]
    Unrestricted,
    #[serde(rename = "restrictedToOrganization")]
    RestrictedToOrganization,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingPageSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "accessControl")]
    pub access_control: Option<MicrosoftGraphBookingPageAccessControl>,
    ///Custom color for the booking page. The value should be in Hex format. For example, #123456.
    #[serde(rename = "bookingPageColorCode")]
    pub booking_page_color_code: Option<String>,
    ///The time zone of the customer. For a list of possible values, see dateTimeTimeZone.
    #[serde(rename = "businessTimeZone")]
    pub business_time_zone: Option<String>,
    ///The personal data collection and usage consent message in the booking page.
    #[serde(rename = "customerConsentMessage")]
    pub customer_consent_message: Option<String>,
    ///Determines whether the one-time password is required to create an appointment. The default value is false.
    #[serde(rename = "enforceOneTimePassword")]
    pub enforce_one_time_password: Option<bool>,
    ///Indicates whether the business logo is displayed on the booking page. The default value is false.
    #[serde(rename = "isBusinessLogoDisplayEnabled")]
    pub is_business_logo_display_enabled: Option<bool>,
    ///Enables personal data collection and the usage consent toggle on the booking page. The default value is false.
    #[serde(rename = "isCustomerConsentEnabled")]
    pub is_customer_consent_enabled: Option<bool>,
    ///Indicates whether web crawlers index this page. The defaults value is false.
    #[serde(rename = "isSearchEngineIndexabilityDisabled")]
    pub is_search_engine_indexability_disabled: Option<bool>,
    ///Indicates whether the time zone of the time slot is set to the time zone of the business. The default value is false.
    #[serde(rename = "isTimeSlotTimeZoneSetToBusinessTimeZone")]
    pub is_time_slot_time_zone_set_to_business_time_zone: Option<bool>,
    ///URL of a webpage that provides the terms and conditions of the business. If a privacy policy isn't included, the following text appears on the booking page as default: 'The policies and practices of {bookingbusinessname} apply to the use of your data.'
    #[serde(rename = "privacyPolicyWebUrl")]
    pub privacy_policy_web_url: Option<String>,
    ///URL of a webpage that provides the terms and conditions of the business.
    #[serde(rename = "termsAndConditionsWebUrl")]
    pub terms_and_conditions_web_url: Option<String>,
}
///Represents the type of pricing of a booking service.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBookingPriceType {
    #[serde(rename = "undefined")]
    #[default]
    Undefined,
    #[serde(rename = "fixedPrice")]
    FixedPrice,
    #[serde(rename = "startingAt")]
    StartingAt,
    #[serde(rename = "hourly")]
    Hourly,
    #[serde(rename = "free")]
    Free,
    #[serde(rename = "priceVaries")]
    PriceVaries,
    #[serde(rename = "callUs")]
    CallUs,
    #[serde(rename = "notSet")]
    NotSet,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingQuestionAnswer {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The answer given by the user in case the answerInputType is text.
    pub answer: Option<String>,
    ///The expected answer type. The possible values are: text, radioButton, unknownFutureValue.
    #[serde(rename = "answerInputType")]
    pub answer_input_type: Option<MicrosoftGraphAnswerInputType>,
    ///In case the answerInputType is radioButton, this will consists of a list of possible answer values.
    #[serde(rename = "answerOptions")]
    pub answer_options: Option<Vec<Option<String>>>,
    ///Indicates whether it is mandatory to answer the custom question.
    #[serde(rename = "isRequired")]
    pub is_required: Option<bool>,
    ///The question.
    pub question: Option<String>,
    ///The ID of the custom question.
    #[serde(rename = "questionId")]
    pub question_id: Option<String>,
    ///The answers selected by the user.
    #[serde(rename = "selectedOptions")]
    pub selected_options: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingQuestionAssignment {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether it's mandatory to answer the custom question.
    #[serde(rename = "isRequired")]
    pub is_required: Option<bool>,
    ///The ID of the custom question.
    #[serde(rename = "questionId")]
    pub question_id: Option<String>,
}
///This type represents when and to whom to send an e-mail reminder.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingReminder {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The message in the reminder.
    pub message: Option<String>,
    ///The amount of time before the start of an appointment that the reminder should be sent. It's denoted in ISO 8601 format.
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub offset: Option<String>,
    pub recipients: Option<MicrosoftGraphBookingReminderRecipients>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBookingReminderRecipients {
    #[serde(rename = "allAttendees")]
    #[default]
    AllAttendees,
    #[serde(rename = "staff")]
    Staff,
    #[serde(rename = "customer")]
    Customer,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///This type represents the set of policies that dictate how bookings can be created in a Booking Calendar.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingSchedulingPolicy {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///True to allow customers to choose a specific person for the booking.
    #[serde(rename = "allowStaffSelection")]
    pub allow_staff_selection: Option<bool>,
    ///Custom availability of the service in a given time frame.
    #[serde(rename = "customAvailabilities")]
    pub custom_availabilities: Option<Vec<MicrosoftGraphBookingsAvailabilityWindow>>,
    ///General availability of the service defined by the scheduling policy.
    #[serde(rename = "generalAvailability")]
    pub general_availability: Option<MicrosoftGraphBookingsAvailability>,
    ///Indicates whether the meeting invite is sent to the customers. The default value is false.
    #[serde(rename = "isMeetingInviteToCustomersEnabled")]
    pub is_meeting_invite_to_customers_enabled: Option<bool>,
    ///Maximum number of days in advance that a booking can be made. It follows the ISO 8601 format.
    #[serde(rename = "maximumAdvance")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub maximum_advance: Option<String>,
    ///The minimum amount of time before which bookings and cancellations must be made. It follows the ISO 8601 format.
    #[serde(rename = "minimumLeadTime")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub minimum_lead_time: Option<String>,
    ///True to notify the business via email when a booking is created or changed. Use the email address specified in the email property of the bookingBusiness entity for the business.
    #[serde(rename = "sendConfirmationsToOwner")]
    pub send_confirmations_to_owner: Option<bool>,
    ///Duration of each time slot, denoted in ISO 8601 format.
    #[serde(rename = "timeSlotInterval")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub time_slot_interval: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingService {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bookingService".to_string())]
    pub odata_type: String,
    ///Additional information that is sent to the customer when an appointment is confirmed.
    #[serde(rename = "additionalInformation")]
    pub additional_information: Option<String>,
    ///The date, time, and time zone when the service was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains the set of custom questions associated with a particular service.
    #[serde(rename = "customQuestions")]
    pub custom_questions: Option<Vec<MicrosoftGraphBookingQuestionAssignment>>,
    ///The default length of the service, represented in numbers of days, hours, minutes, and seconds. For example, P11D23H59M59.999999999999S.
    #[serde(rename = "defaultDuration")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub default_duration: Option<String>,
    ///The default physical location for the service.
    #[serde(rename = "defaultLocation")]
    pub default_location: Option<MicrosoftGraphLocation>,
    ///The default monetary price for the service.
    #[serde(rename = "defaultPrice")]
    pub default_price: Option<MicrosoftGraphBookingServiceDefaultPrice>,
    ///Represents the type of pricing of a booking service.
    #[serde(rename = "defaultPriceType")]
    pub default_price_type: Option<MicrosoftGraphBookingPriceType>,
    ///The default set of reminders for an appointment of this service. The value of this property is available only when reading this bookingService by its ID.
    #[serde(rename = "defaultReminders")]
    pub default_reminders: Option<Vec<MicrosoftGraphBookingReminder>>,
    ///A text description for the service.
    pub description: Option<String>,
    ///A service name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates if an anonymousJoinWebUrl(webrtcUrl) is generated for the appointment booked for this service. The default value is false.
    #[serde(rename = "isAnonymousJoinEnabled")]
    pub is_anonymous_join_enabled: Option<bool>,
    ///Indicates that the customer can manage bookings created by the staff. The default value is false.
    #[serde(rename = "isCustomerAllowedToManageBooking")]
    pub is_customer_allowed_to_manage_booking: Option<bool>,
    ///True indicates that this service isn't available to customers for booking.
    #[serde(rename = "isHiddenFromCustomers")]
    pub is_hidden_from_customers: Option<bool>,
    ///Indicates that the appointments for the service are held online. The default value is false.
    #[serde(rename = "isLocationOnline")]
    pub is_location_online: Option<bool>,
    ///The language of the self-service booking page.
    #[serde(rename = "languageTag")]
    pub language_tag: Option<String>,
    ///The date, time, and time zone when the service was last updated. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The maximum number of customers allowed in a service. If maximumAttendeesCount of the service is greater than 1, pass valid customer IDs while creating or updating an appointment. To create a customer, use the Create bookingCustomer operation.
    #[serde(rename = "maximumAttendeesCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub maximum_attendees_count: Option<f64>,
    ///Additional information about this service.
    pub notes: Option<String>,
    ///The time to buffer after an appointment for this service ends, and before the next customer appointment can be booked.
    #[serde(rename = "postBuffer")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub post_buffer: Option<String>,
    ///The time to buffer before an appointment for this service can start.
    #[serde(rename = "preBuffer")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub pre_buffer: Option<String>,
    ///The set of policies that determine how appointments for this type of service should be created and managed.
    #[serde(rename = "schedulingPolicy")]
    pub scheduling_policy: Option<MicrosoftGraphBookingSchedulingPolicy>,
    ///True indicates SMS notifications can be sent to the customers for the appointment of the service. Default value is false.
    #[serde(rename = "smsNotificationsEnabled")]
    pub sms_notifications_enabled: Option<bool>,
    ///Represents those staff members who provide this service.
    #[serde(rename = "staffMemberIds")]
    pub staff_member_ids: Option<Vec<Option<String>>>,
    ///The URL a customer uses to access the service.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
///The default monetary price for the service.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBookingServiceDefaultPrice {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingStaffMember {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bookingStaffMember".to_string())]
    pub odata_type: String,
    ///True means that if the staff member is a Microsoft 365 user, the Bookings API would verify the staff member's availability in their personal calendar in Microsoft 365, before making a booking.
    #[serde(rename = "availabilityIsAffectedByPersonalCalendar")]
    pub availability_is_affected_by_personal_calendar: Option<bool>,
    ///The date, time, and time zone when the staff member was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the staff member, as displayed to customers. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The email address of the staff member. This email address can be in the same Microsoft 365 tenant as the business, or in a different email domain. This email address can be used if the sendConfirmationsToOwner property is set to true in the scheduling policy of the business. Required.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates that a staff member is notified via email when a booking assigned to them is created or changed. The default value is true.
    #[serde(rename = "isEmailNotificationEnabled")]
    pub is_email_notification_enabled: Option<bool>,
    ///The date, time, and time zone when the staff member was last updated. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "membershipStatus")]
    pub membership_status: Option<MicrosoftGraphBookingStaffMembershipStatus>,
    pub role: Option<MicrosoftGraphBookingStaffRole>,
    ///The time zone of the staff member. For a list of possible values, see dateTimeTimeZone.
    #[serde(rename = "timeZone")]
    pub time_zone: Option<String>,
    ///True means the staff member's availability is as specified in the businessHours property of the business. False means the availability is determined by the staff member's workingHours property setting.
    #[serde(rename = "useBusinessHours")]
    pub use_business_hours: Option<bool>,
    ///The range of hours each day of the week that the staff member is available for booking. By default, they're initialized to be the same as the businessHours property of the business.
    #[serde(rename = "workingHours")]
    pub working_hours: Option<Vec<MicrosoftGraphBookingWorkHours>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingStaffMemberBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bookingStaffMemberBase".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBookingStaffMembershipStatus {
    #[serde(rename = "active")]
    #[default]
    Active,
    #[serde(rename = "pendingAcceptance")]
    PendingAcceptance,
    #[serde(rename = "rejectedByStaff")]
    RejectedByStaff,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBookingStaffRole {
    #[serde(rename = "guest")]
    #[default]
    Guest,
    #[serde(rename = "administrator")]
    Administrator,
    #[serde(rename = "viewer")]
    Viewer,
    #[serde(rename = "externalGuest")]
    ExternalGuest,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "scheduler")]
    Scheduler,
    #[serde(rename = "teamMember")]
    TeamMember,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBookingType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "reserved")]
    Reserved,
}
///This type represents the set of working hours in a single day of the week.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingWorkHours {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub day: Option<MicrosoftGraphDayOfWeek>,
    ///A list of start/end times during a day.
    #[serde(rename = "timeSlots")]
    pub time_slots: Option<Vec<MicrosoftGraphBookingWorkTimeSlot>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingWorkTimeSlot {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The time of the day when work stops. For example, 17:00:00.0000000.
    #[serde(rename = "endTime")]
    pub end_time: Option<chrono::NaiveTime>,
    ///The time of the day when work starts. For example, 08:00:00.0000000.
    #[serde(rename = "startTime")]
    pub start_time: Option<chrono::NaiveTime>,
}
discriminated_enum! {
    pub enum MicrosoftGraphBookingsAvailability { discriminator : "@odata.type", variants
    : [("#microsoft.graph.bookingsAvailabilityWindow", Window(Box <
    MicrosoftGraphBookingsAvailabilityWindow >))], fallback : BookingsAvailability(Box <
    MicrosoftGraphBookingsAvailabilityBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingsAvailabilityBase {
    #[serde(rename = "availabilityType")]
    pub availability_type: Option<MicrosoftGraphBookingsServiceAvailabilityType>,
    ///The hours of operation in a week. The business hours value is set to null if the availability type isn't customWeeklyHours.
    #[serde(rename = "businessHours")]
    pub business_hours: Option<Vec<MicrosoftGraphBookingWorkHours>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBookingsAvailabilityWindow {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bookingsAvailabilityWindow".to_string())]
    pub odata_type: String,
    #[serde(rename = "availabilityType")]
    pub availability_type: Option<MicrosoftGraphBookingsServiceAvailabilityType>,
    ///The hours of operation in a week. The business hours value is set to null if the availability type isn't customWeeklyHours.
    #[serde(rename = "businessHours")]
    pub business_hours: Option<Vec<MicrosoftGraphBookingWorkHours>>,
    ///End date of the availability window.
    #[serde(rename = "endDate")]
    pub end_date: Option<chrono::NaiveDate>,
    ///Start date of the availability window.
    #[serde(rename = "startDate")]
    pub start_date: Option<chrono::NaiveDate>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBookingsServiceAvailabilityType {
    #[serde(rename = "bookWhenStaffAreFree")]
    #[default]
    BookWhenStaffAreFree,
    #[serde(rename = "notBookable")]
    NotBookable,
    #[serde(rename = "customWeeklyHours")]
    CustomWeeklyHours,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBooleanColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBroadcastMeetingAudience {
    #[serde(rename = "roleIsAttendee")]
    #[default]
    RoleIsAttendee,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "everyone")]
    Everyone,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBroadcastMeetingCaptionSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether captions are enabled for this Teams live event.
    #[serde(rename = "isCaptionEnabled")]
    pub is_caption_enabled: Option<bool>,
    ///The spoken language.
    #[serde(rename = "spokenLanguage")]
    pub spoken_language: Option<String>,
    ///The translation languages (choose up to 6).
    #[serde(rename = "translationLanguages")]
    pub translation_languages: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBroadcastMeetingSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Defines who can join the Teams live event. Possible values are listed in the following table.
    #[serde(rename = "allowedAudience")]
    pub allowed_audience: Option<MicrosoftGraphBroadcastMeetingAudience>,
    ///Caption settings of a Teams live event.
    pub captions: Option<MicrosoftGraphBroadcastMeetingCaptionSettings>,
    ///Indicates whether attendee report is enabled for this Teams live event. Default value is false.
    #[serde(rename = "isAttendeeReportEnabled")]
    pub is_attendee_report_enabled: Option<bool>,
    ///Indicates whether Q&A is enabled for this Teams live event. Default value is false.
    #[serde(rename = "isQuestionAndAnswerEnabled")]
    pub is_question_and_answer_enabled: Option<bool>,
    ///Indicates whether recording is enabled for this Teams live event. Default value is false.
    #[serde(rename = "isRecordingEnabled")]
    pub is_recording_enabled: Option<bool>,
    ///Indicates whether video on demand is enabled for this Teams live event. Default value is false.
    #[serde(rename = "isVideoOnDemandEnabled")]
    pub is_video_on_demand_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBrowserSharedCookie {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.browserSharedCookie".to_string())]
    pub odata_type: String,
    ///The comment for the shared cookie.
    pub comment: Option<String>,
    ///The date and time when the shared cookie was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when the shared cookie was deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the cookie.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The history of modifications applied to the cookie.
    pub history: Option<Vec<MicrosoftGraphBrowserSharedCookieHistory>>,
    ///Controls whether a cookie is a host-only or domain cookie.
    #[serde(rename = "hostOnly")]
    pub host_only: Option<bool>,
    ///The URL of the cookie.
    #[serde(rename = "hostOrDomain")]
    pub host_or_domain: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user who last modified the cookie.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the cookie was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The path of the cookie.
    pub path: Option<String>,
    #[serde(rename = "sourceEnvironment")]
    pub source_environment: Option<MicrosoftGraphBrowserSharedCookieSourceEnvironment>,
    pub status: Option<MicrosoftGraphBrowserSharedCookieStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBrowserSharedCookieHistory {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The comment for the shared cookie.
    pub comment: Option<String>,
    ///The name of the cookie.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Controls whether a cookie is a host-only or domain cookie.
    #[serde(rename = "hostOnly")]
    pub host_only: Option<bool>,
    ///The URL of the cookie.
    #[serde(rename = "hostOrDomain")]
    pub host_or_domain: Option<String>,
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The path of the cookie.
    pub path: Option<String>,
    ///The date and time when the cookie was last published.
    #[serde(rename = "publishedDateTime")]
    pub published_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies how the cookies are shared between Microsoft Edge and Internet Explorer. The possible values are: microsoftEdge, internetExplorer11, both, unknownFutureValue.
    #[serde(rename = "sourceEnvironment")]
    pub source_environment: Option<MicrosoftGraphBrowserSharedCookieSourceEnvironment>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBrowserSharedCookieSourceEnvironment {
    #[serde(rename = "microsoftEdge")]
    #[default]
    MicrosoftEdge,
    #[serde(rename = "internetExplorer11")]
    InternetExplorer11,
    #[serde(rename = "both")]
    Both,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBrowserSharedCookieStatus {
    #[serde(rename = "published")]
    #[default]
    Published,
    #[serde(rename = "pendingAdd")]
    PendingAdd,
    #[serde(rename = "pendingEdit")]
    PendingEdit,
    #[serde(rename = "pendingDelete")]
    PendingDelete,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBrowserSite {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.browserSite".to_string())]
    pub odata_type: String,
    ///Controls the behavior of redirected sites. If true, indicates that the site will open in Internet Explorer 11 or Microsoft Edge even if the site is navigated to as part of a HTTP or meta refresh redirection chain.
    #[serde(rename = "allowRedirect")]
    pub allow_redirect: Option<bool>,
    ///The comment for the site.
    pub comment: Option<String>,
    #[serde(rename = "compatibilityMode")]
    pub compatibility_mode: Option<MicrosoftGraphBrowserSiteCompatibilityMode>,
    ///The date and time when the site was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when the site was deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The history of modifications applied to the site.
    pub history: Option<Vec<MicrosoftGraphBrowserSiteHistory>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user who last modified the site.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the site was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "mergeType")]
    pub merge_type: Option<MicrosoftGraphBrowserSiteMergeType>,
    pub status: Option<MicrosoftGraphBrowserSiteStatus>,
    #[serde(rename = "targetEnvironment")]
    pub target_environment: Option<MicrosoftGraphBrowserSiteTargetEnvironment>,
    ///The URL of the site.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBrowserSiteCompatibilityMode {
    #[serde(rename = "default")]
    #[default]
    Default,
    #[serde(rename = "internetExplorer8Enterprise")]
    InternetExplorer8Enterprise,
    #[serde(rename = "internetExplorer7Enterprise")]
    InternetExplorer7Enterprise,
    #[serde(rename = "internetExplorer11")]
    InternetExplorer11,
    #[serde(rename = "internetExplorer10")]
    InternetExplorer10,
    #[serde(rename = "internetExplorer9")]
    InternetExplorer9,
    #[serde(rename = "internetExplorer8")]
    InternetExplorer8,
    #[serde(rename = "internetExplorer7")]
    InternetExplorer7,
    #[serde(rename = "internetExplorer5")]
    InternetExplorer5,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///The history for the site modifications
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBrowserSiteHistory {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Controls the behavior of redirected sites. If true, indicates that the site will open in Internet Explorer 11 or Microsoft Edge even if the site is navigated to as part of a HTTP or meta refresh redirection chain.
    #[serde(rename = "allowRedirect")]
    pub allow_redirect: Option<bool>,
    ///The comment for the site.
    pub comment: Option<String>,
    ///Controls what compatibility setting is used for specific sites or domains. The possible values are: default, internetExplorer8Enterprise, internetExplorer7Enterprise, internetExplorer11, internetExplorer10, internetExplorer9, internetExplorer8, internetExplorer7, internetExplorer5, unknownFutureValue.
    #[serde(rename = "compatibilityMode")]
    pub compatibility_mode: Option<MicrosoftGraphBrowserSiteCompatibilityMode>,
    ///The user who last modified the site.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The merge type of the site. The possible values are: noMerge, default, unknownFutureValue.
    #[serde(rename = "mergeType")]
    pub merge_type: Option<MicrosoftGraphBrowserSiteMergeType>,
    ///The date and time when the site was last published.
    #[serde(rename = "publishedDateTime")]
    pub published_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The target environment that the site should open in. The possible values are: internetExplorerMode, internetExplorer11, microsoftEdge, configurable, none, unknownFutureValue.Prior to June 15, 2022, the internetExplorer11 option would allow opening a site in the Internet Explorer 11 (IE11) desktop application. Following the retirement of IE11 on June 15, 2022, the internetExplorer11 option will no longer open an IE11 window and will instead behave the same as the internetExplorerMode option.
    #[serde(rename = "targetEnvironment")]
    pub target_environment: Option<MicrosoftGraphBrowserSiteTargetEnvironment>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBrowserSiteList {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.browserSiteList".to_string())]
    pub odata_type: String,
    ///The description of the site list.
    pub description: Option<String>,
    ///The name of the site list.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user who last modified the site list.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the site list was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user who published the site list.
    #[serde(rename = "publishedBy")]
    pub published_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the site list was published.
    #[serde(rename = "publishedDateTime")]
    pub published_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The current revision of the site list.
    pub revision: Option<String>,
    ///A collection of shared cookies defined for the site list.
    #[serde(rename = "sharedCookies")]
    pub shared_cookies: Option<Vec<MicrosoftGraphBrowserSharedCookie>>,
    ///A collection of sites defined for the site list.
    pub sites: Option<Vec<MicrosoftGraphBrowserSite>>,
    pub status: Option<MicrosoftGraphBrowserSiteListStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBrowserSiteListStatus {
    #[serde(rename = "draft")]
    #[default]
    Draft,
    #[serde(rename = "published")]
    Published,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBrowserSiteMergeType {
    #[serde(rename = "noMerge")]
    #[default]
    NoMerge,
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBrowserSiteStatus {
    #[serde(rename = "published")]
    #[default]
    Published,
    #[serde(rename = "pendingAdd")]
    PendingAdd,
    #[serde(rename = "pendingEdit")]
    PendingEdit,
    #[serde(rename = "pendingDelete")]
    PendingDelete,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphBrowserSiteTargetEnvironment {
    #[serde(rename = "internetExplorerMode")]
    #[default]
    InternetExplorerMode,
    #[serde(rename = "internetExplorer11")]
    InternetExplorer11,
    #[serde(rename = "microsoftEdge")]
    MicrosoftEdge,
    #[serde(rename = "configurable")]
    Configurable,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBuiltInIdentityProvider {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.builtInIdentityProvider".to_string())]
    pub odata_type: String,
    ///The display name of the identity provider.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity provider type. For a B2B scenario, possible values: AADSignup, MicrosoftAccount, EmailOTP. Required.
    #[serde(rename = "identityProviderType")]
    pub identity_provider_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBulkUpload {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.bulkUpload".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphBundle {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If the bundle is an album, then the album property is included
    pub album: Option<MicrosoftGraphAlbum>,
    ///Number of children contained immediately within this container.
    #[serde(rename = "childCount")]
    pub child_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCalculatedColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///For dateTime output types, the format of the value. Possible values are: dateOnly or dateTime.
    pub format: Option<String>,
    ///The formula used to compute the value for this column.
    pub formula: Option<String>,
    ///The output type used to format values in this column. Possible values are: boolean, currency, dateTime, number, or text.
    #[serde(rename = "outputType")]
    pub output_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCalendar {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.calendar".to_string())]
    pub odata_type: String,
    ///Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
    #[serde(rename = "allowedOnlineMeetingProviders")]
    pub allowed_online_meeting_providers: Option<
        Vec<MicrosoftGraphOnlineMeetingProviderType>,
    >,
    ///The permissions of the users with whom the calendar is shared.
    #[serde(rename = "calendarPermissions")]
    pub calendar_permissions: Option<Vec<MicrosoftGraphCalendarPermission>>,
    ///The calendar view for the calendar. Navigation property. Read-only.
    #[serde(rename = "calendarView")]
    pub calendar_view: Option<Vec<MicrosoftGraphEvent>>,
    ///true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who shared a calendar and granted write access.
    #[serde(rename = "canEdit")]
    pub can_edit: Option<bool>,
    ///true if the user has permission to share the calendar, false otherwise. Only the user who created the calendar can share it.
    #[serde(rename = "canShare")]
    pub can_share: Option<bool>,
    ///If true, the user can read calendar items that have been marked private, false otherwise.
    #[serde(rename = "canViewPrivateItems")]
    pub can_view_private_items: Option<bool>,
    ///Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
    #[serde(rename = "changeKey")]
    pub change_key: Option<String>,
    ///Specifies the color theme to distinguish the calendar from other calendars in a UI. The property values are: auto, lightBlue, lightGreen, lightOrange, lightGray, lightYellow, lightTeal, lightPink, lightBrown, lightRed, maxColor.
    pub color: Option<MicrosoftGraphCalendarColor>,
    ///The default online meeting provider for meetings sent from this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
    #[serde(rename = "defaultOnlineMeetingProvider")]
    pub default_online_meeting_provider: Option<MicrosoftGraphOnlineMeetingProviderType>,
    ///The events in the calendar. Navigation property. Read-only.
    pub events: Option<Vec<MicrosoftGraphEvent>>,
    ///The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only.
    #[serde(rename = "hexColor")]
    pub hex_color: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///true if this is the default calendar where new events are created by default, false otherwise.
    #[serde(rename = "isDefaultCalendar")]
    pub is_default_calendar: Option<bool>,
    ///Indicates whether this user calendar can be deleted from the user mailbox.
    #[serde(rename = "isRemovable")]
    pub is_removable: Option<bool>,
    ///Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses.
    #[serde(rename = "isTallyingResponses")]
    pub is_tallying_responses: Option<bool>,
    ///The collection of multi-value extended properties defined for the calendar. Read-only. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///The calendar name.
    pub name: Option<String>,
    ///If set, this represents the user who created or added the calendar. For a calendar that the user created or added, the owner property is set to the user. For a calendar shared with the user, the owner property is set to the person who shared that calendar with the user.
    pub owner: Option<MicrosoftGraphEmailAddress>,
    ///The collection of single-value extended properties defined for the calendar. Read-only. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCalendarColor {
    #[serde(rename = "auto")]
    #[default]
    Auto,
    #[serde(rename = "lightBlue")]
    LightBlue,
    #[serde(rename = "lightGreen")]
    LightGreen,
    #[serde(rename = "lightOrange")]
    LightOrange,
    #[serde(rename = "lightGray")]
    LightGray,
    #[serde(rename = "lightYellow")]
    LightYellow,
    #[serde(rename = "lightTeal")]
    LightTeal,
    #[serde(rename = "lightPink")]
    LightPink,
    #[serde(rename = "lightBrown")]
    LightBrown,
    #[serde(rename = "lightRed")]
    LightRed,
    #[serde(rename = "maxColor")]
    MaxColor,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCalendarGroup {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.calendarGroup".to_string())]
    pub odata_type: String,
    ///The calendars in the calendar group. Navigation property. Read-only. Nullable.
    pub calendars: Option<Vec<MicrosoftGraphCalendar>>,
    ///Identifies the version of the calendar group. Every time the calendar group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
    #[serde(rename = "changeKey")]
    pub change_key: Option<String>,
    ///The class identifier. Read-only.
    #[serde(rename = "classId")]
    pub class_id: Option<uuid::Uuid>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The group name.
    pub name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCalendarPermission {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.calendarPermission".to_string())]
    pub odata_type: String,
    ///List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
    #[serde(rename = "allowedRoles")]
    pub allowed_roles: Option<Vec<MicrosoftGraphCalendarRoleType>>,
    ///Represents a share recipient or delegate who has access to the calendar. For the 'My Organization' share recipient, the address property is null. Read-only.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<MicrosoftGraphEmailAddress>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///True if the user in context (recipient or delegate) is inside the same organization as the calendar owner.
    #[serde(rename = "isInsideOrganization")]
    pub is_inside_organization: Option<bool>,
    ///True if the user can be removed from the list of recipients or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You can't remove 'My organization' as a share recipient to a calendar.
    #[serde(rename = "isRemovable")]
    pub is_removable: Option<bool>,
    ///Current permission level of the calendar share recipient or delegate.
    pub role: Option<MicrosoftGraphCalendarRoleType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCalendarRoleType {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "freeBusyRead")]
    FreeBusyRead,
    #[serde(rename = "limitedRead")]
    LimitedRead,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "delegateWithoutPrivateEventAccess")]
    DelegateWithoutPrivateEventAccess,
    #[serde(rename = "delegateWithPrivateEventAccess")]
    DelegateWithPrivateEventAccess,
    #[serde(rename = "custom")]
    Custom,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCalendarSharingAction {
    #[serde(rename = "accept")]
    #[default]
    Accept,
    #[serde(rename = "acceptAndViewCalendar")]
    AcceptAndViewCalendar,
    #[serde(rename = "viewCalendar")]
    ViewCalendar,
    #[serde(rename = "addThisCalendar")]
    AddThisCalendar,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCalendarSharingActionImportance {
    #[serde(rename = "primary")]
    #[default]
    Primary,
    #[serde(rename = "secondary")]
    Secondary,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCalendarSharingActionType {
    #[serde(rename = "accept")]
    #[default]
    Accept,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCalendarSharingMessage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.calendarSharingMessage".to_string())]
    pub odata_type: String,
    ///The fileAttachment and itemAttachment attachments for the message.
    pub attachments: Option<Vec<MicrosoftGraphAttachment>>,
    ///The Bcc: recipients for the message.
    #[serde(rename = "bccRecipients")]
    pub bcc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body.
    pub body: Option<MicrosoftGraphItemBody>,
    ///The first 255 characters of the message body. It is in text format.
    #[serde(rename = "bodyPreview")]
    pub body_preview: Option<String>,
    #[serde(rename = "canAccept")]
    pub can_accept: Option<bool>,
    ///The categories associated with the item
    pub categories: Option<Vec<Option<String>>>,
    ///The Cc: recipients for the message.
    #[serde(rename = "ccRecipients")]
    pub cc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
    #[serde(rename = "changeKey")]
    pub change_key: Option<String>,
    ///The ID of the conversation the email belongs to.
    #[serde(rename = "conversationId")]
    pub conversation_id: Option<String>,
    ///Indicates the position of the message within the conversation.
    #[serde(rename = "conversationIndex")]
    pub conversation_index: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of open extensions defined for the message. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///Indicates the status, start date, due date, or completion date for the message.
    pub flag: Option<MicrosoftGraphFollowupFlag>,
    ///The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender property, except for sharing or delegation scenarios. The value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
    pub from: Option<MicrosoftGraphRecipient>,
    ///Indicates whether the message has attachments. This property doesn't include inline attachments, so if a message contains only inline attachments, this property is false. To verify the existence of inline attachments, parse the body property to look for a src attribute, such as <IMG src='cid:image001.jpg@01D26CD8.6C05F070'>.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The importance of the message. The possible values are: low, normal, and high.
    pub importance: Option<MicrosoftGraphImportance>,
    ///The classification of the message for the user, based on inferred relevance or importance, or on an explicit override. The possible values are: focused or other.
    #[serde(rename = "inferenceClassification")]
    pub inference_classification: Option<MicrosoftGraphInferenceClassificationType>,
    ///A collection of message headers defined by RFC5322. The set includes message headers indicating the network path taken by a message from the sender to the recipient. It can also contain custom message headers that hold app data for the message.  Returned only on applying a $select query option. Read-only.
    #[serde(rename = "internetMessageHeaders")]
    pub internet_message_headers: Option<Vec<MicrosoftGraphInternetMessageHeader>>,
    ///The message ID in the format specified by RFC2822.
    #[serde(rename = "internetMessageId")]
    pub internet_message_id: Option<String>,
    ///Indicates whether a read receipt is requested for the message.
    #[serde(rename = "isDeliveryReceiptRequested")]
    pub is_delivery_receipt_requested: Option<bool>,
    ///Indicates whether the message is a draft. A message is a draft if it hasn't been sent yet.
    #[serde(rename = "isDraft")]
    pub is_draft: Option<bool>,
    ///Indicates whether the message has been read.
    #[serde(rename = "isRead")]
    pub is_read: Option<bool>,
    ///Indicates whether a read receipt is requested for the message.
    #[serde(rename = "isReadReceiptRequested")]
    pub is_read_receipt_requested: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of multi-value extended properties defined for the message. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///The unique identifier for the message's parent mailFolder.
    #[serde(rename = "parentFolderId")]
    pub parent_folder_id: Option<String>,
    ///The date and time the message was received.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "receivedDateTime")]
    pub received_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The email addresses to use when replying.
    #[serde(rename = "replyTo")]
    pub reply_to: Option<Vec<MicrosoftGraphRecipient>>,
    ///The account that is used to generate the message. In most cases, this value is the same as the from property. You can set this property to a different value when sending a message from a shared mailbox, for a shared calendar, or as a delegate. In any case, the value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
    pub sender: Option<MicrosoftGraphRecipient>,
    ///The date and time the message was sent.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "sentDateTime")]
    pub sent_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "sharingMessageAction")]
    pub sharing_message_action: Option<MicrosoftGraphCalendarSharingMessageAction>,
    #[serde(rename = "sharingMessageActions")]
    pub sharing_message_actions: Option<Vec<MicrosoftGraphCalendarSharingMessageAction>>,
    ///The collection of single-value extended properties defined for the message. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
    ///The subject of the message.
    pub subject: Option<String>,
    #[serde(rename = "suggestedCalendarName")]
    pub suggested_calendar_name: Option<String>,
    ///The To: recipients for the message.
    #[serde(rename = "toRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///The part of the body of the message that is unique to the current message. uniqueBody is not returned by default but can be retrieved for a given message by use of the ?$select=uniqueBody query. It can be in HTML or text format.
    #[serde(rename = "uniqueBody")]
    pub unique_body: Option<MicrosoftGraphItemBody>,
    ///The URL to open the message in Outlook on the web.You can append an ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to 0, the browser shows the message in the Outlook on the web review pane.The message opens in the browser if you are signed in to your mailbox via Outlook on the web. You are prompted to sign in if you are not already signed in with the browser.This URL cannot be accessed from within an iFrame.
    #[serde(rename = "webLink")]
    pub web_link: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCalendarSharingMessageAction {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub action: Option<MicrosoftGraphCalendarSharingAction>,
    #[serde(rename = "actionType")]
    pub action_type: Option<MicrosoftGraphCalendarSharingActionType>,
    pub importance: Option<MicrosoftGraphCalendarSharingActionImportance>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCall {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.call".to_string())]
    pub odata_type: String,
    #[serde(rename = "audioRoutingGroups")]
    pub audio_routing_groups: Option<Vec<MicrosoftGraphAudioRoutingGroup>>,
    ///A unique identifier for all the participant calls in a conference or a unique identifier for two participant calls in a P2P call.  This identifier must be copied over from Microsoft.Graph.Call.CallChainId.
    #[serde(rename = "callChainId")]
    pub call_chain_id: Option<String>,
    ///Contains the optional features for the call.
    #[serde(rename = "callOptions")]
    pub call_options: Option<MicrosoftGraphCallOptions>,
    ///The routing information on how the call was retargeted. Read-only.
    #[serde(rename = "callRoutes")]
    pub call_routes: Option<Vec<MicrosoftGraphCallRoute>>,
    ///The callback URL on which callbacks are delivered. Must be an HTTPS URL.
    #[serde(rename = "callbackUri")]
    pub callback_uri: Option<String>,
    ///The chat information. Required information for joining a meeting.
    #[serde(rename = "chatInfo")]
    pub chat_info: Option<MicrosoftGraphChatInfo>,
    #[serde(rename = "contentSharingSessions")]
    pub content_sharing_sessions: Option<Vec<MicrosoftGraphContentSharingSession>>,
    ///The direction of the call. The possible values are incoming or outgoing. Read-only.
    pub direction: Option<MicrosoftGraphCallDirection>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Call context associated with an incoming call.
    #[serde(rename = "incomingContext")]
    pub incoming_context: Option<MicrosoftGraphIncomingContext>,
    ///The media configuration. Required.
    #[serde(rename = "mediaConfig")]
    pub media_config: Option<MicrosoftGraphMediaConfig>,
    ///Read-only. The call media state.
    #[serde(rename = "mediaState")]
    pub media_state: Option<MicrosoftGraphCallMediaState>,
    ///The meeting information. Required information for meeting scenarios.
    #[serde(rename = "meetingInfo")]
    pub meeting_info: Option<MicrosoftGraphMeetingInfo>,
    #[serde(rename = "myParticipantId")]
    pub my_participant_id: Option<String>,
    pub operations: Option<Vec<MicrosoftGraphCommsOperation>>,
    pub participants: Option<Vec<MicrosoftGraphParticipant>>,
    ///The list of requested modalities. Possible values are: unknown, audio, video, videoBasedScreenSharing, data.
    #[serde(rename = "requestedModalities")]
    pub requested_modalities: Option<Vec<MicrosoftGraphModality>>,
    ///The result information. For example, the result can hold termination reason. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    ///The originator of the call.
    pub source: Option<MicrosoftGraphParticipantInfo>,
    ///The call state. Possible values are: incoming, establishing, ringing, established, hold, transferring, transferAccepted, redirecting, terminating, terminated. Read-only.
    pub state: Option<MicrosoftGraphCallState>,
    ///The subject of the conversation.
    pub subject: Option<String>,
    ///The targets of the call. Required information for creating peer to peer call.
    pub targets: Option<Vec<MicrosoftGraphInvitationParticipantInfo>>,
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    #[serde(rename = "toneInfo")]
    pub tone_info: Option<MicrosoftGraphToneInfo>,
    ///The transcription information for the call. Read-only.
    pub transcription: Option<MicrosoftGraphCallTranscriptionInfo>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallDirection {
    #[serde(rename = "incoming")]
    #[default]
    Incoming,
    #[serde(rename = "outgoing")]
    Outgoing,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallEndedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callEndedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Duration of the call.
    #[serde(rename = "callDuration")]
    pub call_duration: Option<String>,
    ///Represents the call event type. Possible values are: call, meeting, screenShare, unknownFutureValue.
    #[serde(rename = "callEventType")]
    pub call_event_type: Option<MicrosoftGraphTeamworkCallEventType>,
    ///Unique identifier of the call.
    #[serde(rename = "callId")]
    pub call_id: Option<String>,
    ///List of call participants.
    #[serde(rename = "callParticipants")]
    pub call_participants: Option<Vec<MicrosoftGraphCallParticipantInfo>>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallEvent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callEvent".to_string())]
    pub odata_type: String,
    #[serde(rename = "callEventType")]
    pub call_event_type: Option<MicrosoftGraphCallEventType>,
    #[serde(rename = "eventDateTime")]
    pub event_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub participants: Option<Vec<MicrosoftGraphParticipant>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallEventType {
    #[serde(rename = "callStarted")]
    #[default]
    CallStarted,
    #[serde(rename = "callEnded")]
    CallEnded,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "rosterUpdated")]
    RosterUpdated,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallMediaState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The audio media state. Possible values are: active, inactive, unknownFutureValue.
    pub audio: Option<MicrosoftGraphMediaState>,
}
discriminated_enum! {
    pub enum MicrosoftGraphCallOptions { discriminator : "@odata.type", variants :
    [("#microsoft.graph.incomingCallOptions", MicrosoftGraphIncomingCallOptions(Box <
    MicrosoftGraphIncomingCallOptions >)), ("#microsoft.graph.outgoingCallOptions",
    MicrosoftGraphOutgoingCallOptions(Box < MicrosoftGraphOutgoingCallOptions >))],
    fallback : CallOptions(Box < MicrosoftGraphCallOptionsBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallOptionsBase {
    ///Indicates whether to hide the app after the call is escalated.
    #[serde(rename = "hideBotAfterEscalation")]
    pub hide_bot_after_escalation: Option<bool>,
    ///Indicates whether content sharing notifications should be enabled for the call.
    #[serde(rename = "isContentSharingNotificationEnabled")]
    pub is_content_sharing_notification_enabled: Option<bool>,
    ///Indicates whether delta roster is enabled for the call.
    #[serde(rename = "isDeltaRosterEnabled")]
    pub is_delta_roster_enabled: Option<bool>,
    ///Indicates whether delta roster filtering by participant interactivity is enabled.
    #[serde(rename = "isInteractiveRosterEnabled")]
    pub is_interactive_roster_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallParticipantInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Identity of the call participant.
    pub participant: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecording {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecording".to_string())]
    pub odata_type: String,
    ///The unique identifier for the call that is related to this recording. Read-only.
    #[serde(rename = "callId")]
    pub call_id: Option<String>,
    ///The content of the recording. Read-only.
    pub content: Option<String>,
    ///The unique identifier that links the transcript with its corresponding recording. Read-only.
    #[serde(rename = "contentCorrelationId")]
    pub content_correlation_id: Option<String>,
    ///Date and time at which the recording was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time at which the recording ends. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The unique identifier of the onlineMeeting related to this recording. Read-only.
    #[serde(rename = "meetingId")]
    pub meeting_id: Option<String>,
    ///The identity information of the organizer of the onlineMeeting related to this recording. Read-only.
    #[serde(rename = "meetingOrganizer")]
    pub meeting_organizer: Option<MicrosoftGraphIdentitySet>,
    ///The URL that can be used to access the content of the recording. Read-only.
    #[serde(rename = "recordingContentUrl")]
    pub recording_content_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordingEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecordingEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Unique identifier of the call.
    #[serde(rename = "callId")]
    pub call_id: Option<String>,
    ///Display name for the call recording.
    #[serde(rename = "callRecordingDisplayName")]
    pub call_recording_display_name: Option<String>,
    ///Duration of the call recording.
    #[serde(rename = "callRecordingDuration")]
    pub call_recording_duration: Option<String>,
    ///Status of the call recording. Possible values are: success, failure, initial, chunkFinished, unknownFutureValue.
    #[serde(rename = "callRecordingStatus")]
    pub call_recording_status: Option<MicrosoftGraphCallRecordingStatus>,
    ///Call recording URL.
    #[serde(rename = "callRecordingUrl")]
    pub call_recording_url: Option<String>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///Organizer of the meeting.
    #[serde(rename = "meetingOrganizer")]
    pub meeting_organizer: Option<MicrosoftGraphIdentitySet>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordingStatus {
    #[serde(rename = "success")]
    #[default]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "initial")]
    Initial,
    #[serde(rename = "chunkFinished")]
    ChunkFinished,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsAdministrativeUnitInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Unique identifier for the administrative unit.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsAudioCodec {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "invalid")]
    Invalid,
    #[serde(rename = "cn")]
    Cn,
    #[serde(rename = "pcma")]
    Pcma,
    #[serde(rename = "pcmu")]
    Pcmu,
    #[serde(rename = "amrWide")]
    AmrWide,
    #[serde(rename = "g722")]
    G722,
    #[serde(rename = "g7221")]
    G7221,
    #[serde(rename = "g7221c")]
    G7221c,
    #[serde(rename = "g729")]
    G729,
    #[serde(rename = "multiChannelAudio")]
    MultiChannelAudio,
    #[serde(rename = "muchv2")]
    Muchv2,
    #[serde(rename = "opus")]
    Opus,
    #[serde(rename = "satin")]
    Satin,
    #[serde(rename = "satinFullband")]
    SatinFullband,
    #[serde(rename = "rtAudio8")]
    RtAudio8,
    #[serde(rename = "rtAudio16")]
    RtAudio16,
    #[serde(rename = "silk")]
    Silk,
    #[serde(rename = "silkNarrow")]
    SilkNarrow,
    #[serde(rename = "silkWide")]
    SilkWide,
    #[serde(rename = "siren")]
    Siren,
    #[serde(rename = "xmsRta")]
    XmsRta,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsCallRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecords.callRecord".to_string())]
    pub odata_type: String,
    ///UTC time when the last user left the call. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Meeting URL associated to the call. May not be available for a peerToPeer call record type.
    #[serde(rename = "joinWebUrl")]
    pub join_web_url: Option<String>,
    ///UTC time when the call record was created. The DatetimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///List of all the modalities used in the call. Possible values are: unknown, audio, video, videoBasedScreenSharing, data, screenSharing, unknownFutureValue.
    pub modalities: Option<Vec<MicrosoftGraphCallRecordsModality>>,
    ///The organizing party's identity. The organizer property is deprecated and will stop returning data on June 30, 2026. Going forward, use the organizer_v2 relationship.
    pub organizer: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the organizer of the call. This relationship is expanded by default in callRecord methods.
    pub organizer_v2: Option<MicrosoftGraphCallRecordsOrganizer>,
    ///List of distinct identities involved in the call. Limited to 130 entries. The participants property is deprecated and will stop returning data on June 30, 2026. Going forward, use the participants_v2 relationship.
    pub participants: Option<Vec<MicrosoftGraphIdentitySet>>,
    ///List of distinct participants in the call.
    pub participants_v2: Option<Vec<MicrosoftGraphCallRecordsParticipant>>,
    ///List of sessions involved in the call. Peer-to-peer calls typically only have one session, whereas group calls typically have at least one session per participant. Read-only. Nullable.
    pub sessions: Option<Vec<MicrosoftGraphCallRecordsSession>>,
    ///UTC time when the first user joined the call. The DatetimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphCallRecordsCallType>,
    ///Monotonically increasing version of the call record. Higher version call records with the same id includes additional data compared to the lower version.
    pub version: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsCallType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "groupCall")]
    GroupCall,
    #[serde(rename = "peerToPeer")]
    PeerToPeer,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsClientPlatform {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "windows")]
    Windows,
    #[serde(rename = "macOS")]
    MacOs,
    #[serde(rename = "iOS")]
    IOs,
    #[serde(rename = "android")]
    Android,
    #[serde(rename = "web")]
    Web,
    #[serde(rename = "ipPhone")]
    IpPhone,
    #[serde(rename = "roomSystem")]
    RoomSystem,
    #[serde(rename = "surfaceHub")]
    SurfaceHub,
    #[serde(rename = "holoLens")]
    HoloLens,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsClientUserAgent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecords.clientUserAgent".to_string())]
    pub odata_type: String,
    ///Identifies the version of application software used by this endpoint.
    #[serde(rename = "applicationVersion")]
    pub application_version: Option<String>,
    ///The unique identifier of the Microsoft Entra application used by this endpoint.
    #[serde(rename = "azureADAppId")]
    pub azure_adapp_id: Option<String>,
    ///Immutable resource identifier of the Azure Communication Service associated with this endpoint based on Communication Services APIs.
    #[serde(rename = "communicationServiceId")]
    pub communication_service_id: Option<String>,
    ///User-agent header value reported by this endpoint.
    #[serde(rename = "headerValue")]
    pub header_value: Option<String>,
    pub platform: Option<MicrosoftGraphCallRecordsClientPlatform>,
    #[serde(rename = "productFamily")]
    pub product_family: Option<MicrosoftGraphCallRecordsProductFamily>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsDeviceInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Name of the capture device driver used by the media endpoint.
    #[serde(rename = "captureDeviceDriver")]
    pub capture_device_driver: Option<String>,
    ///Name of the capture device used by the media endpoint.
    #[serde(rename = "captureDeviceName")]
    pub capture_device_name: Option<String>,
    ///Fraction of the call that the media endpoint detected the capture device was not working properly.
    #[serde(rename = "captureNotFunctioningEventRatio")]
    pub capture_not_functioning_event_ratio: Option<
        MicrosoftGraphCallRecordsDeviceInfoCaptureNotFunctioningEventRatio,
    >,
    ///Fraction of the call that the media endpoint detected the CPU resources available were insufficient and caused poor quality of the audio sent and received.
    #[serde(rename = "cpuInsufficentEventRatio")]
    pub cpu_insufficent_event_ratio: Option<
        MicrosoftGraphCallRecordsDeviceInfoCpuInsufficentEventRatio,
    >,
    ///Fraction of the call that the media endpoint detected clipping in the captured audio that caused poor quality of the audio being sent.
    #[serde(rename = "deviceClippingEventRatio")]
    pub device_clipping_event_ratio: Option<
        MicrosoftGraphCallRecordsDeviceInfoDeviceClippingEventRatio,
    >,
    ///Fraction of the call that the media endpoint detected glitches or gaps in the audio played or captured that caused poor quality of the audio being sent or received.
    #[serde(rename = "deviceGlitchEventRatio")]
    pub device_glitch_event_ratio: Option<
        MicrosoftGraphCallRecordsDeviceInfoDeviceGlitchEventRatio,
    >,
    ///Number of times during the call that the media endpoint detected howling or screeching audio.
    #[serde(rename = "howlingEventCount")]
    pub howling_event_count: Option<f64>,
    ///The root mean square (RMS) of the incoming signal of up to the first 30 seconds of the call.
    #[serde(rename = "initialSignalLevelRootMeanSquare")]
    pub initial_signal_level_root_mean_square: Option<
        MicrosoftGraphCallRecordsDeviceInfoInitialSignalLevelRootMeanSquare,
    >,
    ///Fraction of the call that the media endpoint detected low speech level that caused poor quality of the audio being sent.
    #[serde(rename = "lowSpeechLevelEventRatio")]
    pub low_speech_level_event_ratio: Option<
        MicrosoftGraphCallRecordsDeviceInfoLowSpeechLevelEventRatio,
    >,
    ///Fraction of the call that the media endpoint detected low speech to noise level that caused poor quality of the audio being sent.
    #[serde(rename = "lowSpeechToNoiseEventRatio")]
    pub low_speech_to_noise_event_ratio: Option<
        MicrosoftGraphCallRecordsDeviceInfoLowSpeechToNoiseEventRatio,
    >,
    ///Glitches per 5 minute interval for the media endpoint's microphone.
    #[serde(rename = "micGlitchRate")]
    pub mic_glitch_rate: Option<MicrosoftGraphCallRecordsDeviceInfoMicGlitchRate>,
    ///Average energy level of received audio for audio classified as mono noise or left channel of stereo noise by the media endpoint.
    #[serde(rename = "receivedNoiseLevel")]
    pub received_noise_level: Option<f64>,
    ///Average energy level of received audio for audio classified as mono speech, or left channel of stereo speech by the media endpoint.
    #[serde(rename = "receivedSignalLevel")]
    pub received_signal_level: Option<f64>,
    ///Name of the render device driver used by the media endpoint.
    #[serde(rename = "renderDeviceDriver")]
    pub render_device_driver: Option<String>,
    ///Name of the render device used by the media endpoint.
    #[serde(rename = "renderDeviceName")]
    pub render_device_name: Option<String>,
    ///Fraction of the call that media endpoint detected device render is muted.
    #[serde(rename = "renderMuteEventRatio")]
    pub render_mute_event_ratio: Option<
        MicrosoftGraphCallRecordsDeviceInfoRenderMuteEventRatio,
    >,
    ///Fraction of the call that the media endpoint detected the render device was not working properly.
    #[serde(rename = "renderNotFunctioningEventRatio")]
    pub render_not_functioning_event_ratio: Option<
        MicrosoftGraphCallRecordsDeviceInfoRenderNotFunctioningEventRatio,
    >,
    ///Fraction of the call that media endpoint detected device render volume is set to 0.
    #[serde(rename = "renderZeroVolumeEventRatio")]
    pub render_zero_volume_event_ratio: Option<
        MicrosoftGraphCallRecordsDeviceInfoRenderZeroVolumeEventRatio,
    >,
    ///Average energy level of sent audio for audio classified as mono noise or left channel of stereo noise by the media endpoint.
    #[serde(rename = "sentNoiseLevel")]
    pub sent_noise_level: Option<f64>,
    ///Average energy level of sent audio for audio classified as mono speech, or left channel of stereo speech by the media endpoint.
    #[serde(rename = "sentSignalLevel")]
    pub sent_signal_level: Option<f64>,
    ///Glitches per 5 minute internal for the media endpoint's loudspeaker.
    #[serde(rename = "speakerGlitchRate")]
    pub speaker_glitch_rate: Option<
        MicrosoftGraphCallRecordsDeviceInfoSpeakerGlitchRate,
    >,
}
///Fraction of the call that the media endpoint detected the capture device was not working properly.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoCaptureNotFunctioningEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that the media endpoint detected the CPU resources available were insufficient and caused poor quality of the audio sent and received.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoCpuInsufficentEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that the media endpoint detected clipping in the captured audio that caused poor quality of the audio being sent.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoDeviceClippingEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that the media endpoint detected glitches or gaps in the audio played or captured that caused poor quality of the audio being sent or received.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoDeviceGlitchEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The root mean square (RMS) of the incoming signal of up to the first 30 seconds of the call.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoInitialSignalLevelRootMeanSquare {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that the media endpoint detected low speech level that caused poor quality of the audio being sent.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoLowSpeechLevelEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that the media endpoint detected low speech to noise level that caused poor quality of the audio being sent.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoLowSpeechToNoiseEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Glitches per 5 minute interval for the media endpoint's microphone.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoMicGlitchRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that media endpoint detected device render is muted.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoRenderMuteEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that the media endpoint detected the render device was not working properly.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoRenderNotFunctioningEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that media endpoint detected device render volume is set to 0.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoRenderZeroVolumeEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Glitches per 5 minute internal for the media endpoint's loudspeaker.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsDeviceInfoSpeakerGlitchRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
discriminated_enum! {
    pub enum MicrosoftGraphCallRecordsEndpoint { discriminator : "@odata.type", variants
    : [("#microsoft.graph.callRecords.participantEndpoint",
    MicrosoftGraphCallRecordsParticipantEndpoint(Box <
    MicrosoftGraphCallRecordsParticipantEndpoint >)),
    ("#microsoft.graph.callRecords.serviceEndpoint",
    MicrosoftGraphCallRecordsServiceEndpoint(Box <
    MicrosoftGraphCallRecordsServiceEndpoint >))], fallback : Endpoint(Box <
    MicrosoftGraphCallRecordsEndpointBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsEndpointBase {
    ///User-agent reported by this endpoint.
    #[serde(rename = "userAgent")]
    pub user_agent: Option<MicrosoftGraphCallRecordsUserAgent>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsFailureInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Classification of why a call or portion of a call failed.
    pub reason: Option<String>,
    pub stage: Option<MicrosoftGraphCallRecordsFailureStage>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsFailureStage {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "callSetup")]
    CallSetup,
    #[serde(rename = "midcall")]
    Midcall,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsFeedbackTokenSet {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsMedia {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Device information associated with the callee endpoint of this media.
    #[serde(rename = "calleeDevice")]
    pub callee_device: Option<MicrosoftGraphCallRecordsDeviceInfo>,
    ///Network information associated with the callee endpoint of this media.
    #[serde(rename = "calleeNetwork")]
    pub callee_network: Option<MicrosoftGraphCallRecordsNetworkInfo>,
    ///Device information associated with the caller endpoint of this media.
    #[serde(rename = "callerDevice")]
    pub caller_device: Option<MicrosoftGraphCallRecordsDeviceInfo>,
    ///Network information associated with the caller endpoint of this media.
    #[serde(rename = "callerNetwork")]
    pub caller_network: Option<MicrosoftGraphCallRecordsNetworkInfo>,
    ///How the media was identified during media negotiation stage.
    pub label: Option<String>,
    ///Network streams associated with this media.
    pub streams: Option<Vec<MicrosoftGraphCallRecordsMediaStream>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsMediaStream {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Codec name used to encode audio for transmission on the network. Possible values are: unknown, invalid, cn, pcma, pcmu, amrWide, g722, g7221, g7221c, g729, multiChannelAudio, muchv2, opus, satin, satinFullband, rtAudio8, rtAudio16, silk, silkNarrow, silkWide, siren, xmsRta, unknownFutureValue.
    #[serde(rename = "audioCodec")]
    pub audio_codec: Option<MicrosoftGraphCallRecordsAudioCodec>,
    ///Average Network Mean Opinion Score degradation for stream. Represents how much the network loss and jitter has impacted the quality of received audio.
    #[serde(rename = "averageAudioDegradation")]
    pub average_audio_degradation: Option<
        MicrosoftGraphCallRecordsMediaStreamAverageAudioDegradation,
    >,
    ///Average jitter for the stream computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    #[serde(rename = "averageAudioNetworkJitter")]
    pub average_audio_network_jitter: Option<String>,
    ///Average estimated bandwidth available between two endpoints in bits per second.
    #[serde(rename = "averageBandwidthEstimate")]
    pub average_bandwidth_estimate: Option<f64>,
    ///Average duration of the received freezing time in the video stream.
    #[serde(rename = "averageFreezeDuration")]
    pub average_freeze_duration: Option<String>,
    ///Average jitter for the stream computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    #[serde(rename = "averageJitter")]
    pub average_jitter: Option<String>,
    ///Average packet loss rate for stream.
    #[serde(rename = "averagePacketLossRate")]
    pub average_packet_loss_rate: Option<
        MicrosoftGraphCallRecordsMediaStreamAveragePacketLossRate,
    >,
    ///Ratio of the number of audio frames with samples generated by packet loss concealment to the total number of audio frames.
    #[serde(rename = "averageRatioOfConcealedSamples")]
    pub average_ratio_of_concealed_samples: Option<
        MicrosoftGraphCallRecordsMediaStreamAverageRatioOfConcealedSamples,
    >,
    ///Average frames per second received for all video streams computed over the duration of the session.
    #[serde(rename = "averageReceivedFrameRate")]
    pub average_received_frame_rate: Option<
        MicrosoftGraphCallRecordsMediaStreamAverageReceivedFrameRate,
    >,
    ///Average network propagation round-trip time computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    #[serde(rename = "averageRoundTripTime")]
    pub average_round_trip_time: Option<String>,
    ///Average percentage of video frames lost as displayed to the user.
    #[serde(rename = "averageVideoFrameLossPercentage")]
    pub average_video_frame_loss_percentage: Option<
        MicrosoftGraphCallRecordsMediaStreamAverageVideoFrameLossPercentage,
    >,
    ///Average frames per second received for a video stream, computed over the duration of the session.
    #[serde(rename = "averageVideoFrameRate")]
    pub average_video_frame_rate: Option<
        MicrosoftGraphCallRecordsMediaStreamAverageVideoFrameRate,
    >,
    ///Average fraction of packets lost, as specified in RFC 3550, computed over the duration of the session.
    #[serde(rename = "averageVideoPacketLossRate")]
    pub average_video_packet_loss_rate: Option<
        MicrosoftGraphCallRecordsMediaStreamAverageVideoPacketLossRate,
    >,
    ///UTC time when the stream ended. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. This field is only available for streams that use the SIP protocol.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether the forward error correction (FEC) was used at some point during the session. The default value is null.
    #[serde(rename = "isAudioForwardErrorCorrectionUsed")]
    pub is_audio_forward_error_correction_used: Option<bool>,
    ///Fraction of the call where frame rate is less than 7.5 frames per second.
    #[serde(rename = "lowFrameRateRatio")]
    pub low_frame_rate_ratio: Option<
        MicrosoftGraphCallRecordsMediaStreamLowFrameRateRatio,
    >,
    ///Fraction of the call that the client is running less than 70% expected video processing capability.
    #[serde(rename = "lowVideoProcessingCapabilityRatio")]
    pub low_video_processing_capability_ratio: Option<
        MicrosoftGraphCallRecordsMediaStreamLowVideoProcessingCapabilityRatio,
    >,
    ///Maximum of audio network jitter computed over each of the 20 second windows during the session, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    #[serde(rename = "maxAudioNetworkJitter")]
    pub max_audio_network_jitter: Option<String>,
    ///Maximum jitter for the stream computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    #[serde(rename = "maxJitter")]
    pub max_jitter: Option<String>,
    ///Maximum packet loss rate for the stream.
    #[serde(rename = "maxPacketLossRate")]
    pub max_packet_loss_rate: Option<
        MicrosoftGraphCallRecordsMediaStreamMaxPacketLossRate,
    >,
    ///Maximum ratio of packets concealed by the healer.
    #[serde(rename = "maxRatioOfConcealedSamples")]
    pub max_ratio_of_concealed_samples: Option<
        MicrosoftGraphCallRecordsMediaStreamMaxRatioOfConcealedSamples,
    >,
    ///Maximum network propagation round-trip time computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    #[serde(rename = "maxRoundTripTime")]
    pub max_round_trip_time: Option<String>,
    ///Packet count for the stream.
    #[serde(rename = "packetUtilization")]
    pub packet_utilization: Option<f64>,
    ///Packet loss rate after FEC has been applied aggregated across all video streams and codecs.
    #[serde(rename = "postForwardErrorCorrectionPacketLossRate")]
    pub post_forward_error_correction_packet_loss_rate: Option<
        MicrosoftGraphCallRecordsMediaStreamPostForwardErrorCorrectionPacketLossRate,
    >,
    ///Average duration of the received freezing time in the video stream represented in root mean square.
    #[serde(rename = "rmsFreezeDuration")]
    pub rms_freeze_duration: Option<String>,
    ///UTC time when the stream started. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. This field is only available for streams that use the SIP protocol.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "streamDirection")]
    pub stream_direction: Option<MicrosoftGraphCallRecordsMediaStreamDirection>,
    ///Unique identifier for the stream.
    #[serde(rename = "streamId")]
    pub stream_id: Option<String>,
    ///Codec name used to encode video for transmission on the network. Possible values are: unknown, invalid, av1, h263, h264, h264s, h264uc, h265, rtvc1, rtVideo, xrtvc1, unknownFutureValue.
    #[serde(rename = "videoCodec")]
    pub video_codec: Option<MicrosoftGraphCallRecordsVideoCodec>,
    ///True if the media stream bypassed the Mediation Server and went straight between client and PSTN Gateway/PBX, false otherwise.
    #[serde(rename = "wasMediaBypassed")]
    pub was_media_bypassed: Option<bool>,
}
///Average Network Mean Opinion Score degradation for stream. Represents how much the network loss and jitter has impacted the quality of received audio.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamAverageAudioDegradation {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Average packet loss rate for stream.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamAveragePacketLossRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Ratio of the number of audio frames with samples generated by packet loss concealment to the total number of audio frames.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamAverageRatioOfConcealedSamples {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Average frames per second received for all video streams computed over the duration of the session.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamAverageReceivedFrameRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Average percentage of video frames lost as displayed to the user.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamAverageVideoFrameLossPercentage {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Average frames per second received for a video stream, computed over the duration of the session.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamAverageVideoFrameRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Average fraction of packets lost, as specified in RFC 3550, computed over the duration of the session.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamAverageVideoPacketLossRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamDirection {
    #[serde(rename = "callerToCallee")]
    #[default]
    CallerToCallee,
    #[serde(rename = "calleeToCaller")]
    CalleeToCaller,
}
///Fraction of the call where frame rate is less than 7.5 frames per second.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamLowFrameRateRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that the client is running less than 70% expected video processing capability.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamLowVideoProcessingCapabilityRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Maximum packet loss rate for the stream.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamMaxPacketLossRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Maximum ratio of packets concealed by the healer.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamMaxRatioOfConcealedSamples {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Packet loss rate after FEC has been applied aggregated across all video streams and codecs.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsMediaStreamPostForwardErrorCorrectionPacketLossRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsModality {
    #[serde(rename = "audio")]
    #[default]
    Audio,
    #[serde(rename = "video")]
    Video,
    #[serde(rename = "videoBasedScreenSharing")]
    VideoBasedScreenSharing,
    #[serde(rename = "data")]
    Data,
    #[serde(rename = "screenSharing")]
    ScreenSharing,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsNetworkConnectionType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "wired")]
    Wired,
    #[serde(rename = "wifi")]
    Wifi,
    #[serde(rename = "mobile")]
    Mobile,
    #[serde(rename = "tunnel")]
    Tunnel,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsNetworkInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Fraction of the call that the media endpoint detected the available bandwidth or bandwidth policy was low enough to cause poor quality of the audio sent.
    #[serde(rename = "bandwidthLowEventRatio")]
    pub bandwidth_low_event_ratio: Option<
        MicrosoftGraphCallRecordsNetworkInfoBandwidthLowEventRatio,
    >,
    ///The wireless LAN basic service set identifier of the media endpoint used to connect to the network. This property isn't available if the user disables precise location sharing in their operating system or Microsoft Teams app settings.
    #[serde(rename = "basicServiceSetIdentifier")]
    pub basic_service_set_identifier: Option<String>,
    #[serde(rename = "connectionType")]
    pub connection_type: Option<MicrosoftGraphCallRecordsNetworkConnectionType>,
    ///Fraction of the call that the media endpoint detected the network delay was significant enough to impact the ability to have real-time two-way communication.
    #[serde(rename = "delayEventRatio")]
    pub delay_event_ratio: Option<MicrosoftGraphCallRecordsNetworkInfoDelayEventRatio>,
    ///DNS suffix associated with the network adapter of the media endpoint.
    #[serde(rename = "dnsSuffix")]
    pub dns_suffix: Option<String>,
    ///IP address of the media endpoint.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///Link speed in bits per second reported by the network adapter used by the media endpoint.
    #[serde(rename = "linkSpeed")]
    pub link_speed: Option<f64>,
    ///The media access control (MAC) address of the media endpoint's network device. This value may be missing or shown as 02:00:00:00:00:00 due to operating system privacy policies.
    #[serde(rename = "macAddress")]
    pub mac_address: Option<String>,
    #[serde(rename = "networkTransportProtocol")]
    pub network_transport_protocol: Option<
        MicrosoftGraphCallRecordsNetworkTransportProtocol,
    >,
    ///Network port number used by media endpoint.
    pub port: Option<f64>,
    ///Fraction of the call that the media endpoint detected the network was causing poor quality of the audio received.
    #[serde(rename = "receivedQualityEventRatio")]
    pub received_quality_event_ratio: Option<
        MicrosoftGraphCallRecordsNetworkInfoReceivedQualityEventRatio,
    >,
    ///IP address of the media endpoint as seen by the media relay server. This is typically the public internet IP address associated to the endpoint.
    #[serde(rename = "reflexiveIPAddress")]
    pub reflexive_ipaddress: Option<String>,
    ///IP address of the media relay server allocated by the media endpoint.
    #[serde(rename = "relayIPAddress")]
    pub relay_ipaddress: Option<String>,
    ///Network port number allocated on the media relay server by the media endpoint.
    #[serde(rename = "relayPort")]
    pub relay_port: Option<f64>,
    ///Fraction of the call that the media endpoint detected the network was causing poor quality of the audio sent.
    #[serde(rename = "sentQualityEventRatio")]
    pub sent_quality_event_ratio: Option<
        MicrosoftGraphCallRecordsNetworkInfoSentQualityEventRatio,
    >,
    ///Subnet used for media stream by the media endpoint.
    pub subnet: Option<String>,
    ///List of network trace route hops collected for this media stream.*
    #[serde(rename = "traceRouteHops")]
    pub trace_route_hops: Option<Vec<MicrosoftGraphCallRecordsTraceRouteHop>>,
    #[serde(rename = "wifiBand")]
    pub wifi_band: Option<MicrosoftGraphCallRecordsWifiBand>,
    ///Estimated remaining battery charge in percentage reported by the media endpoint.
    #[serde(rename = "wifiBatteryCharge")]
    pub wifi_battery_charge: Option<f64>,
    ///WiFi channel used by the media endpoint.
    #[serde(rename = "wifiChannel")]
    pub wifi_channel: Option<f64>,
    ///Name of the Microsoft WiFi driver used by the media endpoint. Value may be localized based on the language used by endpoint.
    #[serde(rename = "wifiMicrosoftDriver")]
    pub wifi_microsoft_driver: Option<String>,
    ///Version of the Microsoft WiFi driver used by the media endpoint.
    #[serde(rename = "wifiMicrosoftDriverVersion")]
    pub wifi_microsoft_driver_version: Option<String>,
    #[serde(rename = "wifiRadioType")]
    pub wifi_radio_type: Option<MicrosoftGraphCallRecordsWifiRadioType>,
    ///WiFi signal strength in percentage reported by the media endpoint.
    #[serde(rename = "wifiSignalStrength")]
    pub wifi_signal_strength: Option<f64>,
    ///Name of the WiFi driver used by the media endpoint. Value may be localized based on the language used by endpoint.
    #[serde(rename = "wifiVendorDriver")]
    pub wifi_vendor_driver: Option<String>,
    ///Version of the WiFi driver used by the media endpoint.
    #[serde(rename = "wifiVendorDriverVersion")]
    pub wifi_vendor_driver_version: Option<String>,
}
///Fraction of the call that the media endpoint detected the available bandwidth or bandwidth policy was low enough to cause poor quality of the audio sent.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsNetworkInfoBandwidthLowEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that the media endpoint detected the network delay was significant enough to impact the ability to have real-time two-way communication.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsNetworkInfoDelayEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that the media endpoint detected the network was causing poor quality of the audio received.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsNetworkInfoReceivedQualityEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Fraction of the call that the media endpoint detected the network was causing poor quality of the audio sent.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsNetworkInfoSentQualityEventRatio {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsNetworkTransportProtocol {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "udp")]
    Udp,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsOrganizer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecords.organizer".to_string())]
    pub odata_type: String,
    ///List of administrativeUnitInfo objects for the call participant.
    #[serde(rename = "administrativeUnitInfos")]
    pub administrative_unit_infos: Option<
        Vec<MicrosoftGraphCallRecordsAdministrativeUnitInfo>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the call participant.
    pub identity: Option<MicrosoftGraphCommunicationsIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsParticipant {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecords.participant".to_string())]
    pub odata_type: String,
    ///List of administrativeUnitInfo objects for the call participant.
    #[serde(rename = "administrativeUnitInfos")]
    pub administrative_unit_infos: Option<
        Vec<MicrosoftGraphCallRecordsAdministrativeUnitInfo>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the call participant.
    pub identity: Option<MicrosoftGraphCommunicationsIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsParticipantBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecords.participantBase".to_string())]
    pub odata_type: String,
    ///List of administrativeUnitInfo objects for the call participant.
    #[serde(rename = "administrativeUnitInfos")]
    pub administrative_unit_infos: Option<
        Vec<MicrosoftGraphCallRecordsAdministrativeUnitInfo>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the call participant.
    pub identity: Option<MicrosoftGraphCommunicationsIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsParticipantEndpoint {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecords.participantEndpoint".to_string())]
    pub odata_type: String,
    ///Identity associated with the endpoint.
    #[serde(rename = "associatedIdentity")]
    pub associated_identity: Option<MicrosoftGraphIdentity>,
    ///CPU number of cores used by the media endpoint.
    #[serde(rename = "cpuCoresCount")]
    pub cpu_cores_count: Option<f64>,
    ///CPU name used by the media endpoint.
    #[serde(rename = "cpuName")]
    pub cpu_name: Option<String>,
    ///CPU processor speed used by the media endpoint.
    #[serde(rename = "cpuProcessorSpeedInMhz")]
    pub cpu_processor_speed_in_mhz: Option<f64>,
    ///The feedback provided by the user of this endpoint about the quality of the session.
    pub feedback: Option<MicrosoftGraphCallRecordsUserFeedback>,
    ///Identity associated with the endpoint. The identity property is deprecated and will stop returning data on June 30, 2026. Going forward, use the associatedIdentity property.
    pub identity: Option<MicrosoftGraphIdentitySet>,
    ///Name of the device used by the media endpoint.
    pub name: Option<String>,
    ///User-agent reported by this endpoint.
    #[serde(rename = "userAgent")]
    pub user_agent: Option<MicrosoftGraphCallRecordsUserAgent>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsProductFamily {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "teams")]
    Teams,
    #[serde(rename = "skypeForBusiness")]
    SkypeForBusiness,
    #[serde(rename = "lync")]
    Lync,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "azureCommunicationServices")]
    AzureCommunicationServices,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsSegment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecords.segment".to_string())]
    pub odata_type: String,
    ///Endpoint that answered this segment.
    pub callee: Option<MicrosoftGraphCallRecordsEndpoint>,
    ///Endpoint that initiated this segment.
    pub caller: Option<MicrosoftGraphCallRecordsEndpoint>,
    ///UTC time when the segment ended. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Failure information associated with the segment if it failed.
    #[serde(rename = "failureInfo")]
    pub failure_info: Option<MicrosoftGraphCallRecordsFailureInfo>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Media associated with this segment.
    pub media: Option<Vec<MicrosoftGraphCallRecordsMedia>>,
    ///UTC time when the segment started. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsServiceEndpoint {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecords.serviceEndpoint".to_string())]
    pub odata_type: String,
    ///User-agent reported by this endpoint.
    #[serde(rename = "userAgent")]
    pub user_agent: Option<MicrosoftGraphCallRecordsUserAgent>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsServiceRole {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "customBot")]
    CustomBot,
    #[serde(rename = "skypeForBusinessMicrosoftTeamsGateway")]
    SkypeForBusinessMicrosoftTeamsGateway,
    #[serde(rename = "skypeForBusinessAudioVideoMcu")]
    SkypeForBusinessAudioVideoMcu,
    #[serde(rename = "skypeForBusinessApplicationSharingMcu")]
    SkypeForBusinessApplicationSharingMcu,
    #[serde(rename = "skypeForBusinessCallQueues")]
    SkypeForBusinessCallQueues,
    #[serde(rename = "skypeForBusinessAutoAttendant")]
    SkypeForBusinessAutoAttendant,
    #[serde(rename = "mediationServer")]
    MediationServer,
    #[serde(rename = "mediationServerCloudConnectorEdition")]
    MediationServerCloudConnectorEdition,
    #[serde(rename = "exchangeUnifiedMessagingService")]
    ExchangeUnifiedMessagingService,
    #[serde(rename = "mediaController")]
    MediaController,
    #[serde(rename = "conferencingAnnouncementService")]
    ConferencingAnnouncementService,
    #[serde(rename = "conferencingAttendant")]
    ConferencingAttendant,
    #[serde(rename = "audioTeleconferencerController")]
    AudioTeleconferencerController,
    #[serde(rename = "skypeForBusinessUnifiedCommunicationApplicationPlatform")]
    SkypeForBusinessUnifiedCommunicationApplicationPlatform,
    #[serde(rename = "responseGroupServiceAnnouncementService")]
    ResponseGroupServiceAnnouncementService,
    #[serde(rename = "gateway")]
    Gateway,
    #[serde(rename = "skypeTranslator")]
    SkypeTranslator,
    #[serde(rename = "skypeForBusinessAttendant")]
    SkypeForBusinessAttendant,
    #[serde(rename = "responseGroupService")]
    ResponseGroupService,
    #[serde(rename = "voicemail")]
    Voicemail,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsServiceUserAgent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecords.serviceUserAgent".to_string())]
    pub odata_type: String,
    ///Identifies the version of application software used by this endpoint.
    #[serde(rename = "applicationVersion")]
    pub application_version: Option<String>,
    ///User-agent header value reported by this endpoint.
    #[serde(rename = "headerValue")]
    pub header_value: Option<String>,
    pub role: Option<MicrosoftGraphCallRecordsServiceRole>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsSession {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecords.session".to_string())]
    pub odata_type: String,
    ///Endpoint that answered the session.
    pub callee: Option<MicrosoftGraphCallRecordsEndpoint>,
    ///Endpoint that initiated the session.
    pub caller: Option<MicrosoftGraphCallRecordsEndpoint>,
    ///UTC time when the last user left the session. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Failure information associated with the session if the session failed.
    #[serde(rename = "failureInfo")]
    pub failure_info: Option<MicrosoftGraphCallRecordsFailureInfo>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the session is a test.
    #[serde(rename = "isTest")]
    pub is_test: Option<bool>,
    ///List of modalities present in the session. Possible values are: unknown, audio, video, videoBasedScreenSharing, data, screenSharing, unknownFutureValue.
    pub modalities: Option<Vec<MicrosoftGraphCallRecordsModality>>,
    ///The list of segments involved in the session. Read-only. Nullable.
    pub segments: Option<Vec<MicrosoftGraphCallRecordsSegment>>,
    ///UTC time when the first user joined the session. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsTraceRouteHop {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The network path count of this hop that was used to compute the RTT.
    #[serde(rename = "hopCount")]
    pub hop_count: Option<f64>,
    ///IP address used for this hop in the network trace.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///The time from when the trace route packet was sent from the client to this hop and back to the client, denoted in ISO 8601 format. For example, 1 second is denoted as PT1S, where P is the duration designator, T is the time designator, and S is the second designator.
    #[serde(rename = "roundTripTime")]
    pub round_trip_time: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphCallRecordsUserAgent { discriminator : "@odata.type", variants
    : [("#microsoft.graph.callRecords.clientUserAgent",
    MicrosoftGraphCallRecordsClientUserAgent(Box <
    MicrosoftGraphCallRecordsClientUserAgent >)),
    ("#microsoft.graph.callRecords.serviceUserAgent",
    MicrosoftGraphCallRecordsServiceUserAgent(Box <
    MicrosoftGraphCallRecordsServiceUserAgent >))], fallback : UserAgent(Box <
    MicrosoftGraphCallRecordsUserAgentBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsUserAgentBase {
    ///Identifies the version of application software used by this endpoint.
    #[serde(rename = "applicationVersion")]
    pub application_version: Option<String>,
    ///User-agent header value reported by this endpoint.
    #[serde(rename = "headerValue")]
    pub header_value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsUserFeedback {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub rating: Option<MicrosoftGraphCallRecordsUserFeedbackRating>,
    ///The feedback text provided by the user of this endpoint for the session.
    pub text: Option<String>,
    ///The set of feedback tokens provided by the user of this endpoint for the session. This is a set of Boolean properties. The property names should not be relied upon since they may change depending on what tokens are offered to the user.
    pub tokens: Option<MicrosoftGraphCallRecordsFeedbackTokenSet>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsUserFeedbackRating {
    #[serde(rename = "notRated")]
    #[default]
    NotRated,
    #[serde(rename = "bad")]
    Bad,
    #[serde(rename = "poor")]
    Poor,
    #[serde(rename = "fair")]
    Fair,
    #[serde(rename = "good")]
    Good,
    #[serde(rename = "excellent")]
    Excellent,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRecordsUserIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callRecords.userIdentity".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsVideoCodec {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "invalid")]
    Invalid,
    #[serde(rename = "av1")]
    Av1,
    #[serde(rename = "h263")]
    H263,
    #[serde(rename = "h264")]
    H264,
    #[serde(rename = "h264s")]
    H264s,
    #[serde(rename = "h264uc")]
    H264uc,
    #[serde(rename = "h265")]
    H265,
    #[serde(rename = "rtvc1")]
    Rtvc1,
    #[serde(rename = "rtVideo")]
    RtVideo,
    #[serde(rename = "xrtvc1")]
    Xrtvc1,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsWifiBand {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "frequency24GHz")]
    Frequency24Ghz,
    #[serde(rename = "frequency50GHz")]
    Frequency50Ghz,
    #[serde(rename = "frequency60GHz")]
    Frequency60Ghz,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallRecordsWifiRadioType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "wifi80211a")]
    Wifi80211a,
    #[serde(rename = "wifi80211b")]
    Wifi80211b,
    #[serde(rename = "wifi80211g")]
    Wifi80211g,
    #[serde(rename = "wifi80211n")]
    Wifi80211n,
    #[serde(rename = "wifi80211ac")]
    Wifi80211ac,
    #[serde(rename = "wifi80211ax")]
    Wifi80211ax,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallRoute {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "final")]
    pub r#final: Option<MicrosoftGraphIdentitySet>,
    pub original: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "routingType")]
    pub routing_type: Option<MicrosoftGraphRoutingType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallStartedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callStartedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Represents the call event type. Possible values are: call, meeting, screenShare, unknownFutureValue.
    #[serde(rename = "callEventType")]
    pub call_event_type: Option<MicrosoftGraphTeamworkCallEventType>,
    ///Unique identifier of the call.
    #[serde(rename = "callId")]
    pub call_id: Option<String>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallState {
    #[serde(rename = "incoming")]
    #[default]
    Incoming,
    #[serde(rename = "establishing")]
    Establishing,
    #[serde(rename = "established")]
    Established,
    #[serde(rename = "hold")]
    Hold,
    #[serde(rename = "transferring")]
    Transferring,
    #[serde(rename = "transferAccepted")]
    TransferAccepted,
    #[serde(rename = "redirecting")]
    Redirecting,
    #[serde(rename = "terminating")]
    Terminating,
    #[serde(rename = "terminated")]
    Terminated,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallTranscript {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callTranscript".to_string())]
    pub odata_type: String,
    ///The unique identifier for the call that is related to this transcript. Read-only.
    #[serde(rename = "callId")]
    pub call_id: Option<String>,
    ///The content of the transcript. Read-only.
    pub content: Option<String>,
    ///The unique identifier that links the transcript with its corresponding recording. Read-only.
    #[serde(rename = "contentCorrelationId")]
    pub content_correlation_id: Option<String>,
    ///Date and time at which the transcript was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time at which the transcription ends. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The unique identifier of the online meeting related to this transcript. Read-only.
    #[serde(rename = "meetingId")]
    pub meeting_id: Option<String>,
    ///The identity information of the organizer of the onlineMeeting related to this transcript. Read-only.
    #[serde(rename = "meetingOrganizer")]
    pub meeting_organizer: Option<MicrosoftGraphIdentitySet>,
    ///The time-aligned metadata of the utterances in the transcript. Read-only.
    #[serde(rename = "metadataContent")]
    pub metadata_content: Option<String>,
    ///The URL that can be used to access the content of the transcript. Read-only.
    #[serde(rename = "transcriptContentUrl")]
    pub transcript_content_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallTranscriptEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.callTranscriptEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Unique identifier of the call.
    #[serde(rename = "callId")]
    pub call_id: Option<String>,
    ///Unique identifier for a call transcript.
    #[serde(rename = "callTranscriptICalUid")]
    pub call_transcript_ical_uid: Option<String>,
    ///The organizer of the meeting.
    #[serde(rename = "meetingOrganizer")]
    pub meeting_organizer: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCallTranscriptionInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The state modified time in UTC.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub state: Option<MicrosoftGraphCallTranscriptionState>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCallTranscriptionState {
    #[serde(rename = "notStarted")]
    #[default]
    NotStarted,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCancelMediaProcessingOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cancelMediaProcessingOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCanvasLayout {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.canvasLayout".to_string())]
    pub odata_type: String,
    ///Collection of horizontal sections on the SharePoint page.
    #[serde(rename = "horizontalSections")]
    pub horizontal_sections: Option<Vec<MicrosoftGraphHorizontalSection>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Vertical section on the SharePoint page.
    #[serde(rename = "verticalSection")]
    pub vertical_section: Option<MicrosoftGraphVerticalSection>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCategoryColor {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "preset0")]
    Preset0,
    #[serde(rename = "preset1")]
    Preset1,
    #[serde(rename = "preset2")]
    Preset2,
    #[serde(rename = "preset3")]
    Preset3,
    #[serde(rename = "preset4")]
    Preset4,
    #[serde(rename = "preset5")]
    Preset5,
    #[serde(rename = "preset6")]
    Preset6,
    #[serde(rename = "preset7")]
    Preset7,
    #[serde(rename = "preset8")]
    Preset8,
    #[serde(rename = "preset9")]
    Preset9,
    #[serde(rename = "preset10")]
    Preset10,
    #[serde(rename = "preset11")]
    Preset11,
    #[serde(rename = "preset12")]
    Preset12,
    #[serde(rename = "preset13")]
    Preset13,
    #[serde(rename = "preset14")]
    Preset14,
    #[serde(rename = "preset15")]
    Preset15,
    #[serde(rename = "preset16")]
    Preset16,
    #[serde(rename = "preset17")]
    Preset17,
    #[serde(rename = "preset18")]
    Preset18,
    #[serde(rename = "preset19")]
    Preset19,
    #[serde(rename = "preset20")]
    Preset20,
    #[serde(rename = "preset21")]
    Preset21,
    #[serde(rename = "preset22")]
    Preset22,
    #[serde(rename = "preset23")]
    Preset23,
    #[serde(rename = "preset24")]
    Preset24,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCertificateAuthority {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Required. The base64 encoded string representing the public certificate.
    pub certificate: Option<String>,
    ///The URL of the certificate revocation list.
    #[serde(rename = "certificateRevocationListUrl")]
    pub certificate_revocation_list_url: Option<String>,
    ///The URL contains the list of all revoked certificates since the last time a full certificate revocaton list was created.
    #[serde(rename = "deltaCertificateRevocationListUrl")]
    pub delta_certificate_revocation_list_url: Option<String>,
    ///Required. true if the trusted certificate is a root authority, false if the trusted certificate is an intermediate authority.
    #[serde(rename = "isRootAuthority")]
    pub is_root_authority: Option<bool>,
    ///The issuer of the certificate, calculated from the certificate value. Read-only.
    pub issuer: Option<String>,
    ///The subject key identifier of the certificate, calculated from the certificate value. Read-only.
    #[serde(rename = "issuerSki")]
    pub issuer_ski: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCertificateAuthorityDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.certificateAuthorityDetail".to_string())]
    pub odata_type: String,
    ///The public key of the certificate authority.
    pub certificate: Option<String>,
    ///The type of certificate authority. The possible values are: root, intermediate, unknownFutureValue. Supports $filter (eq).
    #[serde(rename = "certificateAuthorityType")]
    pub certificate_authority_type: Option<MicrosoftGraphCertificateAuthorityType>,
    ///The URL to check if the certificate is revoked.
    #[serde(rename = "certificateRevocationListUrl")]
    pub certificate_revocation_list_url: Option<String>,
    ///The date and time when the certificate authority was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "deltaCertificateRevocationListUrl")]
    pub delta_certificate_revocation_list_url: Option<String>,
    ///The display name of the certificate authority.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The date and time when the certificate authority expires. Supports $filter (eq) and $orderby.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the certificate picker presents the certificate authority to the user to use for authentication. Default value is false. Optional.
    #[serde(rename = "isIssuerHintEnabled")]
    pub is_issuer_hint_enabled: Option<bool>,
    ///The issuer of the certificate authority.
    pub issuer: Option<String>,
    ///The subject key identifier of certificate authority.
    #[serde(rename = "issuerSubjectKeyIdentifier")]
    pub issuer_subject_key_identifier: Option<String>,
    ///The thumbprint of certificate authority certificate. Supports $filter (eq, startswith).
    pub thumbprint: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCertificateAuthorityType {
    #[serde(rename = "root")]
    #[default]
    Root,
    #[serde(rename = "intermediate")]
    Intermediate,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCertificateBasedAuthConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.certificateBasedAuthConfiguration".to_string())]
    pub odata_type: String,
    ///Collection of certificate authorities which creates a trusted certificate chain.
    #[serde(rename = "certificateAuthorities")]
    pub certificate_authorities: Option<Vec<MicrosoftGraphCertificateAuthority>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCertificateBasedAuthPki {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.certificateBasedAuthPki".to_string())]
    pub odata_type: String,
    ///The collection of certificate authorities contained in this public key infrastructure resource.
    #[serde(rename = "certificateAuthorities")]
    pub certificate_authorities: Option<Vec<MicrosoftGraphCertificateAuthorityDetail>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the object. Maximum length is 256 characters.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time when the object was created or last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The status of any asynchronous jobs runs on the object which can be upload or delete.
    pub status: Option<String>,
    ///The status details of the upload/deleted operation of PKI (Public Key Infrastructure).
    #[serde(rename = "statusDetails")]
    pub status_details: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCertificateStatus {
    #[serde(rename = "notProvisioned")]
    #[default]
    NotProvisioned,
    #[serde(rename = "provisioned")]
    Provisioned,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCertification {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///URL that shows certification details for the application.
    #[serde(rename = "certificationDetailsUrl")]
    pub certification_details_url: Option<String>,
    ///The timestamp when the current certification for the application expires.
    #[serde(rename = "certificationExpirationDateTime")]
    pub certification_expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether the application is certified by Microsoft.
    #[serde(rename = "isCertifiedByMicrosoft")]
    pub is_certified_by_microsoft: Option<bool>,
    ///Indicates whether the application developer or publisher completed Publisher Attestation.
    #[serde(rename = "isPublisherAttested")]
    pub is_publisher_attested: Option<bool>,
    ///The timestamp when the certification for the application was most recently added or updated.
    #[serde(rename = "lastCertificationDateTime")]
    pub last_certification_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCertificationControl {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Certification control name
    pub name: Option<String>,
    ///URL for the Microsoft Service Trust Portal
    pub url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChallengingWord {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Number of times the word was found challenging by the student during the reading session.
    pub count: Option<f64>,
    ///The specific word that the student found challenging during the reading session.
    pub word: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChangeTrackedEntity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.changeTrackedEntity".to_string())]
    pub odata_type: String,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChannel {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.channel".to_string())]
    pub odata_type: String,
    ///A collection of membership records associated with the channel, including both direct and indirect members of shared channels.
    #[serde(rename = "allMembers")]
    pub all_members: Option<Vec<MicrosoftGraphConversationMember>>,
    ///Read only. Timestamp at which the channel was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Optional textual description for the channel.
    pub description: Option<String>,
    ///Channel name as it will appear to the user in Microsoft Teams. The maximum length is 50 characters.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The email address for sending messages to the channel. Read-only.
    pub email: Option<String>,
    ///Metadata for the location where the channel's files are stored.
    #[serde(rename = "filesFolder")]
    pub files_folder: Option<Box<MicrosoftGraphDriveItem>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the channel is archived. Read-only.
    #[serde(rename = "isArchived")]
    pub is_archived: Option<bool>,
    ///Indicates whether the channel should be marked as recommended for all members of the team to show in their channel list. Note: All recommended channels automatically show in the channels list for education and frontline worker users. The property can only be set programmatically via the Create team method. The default value is false.
    #[serde(rename = "isFavoriteByDefault")]
    pub is_favorite_by_default: Option<bool>,
    ///A collection of membership records associated with the channel.
    pub members: Option<Vec<MicrosoftGraphConversationMember>>,
    ///The type of the channel. Can be set during creation and can't be changed. The possible values are: standard, private, unknownFutureValue, shared. The default value is standard. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: shared.
    #[serde(rename = "membershipType")]
    pub membership_type: Option<MicrosoftGraphChannelMembershipType>,
    ///A collection of all the messages in the channel. A navigation property. Nullable.
    pub messages: Option<Vec<MicrosoftGraphChatMessage>>,
    ///A collection of teams with which a channel is shared.
    #[serde(rename = "sharedWithTeams")]
    pub shared_with_teams: Option<Vec<MicrosoftGraphSharedWithChannelTeamInfo>>,
    ///Contains summary information about the channel, including number of owners, members, guests, and an indicator for members from other tenants. The summary property will only be returned if it is specified in the $select clause of the Get channel method.
    pub summary: Option<MicrosoftGraphChannelSummary>,
    ///A collection of all the tabs in the channel. A navigation property.
    pub tabs: Option<Vec<MicrosoftGraphTeamsTab>>,
    ///The ID of the Microsoft Entra tenant.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    ///A hyperlink that will go to the channel in Microsoft Teams. This is the URL that you get when you right-click a channel in Microsoft Teams and select Get link to channel. This URL should be treated as an opaque blob, and not parsed. Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChannelAddedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.channelAddedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Display name of the channel.
    #[serde(rename = "channelDisplayName")]
    pub channel_display_name: Option<String>,
    ///Unique identifier of the channel.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChannelDeletedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.channelDeletedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Display name of the channel.
    #[serde(rename = "channelDisplayName")]
    pub channel_display_name: Option<String>,
    ///Unique identifier of the channel.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChannelDescriptionUpdatedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.channelDescriptionUpdatedEventMessageDetail".to_string()
    )]
    pub odata_type: String,
    ///The updated description of the channel.
    #[serde(rename = "channelDescription")]
    pub channel_description: Option<String>,
    ///Unique identifier of the channel.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChannelIdentity {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The identity of the channel in which the message was posted.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    ///The identity of the team in which the message was posted.
    #[serde(rename = "teamId")]
    pub team_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphChannelMembershipType {
    #[serde(rename = "standard")]
    #[default]
    Standard,
    #[serde(rename = "private")]
    Private,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "shared")]
    Shared,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChannelRenamedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.channelRenamedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///The updated name of the channel.
    #[serde(rename = "channelDisplayName")]
    pub channel_display_name: Option<String>,
    ///Unique identifier of the channel.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChannelSetAsFavoriteByDefaultEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.channelSetAsFavoriteByDefaultEventMessageDetail".to_string()
    )]
    pub odata_type: String,
    ///Unique identifier of the channel.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChannelSummary {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Count of guests in a channel.
    #[serde(rename = "guestsCount")]
    pub guests_count: Option<f64>,
    ///Indicates whether external members are included on the channel.
    #[serde(rename = "hasMembersFromOtherTenants")]
    pub has_members_from_other_tenants: Option<bool>,
    ///Count of members in a channel.
    #[serde(rename = "membersCount")]
    pub members_count: Option<f64>,
    ///Count of owners in a channel.
    #[serde(rename = "ownersCount")]
    pub owners_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChannelUnsetAsFavoriteByDefaultEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.channelUnsetAsFavoriteByDefaultEventMessageDetail".to_string()
    )]
    pub odata_type: String,
    ///Unique identifier of the channel.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.chat".to_string())]
    pub odata_type: String,
    #[serde(rename = "chatType")]
    pub chat_type: Option<MicrosoftGraphChatType>,
    ///Date and time at which the chat was created. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of all the apps in the chat. Nullable.
    #[serde(rename = "installedApps")]
    pub installed_apps: Option<Vec<MicrosoftGraphTeamsAppInstallation>>,
    ///Indicates whether the chat is hidden for all its members. Read-only.
    #[serde(rename = "isHiddenForAllMembers")]
    pub is_hidden_for_all_members: Option<bool>,
    ///Preview of the last message sent in the chat. Null if no messages were sent in the chat. Currently, only the list chats operation supports this property.
    #[serde(rename = "lastMessagePreview")]
    pub last_message_preview: Option<MicrosoftGraphChatMessageInfo>,
    ///Date and time at which the chat was renamed or the list of members was last changed. Read-only.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A collection of all the members in the chat. Nullable.
    pub members: Option<Vec<MicrosoftGraphConversationMember>>,
    ///A collection of all the messages in the chat. Nullable.
    pub messages: Option<Vec<MicrosoftGraphChatMessage>>,
    ///Represents details about an online meeting. If the chat isn't associated with an online meeting, the property is empty. Read-only.
    #[serde(rename = "onlineMeetingInfo")]
    pub online_meeting_info: Option<MicrosoftGraphTeamworkOnlineMeetingInfo>,
    ///A collection of permissions granted to apps for the chat.
    #[serde(rename = "permissionGrants")]
    pub permission_grants: Option<Vec<MicrosoftGraphResourceSpecificPermissionGrant>>,
    ///A collection of all the pinned messages in the chat. Nullable.
    #[serde(rename = "pinnedMessages")]
    pub pinned_messages: Option<Vec<MicrosoftGraphPinnedChatMessageInfo>>,
    ///A collection of all the tabs in the chat. Nullable.
    pub tabs: Option<Vec<MicrosoftGraphTeamsTab>>,
    ///The identifier of the tenant in which the chat was created. Read-only.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    ///(Optional) Subject or topic for the chat. Only available for group chats.
    pub topic: Option<String>,
    ///Represents caller-specific information about the chat, such as the last message read date and time. This property is populated only when the request is made in a delegated context.
    pub viewpoint: Option<MicrosoftGraphChatViewpoint>,
    ///The URL for the chat in Microsoft Teams. The URL should be treated as an opaque blob, and not parsed. Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The unique identifier of a message in a Microsoft Teams channel.
    #[serde(rename = "messageId")]
    pub message_id: Option<String>,
    ///The ID of the reply message.
    #[serde(rename = "replyChainMessageId")]
    pub reply_chain_message_id: Option<String>,
    ///The unique identifier for a thread in Microsoft Teams.
    #[serde(rename = "threadId")]
    pub thread_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.chatMessage".to_string())]
    pub odata_type: String,
    ///References to attached objects like files, tabs, meetings etc.
    pub attachments: Option<Vec<MicrosoftGraphChatMessageAttachment>>,
    pub body: Option<MicrosoftGraphItemBody>,
    ///If the message was sent in a channel, represents identity of the channel.
    #[serde(rename = "channelIdentity")]
    pub channel_identity: Option<MicrosoftGraphChannelIdentity>,
    ///If the message was sent in a chat, represents the identity of the chat.
    #[serde(rename = "chatId")]
    pub chat_id: Option<String>,
    ///Timestamp of when the chat message was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Read only. Timestamp at which the chat message was deleted, or null if not deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Read-only. Version number of the chat message.
    pub etag: Option<String>,
    ///Read-only. If present, represents details of an event that happened in a chat, a channel, or a team, for example, adding new members. For event messages, the messageType property will be set to systemEventMessage.
    #[serde(rename = "eventDetail")]
    pub event_detail: Option<MicrosoftGraphEventMessageDetail>,
    ///Details of the sender of the chat message. Can only be set during migration.
    pub from: Option<MicrosoftGraphChatMessageFromIdentitySet>,
    ///Content in a message hosted by Microsoft Teams - for example, images or code snippets.
    #[serde(rename = "hostedContents")]
    pub hosted_contents: Option<Vec<MicrosoftGraphChatMessageHostedContent>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub importance: Option<MicrosoftGraphChatMessageImportance>,
    ///Read only. Timestamp when edits to the chat message were made. Triggers an 'Edited' flag in the Teams UI. If no edits are made the value is null.
    #[serde(rename = "lastEditedDateTime")]
    pub last_edited_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Read only. Timestamp when the chat message is created (initial setting) or modified, including when a reaction is added or removed.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Locale of the chat message set by the client. Always set to en-us.
    pub locale: Option<String>,
    ///List of entities mentioned in the chat message. Supported entities are: user, bot, team, channel, chat, and tag.
    pub mentions: Option<Vec<MicrosoftGraphChatMessageMention>>,
    ///List of activity history of a message item, including modification time and actions, such as reactionAdded, reactionRemoved, or reaction changes, on the message.
    #[serde(rename = "messageHistory")]
    pub message_history: Option<Vec<MicrosoftGraphChatMessageHistoryItem>>,
    #[serde(rename = "messageType")]
    pub message_type: Option<MicrosoftGraphChatMessageType>,
    ///Defines the properties of a policy violation set by a data loss prevention (DLP) application.
    #[serde(rename = "policyViolation")]
    pub policy_violation: Option<MicrosoftGraphChatMessagePolicyViolation>,
    ///Reactions for this chat message (for example, Like).
    pub reactions: Option<Vec<MicrosoftGraphChatMessageReaction>>,
    ///Replies for a specified message. Supports $expand for channel messages.
    pub replies: Option<Vec<MicrosoftGraphChatMessage>>,
    ///Read-only. ID of the parent chat message or root chat message of the thread. (Only applies to chat messages in channels, not chats.)
    #[serde(rename = "replyToId")]
    pub reply_to_id: Option<String>,
    ///The subject of the chat message, in plaintext.
    pub subject: Option<String>,
    ///Summary text of the chat message that could be used for push notifications and summary views or fall back views. Only applies to channel chat messages, not chat messages in a chat.
    pub summary: Option<String>,
    ///Read-only. Link to the message in Microsoft Teams.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphChatMessageActions {
    #[serde(rename = "reactionAdded")]
    #[default]
    ReactionAdded,
    #[serde(rename = "reactionRemoved")]
    ReactionRemoved,
    #[serde(rename = "actionUndefined")]
    ActionUndefined,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessageAttachment {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property and contentUrl are mutually exclusive.
    pub content: Option<String>,
    ///The media type of the content attachment. The possible values are: reference: The attachment is a link to another file. Populate the contentURL with the link to the object.forwardedMessageReference: The attachment is a reference to a forwarded message. Populate the content with the original message context.Any contentType that is supported by the Bot Framework's Attachment object.application/vnd.microsoft.card.codesnippet: A code snippet. application/vnd.microsoft.card.announcement: An announcement header.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The URL for the content of the attachment.
    #[serde(rename = "contentUrl")]
    pub content_url: Option<String>,
    ///Read-only. The unique ID of the attachment.
    pub id: Option<String>,
    ///The name of the attachment.
    pub name: Option<String>,
    ///The ID of the Teams app that is associated with the attachment. The property is used to attribute a Teams message card to the specified app.
    #[serde(rename = "teamsAppId")]
    pub teams_app_id: Option<String>,
    ///The URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl. For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document. When the user selects the image, the channel would open the document.
    #[serde(rename = "thumbnailUrl")]
    pub thumbnail_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessageFromIdentitySet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.chatMessageFromIdentitySet".to_string())]
    pub odata_type: String,
    ///Optional. The application associated with this action.
    pub application: Option<MicrosoftGraphIdentity>,
    ///Optional. The device associated with this action.
    pub device: Option<MicrosoftGraphIdentity>,
    ///Optional. The user associated with this action.
    pub user: Option<MicrosoftGraphIdentity>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessageHistoryItem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub actions: Option<MicrosoftGraphChatMessageActions>,
    ///The date and time when the message was modified.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The reaction in the modified message.
    pub reaction: Option<MicrosoftGraphChatMessageReaction>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessageHostedContent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.chatMessageHostedContent".to_string())]
    pub odata_type: String,
    ///Write only. Bytes for the hosted content (such as images).
    #[serde(rename = "contentBytes")]
    pub content_bytes: Option<String>,
    ///Write only. Content type. such as image/png, image/jpg.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphChatMessageImportance {
    #[serde(rename = "normal")]
    #[default]
    Normal,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "urgent")]
    Urgent,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessageInfo {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.chatMessageInfo".to_string())]
    pub odata_type: String,
    ///Body of the chatMessage. This will still contain markers for @mentions and attachments even though the object doesn't return @mentions and attachments.
    pub body: Option<MicrosoftGraphItemBody>,
    ///Date time object representing the time at which message was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Read-only.  If present, represents details of an event that happened in a chat, a channel, or a team, for example, members were added, and so on. For event messages, the messageType property is set to systemEventMessage.
    #[serde(rename = "eventDetail")]
    pub event_detail: Option<MicrosoftGraphEventMessageDetail>,
    ///Information about the sender of the message.
    pub from: Option<MicrosoftGraphChatMessageFromIdentitySet>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If set to true, the original message has been deleted.
    #[serde(rename = "isDeleted")]
    pub is_deleted: Option<bool>,
    #[serde(rename = "messageType")]
    pub message_type: Option<MicrosoftGraphChatMessageType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessageMention {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Index of an entity being mentioned in the specified chatMessage. Matches the {index} value in the corresponding <at id='{index}'> tag in the message body.
    pub id: Option<f64>,
    ///String used to represent the mention. For example, a user's display name, a team name.
    #[serde(rename = "mentionText")]
    pub mention_text: Option<String>,
    ///The entity (user, application, team, channel, or chat) that was @mentioned.
    pub mentioned: Option<MicrosoftGraphChatMessageMentionedIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessageMentionedIdentitySet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.chatMessageMentionedIdentitySet".to_string())]
    pub odata_type: String,
    ///Optional. The application associated with this action.
    pub application: Option<MicrosoftGraphIdentity>,
    ///If present, represents a conversation (for example, team, channel, or chat) @mentioned in a message.
    pub conversation: Option<MicrosoftGraphTeamworkConversationIdentity>,
    ///Optional. The device associated with this action.
    pub device: Option<MicrosoftGraphIdentity>,
    ///Optional. The user associated with this action.
    pub user: Option<MicrosoftGraphIdentity>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessagePolicyViolation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The action taken by the DLP provider on the message with sensitive content. Supported values are: NoneNotifySender -- Inform the sender of the violation but allow readers to read the message.BlockAccess -- Block readers from reading the message.BlockAccessExternal -- Block users outside the organization from reading the message, while allowing users within the organization to read the message.
    #[serde(rename = "dlpAction")]
    pub dlp_action: Option<MicrosoftGraphChatMessagePolicyViolationDlpActionTypes>,
    ///Justification text provided by the sender of the message when overriding a policy violation.
    #[serde(rename = "justificationText")]
    pub justification_text: Option<String>,
    ///Information to display to the message sender about why the message was flagged as a violation.
    #[serde(rename = "policyTip")]
    pub policy_tip: Option<MicrosoftGraphChatMessagePolicyViolationPolicyTip>,
    ///Indicates the action taken by the user on a message blocked by the DLP provider. Supported values are: NoneOverrideReportFalsePositiveWhen the DLP provider is updating the message for blocking sensitive content, userAction isn't required.
    #[serde(rename = "userAction")]
    pub user_action: Option<MicrosoftGraphChatMessagePolicyViolationUserActionTypes>,
    ///Indicates what actions the sender may take in response to the policy violation. Supported values are: NoneAllowFalsePositiveOverride -- Allows the sender to declare the policyViolation to be an error in the DLP app and its rules, and allow readers to see the message again if the dlpAction hides it.AllowOverrideWithoutJustification -- Allows the sender to override the DLP violation and allow readers to see the message again if the dlpAction hides it, without needing to provide an explanation for doing so. AllowOverrideWithJustification -- Allows the sender to override the DLP violation and allow readers to see the message again if the dlpAction hides it, after providing an explanation for doing so.AllowOverrideWithoutJustification and AllowOverrideWithJustification are mutually exclusive.
    #[serde(rename = "verdictDetails")]
    pub verdict_details: Option<
        MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes,
    >,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphChatMessagePolicyViolationDlpActionTypes {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "notifySender")]
    NotifySender,
    #[serde(rename = "blockAccess")]
    BlockAccess,
    #[serde(rename = "blockAccessExternal")]
    BlockAccessExternal,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessagePolicyViolationPolicyTip {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The URL a user can visit to read about the data loss prevention policies for the organization. (ie, policies about what users shouldn't say in chats)
    #[serde(rename = "complianceUrl")]
    pub compliance_url: Option<String>,
    ///Explanatory text shown to the sender of the message.
    #[serde(rename = "generalText")]
    pub general_text: Option<String>,
    ///The list of improper data in the message that was detected by the data loss prevention app. Each DLP app defines its own conditions, examples include 'Credit Card Number' and 'Social Security Number'.
    #[serde(rename = "matchedConditionDescriptions")]
    pub matched_condition_descriptions: Option<Vec<Option<String>>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphChatMessagePolicyViolationUserActionTypes {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "override")]
    Override,
    #[serde(rename = "reportFalsePositive")]
    ReportFalsePositive,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "allowFalsePositiveOverride")]
    AllowFalsePositiveOverride,
    #[serde(rename = "allowOverrideWithoutJustification")]
    AllowOverrideWithoutJustification,
    #[serde(rename = "allowOverrideWithJustification")]
    AllowOverrideWithJustification,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessageReaction {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the reaction.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The hosted content URL for the custom reaction type.
    #[serde(rename = "reactionContentUrl")]
    pub reaction_content_url: Option<String>,
    ///The reaction type. Supported values include Unicode characters, custom, and some backward-compatible reaction types, such as like, angry, sad, laugh, heart, and surprised.
    #[serde(rename = "reactionType")]
    pub reaction_type: Option<String>,
    pub user: Option<MicrosoftGraphChatMessageReactionIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatMessageReactionIdentitySet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.chatMessageReactionIdentitySet".to_string())]
    pub odata_type: String,
    ///Optional. The application associated with this action.
    pub application: Option<MicrosoftGraphIdentity>,
    ///Optional. The device associated with this action.
    pub device: Option<MicrosoftGraphIdentity>,
    ///Optional. The user associated with this action.
    pub user: Option<MicrosoftGraphIdentity>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphChatMessageType {
    #[serde(rename = "message")]
    #[default]
    Message,
    #[serde(rename = "chatEvent")]
    ChatEvent,
    #[serde(rename = "typing")]
    Typing,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "systemEventMessage")]
    SystemEventMessage,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatRenamedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.chatRenamedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///The updated name of the chat.
    #[serde(rename = "chatDisplayName")]
    pub chat_display_name: Option<String>,
    ///Unique identifier of the chat.
    #[serde(rename = "chatId")]
    pub chat_id: Option<String>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatRestrictions {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether only text is allowed in the meeting chat. Optional.
    #[serde(rename = "allowTextOnly")]
    pub allow_text_only: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphChatType {
    #[serde(rename = "oneOnOne")]
    #[default]
    OneOnOne,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "meeting")]
    Meeting,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChatViewpoint {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether the chat is hidden for the current user.
    #[serde(rename = "isHidden")]
    pub is_hidden: Option<bool>,
    ///Represents the dateTime up until which the current user has read chatMessages in a specific chat.
    #[serde(rename = "lastMessageReadDateTime")]
    pub last_message_read_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChecklistItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.checklistItem".to_string())]
    pub odata_type: String,
    ///The date and time when the checklistItem was finished.
    #[serde(rename = "checkedDateTime")]
    pub checked_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when the checklistItem was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the title of the checklistItem.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///State that indicates whether the item is checked off or not.
    #[serde(rename = "isChecked")]
    pub is_checked: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphChoiceColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If true, allows custom values that aren't in the configured choices.
    #[serde(rename = "allowTextEntry")]
    pub allow_text_entry: Option<bool>,
    ///The list of values available for this column.
    pub choices: Option<Vec<Option<String>>>,
    ///How the choices are to be presented in the UX. Must be one of checkBoxes, dropDownMenu, or radioButtons
    #[serde(rename = "displayAs")]
    pub display_as: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphClaimsMappingPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.claimsMappingPolicy".to_string())]
    pub odata_type: String,
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///A string collection containing a JSON string that defines the rules and settings for a policy. The syntax for the definition differs for each derived policy type. Required.
    pub definition: Option<Vec<String>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If set to true, activates this policy. There can be many policies for the same policy type, but only one can be activated as the organization default. Optional, default value is false.
    #[serde(rename = "isOrganizationDefault")]
    pub is_organization_default: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphClickSource {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "qrCode")]
    QrCode,
    #[serde(rename = "phishingUrl")]
    PhishingUrl,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphClientCertificateAuthentication {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.clientCertificateAuthentication".to_string())]
    pub odata_type: String,
    ///The list of certificates uploaded for this API connector.
    #[serde(rename = "certificateList")]
    pub certificate_list: Option<Vec<MicrosoftGraphPkcs12CertificateInformation>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudAppSecuritySessionControl {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudAppSecuritySessionControl".to_string())]
    pub odata_type: String,
    ///Possible values are: mcasConfigured, monitorOnly, blockDownloads, unknownFutureValue. For more information, see Deploy Conditional Access App Control for featured apps.
    #[serde(rename = "cloudAppSecurityType")]
    pub cloud_app_security_type: Option<
        MicrosoftGraphCloudAppSecuritySessionControlType,
    >,
    ///Specifies whether the session control is enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudAppSecuritySessionControlType {
    #[serde(rename = "mcasConfigured")]
    #[default]
    McasConfigured,
    #[serde(rename = "monitorOnly")]
    MonitorOnly,
    #[serde(rename = "blockDownloads")]
    BlockDownloads,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudAppSecurityState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Destination IP Address of the connection to the cloud application/service.
    #[serde(rename = "destinationServiceIp")]
    pub destination_service_ip: Option<String>,
    ///Cloud application/service name (for example 'Salesforce', 'DropBox', etc.).
    #[serde(rename = "destinationServiceName")]
    pub destination_service_name: Option<String>,
    ///Provider-generated/calculated risk score of the Cloud Application/Service. Recommended value range of 0-1, which equates to a percentage.
    #[serde(rename = "riskScore")]
    pub risk_score: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudClipboardItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudClipboardItem".to_string())]
    pub odata_type: String,
    ///Set by the server. DateTime in UTC when the object was created on the server.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Set by the server. DateTime in UTC when the object expires and after that the object is no longer available. The default and also maximum TTL is 12 hours after the creation, but it might change for performance optimization.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Set by the server if not provided in the client's request. DateTime in UTC when the object was modified by the client.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A cloudClipboardItem can have multiple cloudClipboardItemPayload objects in the payloads. A window can place more than one clipboard object on the clipboard. Each one represents the same information in a different clipboard format.
    pub payloads: Option<Vec<MicrosoftGraphCloudClipboardItemPayload>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudClipboardItemPayload {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The formatName version of the value of a cloud clipboard encoded in base64.
    pub content: Option<String>,
    ///For a list of possible values see formatName values.
    #[serde(rename = "formatName")]
    pub format_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudClipboardRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudClipboardRoot".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents a collection of Cloud Clipboard items.
    pub items: Option<Vec<MicrosoftGraphCloudClipboardItem>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPc {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudPC".to_string())]
    pub odata_type: String,
    ///The Microsoft Entra device ID for the Cloud PC, also known as the Azure Active Directory (Azure AD) device ID, that consists of 32 characters in a GUID format. Generated on a VM joined to Microsoft Entra ID. Read-only.
    #[serde(rename = "aadDeviceId")]
    pub aad_device_id: Option<String>,
    ///The display name for the Cloud PC. Maximum length is 64 characters. Read-only. You can use the cloudPC: rename API to modify the Cloud PC name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The date and time when the grace period ends and reprovisioning or deprovisioning happen. Required only if the status is inGracePeriod. The timestamp is shown in ISO 8601 format and Coordinated Universal Time (UTC). For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "gracePeriodEndDateTime")]
    pub grace_period_end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The name of the operating system image used for the Cloud PC. Maximum length is 50 characters. Only letters (A-Z, a-z), numbers (0-9), and special characters (-,,.) are allowed for this property. The property value can't begin or end with an underscore. Read-only.
    #[serde(rename = "imageDisplayName")]
    pub image_display_name: Option<String>,
    ///The last modified date and time of the Cloud PC. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The Intune enrolled device ID for the Cloud PC that consists of 32 characters in a GUID format. The managedDeviceId property of Windows 365 Business Cloud PCs is always null as Windows 365 Business Cloud PCs aren't Intune-enrolled automatically by Windows 365. Read-only.
    #[serde(rename = "managedDeviceId")]
    pub managed_device_id: Option<String>,
    ///The Intune enrolled device name for the Cloud PC. The managedDeviceName property of Windows 365 Business Cloud PCs is always null as Windows 365 Business Cloud PCs aren't Intune-enrolled automatically by Windows 365. Read-only.
    #[serde(rename = "managedDeviceName")]
    pub managed_device_name: Option<String>,
    ///The on-premises connection that applied during the provisioning of Cloud PCs. Read-only.
    #[serde(rename = "onPremisesConnectionName")]
    pub on_premises_connection_name: Option<String>,
    ///The provisioning policy ID for the Cloud PC that consists of 32 characters in a GUID format. A policy defines the type of Cloud PC the user wants to create. Read-only.
    #[serde(rename = "provisioningPolicyId")]
    pub provisioning_policy_id: Option<String>,
    ///The provisioning policy that applied during the provisioning of Cloud PCs. Maximum length is 120 characters. Read-only.
    #[serde(rename = "provisioningPolicyName")]
    pub provisioning_policy_name: Option<String>,
    ///The type of licenses to be used when provisioning Cloud PCs using this policy. Possible values are: dedicated, shared, unknownFutureValue. The default value is dedicated.
    #[serde(rename = "provisioningType")]
    pub provisioning_type: Option<MicrosoftGraphCloudPcProvisioningType>,
    ///The service plan ID for the Cloud PC that consists of 32 characters in a GUID format. For more information about service plans, see Product names and service plan identifiers for licensing. Read-only.
    #[serde(rename = "servicePlanId")]
    pub service_plan_id: Option<String>,
    ///The service plan name for the customer-facing Cloud PC entity. Read-only.
    #[serde(rename = "servicePlanName")]
    pub service_plan_name: Option<String>,
    ///The user principal name (UPN) of the user assigned to the Cloud PC. Maximum length is 113 characters. For more information on username policies, see Password policies and account restrictions in Microsoft Entra ID. Read-only.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcAuditActivityOperationType {
    #[serde(rename = "create")]
    #[default]
    Create,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "patch")]
    Patch,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcAuditActivityResult {
    #[serde(rename = "success")]
    #[default]
    Success,
    #[serde(rename = "clientError")]
    ClientError,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "timeout")]
    Timeout,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcAuditActor {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Name of the application.
    #[serde(rename = "applicationDisplayName")]
    pub application_display_name: Option<String>,
    ///Microsoft Entra application ID.
    #[serde(rename = "applicationId")]
    pub application_id: Option<String>,
    ///IP address.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///The delegated partner tenant ID.
    #[serde(rename = "remoteTenantId")]
    pub remote_tenant_id: Option<String>,
    ///The delegated partner user ID.
    #[serde(rename = "remoteUserId")]
    pub remote_user_id: Option<String>,
    ///Service Principal Name (SPN).
    #[serde(rename = "servicePrincipalName")]
    pub service_principal_name: Option<String>,
    ///Microsoft Entra user ID.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///List of user permissions and application permissions when the audit event was performed.
    #[serde(rename = "userPermissions")]
    pub user_permissions: Option<Vec<String>>,
    ///User Principal Name (UPN).
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
    ///List of role scope tags.
    #[serde(rename = "userRoleScopeTags")]
    pub user_role_scope_tags: Option<Vec<MicrosoftGraphCloudPcUserRoleScopeTagInfo>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcAuditCategory {
    #[serde(rename = "cloudPC")]
    #[default]
    CloudPc,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcAuditEvent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudPcAuditEvent".to_string())]
    pub odata_type: String,
    ///The friendly name of the audit activity.
    pub activity: Option<String>,
    ///The date time in UTC when the activity was performed. Read-only.
    #[serde(rename = "activityDateTime")]
    pub activity_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "activityOperationType")]
    pub activity_operation_type: Option<MicrosoftGraphCloudPcAuditActivityOperationType>,
    #[serde(rename = "activityResult")]
    pub activity_result: Option<MicrosoftGraphCloudPcAuditActivityResult>,
    ///The type of activity that was performed. Read-only.
    #[serde(rename = "activityType")]
    pub activity_type: Option<String>,
    pub actor: Option<MicrosoftGraphCloudPcAuditActor>,
    pub category: Option<MicrosoftGraphCloudPcAuditCategory>,
    ///The component name for the audit event. Read-only.
    #[serde(rename = "componentName")]
    pub component_name: Option<String>,
    ///The client request ID that is used to correlate activity within the system. Read-only.
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<String>,
    ///The display name for the audit event. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The list of cloudPcAuditResource objects. Read-only.
    pub resources: Option<Vec<MicrosoftGraphCloudPcAuditResource>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcAuditProperty {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The display name for this property.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The new value for this property.
    #[serde(rename = "newValue")]
    pub new_value: Option<String>,
    ///The old value for this property.
    #[serde(rename = "oldValue")]
    pub old_value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcAuditResource {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The display name of the modified resource entity.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The list of modified properties.
    #[serde(rename = "modifiedProperties")]
    pub modified_properties: Option<Vec<MicrosoftGraphCloudPcAuditProperty>>,
    ///The unique identifier of the modified resource entity.
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcDeviceImage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudPcDeviceImage".to_string())]
    pub odata_type: String,
    ///The display name of the associated device image. The device image display name and the version are used to uniquely identify the Cloud PC device image. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The error code of the status of the image that indicates why the upload failed, if applicable. Possible values are: internalServerError, sourceImageNotFound, osVersionNotSupported, sourceImageInvalid, sourceImageNotGeneralized, unknownFutureValue, vmAlreadyAzureAdJoined, paidSourceImageNotSupport, sourceImageNotSupportCustomizeVMName, sourceImageSizeExceedsLimitation. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: vmAlreadyAzureAdJoined, paidSourceImageNotSupport, sourceImageNotSupportCustomizeVMName, sourceImageSizeExceedsLimitation. Read-only.
    #[serde(rename = "errorCode")]
    pub error_code: Option<MicrosoftGraphCloudPcDeviceImageErrorCode>,
    ///The date when the image became unavailable. Read-only.
    #[serde(rename = "expirationDate")]
    pub expiration_date: Option<chrono::NaiveDate>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The data and time when the image was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The operating system (OS) of the image. For example, Windows 11 Enterprise. Read-only.
    #[serde(rename = "operatingSystem")]
    pub operating_system: Option<String>,
    ///The OS build version of the image. For example, 1909. Read-only.
    #[serde(rename = "osBuildNumber")]
    pub os_build_number: Option<String>,
    ///The OS status of this image. Possible values are: supported, supportedWithWarning, unknown, unknownFutureValue. The default value is unknown. Read-only.
    #[serde(rename = "osStatus")]
    pub os_status: Option<MicrosoftGraphCloudPcDeviceImageOsStatus>,
    ///The unique identifier (ID) of the source image resource on Azure. The required ID format is: '/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}'. Read-only.
    #[serde(rename = "sourceImageResourceId")]
    pub source_image_resource_id: Option<String>,
    ///The status of the image on the Cloud PC. Possible values are: pending, ready, failed, unknownFutureValue. Read-only.
    pub status: Option<MicrosoftGraphCloudPcDeviceImageStatus>,
    ///The image version. For example, 0.0.1 and 1.5.13. Read-only.
    pub version: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcDeviceImageErrorCode {
    #[serde(rename = "internalServerError")]
    #[default]
    InternalServerError,
    #[serde(rename = "sourceImageNotFound")]
    SourceImageNotFound,
    #[serde(rename = "osVersionNotSupported")]
    OsVersionNotSupported,
    #[serde(rename = "sourceImageInvalid")]
    SourceImageInvalid,
    #[serde(rename = "sourceImageNotGeneralized")]
    SourceImageNotGeneralized,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "vmAlreadyAzureAdjoined")]
    VmAlreadyAzureAdjoined,
    #[serde(rename = "paidSourceImageNotSupport")]
    PaidSourceImageNotSupport,
    #[serde(rename = "sourceImageNotSupportCustomizeVMName")]
    SourceImageNotSupportCustomizeVmname,
    #[serde(rename = "sourceImageSizeExceedsLimitation")]
    SourceImageSizeExceedsLimitation,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcDeviceImageOsStatus {
    #[serde(rename = "supported")]
    #[default]
    Supported,
    #[serde(rename = "supportedWithWarning")]
    SupportedWithWarning,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcDeviceImageStatus {
    #[serde(rename = "pending")]
    #[default]
    Pending,
    #[serde(rename = "ready")]
    Ready,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcDomainJoinConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies the method by which the provisioned Cloud PC joins Microsoft Entra ID. If you choose the hybridAzureADJoin type, only provide a value for the onPremisesConnectionId property and leave the regionName property empty. If you choose the azureADJoin type, provide a value for either the onPremisesConnectionId or the regionName property. Possible values are: azureADJoin, hybridAzureADJoin, unknownFutureValue.
    #[serde(rename = "domainJoinType")]
    pub domain_join_type: Option<MicrosoftGraphCloudPcDomainJoinType>,
    ///The Azure network connection ID that matches the virtual network IT admins want the provisioning policy to use when they create Cloud PCs. You can use this property in both domain join types: Azure AD joined or Hybrid Microsoft Entra joined. If you enter an onPremisesConnectionId, leave the regionName property empty.
    #[serde(rename = "onPremisesConnectionId")]
    pub on_premises_connection_id: Option<String>,
    ///The logical geographic group this region belongs to. Multiple regions can belong to one region group. A customer can select a regionGroup when they provision a Cloud PC, and the Cloud PC is put in one of the regions in the group based on resource status. For example, the Europe region group contains the Northern Europe and Western Europe regions. Possible values are: default, australia, canada, usCentral, usEast, usWest, france, germany, europeUnion, unitedKingdom, japan, asia, india, southAmerica, euap, usGovernment, usGovernmentDOD, unknownFutureValue, norway, switzerland, southKorea. Use the Prefer: include-unknown-enum-members request header to get the following values in this evolvable enum: norway, switzerland, southKorea. Read-only.
    #[serde(rename = "regionGroup")]
    pub region_group: Option<MicrosoftGraphCloudPcRegionGroup>,
    ///The supported Azure region where the IT admin wants the provisioning policy to create Cloud PCs. Within this region, the Windows 365 service creates and manages the underlying virtual network. This option is available only when the IT admin selects Microsoft Entra joined as the domain join type. If you enter a regionName, leave the onPremisesConnectionId property empty.
    #[serde(rename = "regionName")]
    pub region_name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcDomainJoinType {
    #[serde(rename = "azureADJoin")]
    #[default]
    AzureAdjoin,
    #[serde(rename = "hybridAzureADJoin")]
    HybridAzureAdjoin,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcGalleryImage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudPcGalleryImage".to_string())]
    pub odata_type: String,
    ///The display name of this gallery image. For example, Windows 11 Enterprise + Microsoft 365 Apps 22H2. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The date when the status of the image becomes supportedWithWarning. Users can still provision new Cloud PCs if the current time is later than endDate and earlier than expirationDate. For example, assume the endDate of a gallery image is 2023-9-14 and expirationDate is 2024-3-14, users are able to provision new Cloud PCs if today is 2023-10-01. Read-only.
    #[serde(rename = "endDate")]
    pub end_date: Option<chrono::NaiveDate>,
    ///The date when the image is no longer available. Users are unable to provision new Cloud PCs if the current time is later than expirationDate. The value is usually endDate plus six months. For example, if the startDate is 2025-10-14, the expirationDate is usually 2026-04-14. Read-only.
    #[serde(rename = "expirationDate")]
    pub expiration_date: Option<chrono::NaiveDate>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The offer name of this gallery image that is passed to Azure Resource Manager (ARM) to retrieve the image resource. Read-only.
    #[serde(rename = "offerName")]
    pub offer_name: Option<String>,
    ///The publisher name of this gallery image that is passed to Azure Resource Manager (ARM) to retrieve the image resource. Read-only.
    #[serde(rename = "publisherName")]
    pub publisher_name: Option<String>,
    ///Indicates the size of this image in gigabytes. For example, 64. Read-only.
    #[serde(rename = "sizeInGB")]
    pub size_in_gb: Option<f64>,
    ///The SKU name of this image that is passed to Azure Resource Manager (ARM) to retrieve the image resource. Read-only.
    #[serde(rename = "skuName")]
    pub sku_name: Option<String>,
    ///The date when the Cloud PC image is available for provisioning new Cloud PCs. For example, 2022-09-20. Read-only.
    #[serde(rename = "startDate")]
    pub start_date: Option<chrono::NaiveDate>,
    ///The status of the gallery image on the Cloud PC. Possible values are: supported, supportedWithWarning, notSupported, unknownFutureValue. The default value is supported. Read-only.
    pub status: Option<MicrosoftGraphCloudPcGalleryImageStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcGalleryImageStatus {
    #[serde(rename = "supported")]
    #[default]
    Supported,
    #[serde(rename = "supportedWithWarning")]
    SupportedWithWarning,
    #[serde(rename = "notSupported")]
    NotSupported,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
discriminated_enum! {
    pub enum MicrosoftGraphCloudPcManagementAssignmentTarget { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.cloudPcManagementGroupAssignmentTarget",
    MicrosoftGraphCloudPcManagementGroupAssignmentTarget(Box <
    MicrosoftGraphCloudPcManagementGroupAssignmentTarget >))], fallback :
    CloudPcManagementAssignmentTarget(Box <
    MicrosoftGraphCloudPcManagementAssignmentTargetBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcManagementAssignmentTargetBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcManagementGroupAssignmentTarget {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudPcManagementGroupAssignmentTarget".to_string())]
    pub odata_type: String,
    ///The ID of the target group for the assignment.
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
    ///The unique identifier for the service plan that indicates which size of the Cloud PC to provision for the user. Use a null value, when the provisioningType is dedicated.
    #[serde(rename = "servicePlanId")]
    pub service_plan_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcOnPremisesConnection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudPcOnPremisesConnection".to_string())]
    pub odata_type: String,
    ///The fully qualified domain name (FQDN) of the Active Directory domain you want to join. Maximum length is 255. Optional.
    #[serde(rename = "adDomainName")]
    pub ad_domain_name: Option<String>,
    ///The password associated with the username of an Active Directory account (adDomainUsername).
    #[serde(rename = "adDomainPassword")]
    pub ad_domain_password: Option<String>,
    ///The username of an Active Directory account (user or service account) that has permission to create computer objects in Active Directory. Required format: admin@contoso.com. Optional.
    #[serde(rename = "adDomainUsername")]
    pub ad_domain_username: Option<String>,
    ///The interface URL of the partner service's resource that links to this Azure network connection. Returned only on $select.
    #[serde(rename = "alternateResourceUrl")]
    pub alternate_resource_url: Option<String>,
    ///Specifies how the provisioned Cloud PC joins to Microsoft Entra. It includes different types, one is Microsoft Entra ID join, which means there's no on-premises Active Directory (AD) in the current tenant, and the Cloud PC device is joined by Microsoft Entra. Another one is hybridAzureADJoin, which means there's also an on-premises Active Directory (AD) in the current tenant and the Cloud PC device joins to on-premises Active Directory (AD) and Microsoft Entra. The type also determines which types of users can be assigned and can sign into a Cloud PC. The azureADJoin type indicates that cloud-only and hybrid users can be assigned and signed into the Cloud PC. hybridAzureADJoin indicates only hybrid users can be assigned and signed into the Cloud PC. The default value is hybridAzureADJoin.
    #[serde(rename = "connectionType")]
    pub connection_type: Option<MicrosoftGraphCloudPcOnPremisesConnectionType>,
    ///The display name for the Azure network connection.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(rename = "healthCheckStatus")]
    pub health_check_status: Option<MicrosoftGraphCloudPcOnPremisesConnectionStatus>,
    ///Indicates the results of health checks performed on the on-premises connection. Read-only. Returned only on $select. For an example that shows how to get the inUse property, see Example 2: Get the selected properties of an Azure network connection, including healthCheckStatusDetail. Read-only.
    #[serde(rename = "healthCheckStatusDetail")]
    pub health_check_status_detail: Option<
        MicrosoftGraphCloudPcOnPremisesConnectionStatusDetail,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When true, the Azure network connection is in use. When false, the connection isn't in use. You can't delete a connection that’s in use. Returned only on $select. For an example that shows how to get the inUse property, see Example 2: Get the selected properties of an Azure network connection, including healthCheckStatusDetail. Read-only.
    #[serde(rename = "inUse")]
    pub in_use: Option<bool>,
    ///The organizational unit (OU) in which the computer account is created. If left null, the OU configured as the default (a well-known computer object container) in the tenant's Active Directory domain (OU) is used. Optional.
    #[serde(rename = "organizationalUnit")]
    pub organizational_unit: Option<String>,
    ///The unique identifier of the target resource group used associated with the on-premises network connectivity for Cloud PCs. Required format: '/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}'
    #[serde(rename = "resourceGroupId")]
    pub resource_group_id: Option<String>,
    ///The unique identifier of the target subnet used associated with the on-premises network connectivity for Cloud PCs. Required format: '/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkId}/subnets/{subnetName}'
    #[serde(rename = "subnetId")]
    pub subnet_id: Option<String>,
    ///The unique identifier of the Azure subscription associated with the tenant.
    #[serde(rename = "subscriptionId")]
    pub subscription_id: Option<String>,
    ///The name of the Azure subscription is used to create an Azure network connection. Read-only.
    #[serde(rename = "subscriptionName")]
    pub subscription_name: Option<String>,
    ///The unique identifier of the target virtual network used associated with the on-premises network connectivity for Cloud PCs. Required format: '/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}'
    #[serde(rename = "virtualNetworkId")]
    pub virtual_network_id: Option<String>,
    ///Indicates the resource location of the target virtual network. For example, the location can be eastus2, westeurope, etc. Read-only (computed value).
    #[serde(rename = "virtualNetworkLocation")]
    pub virtual_network_location: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcOnPremisesConnectionHealthCheck {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Additional details about the health check or the recommended action. For exmaple, the string value can be download.microsoft.com:443;software-download.microsoft.com:443; Read-only.
    #[serde(rename = "additionalDetail")]
    pub additional_detail: Option<String>,
    ///The unique identifier of the health check item-related activities. This identifier can be useful in troubleshooting.
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<String>,
    ///The display name for this health check item.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The value cannot be modified and is automatically populated when the health check ends. The Timestamp type represents date and time information using ISO 8601 format and is in Coordinated Universal Time (UTC). For example, midnight UTC on Jan 1, 2024 would look like this: '2024-01-01T00:00:00Z'. Returned by default. Read-only.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The type of error that occurred during this health check. Possible values are: endpointConnectivityCheckCloudPcUrlNotAllowListed, endpointConnectivityCheckWVDUrlNotAllowListed, etc. (The all possible values can refer to cloudPcOnPremisesConnectionHealthCheckErrorType) Read-Only.
    #[serde(rename = "errorType")]
    pub error_type: Option<
        MicrosoftGraphCloudPcOnPremisesConnectionHealthCheckErrorType,
    >,
    ///The recommended action to fix the corresponding error. For example, The Active Directory domain join check failed because the password of the domain join user has expired. Read-Only.
    #[serde(rename = "recommendedAction")]
    pub recommended_action: Option<String>,
    ///The value cannot be modified and is automatically populated when the health check starts. The Timestamp type represents date and time information using ISO 8601 format and is in  Coordinated Universal Time (UTC). For example, midnight UTC on Jan 1, 2024 would look like this: '2024-01-01T00:00:00Z'. Returned by default. Read-only.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub status: Option<MicrosoftGraphCloudPcOnPremisesConnectionStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcOnPremisesConnectionHealthCheckErrorType {
    #[serde(rename = "dnsCheckFqdnNotFound")]
    #[default]
    DnsCheckFqdnNotFound,
    #[serde(rename = "dnsCheckNameWithInvalidCharacter")]
    DnsCheckNameWithInvalidCharacter,
    #[serde(rename = "dnsCheckUnknownError")]
    DnsCheckUnknownError,
    #[serde(rename = "adJoinCheckFqdnNotFound")]
    AdJoinCheckFqdnNotFound,
    #[serde(rename = "adJoinCheckIncorrectCredentials")]
    AdJoinCheckIncorrectCredentials,
    #[serde(rename = "adJoinCheckOrganizationalUnitNotFound")]
    AdJoinCheckOrganizationalUnitNotFound,
    #[serde(rename = "adJoinCheckOrganizationalUnitIncorrectFormat")]
    AdJoinCheckOrganizationalUnitIncorrectFormat,
    #[serde(rename = "adJoinCheckComputerObjectAlreadyExists")]
    AdJoinCheckComputerObjectAlreadyExists,
    #[serde(rename = "adJoinCheckAccessDenied")]
    AdJoinCheckAccessDenied,
    #[serde(rename = "adJoinCheckCredentialsExpired")]
    AdJoinCheckCredentialsExpired,
    #[serde(rename = "adJoinCheckAccountLockedOrDisabled")]
    AdJoinCheckAccountLockedOrDisabled,
    #[serde(rename = "adJoinCheckAccountQuotaExceeded")]
    AdJoinCheckAccountQuotaExceeded,
    #[serde(rename = "adJoinCheckServerNotOperational")]
    AdJoinCheckServerNotOperational,
    #[serde(rename = "adJoinCheckUnknownError")]
    AdJoinCheckUnknownError,
    #[serde(rename = "endpointConnectivityCheckCloudPcUrlNotAllowListed")]
    EndpointConnectivityCheckCloudPcUrlNotAllowListed,
    #[serde(rename = "endpointConnectivityCheckWVDUrlNotAllowListed")]
    EndpointConnectivityCheckWvdurlNotAllowListed,
    #[serde(rename = "endpointConnectivityCheckIntuneUrlNotAllowListed")]
    EndpointConnectivityCheckIntuneUrlNotAllowListed,
    #[serde(rename = "endpointConnectivityCheckAzureADUrlNotAllowListed")]
    EndpointConnectivityCheckAzureAdurlNotAllowListed,
    #[serde(rename = "endpointConnectivityCheckLocaleUrlNotAllowListed")]
    EndpointConnectivityCheckLocaleUrlNotAllowListed,
    #[serde(rename = "endpointConnectivityCheckUnknownError")]
    EndpointConnectivityCheckUnknownError,
    #[serde(rename = "azureAdDeviceSyncCheckDeviceNotFound")]
    AzureAdDeviceSyncCheckDeviceNotFound,
    #[serde(rename = "azureAdDeviceSyncCheckLongSyncCircle")]
    AzureAdDeviceSyncCheckLongSyncCircle,
    #[serde(rename = "azureAdDeviceSyncCheckConnectDisabled")]
    AzureAdDeviceSyncCheckConnectDisabled,
    #[serde(rename = "azureAdDeviceSyncCheckDurationExceeded")]
    AzureAdDeviceSyncCheckDurationExceeded,
    #[serde(rename = "azureAdDeviceSyncCheckScpNotConfigured")]
    AzureAdDeviceSyncCheckScpNotConfigured,
    #[serde(rename = "azureAdDeviceSyncCheckTransientServiceError")]
    AzureAdDeviceSyncCheckTransientServiceError,
    #[serde(rename = "azureAdDeviceSyncCheckUnknownError")]
    AzureAdDeviceSyncCheckUnknownError,
    #[serde(rename = "resourceAvailabilityCheckNoSubnetIP")]
    ResourceAvailabilityCheckNoSubnetIp,
    #[serde(rename = "resourceAvailabilityCheckSubscriptionDisabled")]
    ResourceAvailabilityCheckSubscriptionDisabled,
    #[serde(rename = "resourceAvailabilityCheckAzurePolicyViolation")]
    ResourceAvailabilityCheckAzurePolicyViolation,
    #[serde(rename = "resourceAvailabilityCheckSubscriptionNotFound")]
    ResourceAvailabilityCheckSubscriptionNotFound,
    #[serde(rename = "resourceAvailabilityCheckSubscriptionTransferred")]
    ResourceAvailabilityCheckSubscriptionTransferred,
    #[serde(rename = "resourceAvailabilityCheckGeneralSubscriptionError")]
    ResourceAvailabilityCheckGeneralSubscriptionError,
    #[serde(rename = "resourceAvailabilityCheckUnsupportedVNetRegion")]
    ResourceAvailabilityCheckUnsupportedVnetRegion,
    #[serde(rename = "resourceAvailabilityCheckResourceGroupInvalid")]
    ResourceAvailabilityCheckResourceGroupInvalid,
    #[serde(rename = "resourceAvailabilityCheckVNetInvalid")]
    ResourceAvailabilityCheckVnetInvalid,
    #[serde(rename = "resourceAvailabilityCheckSubnetInvalid")]
    ResourceAvailabilityCheckSubnetInvalid,
    #[serde(rename = "resourceAvailabilityCheckResourceGroupBeingDeleted")]
    ResourceAvailabilityCheckResourceGroupBeingDeleted,
    #[serde(rename = "resourceAvailabilityCheckVNetBeingMoved")]
    ResourceAvailabilityCheckVnetBeingMoved,
    #[serde(rename = "resourceAvailabilityCheckSubnetDelegationFailed")]
    ResourceAvailabilityCheckSubnetDelegationFailed,
    #[serde(rename = "resourceAvailabilityCheckSubnetWithExternalResources")]
    ResourceAvailabilityCheckSubnetWithExternalResources,
    #[serde(rename = "resourceAvailabilityCheckResourceGroupLockedForReadonly")]
    ResourceAvailabilityCheckResourceGroupLockedForReadonly,
    #[serde(rename = "resourceAvailabilityCheckResourceGroupLockedForDelete")]
    ResourceAvailabilityCheckResourceGroupLockedForDelete,
    #[serde(rename = "resourceAvailabilityCheckNoIntuneReaderRoleError")]
    ResourceAvailabilityCheckNoIntuneReaderRoleError,
    #[serde(
        rename = "resourceAvailabilityCheckIntuneDefaultWindowsRestrictionViolation"
    )]
    ResourceAvailabilityCheckIntuneDefaultWindowsRestrictionViolation,
    #[serde(rename = "resourceAvailabilityCheckIntuneCustomWindowsRestrictionViolation")]
    ResourceAvailabilityCheckIntuneCustomWindowsRestrictionViolation,
    #[serde(rename = "resourceAvailabilityCheckDeploymentQuotaLimitReached")]
    ResourceAvailabilityCheckDeploymentQuotaLimitReached,
    #[serde(rename = "resourceAvailabilityCheckTransientServiceError")]
    ResourceAvailabilityCheckTransientServiceError,
    #[serde(rename = "resourceAvailabilityCheckUnknownError")]
    ResourceAvailabilityCheckUnknownError,
    #[serde(rename = "permissionCheckNoSubscriptionReaderRole")]
    PermissionCheckNoSubscriptionReaderRole,
    #[serde(rename = "permissionCheckNoResourceGroupOwnerRole")]
    PermissionCheckNoResourceGroupOwnerRole,
    #[serde(rename = "permissionCheckNoVNetContributorRole")]
    PermissionCheckNoVnetContributorRole,
    #[serde(rename = "permissionCheckNoResourceGroupNetworkContributorRole")]
    PermissionCheckNoResourceGroupNetworkContributorRole,
    #[serde(rename = "permissionCheckNoWindows365NetworkUserRole")]
    PermissionCheckNoWindows365NetworkUserRole,
    #[serde(rename = "permissionCheckNoWindows365NetworkInterfaceContributorRole")]
    PermissionCheckNoWindows365NetworkInterfaceContributorRole,
    #[serde(rename = "permissionCheckTransientServiceError")]
    PermissionCheckTransientServiceError,
    #[serde(rename = "permissionCheckUnknownError")]
    PermissionCheckUnknownError,
    #[serde(rename = "udpConnectivityCheckStunUrlNotAllowListed")]
    UdpConnectivityCheckStunUrlNotAllowListed,
    #[serde(rename = "udpConnectivityCheckTurnUrlNotAllowListed")]
    UdpConnectivityCheckTurnUrlNotAllowListed,
    #[serde(rename = "udpConnectivityCheckUrlsNotAllowListed")]
    UdpConnectivityCheckUrlsNotAllowListed,
    #[serde(rename = "udpConnectivityCheckUnknownError")]
    UdpConnectivityCheckUnknownError,
    #[serde(rename = "internalServerErrorDeploymentCanceled")]
    InternalServerErrorDeploymentCanceled,
    #[serde(rename = "internalServerErrorAllocateResourceFailed")]
    InternalServerErrorAllocateResourceFailed,
    #[serde(rename = "internalServerErrorVMDeploymentTimeout")]
    InternalServerErrorVmdeploymentTimeout,
    #[serde(rename = "internalServerErrorUnableToRunDscScript")]
    InternalServerErrorUnableToRunDscScript,
    #[serde(rename = "ssoCheckKerberosConfigurationError")]
    SsoCheckKerberosConfigurationError,
    #[serde(rename = "internalServerUnknownError")]
    InternalServerUnknownError,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcOnPremisesConnectionStatus {
    #[serde(rename = "pending")]
    #[default]
    Pending,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "passed")]
    Passed,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "informational")]
    Informational,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcOnPremisesConnectionStatusDetail {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The end time of the connection health check. The Timestamp  is shown in ISO 8601 format and Coordinated Universal Time (UTC). For example, midnight UTC on Jan 1, 2014 appears as 2014-01-01T00:00:00Z. Read-Only.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A list of all checks that have been run on the connection. Read-Only.
    #[serde(rename = "healthChecks")]
    pub health_checks: Option<Vec<MicrosoftGraphCloudPcOnPremisesConnectionHealthCheck>>,
    ///The start time of the health check. The timestamp is shown in ISO 8601 format and Coordinated Universal Time (UTC). For example, midnight UTC on Jan 1, 2014 appear as 2014-01-01T00:00:00Z. Read-Only.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcOnPremisesConnectionType {
    #[serde(rename = "hybridAzureADJoin")]
    #[default]
    HybridAzureAdjoin,
    #[serde(rename = "azureADJoin")]
    AzureAdjoin,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcProvisioningPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudPcProvisioningPolicy".to_string())]
    pub odata_type: String,
    ///The URL of the alternate resource that links to this provisioning policy. Read-only.
    #[serde(rename = "alternateResourceUrl")]
    pub alternate_resource_url: Option<String>,
    ///A defined collection of provisioning policy assignments. Represents the set of Microsoft 365 groups and security groups in Microsoft Entra ID that have provisioning policy assigned. Returned only on $expand. For an example about how to get the assignments relationship, see Get cloudPcProvisioningPolicy.
    pub assignments: Option<Vec<MicrosoftGraphCloudPcProvisioningPolicyAssignment>>,
    ///Indicates the Windows Autopatch settings for Cloud PCs using this provisioning policy. The settings take effect when the tenant enrolls in Autopatch and the managedType of the microsoftManagedDesktop property is set as starterManaged. Supports $select.
    pub autopatch: Option<MicrosoftGraphCloudPcProvisioningPolicyAutopatch>,
    ///The display name of the Cloud PC group that the Cloud PCs reside in. Read-only.
    #[serde(rename = "cloudPcGroupDisplayName")]
    pub cloud_pc_group_display_name: Option<String>,
    ///The template used to name Cloud PCs provisioned using this policy. The template can contain custom text and replacement tokens, including %USERNAME:x% and %RAND:x%, which represent the user's name and a randomly generated number, respectively. For example, CPC-%USERNAME:4%-%RAND:5% means that the name of the Cloud PC starts with CPC-, followed by a four-character username, a - character, and then five random characters. The total length of the text generated by the template can't exceed 15 characters. Supports $filter, $select, and $orderby.
    #[serde(rename = "cloudPcNamingTemplate")]
    pub cloud_pc_naming_template: Option<String>,
    ///The provisioning policy description. Supports $filter, $select, and $orderBy.
    pub description: Option<String>,
    ///The display name for the provisioning policy.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Specifies a list ordered by priority on how Cloud PCs join Microsoft Entra ID (Azure AD). Supports $select.
    #[serde(rename = "domainJoinConfigurations")]
    pub domain_join_configurations: Option<
        Vec<MicrosoftGraphCloudPcDomainJoinConfiguration>,
    >,
    ///True if the provisioned Cloud PC can be accessed by single sign-on. False indicates that the provisioned Cloud PC doesn't support this feature. The default value is false. Windows 365 users can use single sign-on to authenticate to Microsoft Entra ID with passwordless options (for example, FIDO keys) to access their Cloud PC. Optional.
    #[serde(rename = "enableSingleSignOn")]
    pub enable_single_sign_on: Option<bool>,
    ///The number of hours to wait before reprovisioning/deprovisioning happens. Read-only.
    #[serde(rename = "gracePeriodInHours")]
    pub grace_period_in_hours: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The display name of the operating system image that is used for provisioning. For example, Windows 11 Preview + Microsoft 365 Apps 23H2 23H2. Supports $filter, $select, and $orderBy.
    #[serde(rename = "imageDisplayName")]
    pub image_display_name: Option<String>,
    ///The unique identifier that represents an operating system image that is used for provisioning new Cloud PCs. The format for a gallery type image is: {publisherNameofferNameskuName}. Supported values for each of the parameters are:publisher: Microsoftwindowsdesktop offer: windows-ent-cpc sku: 21h1-ent-cpc-m365, 21h1-ent-cpc-os, 20h2-ent-cpc-m365, 20h2-ent-cpc-os, 20h1-ent-cpc-m365, 20h1-ent-cpc-os, 19h2-ent-cpc-m365, and 19h2-ent-cpc-os Supports $filter, $select, and $orderBy.
    #[serde(rename = "imageId")]
    pub image_id: Option<String>,
    #[serde(rename = "imageType")]
    pub image_type: Option<MicrosoftGraphCloudPcProvisioningPolicyImageType>,
    ///When true, the local admin is enabled for Cloud PCs; false indicates that the local admin isn't enabled for Cloud PCs. The default value is false. Supports $filter, $select, and $orderBy.
    #[serde(rename = "localAdminEnabled")]
    pub local_admin_enabled: Option<bool>,
    ///The specific settings to microsoftManagedDesktop that enables Microsoft Managed Desktop customers to get device managed experience for Cloud PC. To enable microsoftManagedDesktop to provide more value, an admin needs to specify certain settings in it. Supports $filter, $select, and $orderBy.
    #[serde(rename = "microsoftManagedDesktop")]
    pub microsoft_managed_desktop: Option<MicrosoftGraphMicrosoftManagedDesktop>,
    ///Specifies the type of license used when provisioning Cloud PCs using this policy. By default, the license type is dedicated if the provisioningType isn't specified when you create the cloudPcProvisioningPolicy. You can't change this property after the cloudPcProvisioningPolicy was created. Possible values are: dedicated, shared, unknownFutureValue.
    #[serde(rename = "provisioningType")]
    pub provisioning_type: Option<MicrosoftGraphCloudPcProvisioningType>,
    ///Indicates a specific Windows setting to configure during the creation of Cloud PCs for this provisioning policy. Supports $select.
    #[serde(rename = "windowsSetting")]
    pub windows_setting: Option<MicrosoftGraphCloudPcWindowsSetting>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcProvisioningPolicyAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudPcProvisioningPolicyAssignment".to_string())]
    pub odata_type: String,
    ///The assignment targeted users for the provisioning policy. This list of users is computed based on assignments, licenses, group memberships, and policies. Read-only. Supports$expand.
    #[serde(rename = "assignedUsers")]
    pub assigned_users: Option<Vec<MicrosoftGraphUser>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The assignment target for the provisioning policy. Currently, the only target supported for this policy is a user group. For details, see cloudPcManagementGroupAssignmentTarget.
    pub target: Option<MicrosoftGraphCloudPcManagementAssignmentTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcProvisioningPolicyAutopatch {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The unique identifier (ID) of a Windows Autopatch group. An Autopatch group is a logical container or unit that groups several Microsoft Entra groups and software update policies. Devices with the same Autopatch group ID share unified software update management. The default value is null that indicates that no Autopatch group is associated with the provisioning policy.
    #[serde(rename = "autopatchGroupId")]
    pub autopatch_group_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcProvisioningPolicyImageType {
    #[serde(rename = "gallery")]
    #[default]
    Gallery,
    #[serde(rename = "custom")]
    Custom,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcProvisioningType {
    #[serde(rename = "dedicated")]
    #[default]
    Dedicated,
    #[serde(rename = "shared")]
    Shared,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcRegionGroup {
    #[serde(rename = "default")]
    #[default]
    Default,
    #[serde(rename = "australia")]
    Australia,
    #[serde(rename = "canada")]
    Canada,
    #[serde(rename = "usCentral")]
    UsCentral,
    #[serde(rename = "usEast")]
    UsEast,
    #[serde(rename = "usWest")]
    UsWest,
    #[serde(rename = "france")]
    France,
    #[serde(rename = "germany")]
    Germany,
    #[serde(rename = "europeUnion")]
    EuropeUnion,
    #[serde(rename = "unitedKingdom")]
    UnitedKingdom,
    #[serde(rename = "japan")]
    Japan,
    #[serde(rename = "asia")]
    Asia,
    #[serde(rename = "india")]
    India,
    #[serde(rename = "southAmerica")]
    SouthAmerica,
    #[serde(rename = "euap")]
    Euap,
    #[serde(rename = "usGovernment")]
    UsGovernment,
    #[serde(rename = "usGovernmentDOD")]
    UsGovernmentDod,
    #[serde(rename = "norway")]
    Norway,
    #[serde(rename = "switzerland")]
    Switzerland,
    #[serde(rename = "southKorea")]
    SouthKorea,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCloudPcRestorePointFrequencyType {
    #[serde(rename = "default")]
    #[default]
    Default,
    #[serde(rename = "fourHours")]
    FourHours,
    #[serde(rename = "sixHours")]
    SixHours,
    #[serde(rename = "twelveHours")]
    TwelveHours,
    #[serde(rename = "sixteenHours")]
    SixteenHours,
    #[serde(rename = "twentyFourHours")]
    TwentyFourHours,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcRestorePointSetting {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The time interval in hours to take snapshots (restore points) of a Cloud PC automatically. Possible values are: default, fourHours, sixHours, twelveHours, sixteenHours, twentyFourHours, unknownFutureValue. The default value is default that indicates that the time interval for automatic capturing of restore point snapshots is set to 12 hours.
    #[serde(rename = "frequencyType")]
    pub frequency_type: Option<MicrosoftGraphCloudPcRestorePointFrequencyType>,
    ///If true, the user has the ability to use snapshots to restore Cloud PCs. If false, non-admin users can't use snapshots to restore the Cloud PC.
    #[serde(rename = "userRestoreEnabled")]
    pub user_restore_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcUserRoleScopeTagInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Scope tag display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Scope tag identity.
    #[serde(rename = "roleScopeTagId")]
    pub role_scope_tag_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcUserSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudPcUserSetting".to_string())]
    pub odata_type: String,
    ///Represents the set of Microsoft 365 groups and security groups in Microsoft Entra ID that have cloudPCUserSetting assigned. Returned only on $expand. For an example, see Get cloudPcUserSetting.
    pub assignments: Option<Vec<MicrosoftGraphCloudPcUserSettingAssignment>>,
    ///The date and time when the setting was created. The timestamp type represents the date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The setting name displayed in the user interface.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time when the setting was last modified. The timestamp type represents the date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether the local admin option is enabled. The default value is false. To enable the local admin option, change the setting to true. If the local admin option is enabled, the end user can be an admin of the Cloud PC device.
    #[serde(rename = "localAdminEnabled")]
    pub local_admin_enabled: Option<bool>,
    ///Indicates whether an end user is allowed to reset their Cloud PC. When true, the user is allowed to reset their Cloud PC. When false, end-user initiated reset is not allowed. The default value is false.
    #[serde(rename = "resetEnabled")]
    pub reset_enabled: Option<bool>,
    ///Defines how frequently a restore point is created that is, a snapshot is taken) for users' provisioned Cloud PCs (default is 12 hours), and whether the user is allowed to restore their own Cloud PCs to a backup made at a specific point in time.
    #[serde(rename = "restorePointSetting")]
    pub restore_point_setting: Option<MicrosoftGraphCloudPcRestorePointSetting>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcUserSettingAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.cloudPcUserSettingAssignment".to_string())]
    pub odata_type: String,
    ///The date and time when this assignment was created. The timestamp type represents the date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The assignment target for the user setting. Currently, the only target supported for this user setting is a user group. For details, see cloudPcManagementGroupAssignmentTarget.
    pub target: Option<MicrosoftGraphCloudPcManagementAssignmentTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCloudPcWindowsSetting {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The Windows language or region tag to use for language pack configuration and localization of the Cloud PC. The default value is en-US, which corresponds to English (United States).
    pub locale: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCoachmarkLocation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Length of coachmark.
    pub length: Option<f64>,
    ///Offset of coachmark.
    pub offset: Option<f64>,
    ///Type of coachmark location. The possible values are: unknown, fromEmail, subject, externalTag, displayName, messageBody, unknownFutureValue.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphCoachmarkLocationType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCoachmarkLocationType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "fromEmail")]
    FromEmail,
    #[serde(rename = "subject")]
    Subject,
    #[serde(rename = "externalTag")]
    ExternalTag,
    #[serde(rename = "displayName")]
    DisplayName,
    #[serde(rename = "messageBody")]
    MessageBody,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphColumnDefinition {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.columnDefinition".to_string())]
    pub odata_type: String,
    ///This column stores Boolean values.
    pub boolean: Option<MicrosoftGraphBooleanColumn>,
    ///This column's data is calculated based on other columns.
    pub calculated: Option<MicrosoftGraphCalculatedColumn>,
    ///This column stores data from a list of choices.
    pub choice: Option<MicrosoftGraphChoiceColumn>,
    ///For site columns, the name of the group this column belongs to. Helps organize related columns.
    #[serde(rename = "columnGroup")]
    pub column_group: Option<String>,
    ///This column stores content approval status.
    #[serde(rename = "contentApprovalStatus")]
    pub content_approval_status: Option<MicrosoftGraphContentApprovalStatusColumn>,
    ///This column stores currency values.
    pub currency: Option<MicrosoftGraphCurrencyColumn>,
    ///This column stores DateTime values.
    #[serde(rename = "dateTime")]
    pub date_time: Option<MicrosoftGraphDateTimeColumn>,
    ///The default value for this column.
    #[serde(rename = "defaultValue")]
    pub default_value: Option<MicrosoftGraphDefaultColumnValue>,
    ///The user-facing description of the column.
    pub description: Option<String>,
    ///The user-facing name of the column.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///If true, no two list items may have the same value for this column.
    #[serde(rename = "enforceUniqueValues")]
    pub enforce_unique_values: Option<bool>,
    ///This column stores a geolocation.
    pub geolocation: Option<MicrosoftGraphGeolocationColumn>,
    ///Specifies whether the column is displayed in the user interface.
    pub hidden: Option<bool>,
    ///This column stores hyperlink or picture values.
    #[serde(rename = "hyperlinkOrPicture")]
    pub hyperlink_or_picture: Option<MicrosoftGraphHyperlinkOrPictureColumn>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the column values can be used for sorting and searching.
    pub indexed: Option<bool>,
    ///Indicates whether this column can be deleted.
    #[serde(rename = "isDeletable")]
    pub is_deletable: Option<bool>,
    ///Indicates whether values in the column can be reordered. Read-only.
    #[serde(rename = "isReorderable")]
    pub is_reorderable: Option<bool>,
    ///Specifies whether the column can be changed.
    #[serde(rename = "isSealed")]
    pub is_sealed: Option<bool>,
    ///This column's data is looked up from another source in the site.
    pub lookup: Option<MicrosoftGraphLookupColumn>,
    ///The API-facing name of the column as it appears in the fields on a listItem. For the user-facing name, see displayName.
    pub name: Option<String>,
    ///This column stores number values.
    pub number: Option<MicrosoftGraphNumberColumn>,
    ///This column stores Person or Group values.
    #[serde(rename = "personOrGroup")]
    pub person_or_group: Option<MicrosoftGraphPersonOrGroupColumn>,
    ///If 'true', changes to this column will be propagated to lists that implement the column.
    #[serde(rename = "propagateChanges")]
    pub propagate_changes: Option<bool>,
    ///Specifies whether the column values can be modified.
    #[serde(rename = "readOnly")]
    pub read_only: Option<bool>,
    ///Specifies whether the column value isn't optional.
    pub required: Option<bool>,
    ///The source column for the content type column.
    #[serde(rename = "sourceColumn")]
    pub source_column: Option<Box<MicrosoftGraphColumnDefinition>>,
    ///ContentType from which this column is inherited from. Present only in contentTypes columns response. Read-only.
    #[serde(rename = "sourceContentType")]
    pub source_content_type: Option<MicrosoftGraphContentTypeInfo>,
    ///This column stores taxonomy terms.
    pub term: Option<MicrosoftGraphTermColumn>,
    ///This column stores text values.
    pub text: Option<MicrosoftGraphTextColumn>,
    ///This column stores thumbnail values.
    pub thumbnail: Option<MicrosoftGraphThumbnailColumn>,
    ///For site columns, the type of column. Read-only.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphColumnTypes>,
    ///This column stores validation formula and message for the column.
    pub validation: Option<MicrosoftGraphColumnValidation>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphColumnLink {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.columnLink".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The name of the column  in this content type.
    pub name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphColumnTypes {
    #[serde(rename = "note")]
    #[default]
    Note,
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "choice")]
    Choice,
    #[serde(rename = "multichoice")]
    Multichoice,
    #[serde(rename = "number")]
    Number,
    #[serde(rename = "currency")]
    Currency,
    #[serde(rename = "dateTime")]
    DateTime,
    #[serde(rename = "lookup")]
    Lookup,
    #[serde(rename = "boolean")]
    Boolean,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "url")]
    Url,
    #[serde(rename = "calculated")]
    Calculated,
    #[serde(rename = "location")]
    Location,
    #[serde(rename = "geolocation")]
    Geolocation,
    #[serde(rename = "term")]
    Term,
    #[serde(rename = "multiterm")]
    Multiterm,
    #[serde(rename = "thumbnail")]
    Thumbnail,
    #[serde(rename = "approvalStatus")]
    ApprovalStatus,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphColumnValidation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Default BCP 47 language tag for the description.
    #[serde(rename = "defaultLanguage")]
    pub default_language: Option<String>,
    ///Localized messages that explain what is needed for this column's value to be considered valid. User will be prompted with this message if validation fails.
    pub descriptions: Option<Vec<MicrosoftGraphDisplayNameLocalization>>,
    ///The formula to validate column value. For examples, see Examples of common formulas in lists.
    pub formula: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCommsOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.commsOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCommunicationsApplicationIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.communicationsApplicationIdentity".to_string())]
    pub odata_type: String,
    ///First-party Microsoft application that presents this identity.
    #[serde(rename = "applicationType")]
    pub application_type: Option<String>,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///True if the participant shouldn't be shown in other participants' rosters.
    pub hidden: Option<bool>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCommunicationsApplicationInstanceIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.communicationsApplicationInstanceIdentity".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///True if the participant shouldn't be shown in other participants' rosters.
    pub hidden: Option<bool>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
    ///The tenant ID of the application.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCommunicationsEncryptedIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.communicationsEncryptedIdentity".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCommunicationsGuestIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.communicationsGuestIdentity".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCommunicationsIdentitySet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.communicationsIdentitySet".to_string())]
    pub odata_type: String,
    ///Optional. The application associated with this action.
    pub application: Option<MicrosoftGraphIdentity>,
    ///The application instance associated with this action.
    #[serde(rename = "applicationInstance")]
    pub application_instance: Option<MicrosoftGraphIdentity>,
    ///An identity the participant would like to present itself as to the other participants in the call.
    #[serde(rename = "assertedIdentity")]
    pub asserted_identity: Option<MicrosoftGraphIdentity>,
    ///The Azure Communication Services user associated with this action.
    #[serde(rename = "azureCommunicationServicesUser")]
    pub azure_communication_services_user: Option<MicrosoftGraphIdentity>,
    ///Optional. The device associated with this action.
    pub device: Option<MicrosoftGraphIdentity>,
    ///The encrypted user associated with this action.
    pub encrypted: Option<MicrosoftGraphIdentity>,
    ///Type of endpoint that the participant uses. Possible values are: default, voicemail, skypeForBusiness, skypeForBusinessVoipPhone, unknownFutureValue.
    #[serde(rename = "endpointType")]
    pub endpoint_type: Option<MicrosoftGraphEndpointType>,
    ///The guest user associated with this action.
    pub guest: Option<MicrosoftGraphIdentity>,
    ///The Skype for Business on-premises user associated with this action.
    #[serde(rename = "onPremises")]
    pub on_premises: Option<MicrosoftGraphIdentity>,
    ///The phone user associated with this action.
    pub phone: Option<MicrosoftGraphIdentity>,
    ///Optional. The user associated with this action.
    pub user: Option<MicrosoftGraphIdentity>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCommunicationsPhoneIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.communicationsPhoneIdentity".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCommunicationsUserIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.communicationsUserIdentity".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
    ///The user's tenant ID.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCommunity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.community".to_string())]
    pub odata_type: String,
    ///The description of the community. The maximum length is 1,024 characters.
    pub description: Option<String>,
    ///The name of the community. The maximum length is 255 characters.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The Microsoft 365 group that manages the membership of this community.
    pub group: Option<Box<MicrosoftGraphGroup>>,
    ///The ID of the Microsoft 365 group that manages the membership of this community.
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The admins of the community. Limited to 100 users. If this property isn't specified when you create the community, the calling user is automatically assigned as the community owner.
    pub owners: Option<Vec<MicrosoftGraphUser>>,
    ///Types of communityPrivacy.
    pub privacy: Option<MicrosoftGraphCommunityPrivacy>,
}
///Types of communityPrivacy.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCommunityPrivacy {
    #[serde(rename = "public")]
    #[default]
    Public,
    #[serde(rename = "private")]
    Private,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCompanySubscription {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.companySubscription".to_string())]
    pub odata_type: String,
    ///The ID of this subscription in the commerce system. Alternate key.
    #[serde(rename = "commerceSubscriptionId")]
    pub commerce_subscription_id: Option<String>,
    ///The date and time when this subscription was created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Whether the subscription is a free trial or purchased.
    #[serde(rename = "isTrial")]
    pub is_trial: Option<bool>,
    ///The date and time when the subscription will move to the next state (as defined by the status property) if not renewed by the tenant. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "nextLifecycleDateTime")]
    pub next_lifecycle_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The object ID of the account admin.
    #[serde(rename = "ownerId")]
    pub owner_id: Option<String>,
    ///The unique identifier for the Microsoft partner tenant that created the subscription on a customer tenant.
    #[serde(rename = "ownerTenantId")]
    pub owner_tenant_id: Option<String>,
    ///Indicates the entity that ownerId belongs to, for example, 'User'.
    #[serde(rename = "ownerType")]
    pub owner_type: Option<String>,
    ///The provisioning status of each service included in this subscription.
    #[serde(rename = "serviceStatus")]
    pub service_status: Option<Vec<MicrosoftGraphServicePlanInfo>>,
    ///The object ID of the SKU associated with this subscription.
    #[serde(rename = "skuId")]
    pub sku_id: Option<String>,
    ///The SKU associated with this subscription.
    #[serde(rename = "skuPartNumber")]
    pub sku_part_number: Option<String>,
    ///The status of this subscription. Possible values are: Enabled, Deleted, Suspended, Warning, LockedOut.
    pub status: Option<String>,
    ///The number of licenses included in this subscription.
    #[serde(rename = "totalLicenses")]
    pub total_licenses: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphComplianceInformation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Collection of the certification controls associated with the certification.
    #[serde(rename = "certificationControls")]
    pub certification_controls: Option<Vec<MicrosoftGraphCertificationControl>>,
    ///The name of the compliance certification, for example, ISO 27018:2014, GDPR, FedRAMP, and NIST 800-171.
    #[serde(rename = "certificationName")]
    pub certification_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphComplianceManagementPartner {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.complianceManagementPartner".to_string())]
    pub odata_type: String,
    ///User groups which enroll Android devices through partner.
    #[serde(rename = "androidEnrollmentAssignments")]
    pub android_enrollment_assignments: Option<
        Vec<MicrosoftGraphComplianceManagementPartnerAssignment>,
    >,
    ///Partner onboarded for Android devices.
    #[serde(rename = "androidOnboarded")]
    pub android_onboarded: Option<bool>,
    ///Partner display name
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///User groups which enroll ios devices through partner.
    #[serde(rename = "iosEnrollmentAssignments")]
    pub ios_enrollment_assignments: Option<
        Vec<MicrosoftGraphComplianceManagementPartnerAssignment>,
    >,
    ///Partner onboarded for ios devices.
    #[serde(rename = "iosOnboarded")]
    pub ios_onboarded: Option<bool>,
    ///Timestamp of last heartbeat after admin onboarded to the compliance management partner
    #[serde(rename = "lastHeartbeatDateTime")]
    pub last_heartbeat_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///User groups which enroll Mac devices through partner.
    #[serde(rename = "macOsEnrollmentAssignments")]
    pub mac_os_enrollment_assignments: Option<
        Vec<MicrosoftGraphComplianceManagementPartnerAssignment>,
    >,
    ///Partner onboarded for Mac devices.
    #[serde(rename = "macOsOnboarded")]
    pub mac_os_onboarded: Option<bool>,
    ///Partner state of this tenant.
    #[serde(rename = "partnerState")]
    pub partner_state: Option<MicrosoftGraphDeviceManagementPartnerTenantState>,
}
///User group targeting for Compliance Management Partner
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphComplianceManagementPartnerAssignment {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Group assignment target.
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
///Compliance state.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphComplianceState {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "compliant")]
    Compliant,
    #[serde(rename = "noncompliant")]
    Noncompliant,
    #[serde(rename = "conflict")]
    Conflict,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "inGracePeriod")]
    InGracePeriod,
    #[serde(rename = "configManager")]
    ConfigManager,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphComplianceStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "notApplicable")]
    NotApplicable,
    #[serde(rename = "compliant")]
    Compliant,
    #[serde(rename = "remediated")]
    Remediated,
    #[serde(rename = "nonCompliant")]
    NonCompliant,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "conflict")]
    Conflict,
    #[serde(rename = "notAssigned")]
    NotAssigned,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessAllExternalTenants {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.conditionalAccessAllExternalTenants".to_string())]
    pub odata_type: String,
    ///The membership kind. Possible values are: all, enumerated, unknownFutureValue. The enumerated member references an conditionalAccessEnumeratedExternalTenants object.
    #[serde(rename = "membershipKind")]
    pub membership_kind: Option<
        MicrosoftGraphConditionalAccessExternalTenantsMembershipKind,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessApplications {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Filter that defines the dynamic-application-syntax rule to include/exclude cloud applications. A filter can use custom security attributes to include/exclude applications.
    #[serde(rename = "applicationFilter")]
    pub application_filter: Option<MicrosoftGraphConditionalAccessFilter>,
    ///Can be one of the following:  The list of client IDs (appId) explicitly excluded from the policy. Office365 - For the list of apps included in Office365, see Apps included in Conditional Access Office 365 app suite  MicrosoftAdminPortals - For more information, see Conditional Access Target resources: Microsoft Admin Portals
    #[serde(rename = "excludeApplications")]
    pub exclude_applications: Option<Vec<String>>,
    ///Can be one of the following:  The list of client IDs (appId) the policy applies to, unless explicitly excluded (in excludeApplications)  All  Office365 - For the list of apps included in Office365, see Apps included in Conditional Access Office 365 app suite  MicrosoftAdminPortals - For more information, see Conditional Access Target resources: Microsoft Admin Portals
    #[serde(rename = "includeApplications")]
    pub include_applications: Option<Vec<String>>,
    #[serde(rename = "includeAuthenticationContextClassReferences")]
    pub include_authentication_context_class_references: Option<Vec<String>>,
    ///User actions to include. Supported values are urn:user:registersecurityinfo and urn:user:registerdevice
    #[serde(rename = "includeUserActions")]
    pub include_user_actions: Option<Vec<String>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessAuthenticationFlows {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "transferMethods")]
    pub transfer_methods: Option<MicrosoftGraphConditionalAccessTransferMethods>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConditionalAccessClientApp {
    #[serde(rename = "all")]
    #[default]
    All,
    #[serde(rename = "browser")]
    Browser,
    #[serde(rename = "mobileAppsAndDesktopClients")]
    MobileAppsAndDesktopClients,
    #[serde(rename = "exchangeActiveSync")]
    ExchangeActiveSync,
    #[serde(rename = "easSupported")]
    EasSupported,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessClientApplications {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Service principal IDs excluded from the policy scope.
    #[serde(rename = "excludeServicePrincipals")]
    pub exclude_service_principals: Option<Vec<String>>,
    ///Service principal IDs included in the policy scope, or ServicePrincipalsInMyTenant.
    #[serde(rename = "includeServicePrincipals")]
    pub include_service_principals: Option<Vec<String>>,
    ///Filter that defines the dynamic-servicePrincipal-syntax rule to include/exclude service principals. A filter can use custom security attributes to include/exclude service principals.
    #[serde(rename = "servicePrincipalFilter")]
    pub service_principal_filter: Option<MicrosoftGraphConditionalAccessFilter>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessConditionSet {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Applications and user actions included in and excluded from the policy. Required.
    pub applications: Option<MicrosoftGraphConditionalAccessApplications>,
    ///Authentication flows included in the policy scope.
    #[serde(rename = "authenticationFlows")]
    pub authentication_flows: Option<MicrosoftGraphConditionalAccessAuthenticationFlows>,
    ///Client application types included in the policy. Possible values are: all, browser, mobileAppsAndDesktopClients, exchangeActiveSync, easSupported, other. Required.  The easUnsupported enumeration member will be deprecated in favor of exchangeActiveSync, which includes EAS supported and unsupported platforms.
    #[serde(rename = "clientAppTypes")]
    pub client_app_types: Option<Vec<MicrosoftGraphConditionalAccessClientApp>>,
    ///Client applications (service principals and workload identities) included in and excluded from the policy. Either users or clientApplications is required.
    #[serde(rename = "clientApplications")]
    pub client_applications: Option<MicrosoftGraphConditionalAccessClientApplications>,
    ///Devices in the policy.
    pub devices: Option<MicrosoftGraphConditionalAccessDevices>,
    ///Insider risk levels included in the policy. The possible values are: minor, moderate, elevated, unknownFutureValue.
    #[serde(rename = "insiderRiskLevels")]
    pub insider_risk_levels: Option<MicrosoftGraphConditionalAccessInsiderRiskLevels>,
    ///Locations included in and excluded from the policy.
    pub locations: Option<MicrosoftGraphConditionalAccessLocations>,
    ///Platforms included in and excluded from the policy.
    pub platforms: Option<MicrosoftGraphConditionalAccessPlatforms>,
    ///Service principal risk levels included in the policy. Possible values are: low, medium, high, none, unknownFutureValue.
    #[serde(rename = "servicePrincipalRiskLevels")]
    pub service_principal_risk_levels: Option<Vec<MicrosoftGraphRiskLevel>>,
    ///Sign-in risk levels included in the policy. Possible values are: low, medium, high, hidden, none, unknownFutureValue. Required.
    #[serde(rename = "signInRiskLevels")]
    pub sign_in_risk_levels: Option<Vec<MicrosoftGraphRiskLevel>>,
    ///User risk levels included in the policy. Possible values are: low, medium, high, hidden, none, unknownFutureValue. Required.
    #[serde(rename = "userRiskLevels")]
    pub user_risk_levels: Option<Vec<MicrosoftGraphRiskLevel>>,
    ///Users, groups, and roles included in and excluded from the policy. Either users or clientApplications is required.
    pub users: Option<MicrosoftGraphConditionalAccessUsers>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConditionalAccessDevicePlatform {
    #[serde(rename = "android")]
    #[default]
    Android,
    #[serde(rename = "iOS")]
    IOs,
    #[serde(rename = "windows")]
    Windows,
    #[serde(rename = "windowsPhone")]
    WindowsPhone,
    #[serde(rename = "macOS")]
    MacOs,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "linux")]
    Linux,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessDevices {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Filter that defines the dynamic-device-syntax rule to include/exclude devices. A filter can use device properties (such as extension attributes) to include/exclude them.
    #[serde(rename = "deviceFilter")]
    pub device_filter: Option<MicrosoftGraphConditionalAccessFilter>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessEnumeratedExternalTenants {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.conditionalAccessEnumeratedExternalTenants".to_string())]
    pub odata_type: String,
    ///A collection of tenant IDs that define the scope of a policy targeting conditional access for guests and external users.
    pub members: Option<Vec<String>>,
    ///The membership kind. Possible values are: all, enumerated, unknownFutureValue. The enumerated member references an conditionalAccessEnumeratedExternalTenants object.
    #[serde(rename = "membershipKind")]
    pub membership_kind: Option<
        MicrosoftGraphConditionalAccessExternalTenantsMembershipKind,
    >,
}
discriminated_enum! {
    pub enum MicrosoftGraphConditionalAccessExternalTenants { discriminator :
    "@odata.type", variants : [("#microsoft.graph.conditionalAccessAllExternalTenants",
    MicrosoftGraphConditionalAccessAllExternalTenants(Box <
    MicrosoftGraphConditionalAccessAllExternalTenants >)),
    ("#microsoft.graph.conditionalAccessEnumeratedExternalTenants",
    MicrosoftGraphConditionalAccessEnumeratedExternalTenants(Box <
    MicrosoftGraphConditionalAccessEnumeratedExternalTenants >))], fallback :
    ConditionalAccessExternalTenants(Box <
    MicrosoftGraphConditionalAccessExternalTenantsBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessExternalTenantsBase {
    ///The membership kind. Possible values are: all, enumerated, unknownFutureValue. The enumerated member references an conditionalAccessEnumeratedExternalTenants object.
    #[serde(rename = "membershipKind")]
    pub membership_kind: Option<
        MicrosoftGraphConditionalAccessExternalTenantsMembershipKind,
    >,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConditionalAccessExternalTenantsMembershipKind {
    #[serde(rename = "all")]
    #[default]
    All,
    #[serde(rename = "enumerated")]
    Enumerated,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessFilter {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub mode: Option<MicrosoftGraphFilterMode>,
    ///Rule syntax is similar to that used for membership rules for groups in Microsoft Entra ID. For details, see rules with multiple expressions
    pub rule: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConditionalAccessGrantControl {
    #[serde(rename = "block")]
    #[default]
    Block,
    #[serde(rename = "mfa")]
    Mfa,
    #[serde(rename = "compliantDevice")]
    CompliantDevice,
    #[serde(rename = "domainJoinedDevice")]
    DomainJoinedDevice,
    #[serde(rename = "approvedApplication")]
    ApprovedApplication,
    #[serde(rename = "compliantApplication")]
    CompliantApplication,
    #[serde(rename = "passwordChange")]
    PasswordChange,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessGrantControls {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "authenticationStrength")]
    pub authentication_strength: Option<MicrosoftGraphAuthenticationStrengthPolicy>,
    ///List of values of built-in controls required by the policy. Possible values: block, mfa, compliantDevice, domainJoinedDevice, approvedApplication, compliantApplication, passwordChange, unknownFutureValue.
    #[serde(rename = "builtInControls")]
    pub built_in_controls: Option<Vec<MicrosoftGraphConditionalAccessGrantControl>>,
    ///List of custom controls IDs required by the policy. For more information, see Custom controls.
    #[serde(rename = "customAuthenticationFactors")]
    pub custom_authentication_factors: Option<Vec<String>>,
    ///Defines the relationship of the grant controls. Possible values: AND, OR.
    pub operator: Option<String>,
    ///List of terms of use IDs required by the policy.
    #[serde(rename = "termsOfUse")]
    pub terms_of_use: Option<Vec<String>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConditionalAccessGuestOrExternalUserTypes {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "internalGuest")]
    InternalGuest,
    #[serde(rename = "b2bCollaborationGuest")]
    B2bCollaborationGuest,
    #[serde(rename = "b2bCollaborationMember")]
    B2bCollaborationMember,
    #[serde(rename = "b2bDirectConnectUser")]
    B2bDirectConnectUser,
    #[serde(rename = "otherExternalUser")]
    OtherExternalUser,
    #[serde(rename = "serviceProvider")]
    ServiceProvider,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessGuestsOrExternalUsers {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The tenant IDs of the selected types of external users. Either all B2B tenant or a collection of tenant IDs. External tenants can be specified only when the property guestOrExternalUserTypes isn't null or an empty String.
    #[serde(rename = "externalTenants")]
    pub external_tenants: Option<MicrosoftGraphConditionalAccessExternalTenants>,
    #[serde(rename = "guestOrExternalUserTypes")]
    pub guest_or_external_user_types: Option<
        MicrosoftGraphConditionalAccessGuestOrExternalUserTypes,
    >,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConditionalAccessInsiderRiskLevels {
    #[serde(rename = "minor")]
    #[default]
    Minor,
    #[serde(rename = "moderate")]
    Moderate,
    #[serde(rename = "elevated")]
    Elevated,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessLocations {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Location IDs excluded from scope of policy.
    #[serde(rename = "excludeLocations")]
    pub exclude_locations: Option<Vec<String>>,
    ///Location IDs in scope of policy unless explicitly excluded, All, or AllTrusted.
    #[serde(rename = "includeLocations")]
    pub include_locations: Option<Vec<String>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessPlatforms {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Possible values are: android, iOS, windows, windowsPhone, macOS, linux, all, unknownFutureValue.
    #[serde(rename = "excludePlatforms")]
    pub exclude_platforms: Option<Vec<MicrosoftGraphConditionalAccessDevicePlatform>>,
    ///Possible values are: android, iOS, windows, windowsPhone, macOS, linux, all, unknownFutureValue.
    #[serde(rename = "includePlatforms")]
    pub include_platforms: Option<Vec<MicrosoftGraphConditionalAccessDevicePlatform>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.conditionalAccessPolicy".to_string())]
    pub odata_type: String,
    pub conditions: Option<MicrosoftGraphConditionalAccessConditionSet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Readonly.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub description: Option<String>,
    ///Specifies a display name for the conditionalAccessPolicy object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Specifies the grant controls that must be fulfilled to pass the policy.
    #[serde(rename = "grantControls")]
    pub grant_controls: Option<MicrosoftGraphConditionalAccessGrantControls>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Readonly.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies the session controls that are enforced after sign-in.
    #[serde(rename = "sessionControls")]
    pub session_controls: Option<MicrosoftGraphConditionalAccessSessionControls>,
    pub state: Option<MicrosoftGraphConditionalAccessPolicyState>,
    ///Specifies the unique identifier of a Conditional Access template. Inherited from entity.
    #[serde(rename = "templateId")]
    pub template_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessPolicyDetail {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub conditions: Option<MicrosoftGraphConditionalAccessConditionSet>,
    ///Represents grant controls that must be fulfilled for the policy.
    #[serde(rename = "grantControls")]
    pub grant_controls: Option<MicrosoftGraphConditionalAccessGrantControls>,
    ///Represents a complex type of session controls that is enforced after sign-in.
    #[serde(rename = "sessionControls")]
    pub session_controls: Option<MicrosoftGraphConditionalAccessSessionControls>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConditionalAccessPolicyState {
    #[serde(rename = "enabled")]
    #[default]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "enabledForReportingButNotEnforced")]
    EnabledForReportingButNotEnforced,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.conditionalAccessRoot".to_string())]
    pub odata_type: String,
    ///Read-only. Nullable. Returns a collection of the specified authentication context class references.
    #[serde(rename = "authenticationContextClassReferences")]
    pub authentication_context_class_references: Option<
        Vec<MicrosoftGraphAuthenticationContextClassReference>,
    >,
    #[serde(rename = "authenticationStrength")]
    pub authentication_strength: Option<MicrosoftGraphAuthenticationStrengthRoot>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Read-only. Nullable. Returns a collection of the specified named locations.
    #[serde(rename = "namedLocations")]
    pub named_locations: Option<Vec<MicrosoftGraphNamedLocation>>,
    ///Read-only. Nullable. Returns a collection of the specified Conditional Access (CA) policies.
    pub policies: Option<Vec<MicrosoftGraphConditionalAccessPolicy>>,
    ///Read-only. Nullable. Returns a collection of the specified Conditional Access templates.
    pub templates: Option<Vec<MicrosoftGraphConditionalAccessTemplate>>,
}
discriminated_enum! {
    pub enum MicrosoftGraphConditionalAccessSessionControl { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.applicationEnforcedRestrictionsSessionControl",
    MicrosoftGraphApplicationEnforcedRestrictionsSessionControl(Box <
    MicrosoftGraphApplicationEnforcedRestrictionsSessionControl >)),
    ("#microsoft.graph.cloudAppSecuritySessionControl",
    MicrosoftGraphCloudAppSecuritySessionControl(Box <
    MicrosoftGraphCloudAppSecuritySessionControl >)),
    ("#microsoft.graph.persistentBrowserSessionControl",
    MicrosoftGraphPersistentBrowserSessionControl(Box <
    MicrosoftGraphPersistentBrowserSessionControl >)),
    ("#microsoft.graph.secureSignInSessionControl",
    MicrosoftGraphSecureSignInSessionControl(Box <
    MicrosoftGraphSecureSignInSessionControl >)),
    ("#microsoft.graph.signInFrequencySessionControl",
    MicrosoftGraphSignInFrequencySessionControl(Box <
    MicrosoftGraphSignInFrequencySessionControl >))], fallback :
    ConditionalAccessSessionControl(Box <
    MicrosoftGraphConditionalAccessSessionControlBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessSessionControlBase {
    ///Specifies whether the session control is enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessSessionControls {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Session control to enforce application restrictions. Only Exchange Online and Sharepoint Online support this session control.
    #[serde(rename = "applicationEnforcedRestrictions")]
    pub application_enforced_restrictions: Option<
        MicrosoftGraphApplicationEnforcedRestrictionsSessionControl,
    >,
    ///Session control to apply cloud app security.
    #[serde(rename = "cloudAppSecurity")]
    pub cloud_app_security: Option<MicrosoftGraphCloudAppSecuritySessionControl>,
    ///Session control that determines whether it is acceptable for Microsoft Entra ID to extend existing sessions based on information collected prior to an outage or not.
    #[serde(rename = "disableResilienceDefaults")]
    pub disable_resilience_defaults: Option<bool>,
    ///Session control to define whether to persist cookies or not. All apps should be selected for this session control to work correctly.
    #[serde(rename = "persistentBrowser")]
    pub persistent_browser: Option<MicrosoftGraphPersistentBrowserSessionControl>,
    #[serde(rename = "secureSignInSession")]
    pub secure_sign_in_session: Option<MicrosoftGraphSecureSignInSessionControl>,
    ///Session control to enforce signin frequency.
    #[serde(rename = "signInFrequency")]
    pub sign_in_frequency: Option<MicrosoftGraphSignInFrequencySessionControl>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConditionalAccessStatus {
    #[serde(rename = "success")]
    #[default]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "notApplied")]
    NotApplied,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.conditionalAccessTemplate".to_string())]
    pub odata_type: String,
    ///The user-friendly name of the template.
    pub description: Option<String>,
    pub details: Option<MicrosoftGraphConditionalAccessPolicyDetail>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user-friendly name of the template.
    pub name: Option<String>,
    pub scenarios: Option<MicrosoftGraphTemplateScenarios>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConditionalAccessTransferMethods {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "deviceCodeFlow")]
    DeviceCodeFlow,
    #[serde(rename = "authenticationTransfer")]
    AuthenticationTransfer,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConditionalAccessUsers {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Group IDs excluded from scope of policy.
    #[serde(rename = "excludeGroups")]
    pub exclude_groups: Option<Vec<String>>,
    ///Internal guests or external users excluded from the policy scope. Optionally populated.
    #[serde(rename = "excludeGuestsOrExternalUsers")]
    pub exclude_guests_or_external_users: Option<
        MicrosoftGraphConditionalAccessGuestsOrExternalUsers,
    >,
    ///Role IDs excluded from scope of policy.
    #[serde(rename = "excludeRoles")]
    pub exclude_roles: Option<Vec<String>>,
    ///User IDs excluded from scope of policy and/or GuestsOrExternalUsers.
    #[serde(rename = "excludeUsers")]
    pub exclude_users: Option<Vec<String>>,
    ///Group IDs in scope of policy unless explicitly excluded.
    #[serde(rename = "includeGroups")]
    pub include_groups: Option<Vec<String>>,
    ///Internal guests or external users included in the policy scope. Optionally populated.
    #[serde(rename = "includeGuestsOrExternalUsers")]
    pub include_guests_or_external_users: Option<
        MicrosoftGraphConditionalAccessGuestsOrExternalUsers,
    >,
    ///Role IDs in scope of policy unless explicitly excluded.
    #[serde(rename = "includeRoles")]
    pub include_roles: Option<Vec<String>>,
    ///User IDs in scope of policy unless explicitly excluded, None, All, or GuestsOrExternalUsers.
    #[serde(rename = "includeUsers")]
    pub include_users: Option<Vec<String>>,
}
///configuration Manager client enabled features
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConfigurationManagerClientEnabledFeatures {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Whether compliance policy is managed by Intune
    #[serde(rename = "compliancePolicy")]
    pub compliance_policy: Option<bool>,
    ///Whether device configuration is managed by Intune
    #[serde(rename = "deviceConfiguration")]
    pub device_configuration: Option<bool>,
    ///Whether inventory is managed by Intune
    pub inventory: Option<bool>,
    ///Whether modern application is managed by Intune
    #[serde(rename = "modernApps")]
    pub modern_apps: Option<bool>,
    ///Whether resource access is managed by Intune
    #[serde(rename = "resourceAccess")]
    pub resource_access: Option<bool>,
    ///Whether Windows Update for Business is managed by Intune
    #[serde(rename = "windowsUpdateForBusiness")]
    pub windows_update_for_business: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConfigurationManagerCollectionAssignmentTarget {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.configurationManagerCollectionAssignmentTarget".to_string()
    )]
    pub odata_type: String,
    ///The collection Id that is the target of the assignment.
    #[serde(rename = "collectionId")]
    pub collection_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConfirmedBy {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "manager")]
    Manager,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConnectedOrganization {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.connectedOrganization".to_string())]
    pub odata_type: String,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the connected organization.
    pub description: Option<String>,
    ///The display name of the connected organization. Supports $filter (eq).
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(rename = "externalSponsors")]
    pub external_sponsors: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity sources in this connected organization, one of azureActiveDirectoryTenant, crossCloudAzureActiveDirectoryTenant, domainIdentitySource, externalDomainFederation, or socialIdentitySource. Nullable.
    #[serde(rename = "identitySources")]
    pub identity_sources: Option<Vec<MicrosoftGraphIdentitySource>>,
    #[serde(rename = "internalSponsors")]
    pub internal_sponsors: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The state of a connected organization defines whether assignment policies with requestor scope type AllConfiguredConnectedOrganizationSubjects are applicable or not.  The possible values are: configured, proposed, unknownFutureValue.
    pub state: Option<MicrosoftGraphConnectedOrganizationState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConnectedOrganizationMembers {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.connectedOrganizationMembers".to_string())]
    pub odata_type: String,
    ///The ID of the connected organization in entitlement management.
    #[serde(rename = "connectedOrganizationId")]
    pub connected_organization_id: Option<String>,
    ///The name of the connected organization.
    pub description: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConnectedOrganizationState {
    #[serde(rename = "configured")]
    #[default]
    Configured,
    #[serde(rename = "proposed")]
    Proposed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConnectionDirection {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConnectionInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The endpoint that is used by Entitlement Management to communicate with the access package resource.
    pub url: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphConnectionStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "attempted")]
    Attempted,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContact {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.contact".to_string())]
    pub odata_type: String,
    ///The name of the contact's assistant.
    #[serde(rename = "assistantName")]
    pub assistant_name: Option<String>,
    ///The contact's birthday. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    pub birthday: Option<chrono::DateTime<chrono::Utc>>,
    ///The contact's business address.
    #[serde(rename = "businessAddress")]
    pub business_address: Option<MicrosoftGraphPhysicalAddress>,
    ///The business home page of the contact.
    #[serde(rename = "businessHomePage")]
    pub business_home_page: Option<String>,
    ///The contact's business phone numbers.
    #[serde(rename = "businessPhones")]
    pub business_phones: Option<Vec<Option<String>>>,
    ///The categories associated with the item
    pub categories: Option<Vec<Option<String>>>,
    ///Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
    #[serde(rename = "changeKey")]
    pub change_key: Option<String>,
    ///The names of the contact's children.
    pub children: Option<Vec<Option<String>>>,
    ///The name of the contact's company.
    #[serde(rename = "companyName")]
    pub company_name: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The contact's department.
    pub department: Option<String>,
    ///The contact's display name. You can specify the display name in a create or update operation. Note that later updates to other properties may cause an automatically generated value to overwrite the displayName value you have specified. To preserve a pre-existing value, always include it as displayName in an update operation.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The contact's email addresses.
    #[serde(rename = "emailAddresses")]
    pub email_addresses: Option<Vec<MicrosoftGraphEmailAddress>>,
    ///The collection of open extensions defined for the contact. Read-only. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///The name the contact is filed under.
    #[serde(rename = "fileAs")]
    pub file_as: Option<String>,
    ///The contact's suffix.
    pub generation: Option<String>,
    ///The contact's given name.
    #[serde(rename = "givenName")]
    pub given_name: Option<String>,
    ///The contact's home address.
    #[serde(rename = "homeAddress")]
    pub home_address: Option<MicrosoftGraphPhysicalAddress>,
    ///The contact's home phone numbers.
    #[serde(rename = "homePhones")]
    pub home_phones: Option<Vec<Option<String>>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The contact's instant messaging (IM) addresses.
    #[serde(rename = "imAddresses")]
    pub im_addresses: Option<Vec<Option<String>>>,
    ///The contact's initials.
    pub initials: Option<String>,
    ///The contact’s job title.
    #[serde(rename = "jobTitle")]
    pub job_title: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the contact's manager.
    pub manager: Option<String>,
    ///The contact's middle name.
    #[serde(rename = "middleName")]
    pub middle_name: Option<String>,
    ///The contact's mobile phone number.
    #[serde(rename = "mobilePhone")]
    pub mobile_phone: Option<String>,
    ///The collection of multi-value extended properties defined for the contact. Read-only. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///The contact's nickname.
    #[serde(rename = "nickName")]
    pub nick_name: Option<String>,
    ///The location of the contact's office.
    #[serde(rename = "officeLocation")]
    pub office_location: Option<String>,
    ///Other addresses for the contact.
    #[serde(rename = "otherAddress")]
    pub other_address: Option<MicrosoftGraphPhysicalAddress>,
    ///The ID of the contact's parent folder.
    #[serde(rename = "parentFolderId")]
    pub parent_folder_id: Option<String>,
    ///The user's notes about the contact.
    #[serde(rename = "personalNotes")]
    pub personal_notes: Option<String>,
    ///Optional contact picture. You can get or set a photo for a contact.
    pub photo: Option<MicrosoftGraphProfilePhoto>,
    ///The contact's profession.
    pub profession: Option<String>,
    ///The collection of single-value extended properties defined for the contact. Read-only. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
    ///The name of the contact's spouse/partner.
    #[serde(rename = "spouseName")]
    pub spouse_name: Option<String>,
    ///The contact's surname.
    pub surname: Option<String>,
    ///The contact's title.
    pub title: Option<String>,
    ///The phonetic Japanese company name of the contact.
    #[serde(rename = "yomiCompanyName")]
    pub yomi_company_name: Option<String>,
    ///The phonetic Japanese given name (first name) of the contact.
    #[serde(rename = "yomiGivenName")]
    pub yomi_given_name: Option<String>,
    ///The phonetic Japanese surname (last name)  of the contact.
    #[serde(rename = "yomiSurname")]
    pub yomi_surname: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContactFolder {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.contactFolder".to_string())]
    pub odata_type: String,
    ///The collection of child folders in the folder. Navigation property. Read-only. Nullable.
    #[serde(rename = "childFolders")]
    pub child_folders: Option<Vec<MicrosoftGraphContactFolder>>,
    ///The contacts in the folder. Navigation property. Read-only. Nullable.
    pub contacts: Option<Vec<MicrosoftGraphContact>>,
    ///The folder's display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///The ID of the folder's parent folder.
    #[serde(rename = "parentFolderId")]
    pub parent_folder_id: Option<String>,
    ///The collection of single-value extended properties defined for the contactFolder. Read-only. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphContactRelationship {
    #[serde(rename = "parent")]
    #[default]
    Parent,
    #[serde(rename = "relative")]
    Relative,
    #[serde(rename = "aide")]
    Aide,
    #[serde(rename = "doctor")]
    Doctor,
    #[serde(rename = "guardian")]
    Guardian,
    #[serde(rename = "child")]
    Child,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContainerFilter {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "includedContainers")]
    pub included_containers: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContentActivity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.contentActivity".to_string())]
    pub odata_type: String,
    #[serde(rename = "contentMetadata")]
    pub content_metadata: Option<MicrosoftGraphProcessContentRequest>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The scope identified from computed protection scopes.
    #[serde(rename = "scopeIdentifier")]
    pub scope_identifier: Option<String>,
    ///ID of the user.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContentApprovalStatusColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
discriminated_enum! {
    pub enum MicrosoftGraphContentBase { discriminator : "@odata.type", variants :
    [("#microsoft.graph.binaryContent", MicrosoftGraphBinaryContent(Box <
    MicrosoftGraphBinaryContent >)), ("#microsoft.graph.textContent",
    MicrosoftGraphTextContent(Box < MicrosoftGraphTextContent >))], fallback :
    ContentBase(Box < MicrosoftGraphContentBaseBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContentBaseBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContentCustomization {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents the content options of External Identities to be customized throughout the authentication flow for a tenant.
    #[serde(rename = "attributeCollection")]
    pub attribute_collection: Option<Vec<MicrosoftGraphKeyValue>>,
    ///A relative URL for the content options of External Identities to be customized throughout the authentication flow for a tenant.
    #[serde(rename = "attributeCollectionRelativeUrl")]
    pub attribute_collection_relative_url: Option<String>,
    ///Represents content options to customize during MFA proofup interruptions.
    #[serde(rename = "registrationCampaign")]
    pub registration_campaign: Option<Vec<MicrosoftGraphKeyValue>>,
    ///The relative URL of the content options to customize during MFA proofup interruptions.
    #[serde(rename = "registrationCampaignRelativeUrl")]
    pub registration_campaign_relative_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContentSharingSession {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.contentSharingSession".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContentType {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.contentType".to_string())]
    pub odata_type: String,
    ///List of canonical URLs for hub sites with which this content type is associated to. This will contain all hub sites where this content type is queued to be enforced or is already enforced. Enforcing a content type means that the content type is applied to the lists in the enforced sites.
    #[serde(rename = "associatedHubsUrls")]
    pub associated_hubs_urls: Option<Vec<Option<String>>>,
    ///Parent contentType from which this content type is derived.
    pub base: Option<Box<MicrosoftGraphContentType>>,
    ///The collection of content types that are ancestors of this content type.
    #[serde(rename = "baseTypes")]
    pub base_types: Option<Vec<MicrosoftGraphContentType>>,
    ///The collection of columns that are required by this content type.
    #[serde(rename = "columnLinks")]
    pub column_links: Option<Vec<MicrosoftGraphColumnLink>>,
    ///Column order information in a content type.
    #[serde(rename = "columnPositions")]
    pub column_positions: Option<Vec<MicrosoftGraphColumnDefinition>>,
    ///The collection of column definitions for this content type.
    pub columns: Option<Vec<MicrosoftGraphColumnDefinition>>,
    ///The descriptive text for the item.
    pub description: Option<String>,
    ///Document Set metadata.
    #[serde(rename = "documentSet")]
    pub document_set: Option<MicrosoftGraphDocumentSet>,
    ///Document template metadata. To make sure that documents have consistent content across a site and its subsites, you can associate a Word, Excel, or PowerPoint template with a site content type.
    #[serde(rename = "documentTemplate")]
    pub document_template: Option<MicrosoftGraphDocumentSetContent>,
    ///The name of the group this content type belongs to. Helps organize related content types.
    pub group: Option<String>,
    ///Indicates whether the content type is hidden in the list's 'New' menu.
    pub hidden: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If this content type is inherited from another scope (like a site), provides a reference to the item where the content type is defined.
    #[serde(rename = "inheritedFrom")]
    pub inherited_from: Option<MicrosoftGraphItemReference>,
    ///Specifies if a content type is a built-in content type.
    #[serde(rename = "isBuiltIn")]
    pub is_built_in: Option<bool>,
    ///The name of the content type.
    pub name: Option<String>,
    ///Specifies the order in which the content type appears in the selection UI.
    pub order: Option<MicrosoftGraphContentTypeOrder>,
    ///The unique identifier of the content type.
    #[serde(rename = "parentId")]
    pub parent_id: Option<String>,
    ///If true, any changes made to the content type are pushed to inherited content types and lists that implement the content type.
    #[serde(rename = "propagateChanges")]
    pub propagate_changes: Option<bool>,
    ///If true, the content type can't be modified unless this value is first set to false.
    #[serde(rename = "readOnly")]
    pub read_only: Option<bool>,
    ///If true, the content type can't be modified by users or through push-down operations. Only site collection administrators can seal or unseal content types.
    pub sealed: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContentTypeInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The ID of the content type.
    pub id: Option<String>,
    ///The name of the content type.
    pub name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContentTypeOrder {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether this is the default content type
    pub default: Option<bool>,
    ///Specifies the position in which the content type appears in the selection UI.
    pub position: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphContract {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.contract".to_string())]
    pub odata_type: String,
    ///Type of contract. Possible values are:  SyndicationPartner, BreadthPartner, ResellerPartner. See more in the table below.
    #[serde(rename = "contractType")]
    pub contract_type: Option<String>,
    ///The unique identifier for the customer tenant referenced by this partnership. Corresponds to the id property of the customer tenant's organization resource.
    #[serde(rename = "customerId")]
    pub customer_id: Option<uuid::Uuid>,
    ///A copy of the customer tenant's default domain name. The copy is made when the partnership with the customer is established. It isn't automatically updated if the customer tenant's default domain name changes.
    #[serde(rename = "defaultDomainName")]
    pub default_domain_name: Option<String>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A copy of the customer tenant's display name. The copy is made when the partnership with the customer is established. It is not automatically updated if the customer tenant's display name changes.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphControlScore {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Control action category (Identity, Data, Device, Apps, Infrastructure).
    #[serde(rename = "controlCategory")]
    pub control_category: Option<String>,
    ///Control unique name.
    #[serde(rename = "controlName")]
    pub control_name: Option<String>,
    ///Description of the control.
    pub description: Option<String>,
    ///Tenant achieved score for the control (it varies day by day depending on tenant operations on the control).
    pub score: Option<MicrosoftGraphControlScoreScore>,
}
///Tenant achieved score for the control (it varies day by day depending on tenant operations on the control).
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphControlScoreScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConversation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.conversation".to_string())]
    pub odata_type: String,
    ///Indicates whether any of the posts within this Conversation has at least one attachment. Supports $filter (eq, ne) and $search.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastDeliveredDateTime")]
    pub last_delivered_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A short summary from the body of the latest post in this conversation. Supports $filter (eq, ne, le, ge).
    pub preview: Option<String>,
    ///A collection of all the conversation threads in the conversation. A navigation property. Read-only. Nullable.
    pub threads: Option<Vec<MicrosoftGraphConversationThread>>,
    ///The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated.
    pub topic: Option<String>,
    ///All the users that sent a message to this Conversation.
    #[serde(rename = "uniqueSenders")]
    pub unique_senders: Option<Vec<String>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConversationMember {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.conversationMember".to_string())]
    pub odata_type: String,
    ///The display name of the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The roles for that user. This property contains more qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member shouldn't have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role.
    pub roles: Option<Vec<Option<String>>>,
    ///The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.
    #[serde(rename = "visibleHistoryStartDateTime")]
    pub visible_history_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConversationMemberRoleUpdatedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.conversationMemberRoleUpdatedEventMessageDetail".to_string()
    )]
    pub odata_type: String,
    ///Roles for the coversation member user.
    #[serde(rename = "conversationMemberRoles")]
    pub conversation_member_roles: Option<Vec<Option<String>>>,
    ///Identity of the conversation member user.
    #[serde(rename = "conversationMemberUser")]
    pub conversation_member_user: Option<MicrosoftGraphTeamworkUserIdentity>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphConversationThread {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.conversationThread".to_string())]
    pub odata_type: String,
    ///The Cc: recipients for the thread. Returned only on $select.
    #[serde(rename = "ccRecipients")]
    pub cc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///Indicates whether any of the posts within this thread has at least one attachment. Returned by default.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates if the thread is locked. Returned by default.
    #[serde(rename = "isLocked")]
    pub is_locked: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.Returned by default.
    #[serde(rename = "lastDeliveredDateTime")]
    pub last_delivered_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub posts: Option<Vec<MicrosoftGraphPost>>,
    ///A short summary from the body of the latest post in this conversation. Returned by default.
    pub preview: Option<String>,
    ///The To: recipients for the thread. Returned only on $select.
    #[serde(rename = "toRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated. Returned by default.
    pub topic: Option<String>,
    ///All the users that sent a message to this thread. Returned by default.
    #[serde(rename = "uniqueSenders")]
    pub unique_senders: Option<Vec<String>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCopilotAdmin {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.copilotAdmin".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub settings: Option<MicrosoftGraphCopilotAdminSetting>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCopilotAdminLimitedMode {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.copilotAdminLimitedMode".to_string())]
    pub odata_type: String,
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "isEnabledForGroup")]
    pub is_enabled_for_group: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCopilotAdminSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.copilotAdminSetting".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "limitedMode")]
    pub limited_mode: Option<MicrosoftGraphCopilotAdminLimitedMode>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCountryLookupMethodType {
    #[serde(rename = "clientIpAddress")]
    #[default]
    ClientIpAddress,
    #[serde(rename = "authenticatorAppGps")]
    AuthenticatorAppGps,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCountryNamedLocation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.countryNamedLocation".to_string())]
    pub odata_type: String,
    ///List of countries and/or regions in two-letter format specified by ISO 3166-2. Required.
    #[serde(rename = "countriesAndRegions")]
    pub countries_and_regions: Option<Vec<String>>,
    ///Determines what method is used to decide which country the user is located in. Possible values are clientIpAddress(default) and authenticatorAppGps. Note: authenticatorAppGps is not yet supported in the Microsoft Cloud for US Government.
    #[serde(rename = "countryLookupMethod")]
    pub country_lookup_method: Option<MicrosoftGraphCountryLookupMethodType>,
    ///The Timestamp type represents creation date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Human-readable name of the location.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///true if IP addresses that don't map to a country or region should be included in the named location. Optional. Default value is false.
    #[serde(rename = "includeUnknownCountriesAndRegions")]
    pub include_unknown_countries_and_regions: Option<bool>,
    ///The Timestamp type represents last modified date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCourseStatus {
    #[serde(rename = "notStarted")]
    #[default]
    NotStarted,
    #[serde(rename = "inProgress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCrossCloudAzureActiveDirectoryTenant {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.crossCloudAzureActiveDirectoryTenant".to_string())]
    pub odata_type: String,
    ///The ID of the cloud where the tenant is located, one of microsoftonline.com, microsoftonline.us or partner.microsoftonline.cn. Read only.
    #[serde(rename = "cloudInstance")]
    pub cloud_instance: Option<String>,
    ///The name of the Microsoft Entra tenant. Read only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The ID of the Microsoft Entra tenant. Read only.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCrossTenantAccessPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.crossTenantAccessPolicy".to_string())]
    pub odata_type: String,
    ///Used to specify which Microsoft clouds an organization would like to collaborate with. By default, this value is empty. Supported values for this field are: microsoftonline.com, microsoftonline.us, and partner.microsoftonline.cn.
    #[serde(rename = "allowedCloudEndpoints")]
    pub allowed_cloud_endpoints: Option<Vec<String>>,
    ///Defines the default configuration for how your organization interacts with external Microsoft Entra organizations.
    pub default: Option<MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Defines partner-specific configurations for external Microsoft Entra organizations.
    pub partners: Option<Vec<MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner>>,
    ///Represents the base policy in the directory for multitenant organization settings.
    pub templates: Option<MicrosoftGraphPolicyTemplate>,
}
discriminated_enum! {
    pub enum MicrosoftGraphCrossTenantAccessPolicyB2Bsetting { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.crossTenantAccessPolicyTenantRestrictions",
    MicrosoftGraphCrossTenantAccessPolicyTenantRestrictions(Box <
    MicrosoftGraphCrossTenantAccessPolicyTenantRestrictions >))], fallback :
    CrossTenantAccessPolicyB2Bsetting(Box <
    MicrosoftGraphCrossTenantAccessPolicyB2BsettingBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCrossTenantAccessPolicyB2BsettingBase {
    ///The list of applications targeted with your cross-tenant access policy.
    pub applications: Option<MicrosoftGraphCrossTenantAccessPolicyTargetConfiguration>,
    ///The list of users and groups targeted with your cross-tenant access policy.
    #[serde(rename = "usersAndGroups")]
    pub users_and_groups: Option<
        MicrosoftGraphCrossTenantAccessPolicyTargetConfiguration,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.crossTenantAccessPolicyConfigurationDefault".to_string()
    )]
    pub odata_type: String,
    ///Determines the default configuration for automatic user consent settings. The inboundAllowed and outboundAllowed properties are always false and can't be updated in the default configuration. Read-only.
    #[serde(rename = "automaticUserConsentSettings")]
    pub automatic_user_consent_settings: Option<
        MicrosoftGraphInboundOutboundPolicyConfiguration,
    >,
    ///Defines your default configuration for users from other organizations accessing your resources via Microsoft Entra B2B collaboration.
    #[serde(rename = "b2bCollaborationInbound")]
    pub b2b_collaboration_inbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///Defines your default configuration for users in your organization going outbound to access resources in another organization via Microsoft Entra B2B collaboration.
    #[serde(rename = "b2bCollaborationOutbound")]
    pub b2b_collaboration_outbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///Defines your default configuration for users from other organizations accessing your resources via Microsoft Entra B2B direct connect.
    #[serde(rename = "b2bDirectConnectInbound")]
    pub b2b_direct_connect_inbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///Defines your default configuration for users in your organization going outbound to access resources in another organization via Microsoft Entra B2B direct connect.
    #[serde(rename = "b2bDirectConnectOutbound")]
    pub b2b_direct_connect_outbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines the default configuration for trusting other Conditional Access claims from external Microsoft Entra organizations.
    #[serde(rename = "inboundTrust")]
    pub inbound_trust: Option<MicrosoftGraphCrossTenantAccessPolicyInboundTrust>,
    ///Defines the priority order based on which an identity provider is selected during invitation redemption for a guest user.
    #[serde(rename = "invitationRedemptionIdentityProviderConfiguration")]
    pub invitation_redemption_identity_provider_configuration: Option<
        MicrosoftGraphDefaultInvitationRedemptionIdentityProviderConfiguration,
    >,
    ///If true, the default configuration is set to the system default configuration. If false, the default settings are customized.
    #[serde(rename = "isServiceDefault")]
    pub is_service_default: Option<bool>,
    ///Defines the default tenant restrictions configuration for users in your organization who access an external organization on your network or devices.
    #[serde(rename = "tenantRestrictions")]
    pub tenant_restrictions: Option<
        MicrosoftGraphCrossTenantAccessPolicyTenantRestrictions,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Determines the partner-specific configuration for automatic user consent settings. Unless specifically configured, the inboundAllowed and outboundAllowed properties are null and inherit from the default settings, which is always false.
    #[serde(rename = "automaticUserConsentSettings")]
    pub automatic_user_consent_settings: Option<
        MicrosoftGraphInboundOutboundPolicyConfiguration,
    >,
    ///Defines your partner-specific configuration for users from other organizations accessing your resources via Microsoft Entra B2B collaboration.
    #[serde(rename = "b2bCollaborationInbound")]
    pub b2b_collaboration_inbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///Defines your partner-specific configuration for users in your organization going outbound to access resources in another organization via Microsoft Entra B2B collaboration.
    #[serde(rename = "b2bCollaborationOutbound")]
    pub b2b_collaboration_outbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///Defines your partner-specific configuration for users from other organizations accessing your resources via Azure B2B direct connect.
    #[serde(rename = "b2bDirectConnectInbound")]
    pub b2b_direct_connect_inbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///Defines your partner-specific configuration for users in your organization going outbound to access resources in another organization via Microsoft Entra B2B direct connect.
    #[serde(rename = "b2bDirectConnectOutbound")]
    pub b2b_direct_connect_outbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///Defines the cross-tenant policy for the synchronization of users from a partner tenant. Use this user synchronization policy to streamline collaboration between users in a multitenant organization by automating the creation, update, and deletion of users from one tenant to another.
    #[serde(rename = "identitySynchronization")]
    pub identity_synchronization: Option<
        MicrosoftGraphCrossTenantIdentitySyncPolicyPartner,
    >,
    ///Determines the partner-specific configuration for trusting other Conditional Access claims from external Microsoft Entra organizations.
    #[serde(rename = "inboundTrust")]
    pub inbound_trust: Option<MicrosoftGraphCrossTenantAccessPolicyInboundTrust>,
    ///Identifies whether a tenant is a member of a multitenant organization.
    #[serde(rename = "isInMultiTenantOrganization")]
    pub is_in_multi_tenant_organization: Option<bool>,
    ///Identifies whether the partner-specific configuration is a Cloud Service Provider for your organization.
    #[serde(rename = "isServiceProvider")]
    pub is_service_provider: Option<bool>,
    ///The tenant identifier for the partner Microsoft Entra organization. Read-only. Key.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    ///Defines the partner-specific tenant restrictions configuration for users in your organization who access a partner organization using partner supplied identities on your network or devices.
    #[serde(rename = "tenantRestrictions")]
    pub tenant_restrictions: Option<
        MicrosoftGraphCrossTenantAccessPolicyTenantRestrictions,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCrossTenantAccessPolicyInboundTrust {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies whether compliant devices from external Microsoft Entra organizations are trusted.
    #[serde(rename = "isCompliantDeviceAccepted")]
    pub is_compliant_device_accepted: Option<bool>,
    ///Specifies whether Microsoft Entra hybrid joined devices from external Microsoft Entra organizations are trusted.
    #[serde(rename = "isHybridAzureADJoinedDeviceAccepted")]
    pub is_hybrid_azure_adjoined_device_accepted: Option<bool>,
    ///Specifies whether MFA from external Microsoft Entra organizations is trusted.
    #[serde(rename = "isMfaAccepted")]
    pub is_mfa_accepted: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCrossTenantAccessPolicyTarget {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Defines the target for cross-tenant access policy settings and can have one of the following values:  The unique identifier of the user, group, or application  AllUsers  AllApplications - Refers to any Microsoft cloud application.  Office365 - Includes the applications mentioned as part of the Office 365 suite.
    pub target: Option<String>,
    ///The type of resource that you want to target. The possible values are: user, group, application, unknownFutureValue.
    #[serde(rename = "targetType")]
    pub target_type: Option<MicrosoftGraphCrossTenantAccessPolicyTargetType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCrossTenantAccessPolicyTargetConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Defines whether access is allowed or blocked. The possible values are: allowed, blocked, unknownFutureValue.
    #[serde(rename = "accessType")]
    pub access_type: Option<
        MicrosoftGraphCrossTenantAccessPolicyTargetConfigurationAccessType,
    >,
    ///Specifies whether to target users, groups, or applications with this rule.
    pub targets: Option<Vec<MicrosoftGraphCrossTenantAccessPolicyTarget>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCrossTenantAccessPolicyTargetConfigurationAccessType {
    #[serde(rename = "allowed")]
    #[default]
    Allowed,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCrossTenantAccessPolicyTargetType {
    #[serde(rename = "user")]
    #[default]
    User,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "application")]
    Application,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCrossTenantAccessPolicyTenantRestrictions {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.crossTenantAccessPolicyTenantRestrictions".to_string())]
    pub odata_type: String,
    ///The list of applications targeted with your cross-tenant access policy.
    pub applications: Option<MicrosoftGraphCrossTenantAccessPolicyTargetConfiguration>,
    ///Defines the rule for filtering devices and whether devices that satisfy the rule should be allowed or blocked. This property isn't supported on the server side yet.
    pub devices: Option<MicrosoftGraphDevicesFilter>,
    ///The list of users and groups targeted with your cross-tenant access policy.
    #[serde(rename = "usersAndGroups")]
    pub users_and_groups: Option<
        MicrosoftGraphCrossTenantAccessPolicyTargetConfiguration,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCrossTenantIdentitySyncPolicyPartner {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Display name for the cross-tenant user synchronization policy. Use the name of the partner Microsoft Entra tenant to easily identify the policy. Optional.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Tenant identifier for the partner Microsoft Entra organization. Read-only.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    ///Defines whether users can be synchronized from the partner tenant. Key.
    #[serde(rename = "userSyncInbound")]
    pub user_sync_inbound: Option<MicrosoftGraphCrossTenantUserSyncInbound>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCrossTenantUserSyncInbound {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Defines whether user objects should be synchronized from the partner tenant. false causes any current user synchronization from the source tenant to the target tenant to stop. This property has no impact on existing users who have already been synchronized.
    #[serde(rename = "isSyncAllowed")]
    pub is_sync_allowed: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCurrencyColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies the locale from which to infer the currency symbol.
    pub locale: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomAppManagementConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.customAppManagementConfiguration".to_string())]
    pub odata_type: String,
    ///Collection of keyCredential restrictions settings to be applied to an application or service principal.
    #[serde(rename = "keyCredentials")]
    pub key_credentials: Option<Vec<MicrosoftGraphKeyCredentialConfiguration>>,
    ///Collection of password restrictions settings to be applied to an application or service principal.
    #[serde(rename = "passwordCredentials")]
    pub password_credentials: Option<Vec<MicrosoftGraphPasswordCredentialConfiguration>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomAuthenticationExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.customAuthenticationExtension".to_string())]
    pub odata_type: String,
    ///Configuration for securing the API call to the logic app. For example, using OAuth client credentials flow.
    #[serde(rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<
        MicrosoftGraphCustomExtensionAuthenticationConfiguration,
    >,
    ///The behaviour on error for the custom authentication extension.
    #[serde(rename = "behaviorOnError")]
    pub behavior_on_error: Option<MicrosoftGraphCustomExtensionBehaviorOnError>,
    ///HTTP connection settings that define how long Microsoft Entra ID can wait for a connection to a logic app, how many times you can retry a timed-out connection and the exception scenarios when retries are allowed.
    #[serde(rename = "clientConfiguration")]
    pub client_configuration: Option<MicrosoftGraphCustomExtensionClientConfiguration>,
    ///Description for the customCalloutExtension object.
    pub description: Option<String>,
    ///Display name for the customCalloutExtension object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The type and details for configuring the endpoint to call the logic app's workflow.
    #[serde(rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<
        MicrosoftGraphCustomExtensionEndpointConfiguration,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomCalloutExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.customCalloutExtension".to_string())]
    pub odata_type: String,
    ///Configuration for securing the API call to the logic app. For example, using OAuth client credentials flow.
    #[serde(rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<
        MicrosoftGraphCustomExtensionAuthenticationConfiguration,
    >,
    ///HTTP connection settings that define how long Microsoft Entra ID can wait for a connection to a logic app, how many times you can retry a timed-out connection and the exception scenarios when retries are allowed.
    #[serde(rename = "clientConfiguration")]
    pub client_configuration: Option<MicrosoftGraphCustomExtensionClientConfiguration>,
    ///Description for the customCalloutExtension object.
    pub description: Option<String>,
    ///Display name for the customCalloutExtension object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The type and details for configuring the endpoint to call the logic app's workflow.
    #[serde(rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<
        MicrosoftGraphCustomExtensionEndpointConfiguration,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphCustomExtensionAuthenticationConfiguration { discriminator :
    "@odata.type", variants : [("#microsoft.graph.azureAdPopTokenAuthentication",
    MicrosoftGraphAzureAdPopTokenAuthentication(Box <
    MicrosoftGraphAzureAdPopTokenAuthentication >)),
    ("#microsoft.graph.azureAdTokenAuthentication",
    MicrosoftGraphAzureAdTokenAuthentication(Box <
    MicrosoftGraphAzureAdTokenAuthentication >))], fallback :
    CustomExtensionAuthenticationConfiguration(Box <
    MicrosoftGraphCustomExtensionAuthenticationConfigurationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomExtensionAuthenticationConfigurationBase {}
discriminated_enum! {
    pub enum MicrosoftGraphCustomExtensionBehaviorOnError { discriminator :
    "@odata.type", variants : [("#microsoft.graph.fallbackToMicrosoftProviderOnError",
    MicrosoftGraphFallbackToMicrosoftProviderOnError(Box <
    MicrosoftGraphFallbackToMicrosoftProviderOnError >))], fallback :
    CustomExtensionBehaviorOnError(Box < MicrosoftGraphCustomExtensionBehaviorOnErrorBase
    >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomExtensionBehaviorOnErrorBase {}
discriminated_enum! {
    pub enum MicrosoftGraphCustomExtensionCallbackConfiguration { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.identityGovernance.customTaskExtensionCallbackConfiguration",
    MicrosoftGraphIdentityGovernanceCustomTaskExtensionCallbackConfiguration(Box <
    MicrosoftGraphIdentityGovernanceCustomTaskExtensionCallbackConfiguration >))],
    fallback : CustomExtensionCallbackConfiguration(Box <
    MicrosoftGraphCustomExtensionCallbackConfigurationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomExtensionCallbackConfigurationBase {
    ///The maximum duration in ISO 8601 format that Microsoft Entra ID will wait for a resume action for the callout it sent to the logic app. The valid range for custom extensions in lifecycle workflows is five minutes to three hours. The valid range for custom extensions in entitlement management is between 5 minutes and 14 days. For example, PT3H refers to three hours, P3D refers to three days, PT10M refers to ten minutes.
    #[serde(rename = "timeoutDuration")]
    pub timeout_duration: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomExtensionCalloutInstance {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Identification of the custom extension that was triggered at this instance.
    #[serde(rename = "customExtensionId")]
    pub custom_extension_id: Option<String>,
    ///Details provided by the logic app during the callback of the request instance.
    pub detail: Option<String>,
    ///The unique run identifier for the logic app.
    #[serde(rename = "externalCorrelationId")]
    pub external_correlation_id: Option<String>,
    ///Unique identifier for the callout instance. Read-only.
    pub id: Option<String>,
    ///The status of the request to the custom extension. The possible values are: calloutSent, callbackReceived, calloutFailed, callbackTimedOut, waitingForCallback, unknownFutureValue.
    pub status: Option<MicrosoftGraphCustomExtensionCalloutInstanceStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphCustomExtensionCalloutInstanceStatus {
    #[serde(rename = "calloutSent")]
    #[default]
    CalloutSent,
    #[serde(rename = "callbackReceived")]
    CallbackReceived,
    #[serde(rename = "calloutFailed")]
    CalloutFailed,
    #[serde(rename = "callbackTimedOut")]
    CallbackTimedOut,
    #[serde(rename = "waitingForCallback")]
    WaitingForCallback,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomExtensionClientConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The max number of retries that Microsoft Entra ID makes to the external API. Values of 0 or 1 are supported. If null, the default for the service applies.
    #[serde(rename = "maximumRetries")]
    pub maximum_retries: Option<f64>,
    ///The max duration in milliseconds that Microsoft Entra ID waits for a response from the external app before it shuts down the connection. The valid range is between 200 and 2000 milliseconds. Default duration is 1000.
    #[serde(rename = "timeoutInMilliseconds")]
    pub timeout_in_milliseconds: Option<f64>,
}
discriminated_enum! {
    pub enum MicrosoftGraphCustomExtensionEndpointConfiguration { discriminator :
    "@odata.type", variants : [("#microsoft.graph.httpRequestEndpoint",
    MicrosoftGraphHttpRequestEndpoint(Box < MicrosoftGraphHttpRequestEndpoint >)),
    ("#microsoft.graph.logicAppTriggerEndpointConfiguration",
    MicrosoftGraphLogicAppTriggerEndpointConfiguration(Box <
    MicrosoftGraphLogicAppTriggerEndpointConfiguration >))], fallback :
    CustomExtensionEndpointConfiguration(Box <
    MicrosoftGraphCustomExtensionEndpointConfigurationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomExtensionEndpointConfigurationBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomExtensionOverwriteConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "behaviorOnError")]
    pub behavior_on_error: Option<MicrosoftGraphCustomExtensionBehaviorOnError>,
    ///Configuration regarding properties of the custom extension which can be overwritten per event listener. If no values are provided, the properties on the custom extension are used.
    #[serde(rename = "clientConfiguration")]
    pub client_configuration: Option<MicrosoftGraphCustomExtensionClientConfiguration>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomExtensionStageSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.customExtensionStageSetting".to_string())]
    pub odata_type: String,
    ///Indicates the custom workflow extension that will be executed at this stage. Nullable. Supports $expand.
    #[serde(rename = "customExtension")]
    pub custom_extension: Option<MicrosoftGraphCustomCalloutExtension>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub stage: Option<MicrosoftGraphAccessPackageCustomExtensionStage>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomMetadataDictionary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.customMetadataDictionary".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomSecurityAttributeDefinition {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.customSecurityAttributeDefinition".to_string())]
    pub odata_type: String,
    ///Values that are predefined for this custom security attribute. This navigation property is not returned by default and must be specified in an $expand query. For example, /directory/customSecurityAttributeDefinitions?$expand=allowedValues.
    #[serde(rename = "allowedValues")]
    pub allowed_values: Option<Vec<MicrosoftGraphAllowedValue>>,
    ///Name of the attribute set. Case insensitive.
    #[serde(rename = "attributeSet")]
    pub attribute_set: Option<String>,
    ///Description of the custom security attribute. Can be up to 128 characters long and include Unicode characters. Can be changed later.
    pub description: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether multiple values can be assigned to the custom security attribute. Cannot be changed later. If type is set to Boolean, isCollection cannot be set to true.
    #[serde(rename = "isCollection")]
    pub is_collection: Option<bool>,
    ///Indicates whether custom security attribute values are indexed for searching on objects that are assigned attribute values. Cannot be changed later.
    #[serde(rename = "isSearchable")]
    pub is_searchable: Option<bool>,
    ///Name of the custom security attribute. Must be unique within an attribute set. Can be up to 32 characters long and include Unicode characters. Cannot contain spaces or special characters. Cannot be changed later. Case insensitive.
    pub name: Option<String>,
    ///Specifies whether the custom security attribute is active or deactivated. Acceptable values are: Available and Deprecated. Can be changed later.
    pub status: Option<String>,
    ///Data type for the custom security attribute values. Supported types are: Boolean, Integer, and String. Cannot be changed later.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
    ///Indicates whether only predefined values can be assigned to the custom security attribute. If set to false, free-form values are allowed. Can later be changed from true to false, but cannot be changed from false to true. If type is set to Boolean, usePreDefinedValuesOnly cannot be set to true.
    #[serde(rename = "usePreDefinedValuesOnly")]
    pub use_pre_defined_values_only: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomSecurityAttributeValue {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomTimeZone {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.customTimeZone".to_string())]
    pub odata_type: String,
    ///The time offset of the time zone from Coordinated Universal Time (UTC). This value is in minutes. Time zones that are ahead of UTC have a positive offset; time zones that are behind UTC have a negative offset.
    pub bias: Option<f64>,
    ///Specifies when the time zone switches from standard time to daylight saving time.
    #[serde(rename = "daylightOffset")]
    pub daylight_offset: Option<MicrosoftGraphDaylightTimeZoneOffset>,
    ///The name of a time zone. It can be a standard time zone name such as 'Hawaii-Aleutian Standard Time', or 'Customized Time Zone' for a custom time zone.
    pub name: Option<String>,
    ///Specifies when the time zone switches from daylight saving time to standard time.
    #[serde(rename = "standardOffset")]
    pub standard_offset: Option<MicrosoftGraphStandardTimeZoneOffset>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphCustomTrainingSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.customTrainingSetting".to_string())]
    pub odata_type: String,
    ///A user collection that specifies to whom the training should be assigned. Possible values are: none, allUsers, clickedPayload, compromised, reportedPhish, readButNotClicked, didNothing, unknownFutureValue.
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<Vec<MicrosoftGraphTrainingAssignedTo>>,
    ///The description of the custom training setting.
    pub description: Option<String>,
    ///The display name of the custom training setting.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Training duration.
    #[serde(rename = "durationInMinutes")]
    pub duration_in_minutes: Option<f64>,
    ///Type of setting. Possible values are: microsoftCustom, microsoftManaged, noTraining, custom, unknownFutureValue.
    #[serde(rename = "settingType")]
    pub setting_type: Option<MicrosoftGraphTrainingSettingType>,
    ///The training URL.
    pub url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDataPolicyOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.dataPolicyOperation".to_string())]
    pub odata_type: String,
    ///Represents when the request for this data policy operation was completed, in UTC time, using the ISO 8601 format. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Null until the operation completes.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies the progress of an operation.
    pub progress: Option<MicrosoftGraphDataPolicyOperationProgress>,
    ///Possible values are: notStarted, running, complete, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphDataPolicyOperationStatus>,
    ///The URL location to where data is being exported for export requests.
    #[serde(rename = "storageLocation")]
    pub storage_location: Option<String>,
    ///Represents when the request for this data operation was submitted, in UTC time, using the ISO 8601 format. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "submittedDateTime")]
    pub submitted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The id for the user on whom the operation is performed.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}
///Specifies the progress of an operation.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDataPolicyOperationProgress {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDataPolicyOperationStatus {
    #[serde(rename = "notStarted")]
    #[default]
    NotStarted,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "complete")]
    Complete,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDataSecurityAndGovernance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.dataSecurityAndGovernance".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "sensitivityLabels")]
    pub sensitivity_labels: Option<Vec<MicrosoftGraphSensitivityLabel>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDataSubject {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Email of the data subject.
    pub email: Option<String>,
    ///First name of the data subject.
    #[serde(rename = "firstName")]
    pub first_name: Option<String>,
    ///Last Name of the data subject.
    #[serde(rename = "lastName")]
    pub last_name: Option<String>,
    ///The country/region of residency. The residency information is uesed only for internal reporting but not for the content search.
    pub residency: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDataSubjectType {
    #[serde(rename = "customer")]
    #[default]
    Customer,
    #[serde(rename = "currentEmployee")]
    CurrentEmployee,
    #[serde(rename = "formerEmployee")]
    FormerEmployee,
    #[serde(rename = "prospectiveEmployee")]
    ProspectiveEmployee,
    #[serde(rename = "student")]
    Student,
    #[serde(rename = "teacher")]
    Teacher,
    #[serde(rename = "faculty")]
    Faculty,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDateTimeColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///How the value should be presented in the UX. Must be one of default, friendly, or standard. See below for more details. If unspecified, treated as default.
    #[serde(rename = "displayAs")]
    pub display_as: Option<String>,
    ///Indicates whether the value should be presented as a date only or a date and time. Must be one of dateOnly or dateTime
    pub format: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDateTimeTimeZone {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A single point of time in a combined date and time representation ({date}T{time}; for example, 2017-08-29T04:00:00.0000000).
    #[serde(rename = "dateTime")]
    pub date_time: Option<String>,
    ///Represents a time zone, for example, 'Pacific Standard Time'. See below for more possible values.
    #[serde(rename = "timeZone")]
    pub time_zone: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDayNote {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.dayNote".to_string())]
    pub odata_type: String,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date of the day note.
    #[serde(rename = "dayNoteDate")]
    pub day_note_date: Option<chrono::NaiveDate>,
    ///The draft version of this day note that is viewable by managers. Only contentType text is supported.
    #[serde(rename = "draftDayNote")]
    pub draft_day_note: Option<MicrosoftGraphItemBody>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The shared version of this day note that is viewable by both employees and managers. Only contentType text is supported.
    #[serde(rename = "sharedDayNote")]
    pub shared_day_note: Option<MicrosoftGraphItemBody>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDayOfWeek {
    #[serde(rename = "sunday")]
    #[default]
    Sunday,
    #[serde(rename = "monday")]
    Monday,
    #[serde(rename = "tuesday")]
    Tuesday,
    #[serde(rename = "wednesday")]
    Wednesday,
    #[serde(rename = "thursday")]
    Thursday,
    #[serde(rename = "friday")]
    Friday,
    #[serde(rename = "saturday")]
    Saturday,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDaylightTimeZoneOffset {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.daylightTimeZoneOffset".to_string())]
    pub odata_type: String,
    ///Represents the nth occurrence of the day of week that the transition from daylight saving time to standard time occurs.
    #[serde(rename = "dayOccurrence")]
    pub day_occurrence: Option<f64>,
    ///Represents the day of the week when the transition from daylight saving time to standard time.
    #[serde(rename = "dayOfWeek")]
    pub day_of_week: Option<MicrosoftGraphDayOfWeek>,
    ///The time offset from Coordinated Universal Time (UTC) for daylight saving time. This value is in minutes.
    #[serde(rename = "daylightBias")]
    pub daylight_bias: Option<f64>,
    ///Represents the month of the year when the transition from daylight saving time to standard time occurs.
    pub month: Option<f64>,
    ///Represents the time of day when the transition from daylight saving time to standard time occurs.
    pub time: Option<chrono::NaiveTime>,
    ///Represents how frequently in terms of years the change from daylight saving time to standard time occurs. For example, a value of 0 means every year.
    pub year: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDefaultColumnValue {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The formula used to compute the default value for the column.
    pub formula: Option<String>,
    ///The direct value to use as the default value for the column.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDefaultInvitationRedemptionIdentityProviderConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.defaultInvitationRedemptionIdentityProviderConfiguration".to_string(

        )
    )]
    pub odata_type: String,
    ///The fallback identity provider to be used in case no primary identity provider can be used for guest invitation redemption. Possible values are: defaultConfiguredIdp, emailOneTimePasscode, or microsoftAccount.
    #[serde(rename = "fallbackIdentityProvider")]
    pub fallback_identity_provider: Option<MicrosoftGraphB2bIdentityProvidersType>,
    ///Collection of identity providers in priority order of preference to be used for guest invitation redemption. Possible values are: azureActiveDirectory, externalFederation, or socialIdentityProviders.
    #[serde(rename = "primaryIdentityProviderPrecedenceOrder")]
    pub primary_identity_provider_precedence_order: Option<
        Vec<MicrosoftGraphB2bIdentityProvidersType>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDefaultManagedAppProtection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.defaultManagedAppProtection".to_string())]
    pub odata_type: String,
    ///Data storage locations where a user may store managed data.
    #[serde(rename = "allowedDataStorageLocations")]
    pub allowed_data_storage_locations: Option<
        Vec<MicrosoftGraphManagedAppDataStorageLocation>,
    >,
    ///Data can be transferred from/to these classes of apps
    #[serde(rename = "allowedInboundDataTransferSources")]
    pub allowed_inbound_data_transfer_sources: Option<
        MicrosoftGraphManagedAppDataTransferLevel,
    >,
    ///Represents the level to which the device's clipboard may be shared between apps
    #[serde(rename = "allowedOutboundClipboardSharingLevel")]
    pub allowed_outbound_clipboard_sharing_level: Option<
        MicrosoftGraphManagedAppClipboardSharingLevel,
    >,
    ///Data can be transferred from/to these classes of apps
    #[serde(rename = "allowedOutboundDataTransferDestinations")]
    pub allowed_outbound_data_transfer_destinations: Option<
        MicrosoftGraphManagedAppDataTransferLevel,
    >,
    ///Represents the level to which app data is encrypted for managed apps
    #[serde(rename = "appDataEncryptionType")]
    pub app_data_encryption_type: Option<MicrosoftGraphManagedAppDataEncryptionType>,
    ///List of apps to which the policy is deployed.
    pub apps: Option<Vec<MicrosoftGraphManagedMobileApp>>,
    ///Indicates whether contacts can be synced to the user's device.
    #[serde(rename = "contactSyncBlocked")]
    pub contact_sync_blocked: Option<bool>,
    ///The date and time the policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A set of string key and string value pairs to be sent to the affected users, unalterned by this service
    #[serde(rename = "customSettings")]
    pub custom_settings: Option<Vec<MicrosoftGraphKeyValuePair>>,
    ///Indicates whether the backup of a managed app's data is blocked.
    #[serde(rename = "dataBackupBlocked")]
    pub data_backup_blocked: Option<bool>,
    ///Count of apps to which the current policy is deployed.
    #[serde(rename = "deployedAppCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub deployed_app_count: Option<f64>,
    ///Navigation property to deployment summary of the configuration.
    #[serde(rename = "deploymentSummary")]
    pub deployment_summary: Option<MicrosoftGraphManagedAppPolicyDeploymentSummary>,
    ///The policy's description.
    pub description: Option<String>,
    ///Indicates whether device compliance is required.
    #[serde(rename = "deviceComplianceRequired")]
    pub device_compliance_required: Option<bool>,
    ///When this setting is enabled, app level encryption is disabled if device level encryption is enabled. (Android only)
    #[serde(rename = "disableAppEncryptionIfDeviceEncryptionIsEnabled")]
    pub disable_app_encryption_if_device_encryption_is_enabled: Option<bool>,
    ///Indicates whether use of the app pin is required if the device pin is set.
    #[serde(rename = "disableAppPinIfDevicePinIsSet")]
    pub disable_app_pin_if_device_pin_is_set: Option<bool>,
    ///Policy display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Indicates whether managed-app data should be encrypted. (Android only)
    #[serde(rename = "encryptAppData")]
    pub encrypt_app_data: Option<bool>,
    ///Indicates whether use of the FaceID is allowed in place of a pin if PinRequired is set to True. (iOS Only)
    #[serde(rename = "faceIdBlocked")]
    pub face_id_blocked: Option<bool>,
    ///Indicates whether use of the fingerprint reader is allowed in place of a pin if PinRequired is set to True.
    #[serde(rename = "fingerprintBlocked")]
    pub fingerprint_blocked: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last time the policy was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Type of managed browser
    #[serde(rename = "managedBrowser")]
    pub managed_browser: Option<MicrosoftGraphManagedBrowserType>,
    ///Indicates whether internet links should be opened in the managed browser app, or any custom browser specified by CustomBrowserProtocol (for iOS) or CustomBrowserPackageId/CustomBrowserDisplayName (for Android)
    #[serde(rename = "managedBrowserToOpenLinksRequired")]
    pub managed_browser_to_open_links_required: Option<bool>,
    ///Maximum number of incorrect pin retry attempts before the managed app is either blocked or wiped.
    #[serde(rename = "maximumPinRetries")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub maximum_pin_retries: Option<f64>,
    ///Minimum pin length required for an app-level pin if PinRequired is set to True
    #[serde(rename = "minimumPinLength")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub minimum_pin_length: Option<f64>,
    ///Versions less than the specified version will block the managed app from accessing company data.
    #[serde(rename = "minimumRequiredAppVersion")]
    pub minimum_required_app_version: Option<String>,
    ///Versions less than the specified version will block the managed app from accessing company data.
    #[serde(rename = "minimumRequiredOsVersion")]
    pub minimum_required_os_version: Option<String>,
    ///Define the oldest required Android security patch level a user can have to gain secure access to the app. (Android only)
    #[serde(rename = "minimumRequiredPatchVersion")]
    pub minimum_required_patch_version: Option<String>,
    ///Versions less than the specified version will block the managed app from accessing company data. (iOS Only)
    #[serde(rename = "minimumRequiredSdkVersion")]
    pub minimum_required_sdk_version: Option<String>,
    ///Versions less than the specified version will result in warning message on the managed app.
    #[serde(rename = "minimumWarningAppVersion")]
    pub minimum_warning_app_version: Option<String>,
    ///Versions less than the specified version will result in warning message on the managed app from accessing company data.
    #[serde(rename = "minimumWarningOsVersion")]
    pub minimum_warning_os_version: Option<String>,
    ///Define the oldest recommended Android security patch level a user can have for secure access to the app. (Android only)
    #[serde(rename = "minimumWarningPatchVersion")]
    pub minimum_warning_patch_version: Option<String>,
    ///Indicates whether organizational credentials are required for app use.
    #[serde(rename = "organizationalCredentialsRequired")]
    pub organizational_credentials_required: Option<bool>,
    ///TimePeriod before the all-level pin must be reset if PinRequired is set to True.
    #[serde(rename = "periodBeforePinReset")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_before_pin_reset: Option<String>,
    ///The period after which access is checked when the device is not connected to the internet.
    #[serde(rename = "periodOfflineBeforeAccessCheck")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_offline_before_access_check: Option<String>,
    ///The amount of time an app is allowed to remain disconnected from the internet before all managed data it is wiped.
    #[serde(rename = "periodOfflineBeforeWipeIsEnforced")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_offline_before_wipe_is_enforced: Option<String>,
    ///The period after which access is checked when the device is connected to the internet.
    #[serde(rename = "periodOnlineBeforeAccessCheck")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_online_before_access_check: Option<String>,
    ///Character set which is to be used for a user's app PIN
    #[serde(rename = "pinCharacterSet")]
    pub pin_character_set: Option<MicrosoftGraphManagedAppPinCharacterSet>,
    ///Indicates whether an app-level pin is required.
    #[serde(rename = "pinRequired")]
    pub pin_required: Option<bool>,
    ///Indicates whether printing is allowed from managed apps.
    #[serde(rename = "printBlocked")]
    pub print_blocked: Option<bool>,
    ///Indicates whether users may use the 'Save As' menu item to save a copy of protected files.
    #[serde(rename = "saveAsBlocked")]
    pub save_as_blocked: Option<bool>,
    ///Indicates whether screen capture is blocked. (Android only)
    #[serde(rename = "screenCaptureBlocked")]
    pub screen_capture_blocked: Option<bool>,
    ///Indicates whether simplePin is blocked.
    #[serde(rename = "simplePinBlocked")]
    pub simple_pin_blocked: Option<bool>,
    ///Version of the entity.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDefaultUserRolePermissions {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether the default user role can create applications. This setting corresponds to the Users can register applications setting in the User settings menu in the Microsoft Entra admin center.
    #[serde(rename = "allowedToCreateApps")]
    pub allowed_to_create_apps: Option<bool>,
    ///Indicates whether the default user role can create security groups. This setting corresponds to the following menus in the Microsoft Entra admin center:  The Users can create security groups in Microsoft Entra admin centers, API or PowerShell setting in the Group settings menu.  Users can create security groups setting in the User settings menu.
    #[serde(rename = "allowedToCreateSecurityGroups")]
    pub allowed_to_create_security_groups: Option<bool>,
    ///Indicates whether the default user role can create tenants. This setting corresponds to the Restrict non-admin users from creating tenants setting in the User settings menu in the Microsoft Entra admin center.  When this setting is false, users assigned the Tenant Creator role can still create tenants.
    #[serde(rename = "allowedToCreateTenants")]
    pub allowed_to_create_tenants: Option<bool>,
    ///Indicates whether the registered owners of a device can read their own BitLocker recovery keys with default user role.
    #[serde(rename = "allowedToReadBitlockerKeysForOwnedDevice")]
    pub allowed_to_read_bitlocker_keys_for_owned_device: Option<bool>,
    ///Indicates whether the default user role can read other users. DO NOT SET THIS VALUE TO false.
    #[serde(rename = "allowedToReadOtherUsers")]
    pub allowed_to_read_other_users: Option<bool>,
    ///Indicates if user consent to apps is allowed, and if it is, which permission to grant consent and which app consent policy (permissionGrantPolicy) govern the permission for users to grant consent. Value should be in the format managePermissionGrantsForSelf.{id}, where {id} is the id of a built-in or custom app consent policy. An empty list indicates user consent to apps is disabled.
    #[serde(rename = "permissionGrantPoliciesAssigned")]
    pub permission_grant_policies_assigned: Option<Vec<Option<String>>>,
}
///Possible values of Cloud Block Level
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDefenderCloudBlockLevelType {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "highPlus")]
    HighPlus,
    #[serde(rename = "zeroTolerance")]
    ZeroTolerance,
}
///Specify Defender’s actions to take on detected Malware per threat level.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDefenderDetectedMalwareActions {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Defender’s default action to take on detected Malware threats.
    #[serde(rename = "highSeverity")]
    pub high_severity: Option<MicrosoftGraphDefenderThreatAction>,
    ///Defender’s default action to take on detected Malware threats.
    #[serde(rename = "lowSeverity")]
    pub low_severity: Option<MicrosoftGraphDefenderThreatAction>,
    ///Defender’s default action to take on detected Malware threats.
    #[serde(rename = "moderateSeverity")]
    pub moderate_severity: Option<MicrosoftGraphDefenderThreatAction>,
    ///Defender’s default action to take on detected Malware threats.
    #[serde(rename = "severeSeverity")]
    pub severe_severity: Option<MicrosoftGraphDefenderThreatAction>,
}
///Possible values for monitoring file activity.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDefenderMonitorFileActivity {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "disable")]
    Disable,
    #[serde(rename = "monitorAllFiles")]
    MonitorAllFiles,
    #[serde(rename = "monitorIncomingFilesOnly")]
    MonitorIncomingFilesOnly,
    #[serde(rename = "monitorOutgoingFilesOnly")]
    MonitorOutgoingFilesOnly,
}
///Possible values for prompting user for samples submission.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDefenderPromptForSampleSubmission {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "alwaysPrompt")]
    AlwaysPrompt,
    #[serde(rename = "promptBeforeSendingPersonalData")]
    PromptBeforeSendingPersonalData,
    #[serde(rename = "neverSendData")]
    NeverSendData,
    #[serde(rename = "sendAllDataWithoutPrompting")]
    SendAllDataWithoutPrompting,
}
///Possible values for system scan type.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDefenderScanType {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "quick")]
    Quick,
    #[serde(rename = "full")]
    Full,
}
///Defender’s default action to take on detected Malware threats.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDefenderThreatAction {
    #[serde(rename = "deviceDefault")]
    #[default]
    DeviceDefault,
    #[serde(rename = "clean")]
    Clean,
    #[serde(rename = "quarantine")]
    Quarantine,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "allow")]
    Allow,
    #[serde(rename = "userDefined")]
    UserDefined,
    #[serde(rename = "block")]
    Block,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDelegateMeetingMessageDeliveryOptions {
    #[serde(rename = "sendToDelegateAndInformationToPrincipal")]
    #[default]
    SendToDelegateAndInformationToPrincipal,
    #[serde(rename = "sendToDelegateAndPrincipal")]
    SendToDelegateAndPrincipal,
    #[serde(rename = "sendToDelegateOnly")]
    SendToDelegateOnly,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDelegatedAdminAccessAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.delegatedAdminAccessAssignment".to_string())]
    pub odata_type: String,
    #[serde(rename = "accessContainer")]
    pub access_container: Option<MicrosoftGraphDelegatedAdminAccessContainer>,
    #[serde(rename = "accessDetails")]
    pub access_details: Option<MicrosoftGraphDelegatedAdminAccessDetails>,
    ///The date and time in ISO 8601 format and in UTC time when the access assignment was created. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time in ISO 8601 and in UTC time when this access assignment was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The status of the access assignment. Read-only. The possible values are: pending, active, deleting, deleted, error, unknownFutureValue.
    pub status: Option<MicrosoftGraphDelegatedAdminAccessAssignmentStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDelegatedAdminAccessAssignmentStatus {
    #[serde(rename = "pending")]
    #[default]
    Pending,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "deleting")]
    Deleting,
    #[serde(rename = "deleted")]
    Deleted,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDelegatedAdminAccessContainer {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The identifier of the access container (for example, a security group). For 'securityGroup' access containers, this must be a valid ID of a Microsoft Entra security group in the Microsoft partner's tenant.
    #[serde(rename = "accessContainerId")]
    pub access_container_id: Option<String>,
    #[serde(rename = "accessContainerType")]
    pub access_container_type: Option<MicrosoftGraphDelegatedAdminAccessContainerType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDelegatedAdminAccessContainerType {
    #[serde(rename = "securityGroup")]
    #[default]
    SecurityGroup,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDelegatedAdminAccessDetails {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The directory roles that the Microsoft partner is assigned in the customer tenant.
    #[serde(rename = "unifiedRoles")]
    pub unified_roles: Option<Vec<MicrosoftGraphUnifiedRole>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDelegatedAdminCustomer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.delegatedAdminCustomer".to_string())]
    pub odata_type: String,
    ///The Microsoft Entra ID display name of the customer tenant. Read-only. Supports $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Contains the management details of a service in the customer tenant that's managed by delegated administration.
    #[serde(rename = "serviceManagementDetails")]
    pub service_management_details: Option<
        Vec<MicrosoftGraphDelegatedAdminServiceManagementDetail>,
    >,
    ///The Microsoft Entra ID-assigned tenant ID of the customer. Read-only.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDelegatedAdminRelationship {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.delegatedAdminRelationship".to_string())]
    pub odata_type: String,
    ///The access assignments associated with the delegated admin relationship.
    #[serde(rename = "accessAssignments")]
    pub access_assignments: Option<Vec<MicrosoftGraphDelegatedAdminAccessAssignment>>,
    #[serde(rename = "accessDetails")]
    pub access_details: Option<MicrosoftGraphDelegatedAdminAccessDetails>,
    ///The date and time in ISO 8601 format and in UTC time when the relationship became active. Read-only.
    #[serde(rename = "activatedDateTime")]
    pub activated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The duration by which the validity of the relationship is automatically extended, denoted in ISO 8601 format. Supported values are: P0D, PT0S, P180D. The default value is PT0S. PT0S indicates that the relationship expires when the endDateTime is reached and it isn't automatically extended.
    #[serde(rename = "autoExtendDuration")]
    pub auto_extend_duration: Option<String>,
    ///The date and time in ISO 8601 format and in UTC time when the relationship was created. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The display name and unique identifier of the customer of the relationship. This is configured either by the partner at the time the relationship is created or by the system after the customer approves the relationship. Can't be changed by the customer.
    pub customer: Option<MicrosoftGraphDelegatedAdminRelationshipCustomerParticipant>,
    ///The display name of the relationship used for ease of identification. Must be unique across all delegated admin relationships of the partner and is set by the partner only when the relationship is in the created status and can't be changed by the customer. Maximum length is 50 characters.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The duration of the relationship in ISO 8601 format. Must be a value between P1D and P2Y inclusive. This is set by the partner only when the relationship is in the created status and can't be changed by the customer.
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub duration: Option<String>,
    ///The date and time in ISO 8601 format and in UTC time when the status of relationship changes to either terminated or expired. Calculated as endDateTime = activatedDateTime + duration. Read-only.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time in ISO 8601 format and in UTC time when the relationship was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The long running operations associated with the delegated admin relationship.
    pub operations: Option<Vec<MicrosoftGraphDelegatedAdminRelationshipOperation>>,
    ///The requests associated with the delegated admin relationship.
    pub requests: Option<Vec<MicrosoftGraphDelegatedAdminRelationshipRequest>>,
    ///The status of the relationship. Read Only. The possible values are: activating, active, approvalPending, approved, created, expired, expiring, terminated, terminating, terminationRequested, unknownFutureValue. Supports $orderby.
    pub status: Option<MicrosoftGraphDelegatedAdminRelationshipStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDelegatedAdminRelationshipCustomerParticipant {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The display name of the customer tenant as set by Microsoft Entra ID. Read-only
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The Microsoft Entra ID-assigned tenant ID of the customer tenant.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDelegatedAdminRelationshipOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.delegatedAdminRelationshipOperation".to_string())]
    pub odata_type: String,
    ///The time in ISO 8601 format and in UTC time when the long-running operation was created. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The data (payload) for the operation. Read-only.
    pub data: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The time in ISO 8601 format and in UTC time when the long-running operation was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "operationType")]
    pub operation_type: Option<MicrosoftGraphDelegatedAdminRelationshipOperationType>,
    pub status: Option<MicrosoftGraphLongRunningOperationStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDelegatedAdminRelationshipOperationType {
    #[serde(rename = "delegatedAdminAccessAssignmentUpdate")]
    #[default]
    DelegatedAdminAccessAssignmentUpdate,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "delegatedAdminRelationshipUpdate")]
    DelegatedAdminRelationshipUpdate,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDelegatedAdminRelationshipRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.delegatedAdminRelationshipRequest".to_string())]
    pub odata_type: String,
    pub action: Option<MicrosoftGraphDelegatedAdminRelationshipRequestAction>,
    ///The date and time in ISO 8601 format and in UTC time when the relationship request was created. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time in ISO 8601 format and UTC time when this relationship request was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The status of the request. Read-only. The possible values are: created, pending, succeeded, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphDelegatedAdminRelationshipRequestStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDelegatedAdminRelationshipRequestAction {
    #[serde(rename = "lockForApproval")]
    #[default]
    LockForApproval,
    #[serde(rename = "approve")]
    Approve,
    #[serde(rename = "terminate")]
    Terminate,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "reject")]
    Reject,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDelegatedAdminRelationshipRequestStatus {
    #[serde(rename = "created")]
    #[default]
    Created,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDelegatedAdminRelationshipStatus {
    #[serde(rename = "activating")]
    #[default]
    Activating,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "approvalPending")]
    ApprovalPending,
    #[serde(rename = "approved")]
    Approved,
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "expired")]
    Expired,
    #[serde(rename = "expiring")]
    Expiring,
    #[serde(rename = "terminated")]
    Terminated,
    #[serde(rename = "terminating")]
    Terminating,
    #[serde(rename = "terminationRequested")]
    TerminationRequested,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDelegatedAdminServiceManagementDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.delegatedAdminServiceManagementDetail".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The URL of the management portal for the managed service. Read-only.
    #[serde(rename = "serviceManagementUrl")]
    pub service_management_url: Option<String>,
    ///The name of a managed service. Read-only.
    #[serde(rename = "serviceName")]
    pub service_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDelegatedPermissionClassification {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.delegatedPermissionClassification".to_string())]
    pub odata_type: String,
    ///The classification value. Possible values: low, medium (preview), high (preview). Doesn't support $filter.
    pub classification: Option<MicrosoftGraphPermissionClassificationType>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The unique identifier (id) for the delegated permission listed in the oauth2PermissionScopes collection of the servicePrincipal. Required on create. Doesn't support $filter.
    #[serde(rename = "permissionId")]
    pub permission_id: Option<String>,
    ///The claim value (value) for the delegated permission listed in the oauth2PermissionScopes collection of the servicePrincipal. Doesn't support $filter.
    #[serde(rename = "permissionName")]
    pub permission_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeleteUserFromSharedAppleDeviceActionResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.deleteUserFromSharedAppleDeviceActionResult".to_string()
    )]
    pub odata_type: String,
    ///Action name
    #[serde(rename = "actionName")]
    pub action_name: Option<String>,
    ///State of the action on the device
    #[serde(rename = "actionState")]
    pub action_state: Option<MicrosoftGraphActionState>,
    ///Time the action state was last updated
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Time the action was initiated
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///User principal name of the user to be deleted
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeleted {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents the state of the deleted item.
    pub state: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeletedChat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deletedChat".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeletedItemContainer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deletedItemContainer".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Deleted workflows that end up in the deletedItemsContainer.
    pub workflows: Option<Vec<MicrosoftGraphIdentityGovernanceWorkflow>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeletedTeam {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deletedTeam".to_string())]
    pub odata_type: String,
    ///The channels that are either shared with this deleted team or created in this deleted team.
    pub channels: Option<Vec<MicrosoftGraphChannel>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeltaParticipants {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deltaParticipants".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The collection of participants that were updated since the last roster update.
    pub participants: Option<Vec<MicrosoftGraphParticipant>>,
    ///The sequence number for the roster update that is used to identify the notification order.
    #[serde(rename = "sequenceNumber")]
    pub sequence_number: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDestinationType {
    #[serde(rename = "new")]
    #[default]
    New,
    #[serde(rename = "inPlace")]
    InPlace,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDetailsInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDetectedApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.detectedApp".to_string())]
    pub odata_type: String,
    ///The number of devices that have installed this application
    #[serde(rename = "deviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_count: Option<f64>,
    ///Name of the discovered application. Read-only
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The devices that have the discovered application installed
    #[serde(rename = "managedDevices")]
    pub managed_devices: Option<Vec<MicrosoftGraphManagedDevice>>,
    ///Indicates the operating system / platform of the discovered application.  Some possible values are Windows, iOS, macOS. The default value is unknown (0).
    pub platform: Option<MicrosoftGraphDetectedAppPlatformType>,
    ///Indicates the publisher of the discovered application. For example: 'Microsoft'.  The default value is an empty string.
    pub publisher: Option<String>,
    ///Discovered application size in bytes. Read-only
    #[serde(rename = "sizeInByte")]
    pub size_in_byte: Option<f64>,
    ///Version of the discovered application. Read-only
    pub version: Option<String>,
}
///Indicates the operating system / platform of the discovered application.  Some possible values are Windows, iOS, macOS. The default value is unknown (0).
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDetectedAppPlatformType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "windows")]
    Windows,
    #[serde(rename = "windowsMobile")]
    WindowsMobile,
    #[serde(rename = "windowsHolographic")]
    WindowsHolographic,
    #[serde(rename = "ios")]
    Ios,
    #[serde(rename = "macOS")]
    MacOs,
    #[serde(rename = "chromeOS")]
    ChromeOs,
    #[serde(rename = "androidOSP")]
    AndroidOsp,
    #[serde(rename = "androidDeviceAdministrator")]
    AndroidDeviceAdministrator,
    #[serde(rename = "androidWorkProfile")]
    AndroidWorkProfile,
    #[serde(rename = "androidDedicatedAndFullyManaged")]
    AndroidDedicatedAndFullyManaged,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDevice {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.device".to_string())]
    pub odata_type: String,
    ///true if the account is enabled; otherwise, false. Required. Default is true.  Supports $filter (eq, ne, not, in). Only callers with at least the Cloud Device Administrator role can set this property.
    #[serde(rename = "accountEnabled")]
    pub account_enabled: Option<bool>,
    ///For internal use only. Not nullable. Supports $filter (eq, not, ge, le).
    #[serde(rename = "alternativeSecurityIds")]
    pub alternative_security_ids: Option<Vec<MicrosoftGraphAlternativeSecurityId>>,
    ///The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Supports $filter (eq, ne, not, ge, le, and eq on null values) and $orderby.
    #[serde(rename = "approximateLastSignInDateTime")]
    pub approximate_last_sign_in_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The timestamp when the device is no longer deemed compliant. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "complianceExpirationDateTime")]
    pub compliance_expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///User-defined property set by Intune to automatically add devices to groups and simplify managing devices.
    #[serde(rename = "deviceCategory")]
    pub device_category: Option<String>,
    ///Unique identifier set by Azure Device Registration Service at the time of registration. This alternate key can be used to reference the device object. Supports $filter (eq, ne, not, startsWith).
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///For internal use only. Set to null.
    #[serde(rename = "deviceMetadata")]
    pub device_metadata: Option<String>,
    ///Ownership of the device. Intune sets this property. Possible values are: unknown, company, personal.
    #[serde(rename = "deviceOwnership")]
    pub device_ownership: Option<String>,
    ///For internal use only.
    #[serde(rename = "deviceVersion")]
    pub device_version: Option<f64>,
    ///The display name for the device. Maximum length is 256 characters. Required. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Enrollment profile applied to the device. For example, Apple Device Enrollment Profile, Device enrollment - Corporate device identifiers, or Windows Autopilot profile name. This property is set by Intune.
    #[serde(rename = "enrollmentProfileName")]
    pub enrollment_profile_name: Option<String>,
    ///Enrollment type of the device. Intune sets this property. Possible values are: unknown, userEnrollment, deviceEnrollmentManager, appleBulkWithUser, appleBulkWithoutUser, windowsAzureADJoin, windowsBulkUserless, windowsAutoEnrollment, windowsBulkAzureDomainJoin, windowsCoManagement, windowsAzureADJoinUsingDeviceAuth,appleUserEnrollment, appleUserEnrollmentWithServiceAccount. NOTE: This property might return other values apart from those listed.
    #[serde(rename = "enrollmentType")]
    pub enrollment_type: Option<String>,
    ///The collection of open extensions defined for the device. Read-only. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///true if the device complies with Mobile Device Management (MDM) policies; otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not).
    #[serde(rename = "isCompliant")]
    pub is_compliant: Option<bool>,
    ///true if the device is managed by a Mobile Device Management (MDM) app; otherwise, false. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not).
    #[serde(rename = "isManaged")]
    pub is_managed: Option<bool>,
    ///Indicates whether the device is a member of a restricted management administrative unit. If not set, the default value is null and the default behavior is false. Read-only.  To manage a device that's a member of a restricted management administrative unit, the administrator or calling app must be assigned a Microsoft Entra role at the scope of the restricted management administrative unit. Returned only on $select.
    #[serde(rename = "isManagementRestricted")]
    pub is_management_restricted: Option<bool>,
    ///true if the device is rooted or jail-broken. This property can only be updated by Intune.
    #[serde(rename = "isRooted")]
    pub is_rooted: Option<bool>,
    ///The management channel of the device. This property is set by Intune. Possible values are: eas, mdm, easMdm, intuneClient, easIntuneClient, configurationManagerClient, configurationManagerClientMdm, configurationManagerClientMdmEas, unknown, jamf, googleCloudDevicePolicyController.
    #[serde(rename = "managementType")]
    pub management_type: Option<String>,
    ///Manufacturer of the device. Read-only.
    pub manufacturer: Option<String>,
    ///Application identifier used to register device into MDM. Read-only. Supports $filter (eq, ne, not, startsWith).
    #[serde(rename = "mdmAppId")]
    pub mdm_app_id: Option<String>,
    ///Groups and administrative units that this device is a member of. Read-only. Nullable. Supports $expand.
    #[serde(rename = "memberOf")]
    pub member_of: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Model of the device. Read-only.
    pub model: Option<String>,
    ///The last time at which the object was synced with the on-premises directory. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Read-only. Supports $filter (eq, ne, not, ge, le, in).
    #[serde(rename = "onPremisesLastSyncDateTime")]
    pub on_premises_last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The on-premises security identifier (SID) for the user who was synchronized from on-premises to the cloud. Read-only. Returned only on $select. Supports $filter (eq).
    #[serde(rename = "onPremisesSecurityIdentifier")]
    pub on_premises_security_identifier: Option<String>,
    ///true if this object is synced from an on-premises directory; false if this object was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Read-only. Supports $filter (eq, ne, not, in, and eq on null values).
    #[serde(rename = "onPremisesSyncEnabled")]
    pub on_premises_sync_enabled: Option<bool>,
    ///The type of operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values).
    #[serde(rename = "operatingSystem")]
    pub operating_system: Option<String>,
    ///The version of the operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values).
    #[serde(rename = "operatingSystemVersion")]
    pub operating_system_version: Option<String>,
    ///For internal use only. Not nullable. Supports $filter (eq, not, ge, le, startsWith,/$count eq 0, /$count ne 0).
    #[serde(rename = "physicalIds")]
    pub physical_ids: Option<Vec<String>>,
    ///The profile type of the device. Possible values: RegisteredDevice (default), SecureVM, Printer, Shared, IoT.
    #[serde(rename = "profileType")]
    pub profile_type: Option<String>,
    ///The user that cloud joined the device or registered their personal device. The registered owner is set at the time of registration. Read-only. Nullable. Supports $expand.
    #[serde(rename = "registeredOwners")]
    pub registered_owners: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Collection of registered users of the device. For cloud joined devices and registered personal devices, registered users are set to the same value as registered owners at the time of registration. Read-only. Nullable. Supports $expand.
    #[serde(rename = "registeredUsers")]
    pub registered_users: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Date and time of when the device was registered. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "registrationDateTime")]
    pub registration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///List of labels applied to the device by the system. Supports $filter (/$count eq 0, /$count ne 0).
    #[serde(rename = "systemLabels")]
    pub system_labels: Option<Vec<String>>,
    ///Groups and administrative units that the device is a member of. This operation is transitive. Supports $expand.
    #[serde(rename = "transitiveMemberOf")]
    pub transitive_member_of: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Type of trust for the joined device. Read-only. Possible values:  Workplace (indicates bring your own personal devices), AzureAd (Cloud-only joined devices), ServerAd (on-premises domain joined devices joined to Microsoft Entra ID). For more information, see Introduction to device management in Microsoft Entra ID. Supports $filter (eq, ne, not, in).
    #[serde(rename = "trustType")]
    pub trust_type: Option<String>,
}
///Device action result
discriminated_enum! {
    pub enum MicrosoftGraphDeviceActionResult { discriminator : "@odata.type", variants :
    [("#microsoft.graph.deleteUserFromSharedAppleDeviceActionResult",
    MicrosoftGraphDeleteUserFromSharedAppleDeviceActionResult(Box <
    MicrosoftGraphDeleteUserFromSharedAppleDeviceActionResult >)),
    ("#microsoft.graph.locateDeviceActionResult",
    MicrosoftGraphLocateDeviceActionResult(Box < MicrosoftGraphLocateDeviceActionResult
    >)), ("#microsoft.graph.remoteLockActionResult",
    MicrosoftGraphRemoteLockActionResult(Box < MicrosoftGraphRemoteLockActionResult >)),
    ("#microsoft.graph.resetPasscodeActionResult",
    MicrosoftGraphResetPasscodeActionResult(Box < MicrosoftGraphResetPasscodeActionResult
    >)), ("#microsoft.graph.rotateBitLockerKeysDeviceActionResult",
    MicrosoftGraphRotateBitLockerKeysDeviceActionResult(Box <
    MicrosoftGraphRotateBitLockerKeysDeviceActionResult >)),
    ("#microsoft.graph.windowsDefenderScanActionResult",
    MicrosoftGraphWindowsDefenderScanActionResult(Box <
    MicrosoftGraphWindowsDefenderScanActionResult >))], fallback : DeviceActionResult(Box
    < MicrosoftGraphDeviceActionResultBase >), }
}
///Device action result
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceActionResultBase {
    ///Action name
    #[serde(rename = "actionName")]
    pub action_name: Option<String>,
    ///State of the action on the device
    #[serde(rename = "actionState")]
    pub action_state: Option<MicrosoftGraphActionState>,
    ///Time the action state was last updated
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Time the action was initiated
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
///Base type for assignment targets.
discriminated_enum! {
    pub enum MicrosoftGraphDeviceAndAppManagementAssignmentTarget { discriminator :
    "@odata.type", variants : [("#microsoft.graph.exclusionGroupAssignmentTarget",
    MicrosoftGraphExclusionGroupAssignmentTarget(Box <
    MicrosoftGraphExclusionGroupAssignmentTarget >)),
    ("#microsoft.graph.allDevicesAssignmentTarget",
    MicrosoftGraphAllDevicesAssignmentTarget(Box <
    MicrosoftGraphAllDevicesAssignmentTarget >)),
    ("#microsoft.graph.allLicensedUsersAssignmentTarget",
    MicrosoftGraphAllLicensedUsersAssignmentTarget(Box <
    MicrosoftGraphAllLicensedUsersAssignmentTarget >)),
    ("#microsoft.graph.configurationManagerCollectionAssignmentTarget",
    MicrosoftGraphConfigurationManagerCollectionAssignmentTarget(Box <
    MicrosoftGraphConfigurationManagerCollectionAssignmentTarget >)),
    ("#microsoft.graph.groupAssignmentTarget", MicrosoftGraphGroupAssignmentTarget(Box <
    MicrosoftGraphGroupAssignmentTarget >))], fallback :
    DeviceAndAppManagementAssignmentTarget(Box <
    MicrosoftGraphDeviceAndAppManagementAssignmentTargetBase >), }
}
///Base type for assignment targets.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceAndAppManagementAssignmentTargetBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceAndAppManagementRoleAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceAndAppManagementRoleAssignment".to_string())]
    pub odata_type: String,
    ///Description of the Role Assignment.
    pub description: Option<String>,
    ///The display or friendly name of the role Assignment.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The list of ids of role member security groups. These are IDs from Azure Active Directory.
    pub members: Option<Vec<Option<String>>>,
    ///List of ids of role scope member security groups.  These are IDs from Azure Active Directory.
    #[serde(rename = "resourceScopes")]
    pub resource_scopes: Option<Vec<Option<String>>>,
    ///Role definition this assignment is part of.
    #[serde(rename = "roleDefinition")]
    pub role_definition: Option<Box<MicrosoftGraphRoleDefinition>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceAndAppManagementRoleDefinition {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceAndAppManagementRoleDefinition".to_string())]
    pub odata_type: String,
    ///Description of the Role definition.
    pub description: Option<String>,
    ///Display Name of the Role definition.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Type of Role. Set to True if it is built-in, or set to False if it is a custom role definition.
    #[serde(rename = "isBuiltIn")]
    pub is_built_in: Option<bool>,
    ///List of Role assignments for this role definition.
    #[serde(rename = "roleAssignments")]
    pub role_assignments: Option<Vec<MicrosoftGraphRoleAssignment>>,
    ///List of Role Permissions this role is allowed to perform. These must match the actionName that is defined as part of the rolePermission.
    #[serde(rename = "rolePermissions")]
    pub role_permissions: Option<Vec<MicrosoftGraphRolePermission>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceAppManagement {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceAppManagement".to_string())]
    pub odata_type: String,
    ///Android managed app policies.
    #[serde(rename = "androidManagedAppProtections")]
    pub android_managed_app_protections: Option<
        Vec<MicrosoftGraphAndroidManagedAppProtection>,
    >,
    ///Default managed app policies.
    #[serde(rename = "defaultManagedAppProtections")]
    pub default_managed_app_protections: Option<
        Vec<MicrosoftGraphDefaultManagedAppProtection>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///iOS managed app policies.
    #[serde(rename = "iosManagedAppProtections")]
    pub ios_managed_app_protections: Option<Vec<MicrosoftGraphIosManagedAppProtection>>,
    ///Whether the account is enabled for syncing applications from the Microsoft Store for Business.
    #[serde(rename = "isEnabledForMicrosoftStoreForBusiness")]
    pub is_enabled_for_microsoft_store_for_business: Option<bool>,
    ///Managed app policies.
    #[serde(rename = "managedAppPolicies")]
    pub managed_app_policies: Option<Vec<MicrosoftGraphManagedAppPolicy>>,
    ///The managed app registrations.
    #[serde(rename = "managedAppRegistrations")]
    pub managed_app_registrations: Option<Vec<MicrosoftGraphManagedAppRegistration>>,
    ///The managed app statuses.
    #[serde(rename = "managedAppStatuses")]
    pub managed_app_statuses: Option<Vec<MicrosoftGraphManagedAppStatus>>,
    ///The Managed eBook.
    #[serde(rename = "managedEBooks")]
    pub managed_ebooks: Option<Vec<MicrosoftGraphManagedEbook>>,
    ///Windows information protection for apps running on devices which are MDM enrolled.
    #[serde(rename = "mdmWindowsInformationProtectionPolicies")]
    pub mdm_windows_information_protection_policies: Option<
        Vec<MicrosoftGraphMdmWindowsInformationProtectionPolicy>,
    >,
    ///The locale information used to sync applications from the Microsoft Store for Business. Cultures that are specific to a country/region. The names of these cultures follow RFC 4646 (Windows Vista and later). The format is -<country/regioncode2>, where  is a lowercase two-letter code derived from ISO 639-1 and <country/regioncode2> is an uppercase two-letter code derived from ISO 3166. For example, en-US for English (United States) is a specific culture.
    #[serde(rename = "microsoftStoreForBusinessLanguage")]
    pub microsoft_store_for_business_language: Option<String>,
    ///The last time an application sync from the Microsoft Store for Business was completed.
    #[serde(rename = "microsoftStoreForBusinessLastCompletedApplicationSyncTime")]
    pub microsoft_store_for_business_last_completed_application_sync_time: Option<
        chrono::DateTime<chrono::Utc>,
    >,
    ///The last time the apps from the Microsoft Store for Business were synced successfully for the account.
    #[serde(rename = "microsoftStoreForBusinessLastSuccessfulSyncDateTime")]
    pub microsoft_store_for_business_last_successful_sync_date_time: Option<
        chrono::DateTime<chrono::Utc>,
    >,
    ///The mobile app categories.
    #[serde(rename = "mobileAppCategories")]
    pub mobile_app_categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The Managed Device Mobile Application Configurations.
    #[serde(rename = "mobileAppConfigurations")]
    pub mobile_app_configurations: Option<
        Vec<MicrosoftGraphManagedDeviceMobileAppConfiguration>,
    >,
    ///The mobile app relationship represents the dependency or supersedence relationship between two Intune mobile LOB applications.
    #[serde(rename = "mobileAppRelationships")]
    pub mobile_app_relationships: Option<Vec<MicrosoftGraphMobileAppRelationship>>,
    ///The mobile apps.
    #[serde(rename = "mobileApps")]
    pub mobile_apps: Option<Vec<MicrosoftGraphMobileApp>>,
    ///Targeted managed app configurations.
    #[serde(rename = "targetedManagedAppConfigurations")]
    pub targeted_managed_app_configurations: Option<
        Vec<MicrosoftGraphTargetedManagedAppConfiguration>,
    >,
    ///List of Vpp tokens for this organization.
    #[serde(rename = "vppTokens")]
    pub vpp_tokens: Option<Vec<MicrosoftGraphVppToken>>,
    ///Windows information protection for apps running on devices which are not MDM enrolled.
    #[serde(rename = "windowsInformationProtectionPolicies")]
    pub windows_information_protection_policies: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionPolicy>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceCategory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceCategory".to_string())]
    pub odata_type: String,
    ///Optional description for the device category.
    pub description: Option<String>,
    ///Display name for the device category.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceComplianceActionItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceComplianceActionItem".to_string())]
    pub odata_type: String,
    ///Scheduled Action Type Enum
    #[serde(rename = "actionType")]
    pub action_type: Option<MicrosoftGraphDeviceComplianceActionType>,
    ///Number of hours to wait till the action will be enforced. Valid values 0 to 8760
    #[serde(rename = "gracePeriodHours")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub grace_period_hours: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A list of group IDs to speicify who to CC this notification message to.
    #[serde(rename = "notificationMessageCCList")]
    pub notification_message_cclist: Option<Vec<Option<String>>>,
    ///What notification Message template to use
    #[serde(rename = "notificationTemplateId")]
    pub notification_template_id: Option<String>,
}
///Scheduled Action Type Enum
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceComplianceActionType {
    #[serde(rename = "noAction")]
    #[default]
    NoAction,
    #[serde(rename = "notification")]
    Notification,
    #[serde(rename = "block")]
    Block,
    #[serde(rename = "retire")]
    Retire,
    #[serde(rename = "wipe")]
    Wipe,
    #[serde(rename = "removeResourceAccessProfiles")]
    RemoveResourceAccessProfiles,
    #[serde(rename = "pushNotification")]
    PushNotification,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceComplianceDeviceOverview {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceComplianceDeviceOverview".to_string())]
    pub odata_type: String,
    ///Version of the policy for that overview
    #[serde(rename = "configurationVersion")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub configuration_version: Option<f64>,
    ///Number of error devices
    #[serde(rename = "errorCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_count: Option<f64>,
    ///Number of failed devices
    #[serde(rename = "failedCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last update time
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Number of not applicable devices
    #[serde(rename = "notApplicableCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_count: Option<f64>,
    ///Number of pending devices
    #[serde(rename = "pendingCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_count: Option<f64>,
    ///Number of succeeded devices
    #[serde(rename = "successCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub success_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceComplianceDeviceStatus {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceComplianceDeviceStatus".to_string())]
    pub odata_type: String,
    ///The DateTime when device compliance grace period expires
    #[serde(rename = "complianceGracePeriodExpirationDateTime")]
    pub compliance_grace_period_expiration_date_time: Option<
        chrono::DateTime<chrono::Utc>,
    >,
    ///Device name of the DevicePolicyStatus.
    #[serde(rename = "deviceDisplayName")]
    pub device_display_name: Option<String>,
    ///The device model that is being reported
    #[serde(rename = "deviceModel")]
    pub device_model: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date time of the policy report.
    #[serde(rename = "lastReportedDateTime")]
    pub last_reported_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub status: Option<MicrosoftGraphComplianceStatus>,
    ///The User Name that is being reported
    #[serde(rename = "userName")]
    pub user_name: Option<String>,
    ///UserPrincipalName.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceCompliancePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceCompliancePolicy".to_string())]
    pub odata_type: String,
    ///The collection of assignments for this compliance policy.
    pub assignments: Option<Vec<MicrosoftGraphDeviceCompliancePolicyAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Compliance Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device compliance devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceComplianceDeviceOverview>,
    ///List of DeviceComplianceDeviceStatus.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceComplianceDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.
    #[serde(rename = "scheduledActionsForRule")]
    pub scheduled_actions_for_rule: Option<
        Vec<MicrosoftGraphDeviceComplianceScheduledActionForRule>,
    >,
    ///Device compliance users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceComplianceUserOverview>,
    ///List of DeviceComplianceUserStatus.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceComplianceUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceCompliancePolicyAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceCompliancePolicyAssignment".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Target for the compliance policy assignment.
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceCompliancePolicyDeviceStateSummary".to_string())]
    pub odata_type: String,
    ///Number of compliant devices
    #[serde(rename = "compliantDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub compliant_device_count: Option<f64>,
    ///Number of devices that have compliance managed by System Center Configuration Manager
    #[serde(rename = "configManagerCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub config_manager_count: Option<f64>,
    ///Number of conflict devices
    #[serde(rename = "conflictDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub conflict_device_count: Option<f64>,
    ///Number of error devices
    #[serde(rename = "errorDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_device_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Number of devices that are in grace period
    #[serde(rename = "inGracePeriodCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub in_grace_period_count: Option<f64>,
    ///Number of NonCompliant devices
    #[serde(rename = "nonCompliantDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub non_compliant_device_count: Option<f64>,
    ///Number of not applicable devices
    #[serde(rename = "notApplicableDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_device_count: Option<f64>,
    ///Number of remediated devices
    #[serde(rename = "remediatedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub remediated_device_count: Option<f64>,
    ///Number of unknown devices
    #[serde(rename = "unknownDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub unknown_device_count: Option<f64>,
}
///Device Compilance Policy Setting State for a given device.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceCompliancePolicySettingState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Current value of setting on device
    #[serde(rename = "currentValue")]
    pub current_value: Option<String>,
    ///Error code for the setting
    #[serde(rename = "errorCode")]
    pub error_code: Option<f64>,
    ///Error description
    #[serde(rename = "errorDescription")]
    pub error_description: Option<String>,
    ///Name of setting instance that is being reported.
    #[serde(rename = "instanceDisplayName")]
    pub instance_display_name: Option<String>,
    ///The setting that is being reported
    pub setting: Option<String>,
    ///Localized/user friendly setting name that is being reported
    #[serde(rename = "settingName")]
    pub setting_name: Option<String>,
    ///Contributing policies
    pub sources: Option<Vec<MicrosoftGraphSettingSource>>,
    pub state: Option<MicrosoftGraphComplianceStatus>,
    ///UserEmail
    #[serde(rename = "userEmail")]
    pub user_email: Option<String>,
    ///UserId
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///UserName
    #[serde(rename = "userName")]
    pub user_name: Option<String>,
    ///UserPrincipalName.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceCompliancePolicySettingStateSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceCompliancePolicySettingStateSummary".to_string())]
    pub odata_type: String,
    ///Number of compliant devices
    #[serde(rename = "compliantDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub compliant_device_count: Option<f64>,
    ///Number of conflict devices
    #[serde(rename = "conflictDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub conflict_device_count: Option<f64>,
    ///Not yet documented
    #[serde(rename = "deviceComplianceSettingStates")]
    pub device_compliance_setting_states: Option<
        Vec<MicrosoftGraphDeviceComplianceSettingState>,
    >,
    ///Number of error devices
    #[serde(rename = "errorDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_device_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Number of NonCompliant devices
    #[serde(rename = "nonCompliantDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub non_compliant_device_count: Option<f64>,
    ///Number of not applicable devices
    #[serde(rename = "notApplicableDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_device_count: Option<f64>,
    ///Supported platform types for policies.
    #[serde(rename = "platformType")]
    pub platform_type: Option<MicrosoftGraphPolicyPlatformType>,
    ///Number of remediated devices
    #[serde(rename = "remediatedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub remediated_device_count: Option<f64>,
    ///The setting class name and property name.
    pub setting: Option<String>,
    ///Name of the setting.
    #[serde(rename = "settingName")]
    pub setting_name: Option<String>,
    ///Number of unknown devices
    #[serde(rename = "unknownDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub unknown_device_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceCompliancePolicyState {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceCompliancePolicyState".to_string())]
    pub odata_type: String,
    ///The name of the policy for this policyBase
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Supported platform types for policies.
    #[serde(rename = "platformType")]
    pub platform_type: Option<MicrosoftGraphPolicyPlatformType>,
    ///Count of how many setting a policy holds
    #[serde(rename = "settingCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub setting_count: Option<f64>,
    #[serde(rename = "settingStates")]
    pub setting_states: Option<Vec<MicrosoftGraphDeviceCompliancePolicySettingState>>,
    pub state: Option<MicrosoftGraphComplianceStatus>,
    ///The version of the policy
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceComplianceScheduledActionForRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceComplianceScheduledActionForRule".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Name of the rule which this scheduled action applies to. Currently scheduled actions are created per policy instead of per rule, thus RuleName is always set to default value PasswordRequired.
    #[serde(rename = "ruleName")]
    pub rule_name: Option<String>,
    ///The list of scheduled action configurations for this compliance policy. Compliance policy must have one and only one block scheduled action.
    #[serde(rename = "scheduledActionConfigurations")]
    pub scheduled_action_configurations: Option<
        Vec<MicrosoftGraphDeviceComplianceActionItem>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceComplianceSettingState {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceComplianceSettingState".to_string())]
    pub odata_type: String,
    ///The DateTime when device compliance grace period expires
    #[serde(rename = "complianceGracePeriodExpirationDateTime")]
    pub compliance_grace_period_expiration_date_time: Option<
        chrono::DateTime<chrono::Utc>,
    >,
    ///The Device Id that is being reported
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///The device model that is being reported
    #[serde(rename = "deviceModel")]
    pub device_model: Option<String>,
    ///The Device Name that is being reported
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The setting class name and property name.
    pub setting: Option<String>,
    ///The Setting Name that is being reported
    #[serde(rename = "settingName")]
    pub setting_name: Option<String>,
    pub state: Option<MicrosoftGraphComplianceStatus>,
    ///The User email address that is being reported
    #[serde(rename = "userEmail")]
    pub user_email: Option<String>,
    ///The user Id that is being reported
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///The User Name that is being reported
    #[serde(rename = "userName")]
    pub user_name: Option<String>,
    ///The User PrincipalName that is being reported
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceComplianceUserOverview {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceComplianceUserOverview".to_string())]
    pub odata_type: String,
    ///Version of the policy for that overview
    #[serde(rename = "configurationVersion")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub configuration_version: Option<f64>,
    ///Number of error Users
    #[serde(rename = "errorCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_count: Option<f64>,
    ///Number of failed Users
    #[serde(rename = "failedCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last update time
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Number of not applicable users
    #[serde(rename = "notApplicableCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_count: Option<f64>,
    ///Number of pending Users
    #[serde(rename = "pendingCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_count: Option<f64>,
    ///Number of succeeded Users
    #[serde(rename = "successCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub success_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceComplianceUserStatus {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceComplianceUserStatus".to_string())]
    pub odata_type: String,
    ///Devices count for that user.
    #[serde(rename = "devicesCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub devices_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date time of the policy report.
    #[serde(rename = "lastReportedDateTime")]
    pub last_reported_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub status: Option<MicrosoftGraphComplianceStatus>,
    ///User name of the DevicePolicyStatus.
    #[serde(rename = "userDisplayName")]
    pub user_display_name: Option<String>,
    ///UserPrincipalName.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceConfiguration".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceConfigurationAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceConfigurationAssignment".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The assignment target for the device configuration.
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceConfigurationDeviceOverview {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceConfigurationDeviceOverview".to_string())]
    pub odata_type: String,
    ///Version of the policy for that overview
    #[serde(rename = "configurationVersion")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub configuration_version: Option<f64>,
    ///Number of error devices
    #[serde(rename = "errorCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_count: Option<f64>,
    ///Number of failed devices
    #[serde(rename = "failedCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last update time
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Number of not applicable devices
    #[serde(rename = "notApplicableCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_count: Option<f64>,
    ///Number of pending devices
    #[serde(rename = "pendingCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_count: Option<f64>,
    ///Number of succeeded devices
    #[serde(rename = "successCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub success_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceConfigurationDeviceStateSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceConfigurationDeviceStateSummary".to_string())]
    pub odata_type: String,
    ///Number of compliant devices
    #[serde(rename = "compliantDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub compliant_device_count: Option<f64>,
    ///Number of conflict devices
    #[serde(rename = "conflictDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub conflict_device_count: Option<f64>,
    ///Number of error devices
    #[serde(rename = "errorDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_device_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Number of NonCompliant devices
    #[serde(rename = "nonCompliantDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub non_compliant_device_count: Option<f64>,
    ///Number of not applicable devices
    #[serde(rename = "notApplicableDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_device_count: Option<f64>,
    ///Number of remediated devices
    #[serde(rename = "remediatedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub remediated_device_count: Option<f64>,
    ///Number of unknown devices
    #[serde(rename = "unknownDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub unknown_device_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceConfigurationDeviceStatus {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceConfigurationDeviceStatus".to_string())]
    pub odata_type: String,
    ///The DateTime when device compliance grace period expires
    #[serde(rename = "complianceGracePeriodExpirationDateTime")]
    pub compliance_grace_period_expiration_date_time: Option<
        chrono::DateTime<chrono::Utc>,
    >,
    ///Device name of the DevicePolicyStatus.
    #[serde(rename = "deviceDisplayName")]
    pub device_display_name: Option<String>,
    ///The device model that is being reported
    #[serde(rename = "deviceModel")]
    pub device_model: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date time of the policy report.
    #[serde(rename = "lastReportedDateTime")]
    pub last_reported_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub status: Option<MicrosoftGraphComplianceStatus>,
    ///The User Name that is being reported
    #[serde(rename = "userName")]
    pub user_name: Option<String>,
    ///UserPrincipalName.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
///Device Configuration Setting State for a given device.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceConfigurationSettingState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Current value of setting on device
    #[serde(rename = "currentValue")]
    pub current_value: Option<String>,
    ///Error code for the setting
    #[serde(rename = "errorCode")]
    pub error_code: Option<f64>,
    ///Error description
    #[serde(rename = "errorDescription")]
    pub error_description: Option<String>,
    ///Name of setting instance that is being reported.
    #[serde(rename = "instanceDisplayName")]
    pub instance_display_name: Option<String>,
    ///The setting that is being reported
    pub setting: Option<String>,
    ///Localized/user friendly setting name that is being reported
    #[serde(rename = "settingName")]
    pub setting_name: Option<String>,
    ///Contributing policies
    pub sources: Option<Vec<MicrosoftGraphSettingSource>>,
    pub state: Option<MicrosoftGraphComplianceStatus>,
    ///UserEmail
    #[serde(rename = "userEmail")]
    pub user_email: Option<String>,
    ///UserId
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///UserName
    #[serde(rename = "userName")]
    pub user_name: Option<String>,
    ///UserPrincipalName.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceConfigurationState {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceConfigurationState".to_string())]
    pub odata_type: String,
    ///The name of the policy for this policyBase
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Supported platform types for policies.
    #[serde(rename = "platformType")]
    pub platform_type: Option<MicrosoftGraphPolicyPlatformType>,
    ///Count of how many setting a policy holds
    #[serde(rename = "settingCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub setting_count: Option<f64>,
    #[serde(rename = "settingStates")]
    pub setting_states: Option<Vec<MicrosoftGraphDeviceConfigurationSettingState>>,
    pub state: Option<MicrosoftGraphComplianceStatus>,
    ///The version of the policy
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceConfigurationUserOverview {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceConfigurationUserOverview".to_string())]
    pub odata_type: String,
    ///Version of the policy for that overview
    #[serde(rename = "configurationVersion")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub configuration_version: Option<f64>,
    ///Number of error Users
    #[serde(rename = "errorCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_count: Option<f64>,
    ///Number of failed Users
    #[serde(rename = "failedCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last update time
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Number of not applicable users
    #[serde(rename = "notApplicableCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_count: Option<f64>,
    ///Number of pending Users
    #[serde(rename = "pendingCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_count: Option<f64>,
    ///Number of succeeded Users
    #[serde(rename = "successCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub success_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceConfigurationUserStatus {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceConfigurationUserStatus".to_string())]
    pub odata_type: String,
    ///Devices count for that user.
    #[serde(rename = "devicesCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub devices_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date time of the policy report.
    #[serde(rename = "lastReportedDateTime")]
    pub last_reported_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub status: Option<MicrosoftGraphComplianceStatus>,
    ///User name of the DevicePolicyStatus.
    #[serde(rename = "userDisplayName")]
    pub user_display_name: Option<String>,
    ///UserPrincipalName.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceDetail {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates the browser information of the used in the sign-in. Populated for devices registered in Microsoft Entra.
    pub browser: Option<String>,
    ///Refers to the unique ID of the device used in the sign-in. Populated for devices registered in Microsoft Entra.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///Refers to the name of the device used in the sign-in. Populated for devices registered in Microsoft Entra.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Indicates whether the device is compliant or not.
    #[serde(rename = "isCompliant")]
    pub is_compliant: Option<bool>,
    ///Indicates if the device is managed or not.
    #[serde(rename = "isManaged")]
    pub is_managed: Option<bool>,
    ///Indicates the OS name and version used in the sign-in.
    #[serde(rename = "operatingSystem")]
    pub operating_system: Option<String>,
    ///Indicates information on whether the device used in the sign-in is workplace-joined, Microsoft Entra-joined, domain-joined.
    #[serde(rename = "trustType")]
    pub trust_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceEnrollmentConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceEnrollmentConfiguration".to_string())]
    pub odata_type: String,
    ///The list of group assignments for the device configuration profile
    pub assignments: Option<Vec<MicrosoftGraphEnrollmentConfigurationAssignment>>,
    ///Created date time in UTC of the device enrollment configuration
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the device enrollment configuration
    pub description: Option<String>,
    ///The display name of the device enrollment configuration
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date time in UTC of the device enrollment configuration
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Priority is used when a user exists in multiple groups that are assigned enrollment configuration. Users are subject only to the configuration with the lowest priority value.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub priority: Option<f64>,
    ///The version of the device enrollment configuration
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Top level failure categories for enrollment.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceEnrollmentFailureReason {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "authentication")]
    Authentication,
    #[serde(rename = "authorization")]
    Authorization,
    #[serde(rename = "accountValidation")]
    AccountValidation,
    #[serde(rename = "userValidation")]
    UserValidation,
    #[serde(rename = "deviceNotSupported")]
    DeviceNotSupported,
    #[serde(rename = "inMaintenance")]
    InMaintenance,
    #[serde(rename = "badRequest")]
    BadRequest,
    #[serde(rename = "featureNotSupported")]
    FeatureNotSupported,
    #[serde(rename = "enrollmentRestrictionsEnforced")]
    EnrollmentRestrictionsEnforced,
    #[serde(rename = "clientDisconnected")]
    ClientDisconnected,
    #[serde(rename = "userAbandonment")]
    UserAbandonment,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceEnrollmentLimitConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceEnrollmentLimitConfiguration".to_string())]
    pub odata_type: String,
    ///The list of group assignments for the device configuration profile
    pub assignments: Option<Vec<MicrosoftGraphEnrollmentConfigurationAssignment>>,
    ///Created date time in UTC of the device enrollment configuration
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the device enrollment configuration
    pub description: Option<String>,
    ///The display name of the device enrollment configuration
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date time in UTC of the device enrollment configuration
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The maximum number of devices that a user can enroll
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub limit: Option<f64>,
    ///Priority is used when a user exists in multiple groups that are assigned enrollment configuration. Users are subject only to the configuration with the lowest priority value.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub priority: Option<f64>,
    ///The version of the device enrollment configuration
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Platform specific enrollment restrictions
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceEnrollmentPlatformRestriction {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Max OS version supported
    #[serde(rename = "osMaximumVersion")]
    pub os_maximum_version: Option<String>,
    ///Min OS version supported
    #[serde(rename = "osMinimumVersion")]
    pub os_minimum_version: Option<String>,
    ///Block personally owned devices from enrolling
    #[serde(rename = "personalDeviceEnrollmentBlocked")]
    pub personal_device_enrollment_blocked: Option<bool>,
    ///Block the platform from enrolling
    #[serde(rename = "platformBlocked")]
    pub platform_blocked: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceEnrollmentPlatformRestrictionsConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.deviceEnrollmentPlatformRestrictionsConfiguration".to_string()
    )]
    pub odata_type: String,
    ///Android restrictions based on platform, platform operating system version, and device ownership
    #[serde(rename = "androidRestriction")]
    pub android_restriction: Option<MicrosoftGraphDeviceEnrollmentPlatformRestriction>,
    ///The list of group assignments for the device configuration profile
    pub assignments: Option<Vec<MicrosoftGraphEnrollmentConfigurationAssignment>>,
    ///Created date time in UTC of the device enrollment configuration
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the device enrollment configuration
    pub description: Option<String>,
    ///The display name of the device enrollment configuration
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Ios restrictions based on platform, platform operating system version, and device ownership
    #[serde(rename = "iosRestriction")]
    pub ios_restriction: Option<MicrosoftGraphDeviceEnrollmentPlatformRestriction>,
    ///Last modified date time in UTC of the device enrollment configuration
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Mac restrictions based on platform, platform operating system version, and device ownership
    #[serde(rename = "macOSRestriction")]
    pub mac_osrestriction: Option<MicrosoftGraphDeviceEnrollmentPlatformRestriction>,
    ///Priority is used when a user exists in multiple groups that are assigned enrollment configuration. Users are subject only to the configuration with the lowest priority value.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub priority: Option<f64>,
    ///The version of the device enrollment configuration
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
    ///Windows mobile restrictions based on platform, platform operating system version, and device ownership
    #[serde(rename = "windowsMobileRestriction")]
    pub windows_mobile_restriction: Option<
        MicrosoftGraphDeviceEnrollmentPlatformRestriction,
    >,
    ///Windows restrictions based on platform, platform operating system version, and device ownership
    #[serde(rename = "windowsRestriction")]
    pub windows_restriction: Option<MicrosoftGraphDeviceEnrollmentPlatformRestriction>,
}
///Possible ways of adding a mobile device to management.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceEnrollmentType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "userEnrollment")]
    UserEnrollment,
    #[serde(rename = "deviceEnrollmentManager")]
    DeviceEnrollmentManager,
    #[serde(rename = "appleBulkWithUser")]
    AppleBulkWithUser,
    #[serde(rename = "appleBulkWithoutUser")]
    AppleBulkWithoutUser,
    #[serde(rename = "windowsAzureADJoin")]
    WindowsAzureAdjoin,
    #[serde(rename = "windowsBulkUserless")]
    WindowsBulkUserless,
    #[serde(rename = "windowsAutoEnrollment")]
    WindowsAutoEnrollment,
    #[serde(rename = "windowsBulkAzureDomainJoin")]
    WindowsBulkAzureDomainJoin,
    #[serde(rename = "windowsCoManagement")]
    WindowsCoManagement,
    #[serde(rename = "windowsAzureADJoinUsingDeviceAuth")]
    WindowsAzureAdjoinUsingDeviceAuth,
    #[serde(rename = "appleUserEnrollment")]
    AppleUserEnrollment,
    #[serde(rename = "appleUserEnrollmentWithServiceAccount")]
    AppleUserEnrollmentWithServiceAccount,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceEnrollmentWindowsHelloForBusinessConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.deviceEnrollmentWindowsHelloForBusinessConfiguration".to_string(

        )
    )]
    pub odata_type: String,
    ///The list of group assignments for the device configuration profile
    pub assignments: Option<Vec<MicrosoftGraphEnrollmentConfigurationAssignment>>,
    ///Created date time in UTC of the device enrollment configuration
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the device enrollment configuration
    pub description: Option<String>,
    ///The display name of the device enrollment configuration
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Possible values of a property
    #[serde(rename = "enhancedBiometricsState")]
    pub enhanced_biometrics_state: Option<MicrosoftGraphEnablement>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date time in UTC of the device enrollment configuration
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Controls the period of time (in days) that a PIN can be used before the system requires the user to change it. This must be set between 0 and 730, inclusive. If set to 0, the user's PIN will never expire
    #[serde(rename = "pinExpirationInDays")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pin_expiration_in_days: Option<f64>,
    ///Windows Hello for Business pin usage options
    #[serde(rename = "pinLowercaseCharactersUsage")]
    pub pin_lowercase_characters_usage: Option<
        MicrosoftGraphWindowsHelloForBusinessPinUsage,
    >,
    ///Controls the maximum number of characters allowed for the Windows Hello for Business PIN. This value must be between 4 and 127, inclusive. This value must be greater than or equal to the value set for the minimum PIN.
    #[serde(rename = "pinMaximumLength")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pin_maximum_length: Option<f64>,
    ///Controls the minimum number of characters required for the Windows Hello for Business PIN.  This value must be between 4 and 127, inclusive, and less than or equal to the value set for the maximum PIN.
    #[serde(rename = "pinMinimumLength")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pin_minimum_length: Option<f64>,
    ///Controls the ability to prevent users from using past PINs. This must be set between 0 and 50, inclusive, and the current PIN of the user is included in that count. If set to 0, previous PINs are not stored. PIN history is not preserved through a PIN reset.
    #[serde(rename = "pinPreviousBlockCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pin_previous_block_count: Option<f64>,
    ///Windows Hello for Business pin usage options
    #[serde(rename = "pinSpecialCharactersUsage")]
    pub pin_special_characters_usage: Option<
        MicrosoftGraphWindowsHelloForBusinessPinUsage,
    >,
    ///Windows Hello for Business pin usage options
    #[serde(rename = "pinUppercaseCharactersUsage")]
    pub pin_uppercase_characters_usage: Option<
        MicrosoftGraphWindowsHelloForBusinessPinUsage,
    >,
    ///Priority is used when a user exists in multiple groups that are assigned enrollment configuration. Users are subject only to the configuration with the lowest priority value.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub priority: Option<f64>,
    ///Controls the use of Remote Windows Hello for Business. Remote Windows Hello for Business provides the ability for a portable, registered device to be usable as a companion for desktop authentication. The desktop must be Azure AD joined and the companion device must have a Windows Hello for Business PIN.
    #[serde(rename = "remotePassportEnabled")]
    pub remote_passport_enabled: Option<bool>,
    ///Controls whether to require a Trusted Platform Module (TPM) for provisioning Windows Hello for Business. A TPM provides an additional security benefit in that data stored on it cannot be used on other devices. If set to False, all devices can provision Windows Hello for Business even if there is not a usable TPM.
    #[serde(rename = "securityDeviceRequired")]
    pub security_device_required: Option<bool>,
    ///Possible values of a property
    pub state: Option<MicrosoftGraphEnablement>,
    ///Controls the use of biometric gestures, such as face and fingerprint, as an alternative to the Windows Hello for Business PIN.  If set to False, biometric gestures are not allowed. Users must still configure a PIN as a backup in case of failures.
    #[serde(rename = "unlockWithBiometricsEnabled")]
    pub unlock_with_biometrics_enabled: Option<bool>,
    ///The version of the device enrollment configuration
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Device Exchange Access State summary
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceExchangeAccessStateSummary {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Total count of devices with Exchange Access State: Allowed.
    #[serde(rename = "allowedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub allowed_device_count: Option<f64>,
    ///Total count of devices with Exchange Access State: Blocked.
    #[serde(rename = "blockedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub blocked_device_count: Option<f64>,
    ///Total count of devices with Exchange Access State: Quarantined.
    #[serde(rename = "quarantinedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub quarantined_device_count: Option<f64>,
    ///Total count of devices for which no Exchange Access State could be found.
    #[serde(rename = "unavailableDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub unavailable_device_count: Option<f64>,
    ///Total count of devices with Exchange Access State: Unknown.
    #[serde(rename = "unknownDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub unknown_device_count: Option<f64>,
}
///Device location
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceGeoLocation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Altitude, given in meters above sea level
    pub altitude: Option<MicrosoftGraphDeviceGeoLocationAltitude>,
    ///Heading in degrees from true north
    pub heading: Option<MicrosoftGraphDeviceGeoLocationHeading>,
    ///Accuracy of longitude and latitude in meters
    #[serde(rename = "horizontalAccuracy")]
    pub horizontal_accuracy: Option<MicrosoftGraphDeviceGeoLocationHorizontalAccuracy>,
    ///Time at which location was recorded, relative to UTC
    #[serde(rename = "lastCollectedDateTime")]
    pub last_collected_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Latitude coordinate of the device's location
    pub latitude: Option<MicrosoftGraphDeviceGeoLocationLatitude>,
    ///Longitude coordinate of the device's location
    pub longitude: Option<MicrosoftGraphDeviceGeoLocationLongitude>,
    ///Speed the device is traveling in meters per second
    pub speed: Option<MicrosoftGraphDeviceGeoLocationSpeed>,
    ///Accuracy of altitude in meters
    #[serde(rename = "verticalAccuracy")]
    pub vertical_accuracy: Option<MicrosoftGraphDeviceGeoLocationVerticalAccuracy>,
}
///Altitude, given in meters above sea level
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceGeoLocationAltitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Heading in degrees from true north
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceGeoLocationHeading {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Accuracy of longitude and latitude in meters
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceGeoLocationHorizontalAccuracy {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Latitude coordinate of the device's location
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceGeoLocationLatitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Longitude coordinate of the device's location
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceGeoLocationLongitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Speed the device is traveling in meters per second
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceGeoLocationSpeed {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Accuracy of altitude in meters
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceGeoLocationVerticalAccuracy {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceHealthAttestationState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///TWhen an Attestation Identity Key (AIK) is present on a device, it indicates that the device has an endorsement key (EK) certificate.
    #[serde(rename = "attestationIdentityKey")]
    pub attestation_identity_key: Option<String>,
    ///On or Off of BitLocker Drive Encryption
    #[serde(rename = "bitLockerStatus")]
    pub bit_locker_status: Option<String>,
    ///The security version number of the Boot Application
    #[serde(rename = "bootAppSecurityVersion")]
    pub boot_app_security_version: Option<String>,
    ///When bootDebugging is enabled, the device is used in development and testing
    #[serde(rename = "bootDebugging")]
    pub boot_debugging: Option<String>,
    ///The security version number of the Boot Application
    #[serde(rename = "bootManagerSecurityVersion")]
    pub boot_manager_security_version: Option<String>,
    ///The version of the Boot Manager
    #[serde(rename = "bootManagerVersion")]
    pub boot_manager_version: Option<String>,
    ///The Boot Revision List that was loaded during initial boot on the attested device
    #[serde(rename = "bootRevisionListInfo")]
    pub boot_revision_list_info: Option<String>,
    ///When code integrity is enabled, code execution is restricted to integrity verified code
    #[serde(rename = "codeIntegrity")]
    pub code_integrity: Option<String>,
    ///The version of the Boot Manager
    #[serde(rename = "codeIntegrityCheckVersion")]
    pub code_integrity_check_version: Option<String>,
    ///The Code Integrity policy that is controlling the security of the boot environment
    #[serde(rename = "codeIntegrityPolicy")]
    pub code_integrity_policy: Option<String>,
    ///The DHA report version. (Namespace version)
    #[serde(rename = "contentNamespaceUrl")]
    pub content_namespace_url: Option<String>,
    ///The HealthAttestation state schema version
    #[serde(rename = "contentVersion")]
    pub content_version: Option<String>,
    ///DEP Policy defines a set of hardware and software technologies that perform additional checks on memory
    #[serde(rename = "dataExcutionPolicy")]
    pub data_excution_policy: Option<String>,
    ///The DHA report version. (Namespace version)
    #[serde(rename = "deviceHealthAttestationStatus")]
    pub device_health_attestation_status: Option<String>,
    ///ELAM provides protection for the computers in your network when they start up
    #[serde(rename = "earlyLaunchAntiMalwareDriverProtection")]
    pub early_launch_anti_malware_driver_protection: Option<String>,
    ///This attribute indicates if DHA is supported for the device
    #[serde(rename = "healthAttestationSupportedStatus")]
    pub health_attestation_supported_status: Option<String>,
    ///This attribute appears if DHA-Service detects an integrity issue
    #[serde(rename = "healthStatusMismatchInfo")]
    pub health_status_mismatch_info: Option<String>,
    ///The DateTime when device was evaluated or issued to MDM
    #[serde(rename = "issuedDateTime")]
    pub issued_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The Timestamp of the last update.
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<String>,
    ///When operatingSystemKernelDebugging is enabled, the device is used in development and testing
    #[serde(rename = "operatingSystemKernelDebugging")]
    pub operating_system_kernel_debugging: Option<String>,
    ///The Operating System Revision List that was loaded during initial boot on the attested device
    #[serde(rename = "operatingSystemRevListInfo")]
    pub operating_system_rev_list_info: Option<String>,
    ///The measurement that is captured in PCR[0]
    pub pcr0: Option<String>,
    ///Informational attribute that identifies the HASH algorithm that was used by TPM
    #[serde(rename = "pcrHashAlgorithm")]
    pub pcr_hash_algorithm: Option<String>,
    ///The number of times a PC device has hibernated or resumed
    #[serde(rename = "resetCount")]
    pub reset_count: Option<f64>,
    ///The number of times a PC device has rebooted
    #[serde(rename = "restartCount")]
    pub restart_count: Option<f64>,
    ///Safe mode is a troubleshooting option for Windows that starts your computer in a limited state
    #[serde(rename = "safeMode")]
    pub safe_mode: Option<String>,
    ///When Secure Boot is enabled, the core components must have the correct cryptographic signatures
    #[serde(rename = "secureBoot")]
    pub secure_boot: Option<String>,
    ///Fingerprint of the Custom Secure Boot Configuration Policy
    #[serde(rename = "secureBootConfigurationPolicyFingerPrint")]
    pub secure_boot_configuration_policy_finger_print: Option<String>,
    ///When test signing is allowed, the device does not enforce signature validation during boot
    #[serde(rename = "testSigning")]
    pub test_signing: Option<String>,
    ///The security version number of the Boot Application
    #[serde(rename = "tpmVersion")]
    pub tpm_version: Option<String>,
    ///VSM is a container that protects high value assets from a compromised kernel
    #[serde(rename = "virtualSecureMode")]
    pub virtual_secure_mode: Option<String>,
    ///Operating system running with limited services that is used to prepare a computer for Windows
    #[serde(rename = "windowsPE")]
    pub windows_pe: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceInstallState {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceInstallState".to_string())]
    pub odata_type: String,
    ///Device Id.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///Device name.
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    ///The error code for install failures.
    #[serde(rename = "errorCode")]
    pub error_code: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Possible values for install state.
    #[serde(rename = "installState")]
    pub install_state: Option<MicrosoftGraphInstallState>,
    ///Last sync date and time.
    #[serde(rename = "lastSyncDateTime")]
    pub last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///OS Description.
    #[serde(rename = "osDescription")]
    pub os_description: Option<String>,
    ///OS Version.
    #[serde(rename = "osVersion")]
    pub os_version: Option<String>,
    ///Device User Name.
    #[serde(rename = "userName")]
    pub user_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceLocalCredential {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceLocalCredential".to_string())]
    pub odata_type: String,
    ///The name of the local admin account for which LAPS is enabled.
    #[serde(rename = "accountName")]
    pub account_name: Option<String>,
    ///The SID of the local admin account for which LAPS is enabled.
    #[serde(rename = "accountSid")]
    pub account_sid: Option<String>,
    ///When the local administrator account credential for the device object was backed up to Azure Active Directory.
    #[serde(rename = "backupDateTime")]
    pub backup_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The password for the local administrator account that is backed up to Azure Active Directory and returned as a Base64 encoded value.
    #[serde(rename = "passwordBase64")]
    pub password_base64: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceLocalCredentialInfo {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceLocalCredentialInfo".to_string())]
    pub odata_type: String,
    ///The credentials of the device's local administrator account backed up to Azure Active Directory.
    pub credentials: Option<Vec<MicrosoftGraphDeviceLocalCredential>>,
    ///Display name of the device that the local credentials are associated with.
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When the local administrator account credential was backed up to Azure Active Directory.
    #[serde(rename = "lastBackupDateTime")]
    pub last_backup_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///When the local administrator account credential will be refreshed and backed up to Azure Active Directory.
    #[serde(rename = "refreshDateTime")]
    pub refresh_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceLogCollectionResponse {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceLogCollectionResponse".to_string())]
    pub odata_type: String,
    ///The User Principal Name (UPN) of the user that enrolled the device.
    #[serde(rename = "enrolledByUser")]
    pub enrolled_by_user: Option<String>,
    ///The DateTime of the expiration of the logs.
    #[serde(rename = "expirationDateTimeUTC")]
    pub expiration_date_time_utc: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The UPN for who initiated the request.
    #[serde(rename = "initiatedByUserPrincipalName")]
    pub initiated_by_user_principal_name: Option<String>,
    ///Indicates Intune device unique identifier.
    #[serde(rename = "managedDeviceId")]
    pub managed_device_id: Option<uuid::Uuid>,
    ///The DateTime the request was received.
    #[serde(rename = "receivedDateTimeUTC")]
    pub received_date_time_utc: Option<chrono::DateTime<chrono::Utc>>,
    ///The DateTime of the request.
    #[serde(rename = "requestedDateTimeUTC")]
    pub requested_date_time_utc: Option<chrono::DateTime<chrono::Utc>>,
    ///The size of the logs in KB. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "sizeInKB")]
    pub size_in_kb: Option<MicrosoftGraphDeviceLogCollectionResponseSizeInKb>,
    ///AppLogUploadStatus
    pub status: Option<MicrosoftGraphAppLogUploadState>,
}
///The size of the logs in KB. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceLogCollectionResponseSizeInKb {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceManagement {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceManagement".to_string())]
    pub odata_type: String,
    ///Apple push notification certificate.
    #[serde(rename = "applePushNotificationCertificate")]
    pub apple_push_notification_certificate: Option<
        MicrosoftGraphApplePushNotificationCertificate,
    >,
    ///The Audit Events
    #[serde(rename = "auditEvents")]
    pub audit_events: Option<Vec<MicrosoftGraphAuditEvent>>,
    ///The list of Compliance Management Partners configured by the tenant.
    #[serde(rename = "complianceManagementPartners")]
    pub compliance_management_partners: Option<
        Vec<MicrosoftGraphComplianceManagementPartner>,
    >,
    ///The Exchange on premises conditional access settings. On premises conditional access will require devices to be both enrolled and compliant for mail access
    #[serde(rename = "conditionalAccessSettings")]
    pub conditional_access_settings: Option<
        MicrosoftGraphOnPremisesConditionalAccessSettings,
    >,
    ///The list of detected apps associated with a device.
    #[serde(rename = "detectedApps")]
    pub detected_apps: Option<Vec<MicrosoftGraphDetectedApp>>,
    ///The list of device categories with the tenant.
    #[serde(rename = "deviceCategories")]
    pub device_categories: Option<Vec<MicrosoftGraphDeviceCategory>>,
    ///The device compliance policies.
    #[serde(rename = "deviceCompliancePolicies")]
    pub device_compliance_policies: Option<Vec<MicrosoftGraphDeviceCompliancePolicy>>,
    ///The device compliance state summary for this account.
    #[serde(rename = "deviceCompliancePolicyDeviceStateSummary")]
    pub device_compliance_policy_device_state_summary: Option<
        MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary,
    >,
    ///The summary states of compliance policy settings for this account.
    #[serde(rename = "deviceCompliancePolicySettingStateSummaries")]
    pub device_compliance_policy_setting_state_summaries: Option<
        Vec<MicrosoftGraphDeviceCompliancePolicySettingStateSummary>,
    >,
    ///The device configuration device state summary for this account.
    #[serde(rename = "deviceConfigurationDeviceStateSummaries")]
    pub device_configuration_device_state_summaries: Option<
        MicrosoftGraphDeviceConfigurationDeviceStateSummary,
    >,
    ///The device configurations.
    #[serde(rename = "deviceConfigurations")]
    pub device_configurations: Option<Vec<MicrosoftGraphDeviceConfiguration>>,
    ///The list of device enrollment configurations
    #[serde(rename = "deviceEnrollmentConfigurations")]
    pub device_enrollment_configurations: Option<
        Vec<MicrosoftGraphDeviceEnrollmentConfiguration>,
    >,
    ///The list of Device Management Partners configured by the tenant.
    #[serde(rename = "deviceManagementPartners")]
    pub device_management_partners: Option<Vec<MicrosoftGraphDeviceManagementPartner>>,
    ///Device protection overview.
    #[serde(rename = "deviceProtectionOverview")]
    pub device_protection_overview: Option<MicrosoftGraphDeviceProtectionOverview>,
    ///The list of Exchange Connectors configured by the tenant.
    #[serde(rename = "exchangeConnectors")]
    pub exchange_connectors: Option<
        Vec<MicrosoftGraphDeviceManagementExchangeConnector>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Collection of imported Windows autopilot devices.
    #[serde(rename = "importedWindowsAutopilotDeviceIdentities")]
    pub imported_windows_autopilot_device_identities: Option<
        Vec<MicrosoftGraphImportedWindowsAutopilotDeviceIdentity>,
    >,
    ///Intune Account Id for given tenant
    #[serde(rename = "intuneAccountId")]
    pub intune_account_id: Option<uuid::Uuid>,
    ///intuneBrand contains data which is used in customizing the appearance of the Company Portal applications as well as the end user web portal.
    #[serde(rename = "intuneBrand")]
    pub intune_brand: Option<MicrosoftGraphIntuneBrand>,
    ///The IOS software update installation statuses for this account.
    #[serde(rename = "iosUpdateStatuses")]
    pub ios_update_statuses: Option<Vec<MicrosoftGraphIosUpdateDeviceStatus>>,
    ///Device overview
    #[serde(rename = "managedDeviceOverview")]
    pub managed_device_overview: Option<MicrosoftGraphManagedDeviceOverview>,
    ///The list of managed devices.
    #[serde(rename = "managedDevices")]
    pub managed_devices: Option<Vec<MicrosoftGraphManagedDevice>>,
    ///The collection property of MobileAppTroubleshootingEvent.
    #[serde(rename = "mobileAppTroubleshootingEvents")]
    pub mobile_app_troubleshooting_events: Option<
        Vec<MicrosoftGraphMobileAppTroubleshootingEvent>,
    >,
    ///The list of Mobile threat Defense connectors configured by the tenant.
    #[serde(rename = "mobileThreatDefenseConnectors")]
    pub mobile_threat_defense_connectors: Option<
        Vec<MicrosoftGraphMobileThreatDefenseConnector>,
    >,
    ///The Notification Message Templates.
    #[serde(rename = "notificationMessageTemplates")]
    pub notification_message_templates: Option<
        Vec<MicrosoftGraphNotificationMessageTemplate>,
    >,
    ///The remote assist partners.
    #[serde(rename = "remoteAssistancePartners")]
    pub remote_assistance_partners: Option<Vec<MicrosoftGraphRemoteAssistancePartner>>,
    ///Reports singleton
    pub reports: Option<MicrosoftGraphDeviceManagementReports>,
    ///The Resource Operations.
    #[serde(rename = "resourceOperations")]
    pub resource_operations: Option<Vec<MicrosoftGraphResourceOperation>>,
    ///The Role Assignments.
    #[serde(rename = "roleAssignments")]
    pub role_assignments: Option<
        Vec<MicrosoftGraphDeviceAndAppManagementRoleAssignment>,
    >,
    ///The Role Definitions.
    #[serde(rename = "roleDefinitions")]
    pub role_definitions: Option<Vec<MicrosoftGraphRoleDefinition>>,
    ///Account level settings.
    pub settings: Option<MicrosoftGraphDeviceManagementSettings>,
    ///The software update status summary.
    #[serde(rename = "softwareUpdateStatusSummary")]
    pub software_update_status_summary: Option<
        MicrosoftGraphSoftwareUpdateStatusSummary,
    >,
    ///Tenant mobile device management subscription state.
    #[serde(rename = "subscriptionState")]
    pub subscription_state: Option<MicrosoftGraphDeviceManagementSubscriptionState>,
    ///The telecom expense management partners.
    #[serde(rename = "telecomExpenseManagementPartners")]
    pub telecom_expense_management_partners: Option<
        Vec<MicrosoftGraphTelecomExpenseManagementPartner>,
    >,
    ///The terms and conditions associated with device management of the company.
    #[serde(rename = "termsAndConditions")]
    pub terms_and_conditions: Option<Vec<MicrosoftGraphTermsAndConditions>>,
    ///The list of troubleshooting events for the tenant.
    #[serde(rename = "troubleshootingEvents")]
    pub troubleshooting_events: Option<
        Vec<MicrosoftGraphDeviceManagementTroubleshootingEvent>,
    >,
    ///User experience analytics appHealth Application Performance
    #[serde(rename = "userExperienceAnalyticsAppHealthApplicationPerformance")]
    pub user_experience_analytics_app_health_application_performance: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsAppHealthApplicationPerformance>,
    >,
    ///User experience analytics appHealth Application Performance by App Version details
    #[serde(
        rename = "userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails"
    )]
    pub user_experience_analytics_app_health_application_performance_by_app_version_details: Option<
        Vec<
            MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails,
        >,
    >,
    ///User experience analytics appHealth Application Performance by App Version Device Id
    #[serde(
        rename = "userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId"
    )]
    pub user_experience_analytics_app_health_application_performance_by_app_version_device_id: Option<
        Vec<
            MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId,
        >,
    >,
    ///User experience analytics appHealth Application Performance by OS Version
    #[serde(
        rename = "userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion"
    )]
    pub user_experience_analytics_app_health_application_performance_by_osversion: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByOsversion>,
    >,
    ///User experience analytics appHealth Model Performance
    #[serde(rename = "userExperienceAnalyticsAppHealthDeviceModelPerformance")]
    pub user_experience_analytics_app_health_device_model_performance: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsAppHealthDeviceModelPerformance>,
    >,
    ///User experience analytics appHealth Device Performance
    #[serde(rename = "userExperienceAnalyticsAppHealthDevicePerformance")]
    pub user_experience_analytics_app_health_device_performance: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsAppHealthDevicePerformance>,
    >,
    ///User experience analytics device performance details
    #[serde(rename = "userExperienceAnalyticsAppHealthDevicePerformanceDetails")]
    pub user_experience_analytics_app_health_device_performance_details: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsAppHealthDevicePerformanceDetails>,
    >,
    ///User experience analytics appHealth OS version Performance
    #[serde(rename = "userExperienceAnalyticsAppHealthOSVersionPerformance")]
    pub user_experience_analytics_app_health_osversion_performance: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsAppHealthOsversionPerformance>,
    >,
    ///User experience analytics appHealth overview
    #[serde(rename = "userExperienceAnalyticsAppHealthOverview")]
    pub user_experience_analytics_app_health_overview: Option<
        MicrosoftGraphUserExperienceAnalyticsCategory,
    >,
    ///User experience analytics baselines
    #[serde(rename = "userExperienceAnalyticsBaselines")]
    pub user_experience_analytics_baselines: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsBaseline>,
    >,
    ///User experience analytics categories
    #[serde(rename = "userExperienceAnalyticsCategories")]
    pub user_experience_analytics_categories: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsCategory>,
    >,
    ///User experience analytics device performance
    #[serde(rename = "userExperienceAnalyticsDevicePerformance")]
    pub user_experience_analytics_device_performance: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsDevicePerformance>,
    >,
    ///User experience analytics device scores
    #[serde(rename = "userExperienceAnalyticsDeviceScores")]
    pub user_experience_analytics_device_scores: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsDeviceScores>,
    >,
    ///User experience analytics device Startup History
    #[serde(rename = "userExperienceAnalyticsDeviceStartupHistory")]
    pub user_experience_analytics_device_startup_history: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsDeviceStartupHistory>,
    >,
    ///User experience analytics device Startup Process Performance
    #[serde(rename = "userExperienceAnalyticsDeviceStartupProcessPerformance")]
    pub user_experience_analytics_device_startup_process_performance: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsDeviceStartupProcessPerformance>,
    >,
    ///User experience analytics device Startup Processes
    #[serde(rename = "userExperienceAnalyticsDeviceStartupProcesses")]
    pub user_experience_analytics_device_startup_processes: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsDeviceStartupProcess>,
    >,
    ///User experience analytics metric history
    #[serde(rename = "userExperienceAnalyticsMetricHistory")]
    pub user_experience_analytics_metric_history: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsMetricHistory>,
    >,
    ///User experience analytics model scores
    #[serde(rename = "userExperienceAnalyticsModelScores")]
    pub user_experience_analytics_model_scores: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsModelScores>,
    >,
    ///User experience analytics overview
    #[serde(rename = "userExperienceAnalyticsOverview")]
    pub user_experience_analytics_overview: Option<
        MicrosoftGraphUserExperienceAnalyticsOverview,
    >,
    ///User experience analytics device Startup Score History
    #[serde(rename = "userExperienceAnalyticsScoreHistory")]
    pub user_experience_analytics_score_history: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsScoreHistory>,
    >,
    ///User experience analytics device settings
    #[serde(rename = "userExperienceAnalyticsSettings")]
    pub user_experience_analytics_settings: Option<
        MicrosoftGraphUserExperienceAnalyticsSettings,
    >,
    ///User experience analytics work from anywhere hardware readiness metrics.
    #[serde(rename = "userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric")]
    pub user_experience_analytics_work_from_anywhere_hardware_readiness_metric: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric,
    >,
    ///User experience analytics work from anywhere metrics.
    #[serde(rename = "userExperienceAnalyticsWorkFromAnywhereMetrics")]
    pub user_experience_analytics_work_from_anywhere_metrics: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereMetric>,
    >,
    ///The user experience analytics work from anywhere model performance
    #[serde(rename = "userExperienceAnalyticsWorkFromAnywhereModelPerformance")]
    pub user_experience_analytics_work_from_anywhere_model_performance: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformance>,
    >,
    ///Virtual endpoint
    #[serde(rename = "virtualEndpoint")]
    pub virtual_endpoint: Option<MicrosoftGraphVirtualEndpoint>,
    ///The Windows autopilot device identities contained collection.
    #[serde(rename = "windowsAutopilotDeviceIdentities")]
    pub windows_autopilot_device_identities: Option<
        Vec<MicrosoftGraphWindowsAutopilotDeviceIdentity>,
    >,
    ///The windows information protection app learning summaries.
    #[serde(rename = "windowsInformationProtectionAppLearningSummaries")]
    pub windows_information_protection_app_learning_summaries: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionAppLearningSummary>,
    >,
    ///The windows information protection network learning summaries.
    #[serde(rename = "windowsInformationProtectionNetworkLearningSummaries")]
    pub windows_information_protection_network_learning_summaries: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionNetworkLearningSummary>,
    >,
    ///The list of affected malware in the tenant.
    #[serde(rename = "windowsMalwareInformation")]
    pub windows_malware_information: Option<
        Vec<MicrosoftGraphWindowsMalwareInformation>,
    >,
    ///Malware overview for windows devices.
    #[serde(rename = "windowsMalwareOverview")]
    pub windows_malware_overview: Option<MicrosoftGraphWindowsMalwareOverview>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceManagementCachedReportConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceManagementCachedReportConfiguration".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
///Device Exchange Access State.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceManagementExchangeAccessState {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "allowed")]
    Allowed,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "quarantined")]
    Quarantined,
}
///Device Exchange Access State Reason.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceManagementExchangeAccessStateReason {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "exchangeGlobalRule")]
    ExchangeGlobalRule,
    #[serde(rename = "exchangeIndividualRule")]
    ExchangeIndividualRule,
    #[serde(rename = "exchangeDeviceRule")]
    ExchangeDeviceRule,
    #[serde(rename = "exchangeUpgrade")]
    ExchangeUpgrade,
    #[serde(rename = "exchangeMailboxPolicy")]
    ExchangeMailboxPolicy,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "compliant")]
    Compliant,
    #[serde(rename = "notCompliant")]
    NotCompliant,
    #[serde(rename = "notEnrolled")]
    NotEnrolled,
    #[serde(rename = "unknownLocation")]
    UnknownLocation,
    #[serde(rename = "mfaRequired")]
    MfaRequired,
    #[serde(rename = "azureADBlockDueToAccessPolicy")]
    AzureAdblockDueToAccessPolicy,
    #[serde(rename = "compromisedPassword")]
    CompromisedPassword,
    #[serde(rename = "deviceNotKnownWithManagedApp")]
    DeviceNotKnownWithManagedApp,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceManagementExchangeConnector {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceManagementExchangeConnector".to_string())]
    pub odata_type: String,
    ///The name of the server hosting the Exchange Connector.
    #[serde(rename = "connectorServerName")]
    pub connector_server_name: Option<String>,
    ///An alias assigned to the Exchange server
    #[serde(rename = "exchangeAlias")]
    pub exchange_alias: Option<String>,
    ///The type of Exchange Connector.
    #[serde(rename = "exchangeConnectorType")]
    pub exchange_connector_type: Option<
        MicrosoftGraphDeviceManagementExchangeConnectorType,
    >,
    ///Exchange Organization to the Exchange server
    #[serde(rename = "exchangeOrganization")]
    pub exchange_organization: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last sync time for the Exchange Connector
    #[serde(rename = "lastSyncDateTime")]
    pub last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Email address used to configure the Service To Service Exchange Connector.
    #[serde(rename = "primarySmtpAddress")]
    pub primary_smtp_address: Option<String>,
    ///The name of the Exchange server.
    #[serde(rename = "serverName")]
    pub server_name: Option<String>,
    ///The current status of the Exchange Connector.
    pub status: Option<MicrosoftGraphDeviceManagementExchangeConnectorStatus>,
    ///The version of the ExchangeConnectorAgent
    pub version: Option<String>,
}
///The current status of the Exchange Connector.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceManagementExchangeConnectorStatus {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "connectionPending")]
    ConnectionPending,
    #[serde(rename = "connected")]
    Connected,
    #[serde(rename = "disconnected")]
    Disconnected,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///The type of Exchange Connector.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceManagementExchangeConnectorType {
    #[serde(rename = "onPremises")]
    #[default]
    OnPremises,
    #[serde(rename = "hosted")]
    Hosted,
    #[serde(rename = "serviceToService")]
    ServiceToService,
    #[serde(rename = "dedicated")]
    Dedicated,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceManagementExportJob {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceManagementExportJob".to_string())]
    pub odata_type: String,
    ///Time that the exported report expires
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Filters applied on the report
    pub filter: Option<String>,
    ///Possible values for the file format of a report to be exported.
    pub format: Option<MicrosoftGraphDeviceManagementReportFileFormat>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Configures how the requested export job is localized.
    #[serde(rename = "localizationType")]
    pub localization_type: Option<
        MicrosoftGraphDeviceManagementExportJobLocalizationType,
    >,
    ///Name of the report
    #[serde(rename = "reportName")]
    pub report_name: Option<String>,
    ///Time that the exported report was requested
    #[serde(rename = "requestDateTime")]
    pub request_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Columns selected from the report
    pub select: Option<Vec<Option<String>>>,
    ///A snapshot is an identifiable subset of the dataset represented by the ReportName. A sessionId or CachedReportConfiguration id can be used here. If a sessionId is specified, Filter, Select, and OrderBy are applied to the data represented by the sessionId. Filter, Select, and OrderBy cannot be specified together with a CachedReportConfiguration id.
    #[serde(rename = "snapshotId")]
    pub snapshot_id: Option<String>,
    ///Possible statuses associated with a generated report.
    pub status: Option<MicrosoftGraphDeviceManagementReportStatus>,
    ///Temporary location of the exported report
    pub url: Option<String>,
}
///Configures how the requested export job is localized.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceManagementExportJobLocalizationType {
    #[serde(rename = "localizedValuesAsAdditionalColumn")]
    #[default]
    LocalizedValuesAsAdditionalColumn,
    #[serde(rename = "replaceLocalizableValues")]
    ReplaceLocalizableValues,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceManagementPartner {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceManagementPartner".to_string())]
    pub odata_type: String,
    ///Partner display name
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///User groups that specifies whether enrollment is through partner.
    #[serde(rename = "groupsRequiringPartnerEnrollment")]
    pub groups_requiring_partner_enrollment: Option<
        Vec<MicrosoftGraphDeviceManagementPartnerAssignment>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Whether device management partner is configured or not
    #[serde(rename = "isConfigured")]
    pub is_configured: Option<bool>,
    ///Timestamp of last heartbeat after admin enabled option Connect to Device management Partner
    #[serde(rename = "lastHeartbeatDateTime")]
    pub last_heartbeat_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Partner App Type.
    #[serde(rename = "partnerAppType")]
    pub partner_app_type: Option<MicrosoftGraphDeviceManagementPartnerAppType>,
    ///Partner state of this tenant.
    #[serde(rename = "partnerState")]
    pub partner_state: Option<MicrosoftGraphDeviceManagementPartnerTenantState>,
    ///Partner Single tenant App id
    #[serde(rename = "singleTenantAppId")]
    pub single_tenant_app_id: Option<String>,
    ///DateTime in UTC when PartnerDevices will be marked as NonCompliant
    #[serde(rename = "whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime")]
    pub when_partner_devices_will_be_marked_as_non_compliant_date_time: Option<
        chrono::DateTime<chrono::Utc>,
    >,
    ///DateTime in UTC when PartnerDevices will be removed
    #[serde(rename = "whenPartnerDevicesWillBeRemovedDateTime")]
    pub when_partner_devices_will_be_removed_date_time: Option<
        chrono::DateTime<chrono::Utc>,
    >,
}
///Partner App Type.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceManagementPartnerAppType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "singleTenantApp")]
    SingleTenantApp,
    #[serde(rename = "multiTenantApp")]
    MultiTenantApp,
}
///User group targeting for Device Management Partner
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceManagementPartnerAssignment {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///User groups targeting for devices to be enrolled through partner.
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
///Partner state of this tenant.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceManagementPartnerTenantState {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "unavailable")]
    Unavailable,
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "terminated")]
    Terminated,
    #[serde(rename = "rejected")]
    Rejected,
    #[serde(rename = "unresponsive")]
    Unresponsive,
}
///Possible values for the file format of a report to be exported.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceManagementReportFileFormat {
    #[serde(rename = "csv")]
    #[default]
    Csv,
    #[serde(rename = "pdf")]
    Pdf,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///Possible statuses associated with a generated report.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceManagementReportStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "notStarted")]
    NotStarted,
    #[serde(rename = "inProgress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "failed")]
    Failed,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceManagementReports {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceManagementReports".to_string())]
    pub odata_type: String,
    ///Entity representing a job to export a report
    #[serde(rename = "exportJobs")]
    pub export_jobs: Option<Vec<MicrosoftGraphDeviceManagementExportJob>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceManagementSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The number of days a device is allowed to go without checking in to remain compliant.
    #[serde(rename = "deviceComplianceCheckinThresholdDays")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_compliance_checkin_threshold_days: Option<f64>,
    ///Is feature enabled or not for scheduled action for rule.
    #[serde(rename = "isScheduledActionEnabled")]
    pub is_scheduled_action_enabled: Option<bool>,
    ///Device should be noncompliant when there is no compliance policy targeted when this is true
    #[serde(rename = "secureByDefault")]
    pub secure_by_default: Option<bool>,
}
///Tenant mobile device management subscription state.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceManagementSubscriptionState {
    #[serde(rename = "pending")]
    #[default]
    Pending,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "deleted")]
    Deleted,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "lockedOut")]
    LockedOut,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceManagementTroubleshootingEvent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceManagementTroubleshootingEvent".to_string())]
    pub odata_type: String,
    ///Id used for tracing the failure in the service.
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<String>,
    ///Time when the event occurred .
    #[serde(rename = "eventDateTime")]
    pub event_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceMetadata {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Optional. The general type of the device (for example, 'Managed', 'Unmanaged').
    #[serde(rename = "deviceType")]
    pub device_type: Option<String>,
    ///The Internet Protocol (IP) address of the device.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///Details about the operating system platform and version.
    #[serde(rename = "operatingSystemSpecifications")]
    pub operating_system_specifications: Option<
        MicrosoftGraphOperatingSystemSpecifications,
    >,
}
///Device operating system summary.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceOperatingSystemSummary {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The count of Corporate work profile Android devices. Also known as Corporate Owned Personally Enabled (COPE). Valid values -1 to 2147483647
    #[serde(rename = "androidCorporateWorkProfileCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub android_corporate_work_profile_count: Option<f64>,
    ///Number of android device count.
    #[serde(rename = "androidCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub android_count: Option<f64>,
    ///Number of dedicated Android devices.
    #[serde(rename = "androidDedicatedCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub android_dedicated_count: Option<f64>,
    ///Number of device admin Android devices.
    #[serde(rename = "androidDeviceAdminCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub android_device_admin_count: Option<f64>,
    ///Number of fully managed Android devices.
    #[serde(rename = "androidFullyManagedCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub android_fully_managed_count: Option<f64>,
    ///Number of work profile Android devices.
    #[serde(rename = "androidWorkProfileCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub android_work_profile_count: Option<f64>,
    ///Number of ConfigMgr managed devices.
    #[serde(rename = "configMgrDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub config_mgr_device_count: Option<f64>,
    ///Number of iOS device count.
    #[serde(rename = "iosCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub ios_count: Option<f64>,
    ///Number of Mac OS X device count.
    #[serde(rename = "macOSCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub mac_oscount: Option<f64>,
    ///Number of unknown device count.
    #[serde(rename = "unknownCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub unknown_count: Option<f64>,
    ///Number of Windows device count.
    #[serde(rename = "windowsCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub windows_count: Option<f64>,
    ///Number of Windows mobile device count.
    #[serde(rename = "windowsMobileCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub windows_mobile_count: Option<f64>,
}
///Supported platform types.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDevicePlatformType {
    #[serde(rename = "android")]
    #[default]
    Android,
    #[serde(rename = "androidForWork")]
    AndroidForWork,
    #[serde(rename = "iOS")]
    IOs,
    #[serde(rename = "macOS")]
    MacOs,
    #[serde(rename = "windowsPhone81")]
    WindowsPhone81,
    #[serde(rename = "windows81AndLater")]
    Windows81AndLater,
    #[serde(rename = "windows10AndLater")]
    Windows10AndLater,
    #[serde(rename = "androidWorkProfile")]
    AndroidWorkProfile,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "androidAOSP")]
    AndroidAosp,
    #[serde(rename = "androidMobileApplicationManagement")]
    AndroidMobileApplicationManagement,
    #[serde(rename = "iOSMobileApplicationManagement")]
    IOsmobileApplicationManagement,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///Hardware information of a given device.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceProtectionOverview {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates number of devices reporting as clean
    #[serde(rename = "cleanDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub clean_device_count: Option<f64>,
    ///Indicates number of devices with critical failures
    #[serde(rename = "criticalFailuresDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub critical_failures_device_count: Option<f64>,
    ///Indicates number of devices with inactive threat agent
    #[serde(rename = "inactiveThreatAgentDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub inactive_threat_agent_device_count: Option<f64>,
    ///Indicates number of devices pending full scan
    #[serde(rename = "pendingFullScanDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_full_scan_device_count: Option<f64>,
    ///Indicates number of devices with pending manual steps
    #[serde(rename = "pendingManualStepsDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_manual_steps_device_count: Option<f64>,
    ///Indicates number of pending offline scan devices
    #[serde(rename = "pendingOfflineScanDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_offline_scan_device_count: Option<f64>,
    ///Indicates the number of devices that have a pending full scan. Valid values -2147483648 to 2147483647
    #[serde(rename = "pendingQuickScanDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_quick_scan_device_count: Option<f64>,
    ///Indicates number of devices pending restart
    #[serde(rename = "pendingRestartDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_restart_device_count: Option<f64>,
    ///Indicates number of devices with an old signature
    #[serde(rename = "pendingSignatureUpdateDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_signature_update_device_count: Option<f64>,
    ///Total device count.
    #[serde(rename = "totalReportedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_reported_device_count: Option<f64>,
    ///Indicates number of devices with threat agent state as unknown
    #[serde(rename = "unknownStateThreatAgentDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub unknown_state_threat_agent_device_count: Option<f64>,
}
discriminated_enum! {
    pub enum MicrosoftGraphDeviceRegistrationMembership { discriminator : "@odata.type",
    variants : [("#microsoft.graph.allDeviceRegistrationMembership",
    MicrosoftGraphAllDeviceRegistrationMembership(Box <
    MicrosoftGraphAllDeviceRegistrationMembership >)),
    ("#microsoft.graph.enumeratedDeviceRegistrationMembership",
    MicrosoftGraphEnumeratedDeviceRegistrationMembership(Box <
    MicrosoftGraphEnumeratedDeviceRegistrationMembership >)),
    ("#microsoft.graph.noDeviceRegistrationMembership",
    MicrosoftGraphNoDeviceRegistrationMembership(Box <
    MicrosoftGraphNoDeviceRegistrationMembership >))], fallback :
    DeviceRegistrationMembership(Box < MicrosoftGraphDeviceRegistrationMembershipBase >),
    }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceRegistrationMembershipBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDeviceRegistrationPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.deviceRegistrationPolicy".to_string())]
    pub odata_type: String,
    #[serde(rename = "azureADJoin")]
    pub azure_adjoin: Option<MicrosoftGraphAzureAdjoinPolicy>,
    #[serde(rename = "azureADRegistration")]
    pub azure_adregistration: Option<MicrosoftGraphAzureAdregistrationPolicy>,
    pub description: Option<String>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "localAdminPassword")]
    pub local_admin_password: Option<MicrosoftGraphLocalAdminPasswordSettings>,
    #[serde(rename = "multiFactorAuthConfiguration")]
    pub multi_factor_auth_configuration: Option<
        MicrosoftGraphMultiFactorAuthConfiguration,
    >,
    #[serde(rename = "userDeviceQuota")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub user_device_quota: Option<f64>,
}
///Device registration status.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceRegistrationState {
    #[serde(rename = "notRegistered")]
    #[default]
    NotRegistered,
    #[serde(rename = "registered")]
    Registered,
    #[serde(rename = "revoked")]
    Revoked,
    #[serde(rename = "keyConflict")]
    KeyConflict,
    #[serde(rename = "approvalPending")]
    ApprovalPending,
    #[serde(rename = "certificateReset")]
    CertificateReset,
    #[serde(rename = "notRegisteredPendingEnrollment")]
    NotRegisteredPendingEnrollment,
    #[serde(rename = "unknown")]
    Unknown,
}
///Device threat protection levels for the Device Threat Protection API.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDeviceThreatProtectionLevel {
    #[serde(rename = "unavailable")]
    #[default]
    Unavailable,
    #[serde(rename = "secured")]
    Secured,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "notSet")]
    NotSet,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDevicesFilter {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Determines whether devices that satisfy the rule should be allowed or blocked. The possible values are: allowed, blocked, unknownFutureValue.
    pub mode: Option<MicrosoftGraphCrossTenantAccessPolicyTargetConfigurationAccessType>,
    ///Defines the rule to filter the devices. For example, device.deviceAttribute2 -eq 'PrivilegedAccessWorkstation'.
    pub rule: Option<String>,
}
///Allow the device to send diagnostic and usage telemetry data, such as Watson.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDiagnosticDataSubmissionMode {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "basic")]
    Basic,
    #[serde(rename = "enhanced")]
    Enhanced,
    #[serde(rename = "full")]
    Full,
}
discriminated_enum! {
    pub enum MicrosoftGraphDictionary { discriminator : "@odata.type", variants :
    [("#microsoft.graph.customMetadataDictionary",
    MicrosoftGraphCustomMetadataDictionary(Box < MicrosoftGraphCustomMetadataDictionary
    >)), ("#microsoft.graph.fileStorageContainerCustomPropertyDictionary",
    MicrosoftGraphFileStorageContainerCustomPropertyDictionary(Box <
    MicrosoftGraphFileStorageContainerCustomPropertyDictionary >)),
    ("#microsoft.graph.resultTemplateDictionary",
    MicrosoftGraphResultTemplateDictionary(Box < MicrosoftGraphResultTemplateDictionary
    >))], fallback : Dictionary(Box < MicrosoftGraphDictionaryBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDictionaryBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDirectory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.directory".to_string())]
    pub odata_type: String,
    ///Conceptual container for user and group directory objects.
    #[serde(rename = "administrativeUnits")]
    pub administrative_units: Option<Vec<MicrosoftGraphAdministrativeUnit>>,
    ///Group of related custom security attribute definitions.
    #[serde(rename = "attributeSets")]
    pub attribute_sets: Option<Vec<MicrosoftGraphAttributeSet>>,
    ///Schema of a custom security attributes (key-value pairs).
    #[serde(rename = "customSecurityAttributeDefinitions")]
    pub custom_security_attribute_definitions: Option<
        Vec<MicrosoftGraphCustomSecurityAttributeDefinition>,
    >,
    ///Recently deleted items. Read-only. Nullable.
    #[serde(rename = "deletedItems")]
    pub deleted_items: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The credentials of the device's local administrator account backed up to Microsoft Entra ID.
    #[serde(rename = "deviceLocalCredentials")]
    pub device_local_credentials: Option<Vec<MicrosoftGraphDeviceLocalCredentialInfo>>,
    ///Configure domain federation with organizations whose identity provider (IdP) supports either the SAML or WS-Fed protocol.
    #[serde(rename = "federationConfigurations")]
    pub federation_configurations: Option<Vec<MicrosoftGraphIdentityProviderBase>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A container for on-premises directory synchronization functionalities that are available for the organization.
    #[serde(rename = "onPremisesSynchronization")]
    pub on_premises_synchronization: Option<
        Vec<MicrosoftGraphOnPremisesDirectorySynchronization>,
    >,
    ///The collection of public key infrastructure instances for the certificate-based authentication feature for users in a Microsoft Entra tenant.
    #[serde(rename = "publicKeyInfrastructure")]
    pub public_key_infrastructure: Option<MicrosoftGraphPublicKeyInfrastructureRoot>,
    ///List of commercial subscriptions that an organization acquired.
    pub subscriptions: Option<Vec<MicrosoftGraphCompanySubscription>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDirectoryAudit {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.directoryAudit".to_string())]
    pub odata_type: String,
    ///Indicates the date and time the activity was performed. The Timestamp type is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ge, le) and $orderby.
    #[serde(rename = "activityDateTime")]
    pub activity_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the activity name or the operation name (examples: 'Create User' and 'Add member to group'). For a list of activities logged, refer to Microsoft Entra audit log categories and activities. Supports $filter (eq, startswith).
    #[serde(rename = "activityDisplayName")]
    pub activity_display_name: Option<String>,
    ///Indicates additional details on the activity.
    #[serde(rename = "additionalDetails")]
    pub additional_details: Option<Vec<MicrosoftGraphKeyValue>>,
    ///Indicates which resource category that's targeted by the activity. For example: UserManagement, GroupManagement, ApplicationManagement, RoleManagement. For a list of categories for activities logged, refer to Microsoft Entra audit log categories and activities.
    pub category: Option<String>,
    ///Indicates a unique ID that helps correlate activities that span across various services. Can be used to trace logs across services. Supports $filter (eq).
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "initiatedBy")]
    pub initiated_by: Option<MicrosoftGraphAuditActivityInitiator>,
    ///Indicates information on which service initiated the activity (For example: Self-service Password Management, Core Directory, B2C, Invited Users, Microsoft Identity Manager, Privileged Identity Management. Supports $filter (eq).
    #[serde(rename = "loggedByService")]
    pub logged_by_service: Option<String>,
    ///Indicates the type of operation that was performed. The possible values include but are not limited to the following: Add, Assign, Update, Unassign, and Delete.
    #[serde(rename = "operationType")]
    pub operation_type: Option<String>,
    ///Indicates the result of the activity. Possible values are: success, failure, timeout, unknownFutureValue.
    pub result: Option<MicrosoftGraphOperationResult>,
    ///Indicates the reason for failure if the result is failure or timeout.
    #[serde(rename = "resultReason")]
    pub result_reason: Option<String>,
    ///Indicates information on which resource was changed due to the activity. Target Resource Type can be User, Device, Directory, App, Role, Group, Policy or Other. Supports $filter (eq) for id and displayName; and $filter (startswith) for displayName.
    #[serde(rename = "targetResources")]
    pub target_resources: Option<Vec<MicrosoftGraphTargetResource>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDirectoryDefinition {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.directoryDefinition".to_string())]
    pub odata_type: String,
    pub discoverabilities: Option<MicrosoftGraphDirectoryDefinitionDiscoverabilities>,
    ///Represents the discovery date and time using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "discoveryDateTime")]
    pub discovery_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Name of the directory. Must be unique within the synchronization schema. Not nullable.
    pub name: Option<String>,
    ///Collection of objects supported by the directory.
    pub objects: Option<Vec<MicrosoftGraphObjectDefinition>>,
    ///Whether this object is read-only.
    #[serde(rename = "readOnly")]
    pub read_only: Option<bool>,
    ///Read only value that indicates version discovered. null if discovery hasn't yet occurred.
    pub version: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDirectoryDefinitionDiscoverabilities {
    #[serde(rename = "None")]
    #[default]
    None,
    #[serde(rename = "AttributeNames")]
    AttributeNames,
    #[serde(rename = "AttributeDataTypes")]
    AttributeDataTypes,
    #[serde(rename = "AttributeReadOnly")]
    AttributeReadOnly,
    #[serde(rename = "ReferenceAttributes")]
    ReferenceAttributes,
    #[serde(rename = "UnknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDirectoryObject {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.directoryObject".to_string())]
    pub odata_type: String,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDirectoryObjectPartnerReference {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.directoryObjectPartnerReference".to_string())]
    pub odata_type: String,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description of the object returned. Read-only.
    pub description: Option<String>,
    ///Name of directory object being returned, like group or application. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The tenant identifier for the partner tenant. Read-only.
    #[serde(rename = "externalPartnerTenantId")]
    pub external_partner_tenant_id: Option<uuid::Uuid>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The type of the referenced object in the partner tenant. Read-only.
    #[serde(rename = "objectType")]
    pub object_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDirectoryRole {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.directoryRole".to_string())]
    pub odata_type: String,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description for the directory role. Read-only. Supports $filter (eq), $search, $select.
    pub description: Option<String>,
    ///The display name for the directory role. Read-only. Supports $filter (eq), $search, $select.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Users that are members of this directory role. HTTP Methods: GET, POST, DELETE. Read-only. Nullable. Supports $expand.
    pub members: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The id of the directoryRoleTemplate that this role is based on. The property must be specified when activating a directory role in a tenant with a POST operation. After the directory role has been activated, the property is read only. Supports $filter (eq), $select.
    #[serde(rename = "roleTemplateId")]
    pub role_template_id: Option<String>,
    ///Members of this directory role that are scoped to administrative units. Read-only. Nullable.
    #[serde(rename = "scopedMembers")]
    pub scoped_members: Option<Vec<MicrosoftGraphScopedRoleMembership>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDirectoryRoleTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.directoryRoleTemplate".to_string())]
    pub odata_type: String,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description to set for the directory role. Read-only.
    pub description: Option<String>,
    ///The display name to set for the directory role. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDisableAndDeleteUserApplyAction {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.disableAndDeleteUserApplyAction".to_string())]
    pub odata_type: String,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDisableReason {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "invalidBillingProfile")]
    InvalidBillingProfile,
    #[serde(rename = "userRequested")]
    UserRequested,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphDiskType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "hdd")]
    Hdd,
    #[serde(rename = "ssd")]
    Ssd,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDisplayNameLocalization {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If present, the value of this field contains the displayName string that has been set for the language present in the languageTag field.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Provides the language culture-code and friendly name of the language that the displayName field has been provided in.
    #[serde(rename = "languageTag")]
    pub language_tag: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDocumentSet {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Content types allowed in document set.
    #[serde(rename = "allowedContentTypes")]
    pub allowed_content_types: Option<Vec<MicrosoftGraphContentTypeInfo>>,
    ///Default contents of document set.
    #[serde(rename = "defaultContents")]
    pub default_contents: Option<Vec<MicrosoftGraphDocumentSetContent>>,
    ///Specifies whether to push welcome page changes to inherited content types.
    #[serde(rename = "propagateWelcomePageChanges")]
    pub propagate_welcome_page_changes: Option<bool>,
    #[serde(rename = "sharedColumns")]
    pub shared_columns: Option<Vec<MicrosoftGraphColumnDefinition>>,
    ///Indicates whether to add the name of the document set to each file name.
    #[serde(rename = "shouldPrefixNameToFile")]
    pub should_prefix_name_to_file: Option<bool>,
    #[serde(rename = "welcomePageColumns")]
    pub welcome_page_columns: Option<Vec<MicrosoftGraphColumnDefinition>>,
    ///Welcome page absolute URL.
    #[serde(rename = "welcomePageUrl")]
    pub welcome_page_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDocumentSetContent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Content type information of the file.
    #[serde(rename = "contentType")]
    pub content_type: Option<MicrosoftGraphContentTypeInfo>,
    ///Name of the file in resource folder that should be added as a default content or a template in the document set.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///Folder name in which the file will be placed when a new document set is created in the library.
    #[serde(rename = "folderName")]
    pub folder_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDocumentSetVersion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.documentSetVersion".to_string())]
    pub odata_type: String,
    ///Comment about the captured version.
    pub comment: Option<String>,
    ///User who captured the version.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Date and time when this version was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A collection of the fields and values for this version of the list item.
    pub fields: Option<MicrosoftGraphFieldValueSet>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Items within the document set that are captured as part of this version.
    pub items: Option<Vec<MicrosoftGraphDocumentSetVersionItem>>,
    ///Identity of the user which last modified the version. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Date and time the version was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the publication status of this particular version. Read-only.
    pub publication: Option<MicrosoftGraphPublicationFacet>,
    ///If true, minor versions of items are also captured; otherwise, only major versions are captured. The default value is false.
    #[serde(rename = "shouldCaptureMinorVersion")]
    pub should_capture_minor_version: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDocumentSetVersionItem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The unique identifier for the item.
    #[serde(rename = "itemId")]
    pub item_id: Option<String>,
    ///The title of the item.
    pub title: Option<String>,
    ///The version ID of the item.
    #[serde(rename = "versionId")]
    pub version_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDomain {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.domain".to_string())]
    pub odata_type: String,
    ///Indicates the configured authentication type for the domain. The value is either Managed or Federated. Managed indicates a cloud managed domain where Microsoft Entra ID performs user authentication. Federated indicates authentication is federated with an identity provider such as the tenant's on-premises Active Directory via Active Directory Federation Services. Not nullable.  To update this property in delegated scenarios, the calling app must be assigned the Directory.AccessAsUser.All delegated permission.
    #[serde(rename = "authenticationType")]
    pub authentication_type: Option<String>,
    ///This property is always null except when the verify action is used. When the verify action is used, a domain entity is returned in the response. The availabilityStatus property of the domain entity in the response is either AvailableImmediately or EmailVerifiedDomainTakeoverScheduled.
    #[serde(rename = "availabilityStatus")]
    pub availability_status: Option<String>,
    ///The objects such as users and groups that reference the domain ID. Read-only, Nullable. Doesn't support $expand. Supports $filter by the OData type of objects returned. For example, /domains/{domainId}/domainNameReferences/microsoft.graph.user and /domains/{domainId}/domainNameReferences/microsoft.graph.group.
    #[serde(rename = "domainNameReferences")]
    pub domain_name_references: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Domain settings configured by a customer when federated with Microsoft Entra ID. Doesn't support $expand.
    #[serde(rename = "federationConfiguration")]
    pub federation_configuration: Option<Vec<MicrosoftGraphInternalDomainFederation>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The value of the property is false if the DNS record management of the domain is delegated to Microsoft 365. Otherwise, the value is true. Not nullable
    #[serde(rename = "isAdminManaged")]
    pub is_admin_managed: Option<bool>,
    ///true if this is the default domain that is used for user creation. There's only one default domain per company. Not nullable.
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    ///true if this is the initial domain created by Microsoft Online Services (contoso.com). There's only one initial domain per company. Not nullable
    #[serde(rename = "isInitial")]
    pub is_initial: Option<bool>,
    ///true if the domain is a verified root domain. Otherwise, false if the domain is a subdomain or unverified. Not nullable.
    #[serde(rename = "isRoot")]
    pub is_root: Option<bool>,
    ///true if the domain completed domain ownership verification. Not nullable.
    #[serde(rename = "isVerified")]
    pub is_verified: Option<bool>,
    pub manufacturer: Option<String>,
    pub model: Option<String>,
    ///Specifies the number of days before a user receives notification that their password expires. If the property isn't set, a default value of 14 days is used.
    #[serde(rename = "passwordNotificationWindowInDays")]
    pub password_notification_window_in_days: Option<f64>,
    ///Specifies the length of time that a password is valid before it must be changed. If the property isn't set, a default value of 90 days is used.
    #[serde(rename = "passwordValidityPeriodInDays")]
    pub password_validity_period_in_days: Option<f64>,
    ///Root domain of a subdomain. Read-only, Nullable. Supports $expand.
    #[serde(rename = "rootDomain")]
    pub root_domain: Option<Box<MicrosoftGraphDomain>>,
    ///DNS records the customer adds to the DNS zone file of the domain before the domain can be used by Microsoft Online services. Read-only, Nullable. Doesn't support $expand.
    #[serde(rename = "serviceConfigurationRecords")]
    pub service_configuration_records: Option<Vec<MicrosoftGraphDomainDnsRecord>>,
    ///Status of asynchronous operations scheduled for the domain.
    pub state: Option<MicrosoftGraphDomainState>,
    ///The capabilities assigned to the domain. Can include 0, 1 or more of following values: Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune. The values that you can add or remove using the API include: Email, OfficeCommunicationsOnline, Yammer. Not nullable.
    #[serde(rename = "supportedServices")]
    pub supported_services: Option<Vec<String>>,
    ///DNS records that the customer adds to the DNS zone file of the domain before the customer can complete domain ownership verification with Microsoft Entra ID. Read-only, Nullable. Doesn't support $expand.
    #[serde(rename = "verificationDnsRecords")]
    pub verification_dns_records: Option<Vec<MicrosoftGraphDomainDnsRecord>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDomainDnsCnameRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.domainDnsCnameRecord".to_string())]
    pub odata_type: String,
    ///The canonical name of the CNAME record. Used to configure the CNAME record at the DNS host.
    #[serde(rename = "canonicalName")]
    pub canonical_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If false, the customer must configure this record at the DNS host for Microsoft Online Services to operate correctly with the domain.
    #[serde(rename = "isOptional")]
    pub is_optional: Option<bool>,
    ///Value used when configuring the name of the DNS record at the DNS host.
    pub label: Option<String>,
    ///Indicates what type of DNS record this entity represents. The value can be CName, Mx, Srv, or Txt.
    #[serde(rename = "recordType")]
    pub record_type: Option<String>,
    ///Microsoft Online Service or feature that has a dependency on this DNS record. Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune.
    #[serde(rename = "supportedService")]
    pub supported_service: Option<String>,
    ///Value to use when configuring the time-to-live (ttl) property of the DNS record at the DNS host. Not nullable.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub ttl: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDomainDnsMxRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.domainDnsMxRecord".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If false, the customer must configure this record at the DNS host for Microsoft Online Services to operate correctly with the domain.
    #[serde(rename = "isOptional")]
    pub is_optional: Option<bool>,
    ///Value used when configuring the name of the DNS record at the DNS host.
    pub label: Option<String>,
    ///Value used when configuring the answer/destination/value of the MX record at the DNS host.
    #[serde(rename = "mailExchange")]
    pub mail_exchange: Option<String>,
    ///Value used when configuring the Preference/Priority property of the MX record at the DNS host.
    pub preference: Option<f64>,
    ///Indicates what type of DNS record this entity represents. The value can be CName, Mx, Srv, or Txt.
    #[serde(rename = "recordType")]
    pub record_type: Option<String>,
    ///Microsoft Online Service or feature that has a dependency on this DNS record. Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune.
    #[serde(rename = "supportedService")]
    pub supported_service: Option<String>,
    ///Value to use when configuring the time-to-live (ttl) property of the DNS record at the DNS host. Not nullable.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub ttl: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDomainDnsRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.domainDnsRecord".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If false, the customer must configure this record at the DNS host for Microsoft Online Services to operate correctly with the domain.
    #[serde(rename = "isOptional")]
    pub is_optional: Option<bool>,
    ///Value used when configuring the name of the DNS record at the DNS host.
    pub label: Option<String>,
    ///Indicates what type of DNS record this entity represents. The value can be CName, Mx, Srv, or Txt.
    #[serde(rename = "recordType")]
    pub record_type: Option<String>,
    ///Microsoft Online Service or feature that has a dependency on this DNS record. Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune.
    #[serde(rename = "supportedService")]
    pub supported_service: Option<String>,
    ///Value to use when configuring the time-to-live (ttl) property of the DNS record at the DNS host. Not nullable.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub ttl: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDomainDnsSrvRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.domainDnsSrvRecord".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If false, the customer must configure this record at the DNS host for Microsoft Online Services to operate correctly with the domain.
    #[serde(rename = "isOptional")]
    pub is_optional: Option<bool>,
    ///Value used when configuring the name of the DNS record at the DNS host.
    pub label: Option<String>,
    ///Value to use when configuring the Target property of the SRV record at the DNS host.
    #[serde(rename = "nameTarget")]
    pub name_target: Option<String>,
    ///Value to use when configuring the port property of the SRV record at the DNS host.
    pub port: Option<f64>,
    ///Value to use when configuring the priority property of the SRV record at the DNS host.
    pub priority: Option<f64>,
    ///Value to use when configuring the protocol property of the SRV record at the DNS host.
    pub protocol: Option<String>,
    ///Indicates what type of DNS record this entity represents. The value can be CName, Mx, Srv, or Txt.
    #[serde(rename = "recordType")]
    pub record_type: Option<String>,
    ///Value to use when configuring the service property of the SRV record at the DNS host.
    pub service: Option<String>,
    ///Microsoft Online Service or feature that has a dependency on this DNS record. Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune.
    #[serde(rename = "supportedService")]
    pub supported_service: Option<String>,
    ///Value to use when configuring the time-to-live (ttl) property of the DNS record at the DNS host. Not nullable.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub ttl: Option<f64>,
    ///Value to use when configuring the weight property of the SRV record at the DNS host.
    pub weight: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDomainDnsTxtRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.domainDnsTxtRecord".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If false, the customer must configure this record at the DNS host for Microsoft Online Services to operate correctly with the domain.
    #[serde(rename = "isOptional")]
    pub is_optional: Option<bool>,
    ///Value used when configuring the name of the DNS record at the DNS host.
    pub label: Option<String>,
    ///Indicates what type of DNS record this entity represents. The value can be CName, Mx, Srv, or Txt.
    #[serde(rename = "recordType")]
    pub record_type: Option<String>,
    ///Microsoft Online Service or feature that has a dependency on this DNS record. Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune.
    #[serde(rename = "supportedService")]
    pub supported_service: Option<String>,
    ///Value used when configuring the text property at the DNS host.
    pub text: Option<String>,
    ///Value to use when configuring the time-to-live (ttl) property of the DNS record at the DNS host. Not nullable.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub ttl: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDomainDnsUnavailableRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.domainDnsUnavailableRecord".to_string())]
    pub odata_type: String,
    ///Provides the reason why the DomainDnsUnavailableRecord entity is returned.
    pub description: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If false, the customer must configure this record at the DNS host for Microsoft Online Services to operate correctly with the domain.
    #[serde(rename = "isOptional")]
    pub is_optional: Option<bool>,
    ///Value used when configuring the name of the DNS record at the DNS host.
    pub label: Option<String>,
    ///Indicates what type of DNS record this entity represents. The value can be CName, Mx, Srv, or Txt.
    #[serde(rename = "recordType")]
    pub record_type: Option<String>,
    ///Microsoft Online Service or feature that has a dependency on this DNS record. Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune.
    #[serde(rename = "supportedService")]
    pub supported_service: Option<String>,
    ///Value to use when configuring the time-to-live (ttl) property of the DNS record at the DNS host. Not nullable.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub ttl: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDomainIdentitySource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.domainIdentitySource".to_string())]
    pub odata_type: String,
    ///The name of the identity source, typically also the domain name. Read only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The domain name. Read only.
    #[serde(rename = "domainName")]
    pub domain_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDomainState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Timestamp for when the last activity occurred. The value is updated when an operation is scheduled, the asynchronous task starts, and when the operation completes.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Type of asynchronous operation. The values can be ForceDelete or Verification.
    pub operation: Option<String>,
    ///Current status of the operation.  Scheduled - Operation is scheduled but hasn't started.  InProgress - Task is in progress.  Failed - The operation failed.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDrive {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.drive".to_string())]
    pub odata_type: String,
    ///Collection of bundles (albums and multi-select-shared sets of items). Only in personal OneDrive.
    pub bundles: Option<Vec<MicrosoftGraphDriveItem>>,
    ///Identity of the user, device, or application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who created the item. Read-only.
    #[serde(rename = "createdByUser")]
    pub created_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Provides a user-visible description of the item. Optional.
    pub description: Option<String>,
    ///Describes the type of drive represented by this resource. OneDrive personal drives return personal. OneDrive for Business returns business. SharePoint document libraries return documentLibrary. Read-only.
    #[serde(rename = "driveType")]
    pub drive_type: Option<String>,
    ///ETag for the item. Read-only.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    ///The list of items the user is following. Only in OneDrive for Business.
    pub following: Option<Vec<MicrosoftGraphDriveItem>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///All items contained in the drive. Read-only. Nullable.
    pub items: Option<Vec<MicrosoftGraphDriveItem>>,
    ///Identity of the user, device, and application that last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who last modified the item. Read-only.
    #[serde(rename = "lastModifiedByUser")]
    pub last_modified_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///For drives in SharePoint, the underlying document library list. Read-only. Nullable.
    pub list: Option<Box<MicrosoftGraphList>>,
    ///The name of the item. Read-write.
    pub name: Option<String>,
    ///Optional. The user account that owns the drive. Read-only.
    pub owner: Option<MicrosoftGraphIdentitySet>,
    ///Parent information, if the item has a parent. Read-write.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    ///Optional. Information about the drive's storage space quota. Read-only.
    pub quota: Option<MicrosoftGraphQuota>,
    ///The root folder of the drive. Read-only.
    pub root: Option<Box<MicrosoftGraphDriveItem>>,
    #[serde(rename = "sharePointIds")]
    pub share_point_ids: Option<MicrosoftGraphSharepointIds>,
    ///Collection of common folders available in OneDrive. Read-only. Nullable.
    pub special: Option<Vec<MicrosoftGraphDriveItem>>,
    ///If present, indicates that it's a system-managed drive. Read-only.
    pub system: Option<MicrosoftGraphSystemFacet>,
    ///URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDriveItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.driveItem".to_string())]
    pub odata_type: String,
    ///Analytics about the view activities that took place on this item.
    pub analytics: Option<Box<MicrosoftGraphItemAnalytics>>,
    ///Audio metadata, if the item is an audio file. Read-only. Read-only. Only on OneDrive Personal.
    pub audio: Option<MicrosoftGraphAudio>,
    ///Bundle metadata, if the item is a bundle. Read-only.
    pub bundle: Option<MicrosoftGraphBundle>,
    ///An eTag for the content of the item. This eTag isn't changed if only the metadata is changed. Note This property isn't returned if the item is a folder. Read-only.
    #[serde(rename = "cTag")]
    pub c_tag: Option<String>,
    ///Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable.
    pub children: Option<Vec<MicrosoftGraphDriveItem>>,
    ///The content stream, if the item represents a file.
    pub content: Option<String>,
    ///Identity of the user, device, or application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who created the item. Read-only.
    #[serde(rename = "createdByUser")]
    pub created_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Information about the deleted state of the item. Read-only.
    pub deleted: Option<MicrosoftGraphDeleted>,
    ///Provides a user-visible description of the item. Optional.
    pub description: Option<String>,
    ///ETag for the item. Read-only.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    ///File metadata, if the item is a file. Read-only.
    pub file: Option<MicrosoftGraphFile>,
    ///File system information on client. Read-write.
    #[serde(rename = "fileSystemInfo")]
    pub file_system_info: Option<MicrosoftGraphFileSystemInfo>,
    ///Folder metadata, if the item is a folder. Read-only.
    pub folder: Option<MicrosoftGraphFolder>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Image metadata, if the item is an image. Read-only.
    pub image: Option<MicrosoftGraphImage>,
    ///Identity of the user, device, and application that last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who last modified the item. Read-only.
    #[serde(rename = "lastModifiedByUser")]
    pub last_modified_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///For drives in SharePoint, the associated document library list item. Read-only. Nullable.
    #[serde(rename = "listItem")]
    pub list_item: Option<Box<MicrosoftGraphListItem>>,
    ///Location metadata, if the item has location data. Read-only.
    pub location: Option<MicrosoftGraphGeoCoordinates>,
    ///Malware metadata, if the item was detected to contain malware. Read-only.
    pub malware: Option<MicrosoftGraphMalware>,
    ///The name of the item. Read-write.
    pub name: Option<String>,
    ///If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.
    pub package: Option<MicrosoftGraphPackage>,
    ///Parent information, if the item has a parent. Read-write.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    ///If present, indicates that one or more operations that might affect the state of the driveItem are pending completion. Read-only.
    #[serde(rename = "pendingOperations")]
    pub pending_operations: Option<MicrosoftGraphPendingOperations>,
    ///The set of permissions for the item. Read-only. Nullable.
    pub permissions: Option<Vec<MicrosoftGraphPermission>>,
    ///Photo metadata, if the item is a photo. Read-only.
    pub photo: Option<MicrosoftGraphPhoto>,
    ///Provides information about the published or checked-out state of an item, in locations that support such actions. This property isn't returned by default. Read-only.
    pub publication: Option<MicrosoftGraphPublicationFacet>,
    ///Remote item data, if the item is shared from a drive other than the one being accessed. Read-only.
    #[serde(rename = "remoteItem")]
    pub remote_item: Option<MicrosoftGraphRemoteItem>,
    ///Information about retention label and settings enforced on the driveItem. Read-write.
    #[serde(rename = "retentionLabel")]
    pub retention_label: Option<MicrosoftGraphItemRetentionLabel>,
    ///If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive.
    pub root: Option<MicrosoftGraphRoot>,
    ///Search metadata, if the item is from a search result. Read-only.
    #[serde(rename = "searchResult")]
    pub search_result: Option<MicrosoftGraphSearchResult>,
    ///Indicates that the item was shared with others and provides information about the shared state of the item. Read-only.
    pub shared: Option<MicrosoftGraphShared>,
    ///Returns identifiers useful for SharePoint REST compatibility. Read-only.
    #[serde(rename = "sharepointIds")]
    pub sharepoint_ids: Option<MicrosoftGraphSharepointIds>,
    ///Size of the item in bytes. Read-only.
    pub size: Option<f64>,
    ///If the current item is also available as a special folder, this facet is returned. Read-only.
    #[serde(rename = "specialFolder")]
    pub special_folder: Option<MicrosoftGraphSpecialFolder>,
    ///The set of subscriptions on the item. Only supported on the root of a drive.
    pub subscriptions: Option<Vec<MicrosoftGraphSubscription>>,
    ///Collection of thumbnailSet objects associated with the item. For more information, see getting thumbnails. Read-only. Nullable.
    pub thumbnails: Option<Vec<MicrosoftGraphThumbnailSet>>,
    ///The list of previous versions of the item. For more info, see getting previous versions. Read-only. Nullable.
    pub versions: Option<Vec<MicrosoftGraphDriveItemVersion>>,
    ///Video metadata, if the item is a video. Read-only.
    pub video: Option<MicrosoftGraphVideo>,
    ///WebDAV compatible URL for the item.
    #[serde(rename = "webDavUrl")]
    pub web_dav_url: Option<String>,
    ///URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
    ///For files that are Excel spreadsheets, access to the workbook API to work with the spreadsheet's contents. Nullable.
    pub workbook: Option<MicrosoftGraphWorkbook>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDriveItemVersion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.driveItemVersion".to_string())]
    pub odata_type: String,
    ///The content stream for this version of the item.
    pub content: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user which last modified the version. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Date and time the version was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the publication status of this particular version. Read-only.
    pub publication: Option<MicrosoftGraphPublicationFacet>,
    ///Indicates the size of the content stream for this version of the item.
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDriveProtectionRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.driveProtectionRule".to_string())]
    pub odata_type: String,
    ///The identity of person who created the rule.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the rule.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains a drive expression. For examples, see driveExpression examples.
    #[serde(rename = "driveExpression")]
    pub drive_expression: Option<String>,
    ///Contains error details if an operation on a rule fails.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "isAutoApplyEnabled")]
    pub is_auto_apply_enabled: Option<bool>,
    ///The identity of the person who last modified the rule.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification made to the rule.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The status of the protection rule. The possible values are: draft, active, completed, completedWithErrors, unknownFutureValue. The draft member is currently unsupported.
    pub status: Option<MicrosoftGraphProtectionRuleStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDriveProtectionUnit {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.driveProtectionUnit".to_string())]
    pub odata_type: String,
    ///The identity of the person who created the protection unit.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the protection unit. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///ID of the directory object.
    #[serde(rename = "directoryObjectId")]
    pub directory_object_id: Option<String>,
    ///Display name of the directory object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Email associated with the directory object.
    pub email: Option<String>,
    ///Contains error details if an error occurred while creating a protection unit.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of person who last modified the protection unit.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification of this protection unit. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier of the protection policy based on which protection unit was created.
    #[serde(rename = "policyId")]
    pub policy_id: Option<String>,
    ///The status of the protection unit. The possible values are: protectRequested, protected, unprotectRequested, unprotected, removeRequested, unknownFutureValue, offboardRequested, offboarded, cancelOffboardRequested. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: offboardRequested, offboarded, cancelOffboardRequested.
    pub status: Option<MicrosoftGraphProtectionUnitStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDriveProtectionUnitsBulkAdditionJob {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.driveProtectionUnitsBulkAdditionJob".to_string())]
    pub odata_type: String,
    ///The identity of person who created the job.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the job.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The list of OneDrive directoryObjectIds to add to the OneDrive protection policy.
    #[serde(rename = "directoryObjectIds")]
    pub directory_object_ids: Option<Vec<Option<String>>>,
    ///The name of the protection units bulk addition job.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The list of email addresses to add to the OneDrive protection policy.
    pub drives: Option<Vec<Option<String>>>,
    ///Error details containing resource resolution failures, if any.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the person who last modified the job.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification made to the job.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub status: Option<MicrosoftGraphProtectionUnitsBulkJobStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDriveRestoreArtifact {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.driveRestoreArtifact".to_string())]
    pub odata_type: String,
    ///The time when restoration of restore artifact is completed.
    #[serde(rename = "completionDateTime")]
    pub completion_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the restoration destination. The possible values are: new, inPlace, unknownFutureValue.
    #[serde(rename = "destinationType")]
    pub destination_type: Option<MicrosoftGraphDestinationType>,
    ///Contains error details if the restore session fails or completes with an error.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the date and time when an artifact is protected by a protectionPolicy and can be restored.
    #[serde(rename = "restorePoint")]
    pub restore_point: Option<MicrosoftGraphRestorePoint>,
    ///The new site identifier if destinationType is new, and the input site ID if the destinationType is inPlace.
    #[serde(rename = "restoredSiteId")]
    pub restored_site_id: Option<String>,
    ///The name of the restored site.
    #[serde(rename = "restoredSiteName")]
    pub restored_site_name: Option<String>,
    ///The web URL of the restored site.
    #[serde(rename = "restoredSiteWebUrl")]
    pub restored_site_web_url: Option<String>,
    ///The time when restoration of restore artifact is started.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The individual restoration status of the restore artifact. The possible values are: added, scheduling, scheduled, inProgress, succeeded, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphArtifactRestoreStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphDriveRestoreArtifactsBulkAdditionRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.driveRestoreArtifactsBulkAdditionRequest".to_string())]
    pub odata_type: String,
    ///The identity of the person who created the bulk request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time when the bulk request was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the restoration destination. The possible values are: new, inPlace, unknownFutureValue.
    #[serde(rename = "destinationType")]
    pub destination_type: Option<MicrosoftGraphDestinationType>,
    ///The list of directory object IDs that are added to the corresponding OneDrive for work or school restore session in a bulk operation.
    #[serde(rename = "directoryObjectIds")]
    pub directory_object_ids: Option<Vec<Option<String>>>,
    ///Name of the addition request.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The list of email addresses that are added to the corresponding OneDrive for work or school restore session in a bulk operation.
    pub drives: Option<Vec<Option<String>>>,
    ///Error details are populated for resource resolution failures.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified this entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp when this entity was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The start and end date and time of the protection period.
    #[serde(rename = "protectionTimePeriod")]
    pub protection_time_period: Option<MicrosoftGraphTimePeriod>,
    ///Indicates which protection units to restore. This property isn't implemented yet. Future value; don't use.
    #[serde(rename = "protectionUnitIds")]
    pub protection_unit_ids: Option<Vec<Option<String>>>,
    ///Indicates which restore point to return. The possible values are: oldest, latest, unknownFutureValue.
    #[serde(rename = "restorePointPreference")]
    pub restore_point_preference: Option<MicrosoftGraphRestorePointPreference>,
    pub status: Option<MicrosoftGraphRestoreArtifactsBulkRequestStatus>,
    ///The type of the restore point. The possible values are: none, fastRestore, unknownFutureValue.
    pub tags: Option<MicrosoftGraphRestorePointTags>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEBookInstallSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.eBookInstallSummary".to_string())]
    pub odata_type: String,
    ///Number of Devices that have failed to install this book.
    #[serde(rename = "failedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_device_count: Option<f64>,
    ///Number of Users that have 1 or more device that failed to install this book.
    #[serde(rename = "failedUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_user_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Number of Devices that have successfully installed this book.
    #[serde(rename = "installedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub installed_device_count: Option<f64>,
    ///Number of Users whose devices have all succeeded to install this book.
    #[serde(rename = "installedUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub installed_user_count: Option<f64>,
    ///Number of Devices that does not have this book installed.
    #[serde(rename = "notInstalledDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_installed_device_count: Option<f64>,
    ///Number of Users that did not install this book.
    #[serde(rename = "notInstalledUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_installed_user_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEdge {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.edge".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A container for Internet Explorer mode resources.
    #[serde(rename = "internetExplorerMode")]
    pub internet_explorer_mode: Option<MicrosoftGraphInternetExplorerMode>,
}
///Possible values to specify which cookies are allowed in Microsoft Edge.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEdgeCookiePolicy {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "allow")]
    Allow,
    #[serde(rename = "blockThirdParty")]
    BlockThirdParty,
    #[serde(rename = "blockAll")]
    BlockAll,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEdgeSearchEngine {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.edgeSearchEngine".to_string())]
    pub odata_type: String,
    ///Allows IT admind to set a predefined default search engine for MDM-Controlled devices
    #[serde(rename = "edgeSearchEngineType")]
    pub edge_search_engine_type: Option<MicrosoftGraphEdgeSearchEngineType>,
}
///Allows IT admins to set a default search engine for MDM-Controlled devices. Users can override this and change their default search engine provided the AllowSearchEngineCustomization policy is not set.
discriminated_enum! {
    pub enum MicrosoftGraphEdgeSearchEngineBase { discriminator : "@odata.type", variants
    : [("#microsoft.graph.edgeSearchEngine", MicrosoftGraphEdgeSearchEngine(Box <
    MicrosoftGraphEdgeSearchEngine >)), ("#microsoft.graph.edgeSearchEngineCustom",
    MicrosoftGraphEdgeSearchEngineCustom(Box < MicrosoftGraphEdgeSearchEngineCustom >))],
    fallback : EdgeSearchEngineBase(Box < MicrosoftGraphEdgeSearchEngineBaseBase >), }
}
///Allows IT admins to set a default search engine for MDM-Controlled devices. Users can override this and change their default search engine provided the AllowSearchEngineCustomization policy is not set.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEdgeSearchEngineBaseBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEdgeSearchEngineCustom {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.edgeSearchEngineCustom".to_string())]
    pub odata_type: String,
    ///Points to a https link containing the OpenSearch xml file that contains, at minimum, the short name and the URL to the search Engine.
    #[serde(rename = "edgeSearchEngineOpenSearchXmlUrl")]
    pub edge_search_engine_open_search_xml_url: Option<String>,
}
///Allows IT admind to set a predefined default search engine for MDM-Controlled devices
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEdgeSearchEngineType {
    #[serde(rename = "default")]
    #[default]
    Default,
    #[serde(rename = "bing")]
    Bing,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEditionUpgradeConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.editionUpgradeConfiguration".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Edition Upgrade License File Content.
    pub license: Option<String>,
    ///Edition Upgrade License type
    #[serde(rename = "licenseType")]
    pub license_type: Option<MicrosoftGraphEditionUpgradeLicenseType>,
    ///Edition Upgrade Product Key.
    #[serde(rename = "productKey")]
    pub product_key: Option<String>,
    ///Windows 10 Edition type.
    #[serde(rename = "targetEdition")]
    pub target_edition: Option<MicrosoftGraphWindows10EditionType>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Edition Upgrade License type
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEditionUpgradeLicenseType {
    #[serde(rename = "productKey")]
    #[default]
    ProductKey,
    #[serde(rename = "licenseFile")]
    LicenseFile,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEducationAddToCalendarOptions {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "studentsAndPublisher")]
    StudentsAndPublisher,
    #[serde(rename = "studentsAndTeamOwners")]
    StudentsAndTeamOwners,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "studentsOnly")]
    StudentsOnly,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEducationAddedStudentAction {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "assignIfOpen")]
    AssignIfOpen,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationAssignment".to_string())]
    pub odata_type: String,
    ///Optional field to control the assignment behavior  for adding assignments to students' and teachers' calendars when the assignment is published. The possible values are: none, studentsAndPublisher, studentsAndTeamOwners, unknownFutureValue, and studentsOnly. Use the Prefer: include-unknown-enum-members request header to get the following values in this evolvable enum: studentsOnly. The default value is none.
    #[serde(rename = "addToCalendarAction")]
    pub add_to_calendar_action: Option<MicrosoftGraphEducationAddToCalendarOptions>,
    ///Optional field to control the assignment behavior for students who are added after the assignment is published. If not specified, defaults to none. Supported values are: none, assignIfOpen. For example, a teacher can use assignIfOpen to indicate that an assignment should be assigned to any new student who joins the class while the assignment is still open, and none to indicate that an assignment shouldn't be assigned to new students.
    #[serde(rename = "addedStudentAction")]
    pub added_student_action: Option<MicrosoftGraphEducationAddedStudentAction>,
    ///Identifies whether students can submit after the due date. If this property isn't specified during create, it defaults to true.
    #[serde(rename = "allowLateSubmissions")]
    pub allow_late_submissions: Option<bool>,
    ///Identifies whether students can add their own resources to a submission or if they can only modify resources added by the teacher.
    #[serde(rename = "allowStudentsToAddResourcesToSubmission")]
    pub allow_students_to_add_resources_to_submission: Option<bool>,
    ///The date when the assignment should become active. If in the future, the assignment isn't shown to the student until this date. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "assignDateTime")]
    pub assign_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Which users, or whole class should receive a submission object once the assignment is published.
    #[serde(rename = "assignTo")]
    pub assign_to: Option<MicrosoftGraphEducationAssignmentRecipient>,
    ///The moment that the assignment was published to students and the assignment shows up on the students timeline. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "assignedDateTime")]
    pub assigned_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///When set, enables users to easily find assignments of a given type. Read-only. Nullable.
    pub categories: Option<Vec<MicrosoftGraphEducationCategory>>,
    ///Class to which this assignment belongs.
    #[serde(rename = "classId")]
    pub class_id: Option<String>,
    ///Date when the assignment is closed for submissions. This is an optional field that can be null if the assignment doesn't allowLateSubmissions or when the closeDateTime is the same as the dueDateTime. But if specified, then the closeDateTime must be greater than or equal to the dueDateTime. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "closeDateTime")]
    pub close_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Who created the assignment.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment when the assignment was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Name of the assignment.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Date when the students assignment is due. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "dueDateTime")]
    pub due_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Folder URL where all the feedback file resources for this assignment are stored.
    #[serde(rename = "feedbackResourcesFolderUrl")]
    pub feedback_resources_folder_url: Option<String>,
    ///How the assignment will be graded.
    pub grading: Option<MicrosoftGraphEducationAssignmentGradeType>,
    ///When set, enables users to weight assignments differently when computing a class average grade.
    #[serde(rename = "gradingCategory")]
    pub grading_category: Option<MicrosoftGraphEducationGradingCategory>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Instructions for the assignment. The instructions and the display name tell the student what to do.
    pub instructions: Option<MicrosoftGraphEducationItemBody>,
    ///Who last modified the assignment.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time on which the assignment was modified. A student submission doesn't modify the assignment; only teachers can update assignments. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The URL of the module from which to access the assignment.
    #[serde(rename = "moduleUrl")]
    pub module_url: Option<String>,
    ///Optional field to specify the URL of the channel to post the assignment publish notification. If not specified or null, defaults to the General channel. This field only applies to assignments where the assignTo value is educationAssignmentClassRecipient. Updating the notificationChannelUrl isn't allowed after the assignment is published.
    #[serde(rename = "notificationChannelUrl")]
    pub notification_channel_url: Option<String>,
    ///Learning objects that are associated with this assignment. Only teachers can modify this list. Nullable.
    pub resources: Option<Vec<MicrosoftGraphEducationAssignmentResource>>,
    ///Folder URL where all the file resources for this assignment are stored.
    #[serde(rename = "resourcesFolderUrl")]
    pub resources_folder_url: Option<String>,
    ///When set, the grading rubric attached to this assignment.
    pub rubric: Option<MicrosoftGraphEducationRubric>,
    ///Status of the assignment.  You can't PATCH this value. Possible values are: draft, scheduled, published, assigned, unknownFutureValue, inactive. Use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: inactive.
    pub status: Option<MicrosoftGraphEducationAssignmentStatus>,
    ///Once published, there's a submission object for each student representing their work and grade. Read-only. Nullable.
    pub submissions: Option<Vec<MicrosoftGraphEducationSubmission>>,
    ///The deep link URL for the given assignment.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignmentClassRecipient {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationAssignmentClassRecipient".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignmentDefaults {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationAssignmentDefaults".to_string())]
    pub odata_type: String,
    ///Optional field to control adding assignments to students' and teachers' calendars when the assignment is published. The possible values are: none, studentsAndPublisher, studentsAndTeamOwners, unknownFutureValue, and studentsOnly. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: studentsOnly. The default value is none.
    #[serde(rename = "addToCalendarAction")]
    pub add_to_calendar_action: Option<MicrosoftGraphEducationAddToCalendarOptions>,
    ///Class-level default behavior for handling students who are added after the assignment is published. Possible values are: none, assignIfOpen.
    #[serde(rename = "addedStudentAction")]
    pub added_student_action: Option<MicrosoftGraphEducationAddedStudentAction>,
    ///Class-level default value for due time field. Default value is 23:59:00.
    #[serde(rename = "dueTime")]
    pub due_time: Option<chrono::NaiveTime>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Default Teams channel to which notifications are sent. Default value is null.
    #[serde(rename = "notificationChannelUrl")]
    pub notification_channel_url: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphEducationAssignmentGrade { discriminator : "@odata.type",
    variants : [("#microsoft.graph.educationAssignmentPointsGrade",
    MicrosoftGraphEducationAssignmentPointsGrade(Box <
    MicrosoftGraphEducationAssignmentPointsGrade >))], fallback :
    EducationAssignmentGrade(Box < MicrosoftGraphEducationAssignmentGradeBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignmentGradeBase {
    ///User who did the grading.
    #[serde(rename = "gradedBy")]
    pub graded_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the grade was applied to this submission object. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "gradedDateTime")]
    pub graded_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
discriminated_enum! {
    pub enum MicrosoftGraphEducationAssignmentGradeType { discriminator : "@odata.type",
    variants : [("#microsoft.graph.educationAssignmentPointsGradeType",
    MicrosoftGraphEducationAssignmentPointsGradeType(Box <
    MicrosoftGraphEducationAssignmentPointsGradeType >))], fallback :
    EducationAssignmentGradeType(Box < MicrosoftGraphEducationAssignmentGradeTypeBase >),
    }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignmentGradeTypeBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignmentGroupRecipient {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationAssignmentGroupRecipient".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignmentIndividualRecipient {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationAssignmentIndividualRecipient".to_string())]
    pub odata_type: String,
    ///A collection of IDs of the recipients.
    pub recipients: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignmentPointsGrade {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationAssignmentPointsGrade".to_string())]
    pub odata_type: String,
    ///User who did the grading.
    #[serde(rename = "gradedBy")]
    pub graded_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the grade was applied to this submission object. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "gradedDateTime")]
    pub graded_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Number of points a teacher is giving this submission object.
    pub points: Option<MicrosoftGraphEducationAssignmentPointsGradePoints>,
}
///Number of points a teacher is giving this submission object.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEducationAssignmentPointsGradePoints {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignmentPointsGradeType {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationAssignmentPointsGradeType".to_string())]
    pub odata_type: String,
    ///Max points possible for this assignment.
    #[serde(rename = "maxPoints")]
    pub max_points: Option<MicrosoftGraphEducationAssignmentPointsGradeTypeMaxPoints>,
}
///Max points possible for this assignment.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEducationAssignmentPointsGradeTypeMaxPoints {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
discriminated_enum! {
    pub enum MicrosoftGraphEducationAssignmentRecipient { discriminator : "@odata.type",
    variants : [("#microsoft.graph.educationAssignmentClassRecipient",
    MicrosoftGraphEducationAssignmentClassRecipient(Box <
    MicrosoftGraphEducationAssignmentClassRecipient >)),
    ("#microsoft.graph.educationAssignmentGroupRecipient",
    MicrosoftGraphEducationAssignmentGroupRecipient(Box <
    MicrosoftGraphEducationAssignmentGroupRecipient >)),
    ("#microsoft.graph.educationAssignmentIndividualRecipient",
    MicrosoftGraphEducationAssignmentIndividualRecipient(Box <
    MicrosoftGraphEducationAssignmentIndividualRecipient >))], fallback :
    EducationAssignmentRecipient(Box < MicrosoftGraphEducationAssignmentRecipientBase >),
    }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignmentRecipientBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignmentResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationAssignmentResource".to_string())]
    pub odata_type: String,
    ///Indicates whether this resource should be copied to each student submission for modification and submission. Required
    #[serde(rename = "distributeForStudentWork")]
    pub distribute_for_student_work: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Resource object that has been associated with this assignment.
    pub resource: Option<MicrosoftGraphEducationResource>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationAssignmentSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationAssignmentSettings".to_string())]
    pub odata_type: String,
    ///When set, enables users to weight assignments differently when computing a class average grade.
    #[serde(rename = "gradingCategories")]
    pub grading_categories: Option<Vec<MicrosoftGraphEducationGradingCategory>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether to show the turn-in celebration animation. If true, indicates to skip the animation. The default value is false.
    #[serde(rename = "submissionAnimationDisabled")]
    pub submission_animation_disabled: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEducationAssignmentStatus {
    #[serde(rename = "draft")]
    #[default]
    Draft,
    #[serde(rename = "published")]
    Published,
    #[serde(rename = "assigned")]
    Assigned,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "inactive")]
    Inactive,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationCategory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationCategory".to_string())]
    pub odata_type: String,
    ///Unique identifier for the category.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationChannelResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationChannelResource".to_string())]
    pub odata_type: String,
    ///The individual who created the resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of resource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///URL of the channel resource.
    pub url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationClass {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationClass".to_string())]
    pub odata_type: String,
    ///All categories associated with this class. Nullable.
    #[serde(rename = "assignmentCategories")]
    pub assignment_categories: Option<Vec<MicrosoftGraphEducationCategory>>,
    ///Specifies class-level defaults respected by new assignments created in the class.
    #[serde(rename = "assignmentDefaults")]
    pub assignment_defaults: Option<MicrosoftGraphEducationAssignmentDefaults>,
    ///Specifies class-level assignments settings.
    #[serde(rename = "assignmentSettings")]
    pub assignment_settings: Option<MicrosoftGraphEducationAssignmentSettings>,
    ///All assignments associated with this class. Nullable.
    pub assignments: Option<Vec<MicrosoftGraphEducationAssignment>>,
    ///Class code used by the school to identify the class.
    #[serde(rename = "classCode")]
    pub class_code: Option<String>,
    pub course: Option<MicrosoftGraphEducationCourse>,
    ///Entity who created the class
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Description of the class.
    pub description: Option<String>,
    ///Name of the class.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///ID of the class from the syncing system.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///Name of the class in the syncing system.
    #[serde(rename = "externalName")]
    pub external_name: Option<String>,
    ///How this class was created. Possible values are: sis, manual.
    #[serde(rename = "externalSource")]
    pub external_source: Option<MicrosoftGraphEducationExternalSource>,
    ///The name of the external source this resource was generated from.
    #[serde(rename = "externalSourceDetail")]
    pub external_source_detail: Option<String>,
    ///Grade level of the class.
    pub grade: Option<String>,
    ///The underlying Microsoft 365 group object.
    pub group: Option<Box<MicrosoftGraphGroup>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Mail name for sending email to all members, if this is enabled.
    #[serde(rename = "mailNickname")]
    pub mail_nickname: Option<String>,
    ///All users in the class. Nullable.
    pub members: Option<Vec<MicrosoftGraphEducationUser>>,
    ///All modules in the class. Nullable.
    pub modules: Option<Vec<MicrosoftGraphEducationModule>>,
    ///All schools that this class is associated with. Nullable.
    pub schools: Option<Vec<MicrosoftGraphEducationSchool>>,
    ///All teachers in the class. Nullable.
    pub teachers: Option<Vec<MicrosoftGraphEducationUser>>,
    ///Term for this class.
    pub term: Option<MicrosoftGraphEducationTerm>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationCourse {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Unique identifier for the course.
    #[serde(rename = "courseNumber")]
    pub course_number: Option<String>,
    ///Description of the course.
    pub description: Option<String>,
    ///Name of the course.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///ID of the course from the syncing system.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///Subject of the course.
    pub subject: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationExcelResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationExcelResource".to_string())]
    pub odata_type: String,
    ///The individual who created the resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of resource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Pointer to the Excel file object.
    #[serde(rename = "fileUrl")]
    pub file_url: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationExternalResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationExternalResource".to_string())]
    pub odata_type: String,
    ///The individual who created the resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of resource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Location of the resource. Required.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEducationExternalSource {
    #[serde(rename = "sis")]
    #[default]
    Sis,
    #[serde(rename = "manual")]
    Manual,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationFeedback {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///User who created the feedback.
    #[serde(rename = "feedbackBy")]
    pub feedback_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the feedback was given. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "feedbackDateTime")]
    pub feedback_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Feedback.
    pub text: Option<MicrosoftGraphEducationItemBody>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationFeedbackOutcome {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationFeedbackOutcome".to_string())]
    pub odata_type: String,
    ///Teacher's written feedback to the student.
    pub feedback: Option<MicrosoftGraphEducationFeedback>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The individual who updated the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The moment in time when the resource was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2021 is 2021-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A copy of the feedback property that is made when the grade is released to the student.
    #[serde(rename = "publishedFeedback")]
    pub published_feedback: Option<MicrosoftGraphEducationFeedback>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationFeedbackResourceOutcome {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationFeedbackResourceOutcome".to_string())]
    pub odata_type: String,
    ///The actual feedback resource.
    #[serde(rename = "feedbackResource")]
    pub feedback_resource: Option<MicrosoftGraphEducationResource>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The individual who updated the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The moment in time when the resource was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2021 is 2021-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The status of the feedback resource. The possible values are: notPublished, pendingPublish, published, failedPublish, unknownFutureValue.
    #[serde(rename = "resourceStatus")]
    pub resource_status: Option<MicrosoftGraphEducationFeedbackResourceOutcomeStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEducationFeedbackResourceOutcomeStatus {
    #[serde(rename = "notPublished")]
    #[default]
    NotPublished,
    #[serde(rename = "pendingPublish")]
    PendingPublish,
    #[serde(rename = "published")]
    Published,
    #[serde(rename = "failedPublish")]
    FailedPublish,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationFileResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationFileResource".to_string())]
    pub odata_type: String,
    ///The individual who created the resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of resource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Location on disk of the file resource.
    #[serde(rename = "fileUrl")]
    pub file_url: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEducationGender {
    #[serde(rename = "female")]
    #[default]
    Female,
    #[serde(rename = "male")]
    Male,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationGradingCategory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationGradingCategory".to_string())]
    pub odata_type: String,
    ///The name of the grading category.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The weight of the category; an integer between 0 and 100.
    #[serde(rename = "percentageWeight")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub percentage_weight: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationItemBody {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub content: Option<String>,
    #[serde(rename = "contentType")]
    pub content_type: Option<MicrosoftGraphBodyType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationLinkResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationLinkResource".to_string())]
    pub odata_type: String,
    ///The individual who created the resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of resource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///URL to the resource.
    pub link: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationLinkedAssignmentResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationLinkedAssignmentResource".to_string())]
    pub odata_type: String,
    ///The individual who created the resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of resource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///URL of the actual assignment.
    pub url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationMediaResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationMediaResource".to_string())]
    pub odata_type: String,
    ///The individual who created the resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of resource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Location of the file on shared point folder. Required
    #[serde(rename = "fileUrl")]
    pub file_url: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationModule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationModule".to_string())]
    pub odata_type: String,
    ///The display name of the user that created the module.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Date time the module was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description of the module.
    pub description: Option<String>,
    ///Name of the module.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the module is pinned or not.
    #[serde(rename = "isPinned")]
    pub is_pinned: Option<bool>,
    ///The last user that modified the module.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Date time the module was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Learning objects that are associated with this module. Only teachers can modify this list. Nullable.
    pub resources: Option<Vec<MicrosoftGraphEducationModuleResource>>,
    ///Folder URL where all the file resources for this module are stored.
    #[serde(rename = "resourcesFolderUrl")]
    pub resources_folder_url: Option<String>,
    ///Status of the module. You can't use a PATCH operation to update this value. Possible values are: draft and published.
    pub status: Option<MicrosoftGraphEducationModuleStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationModuleResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationModuleResource".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Resource object that is with this module.
    pub resource: Option<MicrosoftGraphEducationResource>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEducationModuleStatus {
    #[serde(rename = "draft")]
    #[default]
    Draft,
    #[serde(rename = "published")]
    Published,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationOnPremisesInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Unique identifier for the user object in Active Directory.
    #[serde(rename = "immutableId")]
    pub immutable_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationOrganization {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationOrganization".to_string())]
    pub odata_type: String,
    ///Organization description.
    pub description: Option<String>,
    ///Organization display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Source where this organization was created from. Possible values are: sis, manual.
    #[serde(rename = "externalSource")]
    pub external_source: Option<MicrosoftGraphEducationExternalSource>,
    ///The name of the external source this resource was generated from.
    #[serde(rename = "externalSourceDetail")]
    pub external_source_detail: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationOutcome {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationOutcome".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The individual who updated the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The moment in time when the resource was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2021 is 2021-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationPointsOutcome {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationPointsOutcome".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The individual who updated the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The moment in time when the resource was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2021 is 2021-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The numeric grade the teacher has given the student for this assignment.
    pub points: Option<MicrosoftGraphEducationAssignmentPointsGrade>,
    ///A copy of the points property that is made when the grade is released to the student.
    #[serde(rename = "publishedPoints")]
    pub published_points: Option<MicrosoftGraphEducationAssignmentPointsGrade>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationPowerPointResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationPowerPointResource".to_string())]
    pub odata_type: String,
    ///The individual who created the resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of resource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Location of the file on disk.
    #[serde(rename = "fileUrl")]
    pub file_url: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
discriminated_enum! {
    pub enum MicrosoftGraphEducationResource { discriminator : "@odata.type", variants :
    [("#microsoft.graph.educationChannelResource",
    MicrosoftGraphEducationChannelResource(Box < MicrosoftGraphEducationChannelResource
    >)), ("#microsoft.graph.educationExcelResource",
    MicrosoftGraphEducationExcelResource(Box < MicrosoftGraphEducationExcelResource >)),
    ("#microsoft.graph.educationExternalResource",
    MicrosoftGraphEducationExternalResource(Box < MicrosoftGraphEducationExternalResource
    >)), ("#microsoft.graph.educationFileResource",
    MicrosoftGraphEducationFileResource(Box < MicrosoftGraphEducationFileResource >)),
    ("#microsoft.graph.educationLinkResource", MicrosoftGraphEducationLinkResource(Box <
    MicrosoftGraphEducationLinkResource >)),
    ("#microsoft.graph.educationLinkedAssignmentResource",
    MicrosoftGraphEducationLinkedAssignmentResource(Box <
    MicrosoftGraphEducationLinkedAssignmentResource >)),
    ("#microsoft.graph.educationMediaResource", MicrosoftGraphEducationMediaResource(Box
    < MicrosoftGraphEducationMediaResource >)),
    ("#microsoft.graph.educationPowerPointResource",
    MicrosoftGraphEducationPowerPointResource(Box <
    MicrosoftGraphEducationPowerPointResource >)),
    ("#microsoft.graph.educationTeamsAppResource",
    MicrosoftGraphEducationTeamsAppResource(Box < MicrosoftGraphEducationTeamsAppResource
    >)), ("#microsoft.graph.educationWordResource",
    MicrosoftGraphEducationWordResource(Box < MicrosoftGraphEducationWordResource >))],
    fallback : EducationResource(Box < MicrosoftGraphEducationResourceBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationResourceBase {
    ///The individual who created the resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of resource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationRubric {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationRubric".to_string())]
    pub odata_type: String,
    ///The user who created this resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of this rubric.
    pub description: Option<MicrosoftGraphEducationItemBody>,
    ///The name of this rubric.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The grading type of this rubric. You can use null for a no-points rubric or educationAssignmentPointsGradeType for a points rubric.
    pub grading: Option<MicrosoftGraphEducationAssignmentGradeType>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of levels making up this rubric.
    pub levels: Option<Vec<MicrosoftGraphRubricLevel>>,
    ///The collection of qualities making up this rubric.
    pub qualities: Option<Vec<MicrosoftGraphRubricQuality>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationRubricOutcome {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationRubricOutcome".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The individual who updated the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The moment in time when the resource was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2021 is 2021-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A copy of the rubricQualityFeedback property that is made when the grade is released to the student.
    #[serde(rename = "publishedRubricQualityFeedback")]
    pub published_rubric_quality_feedback: Option<
        Vec<MicrosoftGraphRubricQualityFeedbackModel>,
    >,
    ///A copy of the rubricQualitySelectedLevels property that is made when the grade is released to the student.
    #[serde(rename = "publishedRubricQualitySelectedLevels")]
    pub published_rubric_quality_selected_levels: Option<
        Vec<MicrosoftGraphRubricQualitySelectedColumnModel>,
    >,
    ///A collection of specific feedback for each quality of this rubric.
    #[serde(rename = "rubricQualityFeedback")]
    pub rubric_quality_feedback: Option<Vec<MicrosoftGraphRubricQualityFeedbackModel>>,
    ///The level that the teacher has selected for each quality while grading this assignment.
    #[serde(rename = "rubricQualitySelectedLevels")]
    pub rubric_quality_selected_levels: Option<
        Vec<MicrosoftGraphRubricQualitySelectedColumnModel>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationSchool {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationSchool".to_string())]
    pub odata_type: String,
    ///Address of the school.
    pub address: Option<MicrosoftGraphPhysicalAddress>,
    ///The underlying administrativeUnit for this school.
    #[serde(rename = "administrativeUnit")]
    pub administrative_unit: Option<MicrosoftGraphAdministrativeUnit>,
    ///Classes taught at the school. Nullable.
    pub classes: Option<Vec<MicrosoftGraphEducationClass>>,
    ///Entity who created the school.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Organization description.
    pub description: Option<String>,
    ///Organization display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///ID of school in syncing system.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///ID of principal in syncing system.
    #[serde(rename = "externalPrincipalId")]
    pub external_principal_id: Option<String>,
    ///Source where this organization was created from. Possible values are: sis, manual.
    #[serde(rename = "externalSource")]
    pub external_source: Option<MicrosoftGraphEducationExternalSource>,
    ///The name of the external source this resource was generated from.
    #[serde(rename = "externalSourceDetail")]
    pub external_source_detail: Option<String>,
    pub fax: Option<String>,
    ///Highest grade taught.
    #[serde(rename = "highestGrade")]
    pub highest_grade: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Lowest grade taught.
    #[serde(rename = "lowestGrade")]
    pub lowest_grade: Option<String>,
    ///Phone number of school.
    pub phone: Option<String>,
    ///Email address of the principal.
    #[serde(rename = "principalEmail")]
    pub principal_email: Option<String>,
    ///Name of the principal.
    #[serde(rename = "principalName")]
    pub principal_name: Option<String>,
    ///School Number.
    #[serde(rename = "schoolNumber")]
    pub school_number: Option<String>,
    ///Users in the school. Nullable.
    pub users: Option<Vec<MicrosoftGraphEducationUser>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationStudent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Birth date of the student.
    #[serde(rename = "birthDate")]
    pub birth_date: Option<chrono::NaiveDate>,
    ///ID of the student in the source system.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///The possible values are: female, male, other, unknownFutureValue.
    pub gender: Option<MicrosoftGraphEducationGender>,
    ///Current grade level of the student.
    pub grade: Option<String>,
    ///Year the student is graduating from the school.
    #[serde(rename = "graduationYear")]
    pub graduation_year: Option<String>,
    ///Student Number.
    #[serde(rename = "studentNumber")]
    pub student_number: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationSubmission {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationSubmission".to_string())]
    pub odata_type: String,
    ///The unique identifier for the assignment with which this submission is associated. A submission is always associated with one and only one assignment.
    #[serde(rename = "assignmentId")]
    pub assignment_id: Option<String>,
    ///The user that marked the submission as excused.
    #[serde(rename = "excusedBy")]
    pub excused_by: Option<MicrosoftGraphIdentitySet>,
    ///The time that the submission was excused. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "excusedDateTime")]
    pub excused_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identities of those who modified the submission.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the submission was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub outcomes: Option<Vec<MicrosoftGraphEducationOutcome>>,
    ///User who moved the status of this submission to reassigned.
    #[serde(rename = "reassignedBy")]
    pub reassigned_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the submission was reassigned. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "reassignedDateTime")]
    pub reassigned_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Who this submission is assigned to.
    pub recipient: Option<MicrosoftGraphEducationSubmissionRecipient>,
    pub resources: Option<Vec<MicrosoftGraphEducationSubmissionResource>>,
    ///Folder where all file resources for this submission need to be stored.
    #[serde(rename = "resourcesFolderUrl")]
    pub resources_folder_url: Option<String>,
    ///User who moved the status of this submission to returned.
    #[serde(rename = "returnedBy")]
    pub returned_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the submission was returned. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "returnedDateTime")]
    pub returned_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Read-only. Possible values are: excused, reassigned, returned, submitted and working. Use the Prefer: include-unknown-enum-members request header to get the following values in this evolvable enum: excused and reassigned.
    pub status: Option<MicrosoftGraphEducationSubmissionStatus>,
    ///User who moved the resource into the submitted state.
    #[serde(rename = "submittedBy")]
    pub submitted_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the submission was moved into the submitted state. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "submittedDateTime")]
    pub submitted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "submittedResources")]
    pub submitted_resources: Option<Vec<MicrosoftGraphEducationSubmissionResource>>,
    ///User who moved the resource from submitted into the working state.
    #[serde(rename = "unsubmittedBy")]
    pub unsubmitted_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the submission was moved from submitted into the working state. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "unsubmittedDateTime")]
    pub unsubmitted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The deep link URL for the given submission.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationSubmissionIndividualRecipient {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationSubmissionIndividualRecipient".to_string())]
    pub odata_type: String,
    ///User ID of the user to whom the submission is assigned.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphEducationSubmissionRecipient { discriminator : "@odata.type",
    variants : [("#microsoft.graph.educationSubmissionIndividualRecipient",
    MicrosoftGraphEducationSubmissionIndividualRecipient(Box <
    MicrosoftGraphEducationSubmissionIndividualRecipient >))], fallback :
    EducationSubmissionRecipient(Box < MicrosoftGraphEducationSubmissionRecipientBase >),
    }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationSubmissionRecipientBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationSubmissionResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationSubmissionResource".to_string())]
    pub odata_type: String,
    ///Pointer to the assignment from which the resource was copied, and if null, the student uploaded the resource.
    #[serde(rename = "assignmentResourceUrl")]
    pub assignment_resource_url: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Resource object.
    pub resource: Option<MicrosoftGraphEducationResource>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEducationSubmissionStatus {
    #[serde(rename = "working")]
    #[default]
    Working,
    #[serde(rename = "submitted")]
    Submitted,
    #[serde(rename = "released")]
    Released,
    #[serde(rename = "returned")]
    Returned,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "reassigned")]
    Reassigned,
    #[serde(rename = "excused")]
    Excused,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationTeacher {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///ID of the teacher in the source system.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///Teacher number.
    #[serde(rename = "teacherNumber")]
    pub teacher_number: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationTeamsAppResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationTeamsAppResource".to_string())]
    pub odata_type: String,
    ///URL that points to the icon of the app.
    #[serde(rename = "appIconWebUrl")]
    pub app_icon_web_url: Option<String>,
    ///Teams app ID of the application.
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///The individual who created the resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of resource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///URL for the app resource that will be opened by Teams.
    #[serde(rename = "teamsEmbeddedContentUrl")]
    pub teams_embedded_content_url: Option<String>,
    ///URL for the app resource that can be opened in the browser.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationTerm {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Display name of the term.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///End of the term.
    #[serde(rename = "endDate")]
    pub end_date: Option<chrono::NaiveDate>,
    ///ID of term in the syncing system.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///Start of the term.
    #[serde(rename = "startDate")]
    pub start_date: Option<chrono::NaiveDate>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationUser {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationUser".to_string())]
    pub odata_type: String,
    ///True if the account is enabled; otherwise, false. This property is required when a user is created. Supports $filter.
    #[serde(rename = "accountEnabled")]
    pub account_enabled: Option<bool>,
    ///The licenses that are assigned to the user. Not nullable.
    #[serde(rename = "assignedLicenses")]
    pub assigned_licenses: Option<Vec<MicrosoftGraphAssignedLicense>>,
    ///The plans that are assigned to the user. Read-only. Not nullable.
    #[serde(rename = "assignedPlans")]
    pub assigned_plans: Option<Vec<MicrosoftGraphAssignedPlan>>,
    ///Assignments belonging to the user.
    pub assignments: Option<Vec<MicrosoftGraphEducationAssignment>>,
    ///The telephone numbers for the user. Note: Although this is a string collection, only one number can be set for this property.
    #[serde(rename = "businessPhones")]
    pub business_phones: Option<Vec<String>>,
    ///Classes to which the user belongs. Nullable.
    pub classes: Option<Vec<MicrosoftGraphEducationClass>>,
    ///The entity who created the user.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The name for the department in which the user works. Supports $filter.
    pub department: Option<String>,
    ///The name displayed in the address book for the user. This is usually the combination of the user's first name, middle initial, and last name. This property is required when a user is created and it cannot be cleared during updates. Supports $filter and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Where this user was created from. Possible values are: sis, manual.
    #[serde(rename = "externalSource")]
    pub external_source: Option<MicrosoftGraphEducationExternalSource>,
    ///The name of the external source this resource was generated from.
    #[serde(rename = "externalSourceDetail")]
    pub external_source_detail: Option<String>,
    ///The given name (first name) of the user. Supports $filter.
    #[serde(rename = "givenName")]
    pub given_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The SMTP address for the user, for example, jeff@contoso.com. Read-Only. Supports $filter.
    pub mail: Option<String>,
    ///The mail alias for the user. This property must be specified when a user is created. Supports $filter.
    #[serde(rename = "mailNickname")]
    pub mail_nickname: Option<String>,
    ///The mail address of the user.
    #[serde(rename = "mailingAddress")]
    pub mailing_address: Option<MicrosoftGraphPhysicalAddress>,
    ///The middle name of the user.
    #[serde(rename = "middleName")]
    pub middle_name: Option<String>,
    ///The primary cellular telephone number for the user.
    #[serde(rename = "mobilePhone")]
    pub mobile_phone: Option<String>,
    ///The office location for the user.
    #[serde(rename = "officeLocation")]
    pub office_location: Option<String>,
    ///Additional information used to associate the Microsoft Entra user with its Active Directory counterpart.
    #[serde(rename = "onPremisesInfo")]
    pub on_premises_info: Option<MicrosoftGraphEducationOnPremisesInfo>,
    ///Specifies password policies for the user. This value is an enumeration with one possible value being DisableStrongPassword, which allows weaker passwords than the default policy to be specified. DisablePasswordExpiration can also be specified. The two can be specified together; for example: DisablePasswordExpiration, DisableStrongPassword.
    #[serde(rename = "passwordPolicies")]
    pub password_policies: Option<String>,
    ///Specifies the password profile for the user. The profile contains the user's password. This property is required when a user is created. The password in the profile must satisfy minimum requirements as specified by the passwordPolicies property. By default, a strong password is required.
    #[serde(rename = "passwordProfile")]
    pub password_profile: Option<MicrosoftGraphPasswordProfile>,
    ///The preferred language for the user that should follow the ISO 639-1 code, for example, en-US.
    #[serde(rename = "preferredLanguage")]
    pub preferred_language: Option<String>,
    #[serde(rename = "primaryRole")]
    pub primary_role: Option<MicrosoftGraphEducationUserRole>,
    ///The plans that are provisioned for the user. Read-only. Not nullable.
    #[serde(rename = "provisionedPlans")]
    pub provisioned_plans: Option<Vec<MicrosoftGraphProvisionedPlan>>,
    ///Any refresh tokens or sessions tokens (session cookies) issued before this time are invalid, and applications get an error when using an invalid refresh or sessions token to acquire a delegated access token (to access APIs such as Microsoft Graph).  If this happens, the application needs to acquire a new refresh token by requesting the authorized endpoint. Returned only on $select. Read-only.
    #[serde(rename = "refreshTokensValidFromDateTime")]
    pub refresh_tokens_valid_from_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Related records associated with the user. Read-only.
    #[serde(rename = "relatedContacts")]
    pub related_contacts: Option<Vec<MicrosoftGraphRelatedContact>>,
    ///The address where the user lives.
    #[serde(rename = "residenceAddress")]
    pub residence_address: Option<MicrosoftGraphPhysicalAddress>,
    ///When set, the grading rubric attached to the assignment.
    pub rubrics: Option<Vec<MicrosoftGraphEducationRubric>>,
    ///Schools to which the user belongs. Nullable.
    pub schools: Option<Vec<MicrosoftGraphEducationSchool>>,
    ///True if the Outlook Global Address List should contain this user; otherwise, false. If not set, this will be treated as true. For users invited through the invitation manager, this property will be set to false.
    #[serde(rename = "showInAddressList")]
    pub show_in_address_list: Option<bool>,
    ///If the primary role is student, this block will contain student specific data.
    pub student: Option<MicrosoftGraphEducationStudent>,
    ///The user's surname (family name or last name). Supports $filter.
    pub surname: Option<String>,
    ///Classes for which the user is a teacher.
    #[serde(rename = "taughtClasses")]
    pub taught_classes: Option<Vec<MicrosoftGraphEducationClass>>,
    ///If the primary role is teacher, this block will contain teacher specific data.
    pub teacher: Option<MicrosoftGraphEducationTeacher>,
    ///A two-letter country code (ISO standard 3166). Required for users who will be assigned licenses due to a legal requirement to check for availability of services in countries or regions. Examples include: US, JP, and GB. Not nullable. Supports $filter.
    #[serde(rename = "usageLocation")]
    pub usage_location: Option<String>,
    ///The directory user that corresponds to this user.
    pub user: Option<Box<MicrosoftGraphUser>>,
    ///The user principal name (UPN) of the user. The UPN is an internet-style login name for the user based on the internet standard RFC 822. By convention, this should map to the user's email name. The general format is alias@domain, where domain must be present in the tenant's collection of verified domains. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of the organization. Supports $filter and $orderby.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
    ///A string value that can be used to classify user types in your directory, such as Member and Guest. Supports $filter.
    #[serde(rename = "userType")]
    pub user_type: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEducationUserRole {
    #[serde(rename = "student")]
    #[default]
    Student,
    #[serde(rename = "teacher")]
    Teacher,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEducationWordResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.educationWordResource".to_string())]
    pub odata_type: String,
    ///The individual who created the resource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of resource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Location of the file on disk.
    #[serde(rename = "fileUrl")]
    pub file_url: Option<String>,
    ///The last user to modify the resource.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Moment in time when the resource was last modified.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEligibilityFilteringEnabledEntities {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "swapRequest")]
    SwapRequest,
    #[serde(rename = "offerShiftRequest")]
    OfferShiftRequest,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "timeOffReason")]
    TimeOffReason,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEmailAddress {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The email address of the person or entity.
    pub address: Option<String>,
    ///The display name of the person or entity.
    pub name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEmailAuthenticationMethod {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.emailAuthenticationMethod".to_string())]
    pub odata_type: String,
    ///The email address registered to this user.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEmailAuthenticationMethodConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.emailAuthenticationMethodConfiguration".to_string())]
    pub odata_type: String,
    ///Determines whether email OTP is usable by external users for authentication. Possible values are: default, enabled, disabled, unknownFutureValue. Tenants in the default state who didn't use public preview have email OTP enabled beginning in October 2021.
    #[serde(rename = "allowExternalIdToUseEmailOtp")]
    pub allow_external_id_to_use_email_otp: Option<MicrosoftGraphExternalEmailOtpState>,
    ///Groups of users that are excluded from a policy.
    #[serde(rename = "excludeTargets")]
    pub exclude_targets: Option<Vec<MicrosoftGraphExcludeTarget>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of groups that are enabled to use the authentication method.
    #[serde(rename = "includeTargets")]
    pub include_targets: Option<Vec<MicrosoftGraphAuthenticationMethodTarget>>,
    ///The state of the policy. Possible values are: enabled, disabled.
    pub state: Option<MicrosoftGraphAuthenticationMethodState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEmailFileAssessmentRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.emailFileAssessmentRequest".to_string())]
    pub odata_type: String,
    pub category: Option<MicrosoftGraphThreatCategory>,
    ///Base64 encoded .eml email file content. The file content can't fetch back because it isn't stored.
    #[serde(rename = "contentData")]
    pub content_data: Option<String>,
    ///The content type of threat assessment. Possible values are: mail, url, file.
    #[serde(rename = "contentType")]
    pub content_type: Option<MicrosoftGraphThreatAssessmentContentType>,
    ///The threat assessment request creator.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The reason for mail routed to its destination. Possible values are: none, mailFlowRule, safeSender, blockedSender, advancedSpamFiltering, domainAllowList, domainBlockList, notInAddressBook, firstTimeSender, autoPurgeToInbox, autoPurgeToJunk, autoPurgeToDeleted, outbound, notJunk, junk.
    #[serde(rename = "destinationRoutingReason")]
    pub destination_routing_reason: Option<MicrosoftGraphMailDestinationRoutingReason>,
    #[serde(rename = "expectedAssessment")]
    pub expected_assessment: Option<MicrosoftGraphThreatExpectedAssessment>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The mail recipient whose policies are used to assess the mail.
    #[serde(rename = "recipientEmail")]
    pub recipient_email: Option<String>,
    ///The source of the threat assessment request. Possible values are: administrator.
    #[serde(rename = "requestSource")]
    pub request_source: Option<MicrosoftGraphThreatAssessmentRequestSource>,
    ///A collection of threat assessment results. Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.
    pub results: Option<Vec<MicrosoftGraphThreatAssessmentResult>>,
    ///The assessment process status. Possible values are: pending, completed.
    pub status: Option<MicrosoftGraphThreatAssessmentStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEmailIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.emailIdentity".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Email address of the user.
    pub email: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEmailPayloadDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.emailPayloadDetail".to_string())]
    pub odata_type: String,
    pub coachmarks: Option<Vec<MicrosoftGraphPayloadCoachmark>>,
    ///Payload content details.
    pub content: Option<String>,
    ///Email address of the user.
    #[serde(rename = "fromEmail")]
    pub from_email: Option<String>,
    ///Display name of the user.
    #[serde(rename = "fromName")]
    pub from_name: Option<String>,
    ///Indicates whether the sender isn't from the user's organization.
    #[serde(rename = "isExternalSender")]
    pub is_external_sender: Option<bool>,
    ///The phishing URL used to target a user.
    #[serde(rename = "phishingUrl")]
    pub phishing_url: Option<String>,
    ///The subject of the email address sent to the user.
    pub subject: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEmailRole {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "sender")]
    Sender,
    #[serde(rename = "recipient")]
    Recipient,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEmailSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies the domain that should be used when sending email notifications. This domain must be verified in order to be used. We recommend that you use a domain that has the appropriate DNS records to facilitate email validation, like SPF, DKIM, DMARC, and MX, because this then complies with the RFC compliance for sending and receiving email. For details, see Learn more about Exchange Online Email Routing.
    #[serde(rename = "senderDomain")]
    pub sender_domain: Option<String>,
    ///Specifies if the organization’s banner logo should be included in email notifications. The banner logo will replace the Microsoft logo at the top of the email notification. If true the banner logo will be taken from the tenant’s branding settings. This value can only be set to true if the organizationalBranding bannerLogo property is set.
    #[serde(rename = "useCompanyBranding")]
    pub use_company_branding: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEmergencyCallEvent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.emergencyCallEvent".to_string())]
    pub odata_type: String,
    #[serde(rename = "callEventType")]
    pub call_event_type: Option<MicrosoftGraphCallEventType>,
    #[serde(rename = "callerInfo")]
    pub caller_info: Option<MicrosoftGraphEmergencyCallerInfo>,
    #[serde(rename = "emergencyNumberDialed")]
    pub emergency_number_dialed: Option<String>,
    #[serde(rename = "eventDateTime")]
    pub event_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub participants: Option<Vec<MicrosoftGraphParticipant>>,
    #[serde(rename = "policyName")]
    pub policy_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEmergencyCallerInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    pub location: Option<MicrosoftGraphLocation>,
    #[serde(rename = "phoneNumber")]
    pub phone_number: Option<String>,
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    pub upn: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEmployeeExperienceUser {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.employeeExperienceUser".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "learningCourseActivities")]
    pub learning_course_activities: Option<Vec<MicrosoftGraphLearningCourseActivity>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEmployeeOrgData {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The cost center associated with the user. Returned only on $select. Supports $filter.
    #[serde(rename = "costCenter")]
    pub cost_center: Option<String>,
    ///The name of the division in which the user works. Returned only on $select. Supports $filter.
    pub division: Option<String>,
}
///Possible values of a property
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEnablement {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEndUserNotification {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.endUserNotification".to_string())]
    pub odata_type: String,
    ///Identity of the user who created the notification.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the notification was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description of the notification as defined by the user.
    pub description: Option<String>,
    pub details: Option<Vec<MicrosoftGraphEndUserNotificationDetail>>,
    ///Name of the notification as defined by the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user who last modified the notification.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the notification was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Type of notification. Possible values are: unknown, positiveReinforcement, noTraining, trainingAssignment, trainingReminder, unknownFutureValue.
    #[serde(rename = "notificationType")]
    pub notification_type: Option<MicrosoftGraphEndUserNotificationType>,
    ///The source of the content. Possible values are: unknown, global, tenant, unknownFutureValue.
    pub source: Option<MicrosoftGraphSimulationContentSource>,
    ///The status of the notification. Possible values are: unknown, draft, ready, archive, delete, unknownFutureValue.
    pub status: Option<MicrosoftGraphSimulationContentStatus>,
    ///Supported locales for endUserNotification content.
    #[serde(rename = "supportedLocales")]
    pub supported_locales: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEndUserNotificationDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.endUserNotificationDetail".to_string())]
    pub odata_type: String,
    ///Email HTML content.
    #[serde(rename = "emailContent")]
    pub email_content: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether this language is default.
    #[serde(rename = "isDefaultLangauge")]
    pub is_default_langauge: Option<bool>,
    ///Notification language.
    pub language: Option<String>,
    ///Notification locale.
    pub locale: Option<String>,
    #[serde(rename = "sentFrom")]
    pub sent_from: Option<MicrosoftGraphEmailIdentity>,
    ///Mail subject.
    pub subject: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEndUserNotificationPreference {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "microsoft")]
    Microsoft,
    #[serde(rename = "custom")]
    Custom,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
discriminated_enum! {
    pub enum MicrosoftGraphEndUserNotificationSetting { discriminator : "@odata.type",
    variants : [("#microsoft.graph.noTrainingNotificationSetting",
    MicrosoftGraphNoTrainingNotificationSetting(Box <
    MicrosoftGraphNoTrainingNotificationSetting >)),
    ("#microsoft.graph.trainingNotificationSetting",
    MicrosoftGraphTrainingNotificationSetting(Box <
    MicrosoftGraphTrainingNotificationSetting >))], fallback :
    EndUserNotificationSetting(Box < MicrosoftGraphEndUserNotificationSettingBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEndUserNotificationSettingBase {
    ///Notification preference. Possible values are: unknown, microsoft, custom, unknownFutureValue.
    #[serde(rename = "notificationPreference")]
    pub notification_preference: Option<MicrosoftGraphEndUserNotificationPreference>,
    ///Positive reinforcement detail.
    #[serde(rename = "positiveReinforcement")]
    pub positive_reinforcement: Option<MicrosoftGraphPositiveReinforcementNotification>,
    ///End user notification type. Possible values are: unknown, noTraining, trainingSelected, noNotification, unknownFutureValue.
    #[serde(rename = "settingType")]
    pub setting_type: Option<MicrosoftGraphEndUserNotificationSettingType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEndUserNotificationSettingType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "noTraining")]
    NoTraining,
    #[serde(rename = "trainingSelected")]
    TrainingSelected,
    #[serde(rename = "noNotification")]
    NoNotification,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEndUserNotificationType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "positiveReinforcement")]
    PositiveReinforcement,
    #[serde(rename = "noTraining")]
    NoTraining,
    #[serde(rename = "trainingAssignment")]
    TrainingAssignment,
    #[serde(rename = "trainingReminder")]
    TrainingReminder,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEndpoint {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.endpoint".to_string())]
    pub odata_type: String,
    pub capability: Option<String>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "providerId")]
    pub provider_id: Option<String>,
    #[serde(rename = "providerName")]
    pub provider_name: Option<String>,
    #[serde(rename = "providerResourceId")]
    pub provider_resource_id: Option<String>,
    pub uri: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEndpointType {
    #[serde(rename = "default")]
    #[default]
    Default,
    #[serde(rename = "voicemail")]
    Voicemail,
    #[serde(rename = "skypeForBusiness")]
    SkypeForBusiness,
    #[serde(rename = "skypeForBusinessVoipPhone")]
    SkypeForBusinessVoipPhone,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEngagementAsyncOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.engagementAsyncOperation".to_string())]
    pub odata_type: String,
    ///The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The time of the last action in the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The type of the long-running operation. The possible values are: createCommunity, unknownFutureValue.
    #[serde(rename = "operationType")]
    pub operation_type: Option<MicrosoftGraphEngagementAsyncOperationType>,
    ///The ID of the object created or modified as a result of this async operation.
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
    ///URI of the resource that the operation is performed on.
    #[serde(rename = "resourceLocation")]
    pub resource_location: Option<String>,
    ///The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphLongRunningOperationStatus>,
    ///Details about the status of the operation.
    #[serde(rename = "statusDetail")]
    pub status_detail: Option<String>,
}
///Types of engagementAsyncOperationType. Members will be added here as more async operations are supported.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEngagementAsyncOperationType {
    #[serde(rename = "createCommunity")]
    #[default]
    CreateCommunity,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEnrollmentConfigurationAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.enrollmentConfigurationAssignment".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents an assignment to managed devices in the tenant
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEnrollmentState {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "enrolled")]
    Enrolled,
    #[serde(rename = "pendingReset")]
    PendingReset,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "notContacted")]
    NotContacted,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEnrollmentTroubleshootingEvent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.enrollmentTroubleshootingEvent".to_string())]
    pub odata_type: String,
    ///Id used for tracing the failure in the service.
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<String>,
    ///Azure AD device identifier.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///Possible ways of adding a mobile device to management.
    #[serde(rename = "enrollmentType")]
    pub enrollment_type: Option<MicrosoftGraphDeviceEnrollmentType>,
    ///Time when the event occurred .
    #[serde(rename = "eventDateTime")]
    pub event_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Top level failure categories for enrollment.
    #[serde(rename = "failureCategory")]
    pub failure_category: Option<MicrosoftGraphDeviceEnrollmentFailureReason>,
    ///Detailed failure reason.
    #[serde(rename = "failureReason")]
    pub failure_reason: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Device identifier created or collected by Intune.
    #[serde(rename = "managedDeviceIdentifier")]
    pub managed_device_identifier: Option<String>,
    ///Operating System.
    #[serde(rename = "operatingSystem")]
    pub operating_system: Option<String>,
    ///OS Version.
    #[serde(rename = "osVersion")]
    pub os_version: Option<String>,
    ///Identifier for the user that tried to enroll the device.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEnterpriseCodeSigningCertificate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.enterpriseCodeSigningCertificate".to_string())]
    pub odata_type: String,
    ///The Windows Enterprise Code-Signing Certificate in the raw data format. Set to null once certificate has been uploaded and other properties have been populated.
    pub content: Option<String>,
    ///The cert expiration date and time (using ISO 8601 format, in UTC time). Uploading a valid cert file through the Intune admin console will automatically populate this value in the HTTP response. Supports: $filter, $select, $top, $OrderBy, $skip. $Search is not supported.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The issuer value for the cert. This might contain information such as country (C), state or province (S), locality (L), common name of the cert (CN), organization (O), and organizational unit (OU). Uploading a valid cert file through the Intune admin console will automatically populate this value in the HTTP response. Supports: $filter, $select, $top, $OrderBy, $skip. $Search is not supported.
    pub issuer: Option<String>,
    ///The issuer name for the cert. This might contain information such as country (C), state or province (S), locality (L), common name of the cert (CN), organization (O), and organizational unit (OU). Uploading a valid cert file through the Intune admin console will automatically populate this value in the HTTP response. Supports: $filter, $select, $top, $OrderBy, $skip. $Search is not supported.
    #[serde(rename = "issuerName")]
    pub issuer_name: Option<String>,
    pub status: Option<MicrosoftGraphCertificateStatus>,
    ///The subject value for the cert. This might contain information such as country (C), state or province (S), locality (L), common name of the cert (CN), organization (O), and organizational unit (OU). Uploading a valid cert file through the Intune admin console will automatically populate this value in the HTTP response. Supports: $filter, $select, $top, $OrderBy, $skip. $Search is not supported.
    pub subject: Option<String>,
    ///The subject name for the cert. This might contain information such as country (C), state or province (S), locality (L), common name of the cert (CN), organization (O), and organizational unit (OU). Uploading a valid cert file through the Intune admin console will automatically populate this value in the HTTP response. Supports: $filter, $select, $top, $OrderBy, $skip. $Search is not supported.
    #[serde(rename = "subjectName")]
    pub subject_name: Option<String>,
    ///The date time of CodeSigning Cert when it is uploaded (using ISO 8601 format, in UTC time). Uploading a valid cert file through the Intune admin console will automatically populate this value in the HTTP response. Supports: $filter, $select, $top, $OrderBy, $skip. $Search is not supported.
    #[serde(rename = "uploadDateTime")]
    pub upload_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEntitlementManagement {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.entitlementManagement".to_string())]
    pub odata_type: String,
    ///Approval stages for decisions associated with access package assignment requests.
    #[serde(rename = "accessPackageAssignmentApprovals")]
    pub access_package_assignment_approvals: Option<Vec<MicrosoftGraphApproval>>,
    ///Access packages define the collection of resource roles and the policies for which subjects can request or be assigned access to those resources.
    #[serde(rename = "accessPackages")]
    pub access_packages: Option<Vec<MicrosoftGraphAccessPackage>>,
    ///Access package assignment policies govern which subjects can request or be assigned an access package via an access package assignment.
    #[serde(rename = "assignmentPolicies")]
    pub assignment_policies: Option<Vec<MicrosoftGraphAccessPackageAssignmentPolicy>>,
    ///Access package assignment requests created by or on behalf of a subject.
    #[serde(rename = "assignmentRequests")]
    pub assignment_requests: Option<Vec<MicrosoftGraphAccessPackageAssignmentRequest>>,
    ///The assignment of an access package to a subject for a period of time.
    pub assignments: Option<Vec<MicrosoftGraphAccessPackageAssignment>>,
    ///A container for access packages.
    pub catalogs: Option<Vec<MicrosoftGraphAccessPackageCatalog>>,
    ///References to a directory or domain of another organization whose users can request access.
    #[serde(rename = "connectedOrganizations")]
    pub connected_organizations: Option<Vec<MicrosoftGraphConnectedOrganization>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A reference to the geolocation environments in which a resource is located.
    #[serde(rename = "resourceEnvironments")]
    pub resource_environments: Option<
        Vec<MicrosoftGraphAccessPackageResourceEnvironment>,
    >,
    ///Represents a request to add or remove a resource to or from a catalog respectively.
    #[serde(rename = "resourceRequests")]
    pub resource_requests: Option<Vec<MicrosoftGraphAccessPackageResourceRequest>>,
    #[serde(rename = "resourceRoleScopes")]
    pub resource_role_scopes: Option<Vec<MicrosoftGraphAccessPackageResourceRoleScope>>,
    ///The resources associated with the catalogs.
    pub resources: Option<Vec<MicrosoftGraphAccessPackageResource>>,
    ///The settings that control the behavior of Microsoft Entra entitlement management.
    pub settings: Option<MicrosoftGraphEntitlementManagementSettings>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEntitlementManagementSchedule {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///When the access should expire.
    pub expiration: Option<MicrosoftGraphExpirationPattern>,
    ///The recurring access review pattern. Not used in access requests.
    pub recurrence: Option<MicrosoftGraphPatternedRecurrence>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEntitlementManagementSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.entitlementManagementSettings".to_string())]
    pub odata_type: String,
    ///If externalUserLifecycleAction is blockSignInAndDelete, the duration, typically many days, after an external user is blocked from sign in before their account is deleted.
    #[serde(rename = "durationUntilExternalUserDeletedAfterBlocked")]
    pub duration_until_external_user_deleted_after_blocked: Option<String>,
    ///Automatic action that the service should take when an external user's last access package assignment is removed. The possible values are: none, blockSignIn, blockSignInAndDelete, unknownFutureValue.
    #[serde(rename = "externalUserLifecycleAction")]
    pub external_user_lifecycle_action: Option<
        MicrosoftGraphAccessPackageExternalUserLifecycleAction,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphEntity { discriminator : "@odata.type", variants :
    [("#microsoft.graph.activityBasedTimeoutPolicy",
    MicrosoftGraphActivityBasedTimeoutPolicy(Box <
    MicrosoftGraphActivityBasedTimeoutPolicy >)),
    ("#microsoft.graph.androidManagedAppProtection",
    MicrosoftGraphAndroidManagedAppProtection(Box <
    MicrosoftGraphAndroidManagedAppProtection >)),
    ("#microsoft.graph.claimsMappingPolicy", MicrosoftGraphClaimsMappingPolicy(Box <
    MicrosoftGraphClaimsMappingPolicy >)), ("#microsoft.graph.eventMessageRequest",
    MicrosoftGraphEventMessageRequest(Box < MicrosoftGraphEventMessageRequest >)),
    ("#microsoft.graph.eventMessageResponse", MicrosoftGraphEventMessageResponse(Box <
    MicrosoftGraphEventMessageResponse >)), ("#microsoft.graph.homeRealmDiscoveryPolicy",
    MicrosoftGraphHomeRealmDiscoveryPolicy(Box < MicrosoftGraphHomeRealmDiscoveryPolicy
    >)), ("#microsoft.graph.iosManagedAppProtection",
    MicrosoftGraphIosManagedAppProtection(Box < MicrosoftGraphIosManagedAppProtection
    >)), ("#microsoft.graph.managedAndroidLobApp", MicrosoftGraphManagedAndroidLobApp(Box
    < MicrosoftGraphManagedAndroidLobApp >)), ("#microsoft.graph.managedIOSLobApp",
    MicrosoftGraphManagedIoslobApp(Box < MicrosoftGraphManagedIoslobApp >)),
    ("#microsoft.graph.notebook", MicrosoftGraphNotebook(Box < MicrosoftGraphNotebook
    >)), ("#microsoft.graph.onenoteSection", MicrosoftGraphOnenoteSection(Box <
    MicrosoftGraphOnenoteSection >)), ("#microsoft.graph.sectionGroup",
    MicrosoftGraphSectionGroup(Box < MicrosoftGraphSectionGroup >)),
    ("#microsoft.graph.swapShiftsChangeRequest",
    MicrosoftGraphSwapShiftsChangeRequest(Box < MicrosoftGraphSwapShiftsChangeRequest
    >)), ("#microsoft.graph.tokenIssuancePolicy", MicrosoftGraphTokenIssuancePolicy(Box <
    MicrosoftGraphTokenIssuancePolicy >)), ("#microsoft.graph.tokenLifetimePolicy",
    MicrosoftGraphTokenLifetimePolicy(Box < MicrosoftGraphTokenLifetimePolicy >)),
    ("#microsoft.graph.androidLobApp", MicrosoftGraphAndroidLobApp(Box <
    MicrosoftGraphAndroidLobApp >)), ("#microsoft.graph.appManagementPolicy",
    MicrosoftGraphAppManagementPolicy(Box < MicrosoftGraphAppManagementPolicy >)),
    ("#microsoft.graph.authorizationPolicy", MicrosoftGraphAuthorizationPolicy(Box <
    MicrosoftGraphAuthorizationPolicy >)), ("#microsoft.graph.calendarSharingMessage",
    MicrosoftGraphCalendarSharingMessage(Box < MicrosoftGraphCalendarSharingMessage >)),
    ("#microsoft.graph.crossTenantAccessPolicy",
    MicrosoftGraphCrossTenantAccessPolicy(Box < MicrosoftGraphCrossTenantAccessPolicy
    >)), ("#microsoft.graph.defaultManagedAppProtection",
    MicrosoftGraphDefaultManagedAppProtection(Box <
    MicrosoftGraphDefaultManagedAppProtection >)),
    ("#microsoft.graph.documentSetVersion", MicrosoftGraphDocumentSetVersion(Box <
    MicrosoftGraphDocumentSetVersion >)), ("#microsoft.graph.eventMessage",
    MicrosoftGraphEventMessage(Box < MicrosoftGraphEventMessage >)),
    ("#microsoft.graph.granularMailboxRestoreArtifact",
    MicrosoftGraphGranularMailboxRestoreArtifact(Box <
    MicrosoftGraphGranularMailboxRestoreArtifact >)),
    ("#microsoft.graph.identitySecurityDefaultsEnforcementPolicy",
    MicrosoftGraphIdentitySecurityDefaultsEnforcementPolicy(Box <
    MicrosoftGraphIdentitySecurityDefaultsEnforcementPolicy >)),
    ("#microsoft.graph.internalDomainFederation",
    MicrosoftGraphInternalDomainFederation(Box < MicrosoftGraphInternalDomainFederation
    >)), ("#microsoft.graph.iosDeviceFeaturesConfiguration",
    MicrosoftGraphIosDeviceFeaturesConfiguration(Box <
    MicrosoftGraphIosDeviceFeaturesConfiguration >)), ("#microsoft.graph.iosLobApp",
    MicrosoftGraphIosLobApp(Box < MicrosoftGraphIosLobApp >)),
    ("#microsoft.graph.macOSDeviceFeaturesConfiguration",
    MicrosoftGraphMacOsdeviceFeaturesConfiguration(Box <
    MicrosoftGraphMacOsdeviceFeaturesConfiguration >)), ("#microsoft.graph.macOSDmgApp",
    MicrosoftGraphMacOsdmgApp(Box < MicrosoftGraphMacOsdmgApp >)),
    ("#microsoft.graph.macOSLobApp", MicrosoftGraphMacOslobApp(Box <
    MicrosoftGraphMacOslobApp >)), ("#microsoft.graph.managedAndroidStoreApp",
    MicrosoftGraphManagedAndroidStoreApp(Box < MicrosoftGraphManagedAndroidStoreApp >)),
    ("#microsoft.graph.managedIOSStoreApp", MicrosoftGraphManagedIosstoreApp(Box <
    MicrosoftGraphManagedIosstoreApp >)), ("#microsoft.graph.managedMobileLobApp",
    MicrosoftGraphManagedMobileLobApp(Box < MicrosoftGraphManagedMobileLobApp >)),
    ("#microsoft.graph.mdmWindowsInformationProtectionPolicy",
    MicrosoftGraphMdmWindowsInformationProtectionPolicy(Box <
    MicrosoftGraphMdmWindowsInformationProtectionPolicy >)),
    ("#microsoft.graph.offerShiftRequest", MicrosoftGraphOfferShiftRequest(Box <
    MicrosoftGraphOfferShiftRequest >)),
    ("#microsoft.graph.onAttributeCollectionStartCustomExtension",
    MicrosoftGraphOnAttributeCollectionStartCustomExtension(Box <
    MicrosoftGraphOnAttributeCollectionStartCustomExtension >)),
    ("#microsoft.graph.onAttributeCollectionSubmitCustomExtension",
    MicrosoftGraphOnAttributeCollectionSubmitCustomExtension(Box <
    MicrosoftGraphOnAttributeCollectionSubmitCustomExtension >)),
    ("#microsoft.graph.onOtpSendCustomExtension",
    MicrosoftGraphOnOtpSendCustomExtension(Box < MicrosoftGraphOnOtpSendCustomExtension
    >)), ("#microsoft.graph.onTokenIssuanceStartCustomExtension",
    MicrosoftGraphOnTokenIssuanceStartCustomExtension(Box <
    MicrosoftGraphOnTokenIssuanceStartCustomExtension >)),
    ("#microsoft.graph.onenoteEntityHierarchyModel",
    MicrosoftGraphOnenoteEntityHierarchyModel(Box <
    MicrosoftGraphOnenoteEntityHierarchyModel >)), ("#microsoft.graph.onenotePage",
    MicrosoftGraphOnenotePage(Box < MicrosoftGraphOnenotePage >)),
    ("#microsoft.graph.openShiftChangeRequest", MicrosoftGraphOpenShiftChangeRequest(Box
    < MicrosoftGraphOpenShiftChangeRequest >)),
    ("#microsoft.graph.permissionGrantPolicy", MicrosoftGraphPermissionGrantPolicy(Box <
    MicrosoftGraphPermissionGrantPolicy >)),
    ("#microsoft.graph.privilegedAccessGroupAssignmentScheduleRequest",
    MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest(Box <
    MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest >)),
    ("#microsoft.graph.privilegedAccessGroupEligibilityScheduleRequest",
    MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest(Box <
    MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest >)),
    ("#microsoft.graph.samlOrWsFedExternalDomainFederation",
    MicrosoftGraphSamlOrWsFedExternalDomainFederation(Box <
    MicrosoftGraphSamlOrWsFedExternalDomainFederation >)),
    ("#microsoft.graph.security.hostname", MicrosoftGraphSecurityHostname(Box <
    MicrosoftGraphSecurityHostname >)), ("#microsoft.graph.security.ipAddress",
    MicrosoftGraphSecurityIpAddress(Box < MicrosoftGraphSecurityIpAddress >)),
    ("#microsoft.graph.sitePage", MicrosoftGraphSitePage(Box < MicrosoftGraphSitePage
    >)), ("#microsoft.graph.stsPolicy", MicrosoftGraphStsPolicy(Box <
    MicrosoftGraphStsPolicy >)), ("#microsoft.graph.targetedManagedAppConfiguration",
    MicrosoftGraphTargetedManagedAppConfiguration(Box <
    MicrosoftGraphTargetedManagedAppConfiguration >)),
    ("#microsoft.graph.targetedManagedAppProtection",
    MicrosoftGraphTargetedManagedAppProtection(Box <
    MicrosoftGraphTargetedManagedAppProtection >)),
    ("#microsoft.graph.tenantAppManagementPolicy",
    MicrosoftGraphTenantAppManagementPolicy(Box < MicrosoftGraphTenantAppManagementPolicy
    >)), ("#microsoft.graph.timeOffRequest", MicrosoftGraphTimeOffRequest(Box <
    MicrosoftGraphTimeOffRequest >)), ("#microsoft.graph.win32LobApp",
    MicrosoftGraphWin32LobApp(Box < MicrosoftGraphWin32LobApp >)),
    ("#microsoft.graph.windowsAppX", MicrosoftGraphWindowsAppX(Box <
    MicrosoftGraphWindowsAppX >)),
    ("#microsoft.graph.windowsInformationProtectionPolicy",
    MicrosoftGraphWindowsInformationProtectionPolicy(Box <
    MicrosoftGraphWindowsInformationProtectionPolicy >)),
    ("#microsoft.graph.windowsMobileMSI", MicrosoftGraphWindowsMobileMsi(Box <
    MicrosoftGraphWindowsMobileMsi >)), ("#microsoft.graph.windowsUniversalAppX",
    MicrosoftGraphWindowsUniversalAppX(Box < MicrosoftGraphWindowsUniversalAppX >)),
    ("#microsoft.graph.aadUserConversationMember",
    MicrosoftGraphAadUserConversationMember(Box < MicrosoftGraphAadUserConversationMember
    >)), ("#microsoft.graph.accessPackageAssignmentRequestWorkflowExtension",
    MicrosoftGraphAccessPackageAssignmentRequestWorkflowExtension(Box <
    MicrosoftGraphAccessPackageAssignmentRequestWorkflowExtension >)),
    ("#microsoft.graph.accessPackageAssignmentWorkflowExtension",
    MicrosoftGraphAccessPackageAssignmentWorkflowExtension(Box <
    MicrosoftGraphAccessPackageAssignmentWorkflowExtension >)),
    ("#microsoft.graph.accessPackageMultipleChoiceQuestion",
    MicrosoftGraphAccessPackageMultipleChoiceQuestion(Box <
    MicrosoftGraphAccessPackageMultipleChoiceQuestion >)),
    ("#microsoft.graph.accessPackageTextInputQuestion",
    MicrosoftGraphAccessPackageTextInputQuestion(Box <
    MicrosoftGraphAccessPackageTextInputQuestion >)),
    ("#microsoft.graph.addLargeGalleryViewOperation",
    MicrosoftGraphAddLargeGalleryViewOperation(Box <
    MicrosoftGraphAddLargeGalleryViewOperation >)),
    ("#microsoft.graph.administrativeUnit", MicrosoftGraphAdministrativeUnit(Box <
    MicrosoftGraphAdministrativeUnit >)), ("#microsoft.graph.agreementFile",
    MicrosoftGraphAgreementFile(Box < MicrosoftGraphAgreementFile >)),
    ("#microsoft.graph.agreementFileLocalization",
    MicrosoftGraphAgreementFileLocalization(Box < MicrosoftGraphAgreementFileLocalization
    >)), ("#microsoft.graph.agreementFileVersion", MicrosoftGraphAgreementFileVersion(Box
    < MicrosoftGraphAgreementFileVersion >)),
    ("#microsoft.graph.androidCompliancePolicy",
    MicrosoftGraphAndroidCompliancePolicy(Box < MicrosoftGraphAndroidCompliancePolicy
    >)), ("#microsoft.graph.androidCustomConfiguration",
    MicrosoftGraphAndroidCustomConfiguration(Box <
    MicrosoftGraphAndroidCustomConfiguration >)),
    ("#microsoft.graph.androidGeneralDeviceConfiguration",
    MicrosoftGraphAndroidGeneralDeviceConfiguration(Box <
    MicrosoftGraphAndroidGeneralDeviceConfiguration >)),
    ("#microsoft.graph.androidManagedAppRegistration",
    MicrosoftGraphAndroidManagedAppRegistration(Box <
    MicrosoftGraphAndroidManagedAppRegistration >)), ("#microsoft.graph.androidStoreApp",
    MicrosoftGraphAndroidStoreApp(Box < MicrosoftGraphAndroidStoreApp >)),
    ("#microsoft.graph.androidWorkProfileCompliancePolicy",
    MicrosoftGraphAndroidWorkProfileCompliancePolicy(Box <
    MicrosoftGraphAndroidWorkProfileCompliancePolicy >)),
    ("#microsoft.graph.androidWorkProfileCustomConfiguration",
    MicrosoftGraphAndroidWorkProfileCustomConfiguration(Box <
    MicrosoftGraphAndroidWorkProfileCustomConfiguration >)),
    ("#microsoft.graph.androidWorkProfileGeneralDeviceConfiguration",
    MicrosoftGraphAndroidWorkProfileGeneralDeviceConfiguration(Box <
    MicrosoftGraphAndroidWorkProfileGeneralDeviceConfiguration >)),
    ("#microsoft.graph.anonymousGuestConversationMember",
    MicrosoftGraphAnonymousGuestConversationMember(Box <
    MicrosoftGraphAnonymousGuestConversationMember >)),
    ("#microsoft.graph.appRoleAssignment", MicrosoftGraphAppRoleAssignment(Box <
    MicrosoftGraphAppRoleAssignment >)),
    ("#microsoft.graph.appleDeviceFeaturesConfigurationBase",
    MicrosoftGraphAppleDeviceFeaturesConfigurationBase(Box <
    MicrosoftGraphAppleDeviceFeaturesConfigurationBase >)),
    ("#microsoft.graph.appleManagedIdentityProvider",
    MicrosoftGraphAppleManagedIdentityProvider(Box <
    MicrosoftGraphAppleManagedIdentityProvider >)), ("#microsoft.graph.application",
    MicrosoftGraphApplication(Box < MicrosoftGraphApplication >)),
    ("#microsoft.graph.associatedTeamInfo", MicrosoftGraphAssociatedTeamInfo(Box <
    MicrosoftGraphAssociatedTeamInfo >)), ("#microsoft.graph.attackSimulationOperation",
    MicrosoftGraphAttackSimulationOperation(Box < MicrosoftGraphAttackSimulationOperation
    >)), ("#microsoft.graph.azureCommunicationServicesUserConversationMember",
    MicrosoftGraphAzureCommunicationServicesUserConversationMember(Box <
    MicrosoftGraphAzureCommunicationServicesUserConversationMember >)),
    ("#microsoft.graph.b2xIdentityUserFlow", MicrosoftGraphB2xIdentityUserFlow(Box <
    MicrosoftGraphB2xIdentityUserFlow >)), ("#microsoft.graph.baseSitePage",
    MicrosoftGraphBaseSitePage(Box < MicrosoftGraphBaseSitePage >)),
    ("#microsoft.graph.bookingCustomer", MicrosoftGraphBookingCustomer(Box <
    MicrosoftGraphBookingCustomer >)), ("#microsoft.graph.bookingStaffMember",
    MicrosoftGraphBookingStaffMember(Box < MicrosoftGraphBookingStaffMember >)),
    ("#microsoft.graph.builtInIdentityProvider",
    MicrosoftGraphBuiltInIdentityProvider(Box < MicrosoftGraphBuiltInIdentityProvider
    >)), ("#microsoft.graph.callRecords.organizer",
    MicrosoftGraphCallRecordsOrganizer(Box < MicrosoftGraphCallRecordsOrganizer >)),
    ("#microsoft.graph.callRecords.participant", MicrosoftGraphCallRecordsParticipant(Box
    < MicrosoftGraphCallRecordsParticipant >)),
    ("#microsoft.graph.cancelMediaProcessingOperation",
    MicrosoftGraphCancelMediaProcessingOperation(Box <
    MicrosoftGraphCancelMediaProcessingOperation >)),
    ("#microsoft.graph.certificateAuthorityDetail",
    MicrosoftGraphCertificateAuthorityDetail(Box <
    MicrosoftGraphCertificateAuthorityDetail >)),
    ("#microsoft.graph.certificateBasedAuthPki",
    MicrosoftGraphCertificateBasedAuthPki(Box < MicrosoftGraphCertificateBasedAuthPki
    >)), ("#microsoft.graph.chatMessageHostedContent",
    MicrosoftGraphChatMessageHostedContent(Box < MicrosoftGraphChatMessageHostedContent
    >)), ("#microsoft.graph.contact", MicrosoftGraphContact(Box < MicrosoftGraphContact
    >)), ("#microsoft.graph.contract", MicrosoftGraphContract(Box <
    MicrosoftGraphContract >)), ("#microsoft.graph.countryNamedLocation",
    MicrosoftGraphCountryNamedLocation(Box < MicrosoftGraphCountryNamedLocation >)),
    ("#microsoft.graph.customAuthenticationExtension",
    MicrosoftGraphCustomAuthenticationExtension(Box <
    MicrosoftGraphCustomAuthenticationExtension >)), ("#microsoft.graph.dayNote",
    MicrosoftGraphDayNote(Box < MicrosoftGraphDayNote >)), ("#microsoft.graph.device",
    MicrosoftGraphDevice(Box < MicrosoftGraphDevice >)),
    ("#microsoft.graph.deviceAndAppManagementRoleAssignment",
    MicrosoftGraphDeviceAndAppManagementRoleAssignment(Box <
    MicrosoftGraphDeviceAndAppManagementRoleAssignment >)),
    ("#microsoft.graph.deviceAndAppManagementRoleDefinition",
    MicrosoftGraphDeviceAndAppManagementRoleDefinition(Box <
    MicrosoftGraphDeviceAndAppManagementRoleDefinition >)),
    ("#microsoft.graph.deviceEnrollmentLimitConfiguration",
    MicrosoftGraphDeviceEnrollmentLimitConfiguration(Box <
    MicrosoftGraphDeviceEnrollmentLimitConfiguration >)),
    ("#microsoft.graph.deviceEnrollmentPlatformRestrictionsConfiguration",
    MicrosoftGraphDeviceEnrollmentPlatformRestrictionsConfiguration(Box <
    MicrosoftGraphDeviceEnrollmentPlatformRestrictionsConfiguration >)),
    ("#microsoft.graph.deviceEnrollmentWindowsHelloForBusinessConfiguration",
    MicrosoftGraphDeviceEnrollmentWindowsHelloForBusinessConfiguration(Box <
    MicrosoftGraphDeviceEnrollmentWindowsHelloForBusinessConfiguration >)),
    ("#microsoft.graph.directoryObjectPartnerReference",
    MicrosoftGraphDirectoryObjectPartnerReference(Box <
    MicrosoftGraphDirectoryObjectPartnerReference >)), ("#microsoft.graph.directoryRole",
    MicrosoftGraphDirectoryRole(Box < MicrosoftGraphDirectoryRole >)),
    ("#microsoft.graph.directoryRoleTemplate", MicrosoftGraphDirectoryRoleTemplate(Box <
    MicrosoftGraphDirectoryRoleTemplate >)), ("#microsoft.graph.domainDnsCnameRecord",
    MicrosoftGraphDomainDnsCnameRecord(Box < MicrosoftGraphDomainDnsCnameRecord >)),
    ("#microsoft.graph.domainDnsMxRecord", MicrosoftGraphDomainDnsMxRecord(Box <
    MicrosoftGraphDomainDnsMxRecord >)), ("#microsoft.graph.domainDnsSrvRecord",
    MicrosoftGraphDomainDnsSrvRecord(Box < MicrosoftGraphDomainDnsSrvRecord >)),
    ("#microsoft.graph.domainDnsTxtRecord", MicrosoftGraphDomainDnsTxtRecord(Box <
    MicrosoftGraphDomainDnsTxtRecord >)), ("#microsoft.graph.domainDnsUnavailableRecord",
    MicrosoftGraphDomainDnsUnavailableRecord(Box <
    MicrosoftGraphDomainDnsUnavailableRecord >)), ("#microsoft.graph.drive",
    MicrosoftGraphDrive(Box < MicrosoftGraphDrive >)), ("#microsoft.graph.driveItem",
    MicrosoftGraphDriveItem(Box < MicrosoftGraphDriveItem >)),
    ("#microsoft.graph.driveItemVersion", MicrosoftGraphDriveItemVersion(Box <
    MicrosoftGraphDriveItemVersion >)), ("#microsoft.graph.driveProtectionRule",
    MicrosoftGraphDriveProtectionRule(Box < MicrosoftGraphDriveProtectionRule >)),
    ("#microsoft.graph.driveProtectionUnit", MicrosoftGraphDriveProtectionUnit(Box <
    MicrosoftGraphDriveProtectionUnit >)),
    ("#microsoft.graph.driveProtectionUnitsBulkAdditionJob",
    MicrosoftGraphDriveProtectionUnitsBulkAdditionJob(Box <
    MicrosoftGraphDriveProtectionUnitsBulkAdditionJob >)),
    ("#microsoft.graph.driveRestoreArtifact", MicrosoftGraphDriveRestoreArtifact(Box <
    MicrosoftGraphDriveRestoreArtifact >)),
    ("#microsoft.graph.driveRestoreArtifactsBulkAdditionRequest",
    MicrosoftGraphDriveRestoreArtifactsBulkAdditionRequest(Box <
    MicrosoftGraphDriveRestoreArtifactsBulkAdditionRequest >)),
    ("#microsoft.graph.editionUpgradeConfiguration",
    MicrosoftGraphEditionUpgradeConfiguration(Box <
    MicrosoftGraphEditionUpgradeConfiguration >)),
    ("#microsoft.graph.educationFeedbackOutcome",
    MicrosoftGraphEducationFeedbackOutcome(Box < MicrosoftGraphEducationFeedbackOutcome
    >)), ("#microsoft.graph.educationFeedbackResourceOutcome",
    MicrosoftGraphEducationFeedbackResourceOutcome(Box <
    MicrosoftGraphEducationFeedbackResourceOutcome >)),
    ("#microsoft.graph.educationPointsOutcome", MicrosoftGraphEducationPointsOutcome(Box
    < MicrosoftGraphEducationPointsOutcome >)),
    ("#microsoft.graph.educationRubricOutcome", MicrosoftGraphEducationRubricOutcome(Box
    < MicrosoftGraphEducationRubricOutcome >)), ("#microsoft.graph.educationSchool",
    MicrosoftGraphEducationSchool(Box < MicrosoftGraphEducationSchool >)),
    ("#microsoft.graph.emailAuthenticationMethod",
    MicrosoftGraphEmailAuthenticationMethod(Box < MicrosoftGraphEmailAuthenticationMethod
    >)), ("#microsoft.graph.emailAuthenticationMethodConfiguration",
    MicrosoftGraphEmailAuthenticationMethodConfiguration(Box <
    MicrosoftGraphEmailAuthenticationMethodConfiguration >)),
    ("#microsoft.graph.emailFileAssessmentRequest",
    MicrosoftGraphEmailFileAssessmentRequest(Box <
    MicrosoftGraphEmailFileAssessmentRequest >)), ("#microsoft.graph.emergencyCallEvent",
    MicrosoftGraphEmergencyCallEvent(Box < MicrosoftGraphEmergencyCallEvent >)),
    ("#microsoft.graph.endpoint", MicrosoftGraphEndpoint(Box < MicrosoftGraphEndpoint
    >)), ("#microsoft.graph.engagementAsyncOperation",
    MicrosoftGraphEngagementAsyncOperation(Box < MicrosoftGraphEngagementAsyncOperation
    >)), ("#microsoft.graph.enrollmentTroubleshootingEvent",
    MicrosoftGraphEnrollmentTroubleshootingEvent(Box <
    MicrosoftGraphEnrollmentTroubleshootingEvent >)), ("#microsoft.graph.event",
    MicrosoftGraphEvent(Box < MicrosoftGraphEvent >)),
    ("#microsoft.graph.exchangeProtectionPolicy",
    MicrosoftGraphExchangeProtectionPolicy(Box < MicrosoftGraphExchangeProtectionPolicy
    >)), ("#microsoft.graph.exchangeRestoreSession",
    MicrosoftGraphExchangeRestoreSession(Box < MicrosoftGraphExchangeRestoreSession >)),
    ("#microsoft.graph.extensionProperty", MicrosoftGraphExtensionProperty(Box <
    MicrosoftGraphExtensionProperty >)),
    ("#microsoft.graph.externalConnectors.externalActivityResult",
    MicrosoftGraphExternalConnectorsExternalActivityResult(Box <
    MicrosoftGraphExternalConnectorsExternalActivityResult >)),
    ("#microsoft.graph.externalUsersSelfServiceSignUpEventsFlow",
    MicrosoftGraphExternalUsersSelfServiceSignUpEventsFlow(Box <
    MicrosoftGraphExternalUsersSelfServiceSignUpEventsFlow >)),
    ("#microsoft.graph.fido2AuthenticationMethod",
    MicrosoftGraphFido2AuthenticationMethod(Box < MicrosoftGraphFido2AuthenticationMethod
    >)), ("#microsoft.graph.fido2AuthenticationMethodConfiguration",
    MicrosoftGraphFido2AuthenticationMethodConfiguration(Box <
    MicrosoftGraphFido2AuthenticationMethodConfiguration >)),
    ("#microsoft.graph.fido2CombinationConfiguration",
    MicrosoftGraphFido2CombinationConfiguration(Box <
    MicrosoftGraphFido2CombinationConfiguration >)),
    ("#microsoft.graph.fileAssessmentRequest", MicrosoftGraphFileAssessmentRequest(Box <
    MicrosoftGraphFileAssessmentRequest >)), ("#microsoft.graph.fileAttachment",
    MicrosoftGraphFileAttachment(Box < MicrosoftGraphFileAttachment >)),
    ("#microsoft.graph.group", MicrosoftGraphGroup(Box < MicrosoftGraphGroup >)),
    ("#microsoft.graph.groupSettingTemplate", MicrosoftGraphGroupSettingTemplate(Box <
    MicrosoftGraphGroupSettingTemplate >)),
    ("#microsoft.graph.identityBuiltInUserFlowAttribute",
    MicrosoftGraphIdentityBuiltInUserFlowAttribute(Box <
    MicrosoftGraphIdentityBuiltInUserFlowAttribute >)),
    ("#microsoft.graph.identityCustomUserFlowAttribute",
    MicrosoftGraphIdentityCustomUserFlowAttribute(Box <
    MicrosoftGraphIdentityCustomUserFlowAttribute >)),
    ("#microsoft.graph.identityGovernance.customTaskExtension",
    MicrosoftGraphIdentityGovernanceCustomTaskExtension(Box <
    MicrosoftGraphIdentityGovernanceCustomTaskExtension >)),
    ("#microsoft.graph.inviteParticipantsOperation",
    MicrosoftGraphInviteParticipantsOperation(Box <
    MicrosoftGraphInviteParticipantsOperation >)),
    ("#microsoft.graph.iosCertificateProfile", MicrosoftGraphIosCertificateProfile(Box <
    MicrosoftGraphIosCertificateProfile >)), ("#microsoft.graph.iosCompliancePolicy",
    MicrosoftGraphIosCompliancePolicy(Box < MicrosoftGraphIosCompliancePolicy >)),
    ("#microsoft.graph.iosCustomConfiguration", MicrosoftGraphIosCustomConfiguration(Box
    < MicrosoftGraphIosCustomConfiguration >)),
    ("#microsoft.graph.iosGeneralDeviceConfiguration",
    MicrosoftGraphIosGeneralDeviceConfiguration(Box <
    MicrosoftGraphIosGeneralDeviceConfiguration >)),
    ("#microsoft.graph.iosManagedAppRegistration",
    MicrosoftGraphIosManagedAppRegistration(Box < MicrosoftGraphIosManagedAppRegistration
    >)), ("#microsoft.graph.iosMobileAppConfiguration",
    MicrosoftGraphIosMobileAppConfiguration(Box < MicrosoftGraphIosMobileAppConfiguration
    >)), ("#microsoft.graph.iosStoreApp", MicrosoftGraphIosStoreApp(Box <
    MicrosoftGraphIosStoreApp >)), ("#microsoft.graph.iosUpdateConfiguration",
    MicrosoftGraphIosUpdateConfiguration(Box < MicrosoftGraphIosUpdateConfiguration >)),
    ("#microsoft.graph.iosVppApp", MicrosoftGraphIosVppApp(Box < MicrosoftGraphIosVppApp
    >)), ("#microsoft.graph.iosVppEBook", MicrosoftGraphIosVppEbook(Box <
    MicrosoftGraphIosVppEbook >)), ("#microsoft.graph.iosVppEBookAssignment",
    MicrosoftGraphIosVppEbookAssignment(Box < MicrosoftGraphIosVppEbookAssignment >)),
    ("#microsoft.graph.iosiPadOSWebClip", MicrosoftGraphIosiPadOswebClip(Box <
    MicrosoftGraphIosiPadOswebClip >)), ("#microsoft.graph.ipNamedLocation",
    MicrosoftGraphIpNamedLocation(Box < MicrosoftGraphIpNamedLocation >)),
    ("#microsoft.graph.itemAttachment", MicrosoftGraphItemAttachment(Box <
    MicrosoftGraphItemAttachment >)), ("#microsoft.graph.itemInsights",
    MicrosoftGraphItemInsights(Box < MicrosoftGraphItemInsights >)),
    ("#microsoft.graph.learningAssignment", MicrosoftGraphLearningAssignment(Box <
    MicrosoftGraphLearningAssignment >)),
    ("#microsoft.graph.learningSelfInitiatedCourse",
    MicrosoftGraphLearningSelfInitiatedCourse(Box <
    MicrosoftGraphLearningSelfInitiatedCourse >)), ("#microsoft.graph.list",
    MicrosoftGraphList(Box < MicrosoftGraphList >)), ("#microsoft.graph.listItem",
    MicrosoftGraphListItem(Box < MicrosoftGraphListItem >)),
    ("#microsoft.graph.listItemVersion", MicrosoftGraphListItemVersion(Box <
    MicrosoftGraphListItemVersion >)), ("#microsoft.graph.macOSCompliancePolicy",
    MicrosoftGraphMacOscompliancePolicy(Box < MicrosoftGraphMacOscompliancePolicy >)),
    ("#microsoft.graph.macOSCustomConfiguration",
    MicrosoftGraphMacOscustomConfiguration(Box < MicrosoftGraphMacOscustomConfiguration
    >)), ("#microsoft.graph.macOSGeneralDeviceConfiguration",
    MicrosoftGraphMacOsgeneralDeviceConfiguration(Box <
    MicrosoftGraphMacOsgeneralDeviceConfiguration >)),
    ("#microsoft.graph.macOSMicrosoftDefenderApp",
    MicrosoftGraphMacOsmicrosoftDefenderApp(Box < MicrosoftGraphMacOsmicrosoftDefenderApp
    >)), ("#microsoft.graph.macOSMicrosoftEdgeApp",
    MicrosoftGraphMacOsmicrosoftEdgeApp(Box < MicrosoftGraphMacOsmicrosoftEdgeApp >)),
    ("#microsoft.graph.macOSOfficeSuiteApp", MicrosoftGraphMacOsofficeSuiteApp(Box <
    MicrosoftGraphMacOsofficeSuiteApp >)), ("#microsoft.graph.mailAssessmentRequest",
    MicrosoftGraphMailAssessmentRequest(Box < MicrosoftGraphMailAssessmentRequest >)),
    ("#microsoft.graph.mailSearchFolder", MicrosoftGraphMailSearchFolder(Box <
    MicrosoftGraphMailSearchFolder >)), ("#microsoft.graph.mailboxProtectionRule",
    MicrosoftGraphMailboxProtectionRule(Box < MicrosoftGraphMailboxProtectionRule >)),
    ("#microsoft.graph.mailboxProtectionUnit", MicrosoftGraphMailboxProtectionUnit(Box <
    MicrosoftGraphMailboxProtectionUnit >)),
    ("#microsoft.graph.mailboxProtectionUnitsBulkAdditionJob",
    MicrosoftGraphMailboxProtectionUnitsBulkAdditionJob(Box <
    MicrosoftGraphMailboxProtectionUnitsBulkAdditionJob >)),
    ("#microsoft.graph.mailboxRestoreArtifact", MicrosoftGraphMailboxRestoreArtifact(Box
    < MicrosoftGraphMailboxRestoreArtifact >)),
    ("#microsoft.graph.mailboxRestoreArtifactsBulkAdditionRequest",
    MicrosoftGraphMailboxRestoreArtifactsBulkAdditionRequest(Box <
    MicrosoftGraphMailboxRestoreArtifactsBulkAdditionRequest >)),
    ("#microsoft.graph.managedApp", MicrosoftGraphManagedApp(Box <
    MicrosoftGraphManagedApp >)), ("#microsoft.graph.managedAppConfiguration",
    MicrosoftGraphManagedAppConfiguration(Box < MicrosoftGraphManagedAppConfiguration
    >)), ("#microsoft.graph.managedAppProtection", MicrosoftGraphManagedAppProtection(Box
    < MicrosoftGraphManagedAppProtection >)), ("#microsoft.graph.managedAppStatusRaw",
    MicrosoftGraphManagedAppStatusRaw(Box < MicrosoftGraphManagedAppStatusRaw >)),
    ("#microsoft.graph.membershipOutlierInsight",
    MicrosoftGraphMembershipOutlierInsight(Box < MicrosoftGraphMembershipOutlierInsight
    >)), ("#microsoft.graph.message", MicrosoftGraphMessage(Box < MicrosoftGraphMessage
    >)), ("#microsoft.graph.microsoftAccountUserConversationMember",
    MicrosoftGraphMicrosoftAccountUserConversationMember(Box <
    MicrosoftGraphMicrosoftAccountUserConversationMember >)),
    ("#microsoft.graph.microsoftAuthenticatorAuthenticationMethod",
    MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod(Box <
    MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod >)),
    ("#microsoft.graph.microsoftAuthenticatorAuthenticationMethodConfiguration",
    MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodConfiguration(Box <
    MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodConfiguration >)),
    ("#microsoft.graph.microsoftAuthenticatorAuthenticationMethodTarget",
    MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodTarget(Box <
    MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodTarget >)),
    ("#microsoft.graph.microsoftStoreForBusinessApp",
    MicrosoftGraphMicrosoftStoreForBusinessApp(Box <
    MicrosoftGraphMicrosoftStoreForBusinessApp >)), ("#microsoft.graph.mobileLobApp",
    MicrosoftGraphMobileLobApp(Box < MicrosoftGraphMobileLobApp >)),
    ("#microsoft.graph.multiTenantOrganizationMember",
    MicrosoftGraphMultiTenantOrganizationMember(Box <
    MicrosoftGraphMultiTenantOrganizationMember >)),
    ("#microsoft.graph.muteParticipantOperation",
    MicrosoftGraphMuteParticipantOperation(Box < MicrosoftGraphMuteParticipantOperation
    >)), ("#microsoft.graph.onAttributeCollectionListener",
    MicrosoftGraphOnAttributeCollectionListener(Box <
    MicrosoftGraphOnAttributeCollectionListener >)),
    ("#microsoft.graph.onAttributeCollectionStartListener",
    MicrosoftGraphOnAttributeCollectionStartListener(Box <
    MicrosoftGraphOnAttributeCollectionStartListener >)),
    ("#microsoft.graph.onAttributeCollectionSubmitListener",
    MicrosoftGraphOnAttributeCollectionSubmitListener(Box <
    MicrosoftGraphOnAttributeCollectionSubmitListener >)),
    ("#microsoft.graph.onAuthenticationMethodLoadStartListener",
    MicrosoftGraphOnAuthenticationMethodLoadStartListener(Box <
    MicrosoftGraphOnAuthenticationMethodLoadStartListener >)),
    ("#microsoft.graph.onEmailOtpSendListener", MicrosoftGraphOnEmailOtpSendListener(Box
    < MicrosoftGraphOnEmailOtpSendListener >)),
    ("#microsoft.graph.onInteractiveAuthFlowStartListener",
    MicrosoftGraphOnInteractiveAuthFlowStartListener(Box <
    MicrosoftGraphOnInteractiveAuthFlowStartListener >)),
    ("#microsoft.graph.onTokenIssuanceStartListener",
    MicrosoftGraphOnTokenIssuanceStartListener(Box <
    MicrosoftGraphOnTokenIssuanceStartListener >)),
    ("#microsoft.graph.onUserCreateStartListener",
    MicrosoftGraphOnUserCreateStartListener(Box < MicrosoftGraphOnUserCreateStartListener
    >)), ("#microsoft.graph.oneDriveForBusinessProtectionPolicy",
    MicrosoftGraphOneDriveForBusinessProtectionPolicy(Box <
    MicrosoftGraphOneDriveForBusinessProtectionPolicy >)),
    ("#microsoft.graph.oneDriveForBusinessRestoreSession",
    MicrosoftGraphOneDriveForBusinessRestoreSession(Box <
    MicrosoftGraphOneDriveForBusinessRestoreSession >)),
    ("#microsoft.graph.onenoteEntitySchemaObjectModel",
    MicrosoftGraphOnenoteEntitySchemaObjectModel(Box <
    MicrosoftGraphOnenoteEntitySchemaObjectModel >)),
    ("#microsoft.graph.onenoteOperation", MicrosoftGraphOnenoteOperation(Box <
    MicrosoftGraphOnenoteOperation >)), ("#microsoft.graph.onenoteResource",
    MicrosoftGraphOnenoteResource(Box < MicrosoftGraphOnenoteResource >)),
    ("#microsoft.graph.onlineMeeting", MicrosoftGraphOnlineMeeting(Box <
    MicrosoftGraphOnlineMeeting >)), ("#microsoft.graph.openShift",
    MicrosoftGraphOpenShift(Box < MicrosoftGraphOpenShift >)),
    ("#microsoft.graph.openTypeExtension", MicrosoftGraphOpenTypeExtension(Box <
    MicrosoftGraphOpenTypeExtension >)), ("#microsoft.graph.orgContact",
    MicrosoftGraphOrgContact(Box < MicrosoftGraphOrgContact >)),
    ("#microsoft.graph.organization", MicrosoftGraphOrganization(Box <
    MicrosoftGraphOrganization >)), ("#microsoft.graph.organizationalBranding",
    MicrosoftGraphOrganizationalBranding(Box < MicrosoftGraphOrganizationalBranding >)),
    ("#microsoft.graph.organizationalBrandingLocalization",
    MicrosoftGraphOrganizationalBrandingLocalization(Box <
    MicrosoftGraphOrganizationalBrandingLocalization >)),
    ("#microsoft.graph.partners.billing.exportSuccessOperation",
    MicrosoftGraphPartnersBillingExportSuccessOperation(Box <
    MicrosoftGraphPartnersBillingExportSuccessOperation >)),
    ("#microsoft.graph.partners.billing.failedOperation",
    MicrosoftGraphPartnersBillingFailedOperation(Box <
    MicrosoftGraphPartnersBillingFailedOperation >)),
    ("#microsoft.graph.partners.billing.runningOperation",
    MicrosoftGraphPartnersBillingRunningOperation(Box <
    MicrosoftGraphPartnersBillingRunningOperation >)),
    ("#microsoft.graph.passwordAuthenticationMethod",
    MicrosoftGraphPasswordAuthenticationMethod(Box <
    MicrosoftGraphPasswordAuthenticationMethod >)),
    ("#microsoft.graph.phoneAuthenticationMethod",
    MicrosoftGraphPhoneAuthenticationMethod(Box < MicrosoftGraphPhoneAuthenticationMethod
    >)), ("#microsoft.graph.phoneUserConversationMember",
    MicrosoftGraphPhoneUserConversationMember(Box <
    MicrosoftGraphPhoneUserConversationMember >)),
    ("#microsoft.graph.platformCredentialAuthenticationMethod",
    MicrosoftGraphPlatformCredentialAuthenticationMethod(Box <
    MicrosoftGraphPlatformCredentialAuthenticationMethod >)),
    ("#microsoft.graph.playPromptOperation", MicrosoftGraphPlayPromptOperation(Box <
    MicrosoftGraphPlayPromptOperation >)), ("#microsoft.graph.policyBase",
    MicrosoftGraphPolicyBase(Box < MicrosoftGraphPolicyBase >)),
    ("#microsoft.graph.post", MicrosoftGraphPost(Box < MicrosoftGraphPost >)),
    ("#microsoft.graph.printUsageByPrinter", MicrosoftGraphPrintUsageByPrinter(Box <
    MicrosoftGraphPrintUsageByPrinter >)), ("#microsoft.graph.printUsageByUser",
    MicrosoftGraphPrintUsageByUser(Box < MicrosoftGraphPrintUsageByUser >)),
    ("#microsoft.graph.printer", MicrosoftGraphPrinter(Box < MicrosoftGraphPrinter >)),
    ("#microsoft.graph.printerCreateOperation", MicrosoftGraphPrinterCreateOperation(Box
    < MicrosoftGraphPrinterCreateOperation >)), ("#microsoft.graph.printerShare",
    MicrosoftGraphPrinterShare(Box < MicrosoftGraphPrinterShare >)),
    ("#microsoft.graph.privilegedAccessGroupAssignmentSchedule",
    MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule(Box <
    MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule >)),
    ("#microsoft.graph.privilegedAccessGroupAssignmentScheduleInstance",
    MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance(Box <
    MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance >)),
    ("#microsoft.graph.privilegedAccessGroupEligibilitySchedule",
    MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule(Box <
    MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule >)),
    ("#microsoft.graph.privilegedAccessGroupEligibilityScheduleInstance",
    MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance(Box <
    MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance >)),
    ("#microsoft.graph.privilegedAccessScheduleRequest",
    MicrosoftGraphPrivilegedAccessScheduleRequest(Box <
    MicrosoftGraphPrivilegedAccessScheduleRequest >)),
    ("#microsoft.graph.recordOperation", MicrosoftGraphRecordOperation(Box <
    MicrosoftGraphRecordOperation >)), ("#microsoft.graph.recycleBin",
    MicrosoftGraphRecycleBin(Box < MicrosoftGraphRecycleBin >)),
    ("#microsoft.graph.recycleBinItem", MicrosoftGraphRecycleBinItem(Box <
    MicrosoftGraphRecycleBinItem >)), ("#microsoft.graph.referenceAttachment",
    MicrosoftGraphReferenceAttachment(Box < MicrosoftGraphReferenceAttachment >)),
    ("#microsoft.graph.resellerDelegatedAdminRelationship",
    MicrosoftGraphResellerDelegatedAdminRelationship(Box <
    MicrosoftGraphResellerDelegatedAdminRelationship >)),
    ("#microsoft.graph.resourceSpecificPermissionGrant",
    MicrosoftGraphResourceSpecificPermissionGrant(Box <
    MicrosoftGraphResourceSpecificPermissionGrant >)),
    ("#microsoft.graph.richLongRunningOperation",
    MicrosoftGraphRichLongRunningOperation(Box < MicrosoftGraphRichLongRunningOperation
    >)), ("#microsoft.graph.riskyServicePrincipalHistoryItem",
    MicrosoftGraphRiskyServicePrincipalHistoryItem(Box <
    MicrosoftGraphRiskyServicePrincipalHistoryItem >)),
    ("#microsoft.graph.riskyUserHistoryItem", MicrosoftGraphRiskyUserHistoryItem(Box <
    MicrosoftGraphRiskyUserHistoryItem >)), ("#microsoft.graph.room",
    MicrosoftGraphRoom(Box < MicrosoftGraphRoom >)), ("#microsoft.graph.roomList",
    MicrosoftGraphRoomList(Box < MicrosoftGraphRoomList >)),
    ("#microsoft.graph.samlOrWsFedProvider", MicrosoftGraphSamlOrWsFedProvider(Box <
    MicrosoftGraphSamlOrWsFedProvider >)), ("#microsoft.graph.scheduleChangeRequest",
    MicrosoftGraphScheduleChangeRequest(Box < MicrosoftGraphScheduleChangeRequest >)),
    ("#microsoft.graph.schedulingGroup", MicrosoftGraphSchedulingGroup(Box <
    MicrosoftGraphSchedulingGroup >)), ("#microsoft.graph.search.acronym",
    MicrosoftGraphSearchAcronym(Box < MicrosoftGraphSearchAcronym >)),
    ("#microsoft.graph.search.bookmark", MicrosoftGraphSearchBookmark(Box <
    MicrosoftGraphSearchBookmark >)), ("#microsoft.graph.search.qna",
    MicrosoftGraphSearchQna(Box < MicrosoftGraphSearchQna >)),
    ("#microsoft.graph.security.articleIndicator",
    MicrosoftGraphSecurityArticleIndicator(Box < MicrosoftGraphSecurityArticleIndicator
    >)), ("#microsoft.graph.security.authorityTemplate",
    MicrosoftGraphSecurityAuthorityTemplate(Box < MicrosoftGraphSecurityAuthorityTemplate
    >)), ("#microsoft.graph.security.categoryTemplate",
    MicrosoftGraphSecurityCategoryTemplate(Box < MicrosoftGraphSecurityCategoryTemplate
    >)), ("#microsoft.graph.security.citationTemplate",
    MicrosoftGraphSecurityCitationTemplate(Box < MicrosoftGraphSecurityCitationTemplate
    >)), ("#microsoft.graph.security.departmentTemplate",
    MicrosoftGraphSecurityDepartmentTemplate(Box <
    MicrosoftGraphSecurityDepartmentTemplate >)),
    ("#microsoft.graph.security.ediscoveryAddToReviewSetOperation",
    MicrosoftGraphSecurityEdiscoveryAddToReviewSetOperation(Box <
    MicrosoftGraphSecurityEdiscoveryAddToReviewSetOperation >)),
    ("#microsoft.graph.security.ediscoveryCase", MicrosoftGraphSecurityEdiscoveryCase(Box
    < MicrosoftGraphSecurityEdiscoveryCase >)),
    ("#microsoft.graph.security.ediscoveryCustodian",
    MicrosoftGraphSecurityEdiscoveryCustodian(Box <
    MicrosoftGraphSecurityEdiscoveryCustodian >)),
    ("#microsoft.graph.security.ediscoveryEstimateOperation",
    MicrosoftGraphSecurityEdiscoveryEstimateOperation(Box <
    MicrosoftGraphSecurityEdiscoveryEstimateOperation >)),
    ("#microsoft.graph.security.ediscoveryExportOperation",
    MicrosoftGraphSecurityEdiscoveryExportOperation(Box <
    MicrosoftGraphSecurityEdiscoveryExportOperation >)),
    ("#microsoft.graph.security.ediscoveryHoldOperation",
    MicrosoftGraphSecurityEdiscoveryHoldOperation(Box <
    MicrosoftGraphSecurityEdiscoveryHoldOperation >)),
    ("#microsoft.graph.security.ediscoveryIndexOperation",
    MicrosoftGraphSecurityEdiscoveryIndexOperation(Box <
    MicrosoftGraphSecurityEdiscoveryIndexOperation >)),
    ("#microsoft.graph.security.ediscoveryNoncustodialDataSource",
    MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource(Box <
    MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource >)),
    ("#microsoft.graph.security.ediscoveryPurgeDataOperation",
    MicrosoftGraphSecurityEdiscoveryPurgeDataOperation(Box <
    MicrosoftGraphSecurityEdiscoveryPurgeDataOperation >)),
    ("#microsoft.graph.security.ediscoveryReviewSet",
    MicrosoftGraphSecurityEdiscoveryReviewSet(Box <
    MicrosoftGraphSecurityEdiscoveryReviewSet >)),
    ("#microsoft.graph.security.ediscoveryReviewSetQuery",
    MicrosoftGraphSecurityEdiscoveryReviewSetQuery(Box <
    MicrosoftGraphSecurityEdiscoveryReviewSetQuery >)),
    ("#microsoft.graph.security.ediscoveryReviewTag",
    MicrosoftGraphSecurityEdiscoveryReviewTag(Box <
    MicrosoftGraphSecurityEdiscoveryReviewTag >)),
    ("#microsoft.graph.security.ediscoverySearch",
    MicrosoftGraphSecurityEdiscoverySearch(Box < MicrosoftGraphSecurityEdiscoverySearch
    >)), ("#microsoft.graph.security.ediscoverySearchExportOperation",
    MicrosoftGraphSecurityEdiscoverySearchExportOperation(Box <
    MicrosoftGraphSecurityEdiscoverySearchExportOperation >)),
    ("#microsoft.graph.security.ediscoveryTagOperation",
    MicrosoftGraphSecurityEdiscoveryTagOperation(Box <
    MicrosoftGraphSecurityEdiscoveryTagOperation >)),
    ("#microsoft.graph.security.filePlanReferenceTemplate",
    MicrosoftGraphSecurityFilePlanReferenceTemplate(Box <
    MicrosoftGraphSecurityFilePlanReferenceTemplate >)),
    ("#microsoft.graph.security.host", MicrosoftGraphSecurityHost(Box <
    MicrosoftGraphSecurityHost >)), ("#microsoft.graph.security.hostComponent",
    MicrosoftGraphSecurityHostComponent(Box < MicrosoftGraphSecurityHostComponent >)),
    ("#microsoft.graph.security.hostCookie", MicrosoftGraphSecurityHostCookie(Box <
    MicrosoftGraphSecurityHostCookie >)),
    ("#microsoft.graph.security.hostSslCertificate",
    MicrosoftGraphSecurityHostSslCertificate(Box <
    MicrosoftGraphSecurityHostSslCertificate >)),
    ("#microsoft.graph.security.hostTracker", MicrosoftGraphSecurityHostTracker(Box <
    MicrosoftGraphSecurityHostTracker >)),
    ("#microsoft.graph.security.intelligenceProfileIndicator",
    MicrosoftGraphSecurityIntelligenceProfileIndicator(Box <
    MicrosoftGraphSecurityIntelligenceProfileIndicator >)),
    ("#microsoft.graph.security.passiveDnsRecord",
    MicrosoftGraphSecurityPassiveDnsRecord(Box < MicrosoftGraphSecurityPassiveDnsRecord
    >)), ("#microsoft.graph.security.siteSource", MicrosoftGraphSecuritySiteSource(Box <
    MicrosoftGraphSecuritySiteSource >)), ("#microsoft.graph.security.sslCertificate",
    MicrosoftGraphSecuritySslCertificate(Box < MicrosoftGraphSecuritySslCertificate >)),
    ("#microsoft.graph.security.subcategoryTemplate",
    MicrosoftGraphSecuritySubcategoryTemplate(Box <
    MicrosoftGraphSecuritySubcategoryTemplate >)),
    ("#microsoft.graph.security.unclassifiedArtifact",
    MicrosoftGraphSecurityUnclassifiedArtifact(Box <
    MicrosoftGraphSecurityUnclassifiedArtifact >)),
    ("#microsoft.graph.security.unifiedGroupSource",
    MicrosoftGraphSecurityUnifiedGroupSource(Box <
    MicrosoftGraphSecurityUnifiedGroupSource >)),
    ("#microsoft.graph.security.userSource", MicrosoftGraphSecurityUserSource(Box <
    MicrosoftGraphSecurityUserSource >)),
    ("#microsoft.graph.security.whoisHistoryRecord",
    MicrosoftGraphSecurityWhoisHistoryRecord(Box <
    MicrosoftGraphSecurityWhoisHistoryRecord >)),
    ("#microsoft.graph.security.whoisRecord", MicrosoftGraphSecurityWhoisRecord(Box <
    MicrosoftGraphSecurityWhoisRecord >)), ("#microsoft.graph.sendDtmfTonesOperation",
    MicrosoftGraphSendDtmfTonesOperation(Box < MicrosoftGraphSendDtmfTonesOperation >)),
    ("#microsoft.graph.serviceHealthIssue", MicrosoftGraphServiceHealthIssue(Box <
    MicrosoftGraphServiceHealthIssue >)), ("#microsoft.graph.servicePrincipal",
    MicrosoftGraphServicePrincipal(Box < MicrosoftGraphServicePrincipal >)),
    ("#microsoft.graph.serviceStorageQuotaBreakdown",
    MicrosoftGraphServiceStorageQuotaBreakdown(Box <
    MicrosoftGraphServiceStorageQuotaBreakdown >)),
    ("#microsoft.graph.serviceUpdateMessage", MicrosoftGraphServiceUpdateMessage(Box <
    MicrosoftGraphServiceUpdateMessage >)),
    ("#microsoft.graph.sharePointProtectionPolicy",
    MicrosoftGraphSharePointProtectionPolicy(Box <
    MicrosoftGraphSharePointProtectionPolicy >)),
    ("#microsoft.graph.sharePointRestoreSession",
    MicrosoftGraphSharePointRestoreSession(Box < MicrosoftGraphSharePointRestoreSession
    >)), ("#microsoft.graph.sharedDriveItem", MicrosoftGraphSharedDriveItem(Box <
    MicrosoftGraphSharedDriveItem >)), ("#microsoft.graph.sharedPCConfiguration",
    MicrosoftGraphSharedPcconfiguration(Box < MicrosoftGraphSharedPcconfiguration >)),
    ("#microsoft.graph.sharedWithChannelTeamInfo",
    MicrosoftGraphSharedWithChannelTeamInfo(Box < MicrosoftGraphSharedWithChannelTeamInfo
    >)), ("#microsoft.graph.shift", MicrosoftGraphShift(Box < MicrosoftGraphShift >)),
    ("#microsoft.graph.shiftPreferences", MicrosoftGraphShiftPreferences(Box <
    MicrosoftGraphShiftPreferences >)), ("#microsoft.graph.site", MicrosoftGraphSite(Box
    < MicrosoftGraphSite >)), ("#microsoft.graph.siteProtectionRule",
    MicrosoftGraphSiteProtectionRule(Box < MicrosoftGraphSiteProtectionRule >)),
    ("#microsoft.graph.siteProtectionUnit", MicrosoftGraphSiteProtectionUnit(Box <
    MicrosoftGraphSiteProtectionUnit >)),
    ("#microsoft.graph.siteProtectionUnitsBulkAdditionJob",
    MicrosoftGraphSiteProtectionUnitsBulkAdditionJob(Box <
    MicrosoftGraphSiteProtectionUnitsBulkAdditionJob >)),
    ("#microsoft.graph.siteRestoreArtifact", MicrosoftGraphSiteRestoreArtifact(Box <
    MicrosoftGraphSiteRestoreArtifact >)),
    ("#microsoft.graph.siteRestoreArtifactsBulkAdditionRequest",
    MicrosoftGraphSiteRestoreArtifactsBulkAdditionRequest(Box <
    MicrosoftGraphSiteRestoreArtifactsBulkAdditionRequest >)),
    ("#microsoft.graph.skypeForBusinessUserConversationMember",
    MicrosoftGraphSkypeForBusinessUserConversationMember(Box <
    MicrosoftGraphSkypeForBusinessUserConversationMember >)),
    ("#microsoft.graph.skypeUserConversationMember",
    MicrosoftGraphSkypeUserConversationMember(Box <
    MicrosoftGraphSkypeUserConversationMember >)),
    ("#microsoft.graph.smsAuthenticationMethodConfiguration",
    MicrosoftGraphSmsAuthenticationMethodConfiguration(Box <
    MicrosoftGraphSmsAuthenticationMethodConfiguration >)),
    ("#microsoft.graph.smsAuthenticationMethodTarget",
    MicrosoftGraphSmsAuthenticationMethodTarget(Box <
    MicrosoftGraphSmsAuthenticationMethodTarget >)),
    ("#microsoft.graph.socialIdentityProvider", MicrosoftGraphSocialIdentityProvider(Box
    < MicrosoftGraphSocialIdentityProvider >)),
    ("#microsoft.graph.softwareOathAuthenticationMethod",
    MicrosoftGraphSoftwareOathAuthenticationMethod(Box <
    MicrosoftGraphSoftwareOathAuthenticationMethod >)),
    ("#microsoft.graph.softwareOathAuthenticationMethodConfiguration",
    MicrosoftGraphSoftwareOathAuthenticationMethodConfiguration(Box <
    MicrosoftGraphSoftwareOathAuthenticationMethodConfiguration >)),
    ("#microsoft.graph.standardWebPart", MicrosoftGraphStandardWebPart(Box <
    MicrosoftGraphStandardWebPart >)), ("#microsoft.graph.startHoldMusicOperation",
    MicrosoftGraphStartHoldMusicOperation(Box < MicrosoftGraphStartHoldMusicOperation
    >)), ("#microsoft.graph.stopHoldMusicOperation",
    MicrosoftGraphStopHoldMusicOperation(Box < MicrosoftGraphStopHoldMusicOperation >)),
    ("#microsoft.graph.subscribeToToneOperation",
    MicrosoftGraphSubscribeToToneOperation(Box < MicrosoftGraphSubscribeToToneOperation
    >)), ("#microsoft.graph.taskFileAttachment", MicrosoftGraphTaskFileAttachment(Box <
    MicrosoftGraphTaskFileAttachment >)),
    ("#microsoft.graph.temporaryAccessPassAuthenticationMethod",
    MicrosoftGraphTemporaryAccessPassAuthenticationMethod(Box <
    MicrosoftGraphTemporaryAccessPassAuthenticationMethod >)),
    ("#microsoft.graph.temporaryAccessPassAuthenticationMethodConfiguration",
    MicrosoftGraphTemporaryAccessPassAuthenticationMethodConfiguration(Box <
    MicrosoftGraphTemporaryAccessPassAuthenticationMethodConfiguration >)),
    ("#microsoft.graph.tenantDataSecurityAndGovernance",
    MicrosoftGraphTenantDataSecurityAndGovernance(Box <
    MicrosoftGraphTenantDataSecurityAndGovernance >)), ("#microsoft.graph.textWebPart",
    MicrosoftGraphTextWebPart(Box < MicrosoftGraphTextWebPart >)),
    ("#microsoft.graph.timeCard", MicrosoftGraphTimeCard(Box < MicrosoftGraphTimeCard
    >)), ("#microsoft.graph.timeOff", MicrosoftGraphTimeOff(Box < MicrosoftGraphTimeOff
    >)), ("#microsoft.graph.timeOffReason", MicrosoftGraphTimeOffReason(Box <
    MicrosoftGraphTimeOffReason >)), ("#microsoft.graph.unifiedRoleAssignmentSchedule",
    MicrosoftGraphUnifiedRoleAssignmentSchedule(Box <
    MicrosoftGraphUnifiedRoleAssignmentSchedule >)),
    ("#microsoft.graph.unifiedRoleAssignmentScheduleInstance",
    MicrosoftGraphUnifiedRoleAssignmentScheduleInstance(Box <
    MicrosoftGraphUnifiedRoleAssignmentScheduleInstance >)),
    ("#microsoft.graph.unifiedRoleAssignmentScheduleRequest",
    MicrosoftGraphUnifiedRoleAssignmentScheduleRequest(Box <
    MicrosoftGraphUnifiedRoleAssignmentScheduleRequest >)),
    ("#microsoft.graph.unifiedRoleEligibilitySchedule",
    MicrosoftGraphUnifiedRoleEligibilitySchedule(Box <
    MicrosoftGraphUnifiedRoleEligibilitySchedule >)),
    ("#microsoft.graph.unifiedRoleEligibilityScheduleInstance",
    MicrosoftGraphUnifiedRoleEligibilityScheduleInstance(Box <
    MicrosoftGraphUnifiedRoleEligibilityScheduleInstance >)),
    ("#microsoft.graph.unifiedRoleEligibilityScheduleRequest",
    MicrosoftGraphUnifiedRoleEligibilityScheduleRequest(Box <
    MicrosoftGraphUnifiedRoleEligibilityScheduleRequest >)),
    ("#microsoft.graph.unifiedRoleManagementPolicyApprovalRule",
    MicrosoftGraphUnifiedRoleManagementPolicyApprovalRule(Box <
    MicrosoftGraphUnifiedRoleManagementPolicyApprovalRule >)),
    ("#microsoft.graph.unifiedRoleManagementPolicyAuthenticationContextRule",
    MicrosoftGraphUnifiedRoleManagementPolicyAuthenticationContextRule(Box <
    MicrosoftGraphUnifiedRoleManagementPolicyAuthenticationContextRule >)),
    ("#microsoft.graph.unifiedRoleManagementPolicyEnablementRule",
    MicrosoftGraphUnifiedRoleManagementPolicyEnablementRule(Box <
    MicrosoftGraphUnifiedRoleManagementPolicyEnablementRule >)),
    ("#microsoft.graph.unifiedRoleManagementPolicyExpirationRule",
    MicrosoftGraphUnifiedRoleManagementPolicyExpirationRule(Box <
    MicrosoftGraphUnifiedRoleManagementPolicyExpirationRule >)),
    ("#microsoft.graph.unifiedRoleManagementPolicyNotificationRule",
    MicrosoftGraphUnifiedRoleManagementPolicyNotificationRule(Box <
    MicrosoftGraphUnifiedRoleManagementPolicyNotificationRule >)),
    ("#microsoft.graph.unmuteParticipantOperation",
    MicrosoftGraphUnmuteParticipantOperation(Box <
    MicrosoftGraphUnmuteParticipantOperation >)),
    ("#microsoft.graph.updateRecordingStatusOperation",
    MicrosoftGraphUpdateRecordingStatusOperation(Box <
    MicrosoftGraphUpdateRecordingStatusOperation >)),
    ("#microsoft.graph.urlAssessmentRequest", MicrosoftGraphUrlAssessmentRequest(Box <
    MicrosoftGraphUrlAssessmentRequest >)), ("#microsoft.graph.user",
    MicrosoftGraphUser(Box < MicrosoftGraphUser >)),
    ("#microsoft.graph.userConsentRequest", MicrosoftGraphUserConsentRequest(Box <
    MicrosoftGraphUserConsentRequest >)),
    ("#microsoft.graph.userDataSecurityAndGovernance",
    MicrosoftGraphUserDataSecurityAndGovernance(Box <
    MicrosoftGraphUserDataSecurityAndGovernance >)),
    ("#microsoft.graph.userScopeTeamsAppInstallation",
    MicrosoftGraphUserScopeTeamsAppInstallation(Box <
    MicrosoftGraphUserScopeTeamsAppInstallation >)),
    ("#microsoft.graph.userSignInInsight", MicrosoftGraphUserSignInInsight(Box <
    MicrosoftGraphUserSignInInsight >)),
    ("#microsoft.graph.virtualEventRegistrationCustomQuestion",
    MicrosoftGraphVirtualEventRegistrationCustomQuestion(Box <
    MicrosoftGraphVirtualEventRegistrationCustomQuestion >)),
    ("#microsoft.graph.virtualEventRegistrationPredefinedQuestion",
    MicrosoftGraphVirtualEventRegistrationPredefinedQuestion(Box <
    MicrosoftGraphVirtualEventRegistrationPredefinedQuestion >)),
    ("#microsoft.graph.virtualEventSession", MicrosoftGraphVirtualEventSession(Box <
    MicrosoftGraphVirtualEventSession >)), ("#microsoft.graph.virtualEventTownhall",
    MicrosoftGraphVirtualEventTownhall(Box < MicrosoftGraphVirtualEventTownhall >)),
    ("#microsoft.graph.virtualEventWebinar", MicrosoftGraphVirtualEventWebinar(Box <
    MicrosoftGraphVirtualEventWebinar >)),
    ("#microsoft.graph.virtualEventWebinarRegistrationConfiguration",
    MicrosoftGraphVirtualEventWebinarRegistrationConfiguration(Box <
    MicrosoftGraphVirtualEventWebinarRegistrationConfiguration >)),
    ("#microsoft.graph.voiceAuthenticationMethodConfiguration",
    MicrosoftGraphVoiceAuthenticationMethodConfiguration(Box <
    MicrosoftGraphVoiceAuthenticationMethodConfiguration >)), ("#microsoft.graph.webApp",
    MicrosoftGraphWebApp(Box < MicrosoftGraphWebApp >)),
    ("#microsoft.graph.whatIfAnalysisResult", MicrosoftGraphWhatIfAnalysisResult(Box <
    MicrosoftGraphWhatIfAnalysisResult >)),
    ("#microsoft.graph.windows10CompliancePolicy",
    MicrosoftGraphWindows10CompliancePolicy(Box < MicrosoftGraphWindows10CompliancePolicy
    >)), ("#microsoft.graph.windows10CustomConfiguration",
    MicrosoftGraphWindows10CustomConfiguration(Box <
    MicrosoftGraphWindows10CustomConfiguration >)),
    ("#microsoft.graph.windows10EndpointProtectionConfiguration",
    MicrosoftGraphWindows10EndpointProtectionConfiguration(Box <
    MicrosoftGraphWindows10EndpointProtectionConfiguration >)),
    ("#microsoft.graph.windows10EnrollmentCompletionPageConfiguration",
    MicrosoftGraphWindows10EnrollmentCompletionPageConfiguration(Box <
    MicrosoftGraphWindows10EnrollmentCompletionPageConfiguration >)),
    ("#microsoft.graph.windows10EnterpriseModernAppManagementConfiguration",
    MicrosoftGraphWindows10EnterpriseModernAppManagementConfiguration(Box <
    MicrosoftGraphWindows10EnterpriseModernAppManagementConfiguration >)),
    ("#microsoft.graph.windows10GeneralConfiguration",
    MicrosoftGraphWindows10GeneralConfiguration(Box <
    MicrosoftGraphWindows10GeneralConfiguration >)),
    ("#microsoft.graph.windows10MobileCompliancePolicy",
    MicrosoftGraphWindows10MobileCompliancePolicy(Box <
    MicrosoftGraphWindows10MobileCompliancePolicy >)),
    ("#microsoft.graph.windows10SecureAssessmentConfiguration",
    MicrosoftGraphWindows10SecureAssessmentConfiguration(Box <
    MicrosoftGraphWindows10SecureAssessmentConfiguration >)),
    ("#microsoft.graph.windows10TeamGeneralConfiguration",
    MicrosoftGraphWindows10TeamGeneralConfiguration(Box <
    MicrosoftGraphWindows10TeamGeneralConfiguration >)),
    ("#microsoft.graph.windows81CompliancePolicy",
    MicrosoftGraphWindows81CompliancePolicy(Box < MicrosoftGraphWindows81CompliancePolicy
    >)), ("#microsoft.graph.windows81GeneralConfiguration",
    MicrosoftGraphWindows81GeneralConfiguration(Box <
    MicrosoftGraphWindows81GeneralConfiguration >)),
    ("#microsoft.graph.windowsDefenderAdvancedThreatProtectionConfiguration",
    MicrosoftGraphWindowsDefenderAdvancedThreatProtectionConfiguration(Box <
    MicrosoftGraphWindowsDefenderAdvancedThreatProtectionConfiguration >)),
    ("#microsoft.graph.windowsHelloForBusinessAuthenticationMethod",
    MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod(Box <
    MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod >)),
    ("#microsoft.graph.windowsInformationProtection",
    MicrosoftGraphWindowsInformationProtection(Box <
    MicrosoftGraphWindowsInformationProtection >)),
    ("#microsoft.graph.windowsMicrosoftEdgeApp",
    MicrosoftGraphWindowsMicrosoftEdgeApp(Box < MicrosoftGraphWindowsMicrosoftEdgeApp
    >)), ("#microsoft.graph.windowsPhone81CompliancePolicy",
    MicrosoftGraphWindowsPhone81CompliancePolicy(Box <
    MicrosoftGraphWindowsPhone81CompliancePolicy >)),
    ("#microsoft.graph.windowsPhone81CustomConfiguration",
    MicrosoftGraphWindowsPhone81CustomConfiguration(Box <
    MicrosoftGraphWindowsPhone81CustomConfiguration >)),
    ("#microsoft.graph.windowsPhone81GeneralConfiguration",
    MicrosoftGraphWindowsPhone81GeneralConfiguration(Box <
    MicrosoftGraphWindowsPhone81GeneralConfiguration >)),
    ("#microsoft.graph.windowsUniversalAppXContainedApp",
    MicrosoftGraphWindowsUniversalAppXcontainedApp(Box <
    MicrosoftGraphWindowsUniversalAppXcontainedApp >)),
    ("#microsoft.graph.windowsUpdateForBusinessConfiguration",
    MicrosoftGraphWindowsUpdateForBusinessConfiguration(Box <
    MicrosoftGraphWindowsUpdateForBusinessConfiguration >)),
    ("#microsoft.graph.windowsWebApp", MicrosoftGraphWindowsWebApp(Box <
    MicrosoftGraphWindowsWebApp >)), ("#microsoft.graph.workforceIntegration",
    MicrosoftGraphWorkforceIntegration(Box < MicrosoftGraphWorkforceIntegration >)),
    ("#microsoft.graph.x509CertificateAuthenticationMethodConfiguration",
    MicrosoftGraphX509CertificateAuthenticationMethodConfiguration(Box <
    MicrosoftGraphX509CertificateAuthenticationMethodConfiguration >)),
    ("#microsoft.graph.x509CertificateCombinationConfiguration",
    MicrosoftGraphX509CertificateCombinationConfiguration(Box <
    MicrosoftGraphX509CertificateCombinationConfiguration >)),
    ("#microsoft.graph.accessPackage", MicrosoftGraphAccessPackage(Box <
    MicrosoftGraphAccessPackage >)), ("#microsoft.graph.accessPackageAssignment",
    MicrosoftGraphAccessPackageAssignment(Box < MicrosoftGraphAccessPackageAssignment
    >)), ("#microsoft.graph.accessPackageAssignmentPolicy",
    MicrosoftGraphAccessPackageAssignmentPolicy(Box <
    MicrosoftGraphAccessPackageAssignmentPolicy >)),
    ("#microsoft.graph.accessPackageAssignmentRequest",
    MicrosoftGraphAccessPackageAssignmentRequest(Box <
    MicrosoftGraphAccessPackageAssignmentRequest >)),
    ("#microsoft.graph.accessPackageCatalog", MicrosoftGraphAccessPackageCatalog(Box <
    MicrosoftGraphAccessPackageCatalog >)), ("#microsoft.graph.accessPackageQuestion",
    MicrosoftGraphAccessPackageQuestion(Box < MicrosoftGraphAccessPackageQuestion >)),
    ("#microsoft.graph.accessPackageResource", MicrosoftGraphAccessPackageResource(Box <
    MicrosoftGraphAccessPackageResource >)),
    ("#microsoft.graph.accessPackageResourceEnvironment",
    MicrosoftGraphAccessPackageResourceEnvironment(Box <
    MicrosoftGraphAccessPackageResourceEnvironment >)),
    ("#microsoft.graph.accessPackageResourceRequest",
    MicrosoftGraphAccessPackageResourceRequest(Box <
    MicrosoftGraphAccessPackageResourceRequest >)),
    ("#microsoft.graph.accessPackageResourceRole",
    MicrosoftGraphAccessPackageResourceRole(Box < MicrosoftGraphAccessPackageResourceRole
    >)), ("#microsoft.graph.accessPackageResourceRoleScope",
    MicrosoftGraphAccessPackageResourceRoleScope(Box <
    MicrosoftGraphAccessPackageResourceRoleScope >)),
    ("#microsoft.graph.accessPackageResourceScope",
    MicrosoftGraphAccessPackageResourceScope(Box <
    MicrosoftGraphAccessPackageResourceScope >)),
    ("#microsoft.graph.accessPackageSubject", MicrosoftGraphAccessPackageSubject(Box <
    MicrosoftGraphAccessPackageSubject >)),
    ("#microsoft.graph.accessReviewHistoryDefinition",
    MicrosoftGraphAccessReviewHistoryDefinition(Box <
    MicrosoftGraphAccessReviewHistoryDefinition >)),
    ("#microsoft.graph.accessReviewHistoryInstance",
    MicrosoftGraphAccessReviewHistoryInstance(Box <
    MicrosoftGraphAccessReviewHistoryInstance >)),
    ("#microsoft.graph.accessReviewInstance", MicrosoftGraphAccessReviewInstance(Box <
    MicrosoftGraphAccessReviewInstance >)),
    ("#microsoft.graph.accessReviewInstanceDecisionItem",
    MicrosoftGraphAccessReviewInstanceDecisionItem(Box <
    MicrosoftGraphAccessReviewInstanceDecisionItem >)),
    ("#microsoft.graph.accessReviewReviewer", MicrosoftGraphAccessReviewReviewer(Box <
    MicrosoftGraphAccessReviewReviewer >)),
    ("#microsoft.graph.accessReviewScheduleDefinition",
    MicrosoftGraphAccessReviewScheduleDefinition(Box <
    MicrosoftGraphAccessReviewScheduleDefinition >)),
    ("#microsoft.graph.accessReviewSet", MicrosoftGraphAccessReviewSet(Box <
    MicrosoftGraphAccessReviewSet >)), ("#microsoft.graph.accessReviewStage",
    MicrosoftGraphAccessReviewStage(Box < MicrosoftGraphAccessReviewStage >)),
    ("#microsoft.graph.activitiesContainer", MicrosoftGraphActivitiesContainer(Box <
    MicrosoftGraphActivitiesContainer >)), ("#microsoft.graph.activityHistoryItem",
    MicrosoftGraphActivityHistoryItem(Box < MicrosoftGraphActivityHistoryItem >)),
    ("#microsoft.graph.adminConsentRequestPolicy",
    MicrosoftGraphAdminConsentRequestPolicy(Box < MicrosoftGraphAdminConsentRequestPolicy
    >)), ("#microsoft.graph.adminMicrosoft365Apps",
    MicrosoftGraphAdminMicrosoft365Apps(Box < MicrosoftGraphAdminMicrosoft365Apps >)),
    ("#microsoft.graph.adminReportSettings", MicrosoftGraphAdminReportSettings(Box <
    MicrosoftGraphAdminReportSettings >)), ("#microsoft.graph.agreement",
    MicrosoftGraphAgreement(Box < MicrosoftGraphAgreement >)),
    ("#microsoft.graph.agreementAcceptance", MicrosoftGraphAgreementAcceptance(Box <
    MicrosoftGraphAgreementAcceptance >)), ("#microsoft.graph.agreementFileProperties",
    MicrosoftGraphAgreementFileProperties(Box < MicrosoftGraphAgreementFileProperties
    >)), ("#microsoft.graph.aiInteraction", MicrosoftGraphAiInteraction(Box <
    MicrosoftGraphAiInteraction >)), ("#microsoft.graph.aiInteractionHistory",
    MicrosoftGraphAiInteractionHistory(Box < MicrosoftGraphAiInteractionHistory >)),
    ("#microsoft.graph.aiUser", MicrosoftGraphAiUser(Box < MicrosoftGraphAiUser >)),
    ("#microsoft.graph.alert", MicrosoftGraphAlert(Box < MicrosoftGraphAlert >)),
    ("#microsoft.graph.allowedValue", MicrosoftGraphAllowedValue(Box <
    MicrosoftGraphAllowedValue >)), ("#microsoft.graph.appCatalogs",
    MicrosoftGraphAppCatalogs(Box < MicrosoftGraphAppCatalogs >)),
    ("#microsoft.graph.appConsentApprovalRoute",
    MicrosoftGraphAppConsentApprovalRoute(Box < MicrosoftGraphAppConsentApprovalRoute
    >)), ("#microsoft.graph.appConsentRequest", MicrosoftGraphAppConsentRequest(Box <
    MicrosoftGraphAppConsentRequest >)), ("#microsoft.graph.appLogCollectionRequest",
    MicrosoftGraphAppLogCollectionRequest(Box < MicrosoftGraphAppLogCollectionRequest
    >)), ("#microsoft.graph.appScope", MicrosoftGraphAppScope(Box <
    MicrosoftGraphAppScope >)), ("#microsoft.graph.applePushNotificationCertificate",
    MicrosoftGraphApplePushNotificationCertificate(Box <
    MicrosoftGraphApplePushNotificationCertificate >)),
    ("#microsoft.graph.applicationTemplate", MicrosoftGraphApplicationTemplate(Box <
    MicrosoftGraphApplicationTemplate >)), ("#microsoft.graph.approval",
    MicrosoftGraphApproval(Box < MicrosoftGraphApproval >)),
    ("#microsoft.graph.approvalStage", MicrosoftGraphApprovalStage(Box <
    MicrosoftGraphApprovalStage >)), ("#microsoft.graph.attachment",
    MicrosoftGraphAttachment(Box < MicrosoftGraphAttachment >)),
    ("#microsoft.graph.attachmentBase", MicrosoftGraphAttachmentBase(Box <
    MicrosoftGraphAttachmentBase >)), ("#microsoft.graph.attachmentSession",
    MicrosoftGraphAttachmentSession(Box < MicrosoftGraphAttachmentSession >)),
    ("#microsoft.graph.attackSimulationRoot", MicrosoftGraphAttackSimulationRoot(Box <
    MicrosoftGraphAttackSimulationRoot >)), ("#microsoft.graph.attendanceRecord",
    MicrosoftGraphAttendanceRecord(Box < MicrosoftGraphAttendanceRecord >)),
    ("#microsoft.graph.attributeMappingFunctionSchema",
    MicrosoftGraphAttributeMappingFunctionSchema(Box <
    MicrosoftGraphAttributeMappingFunctionSchema >)), ("#microsoft.graph.attributeSet",
    MicrosoftGraphAttributeSet(Box < MicrosoftGraphAttributeSet >)),
    ("#microsoft.graph.audioRoutingGroup", MicrosoftGraphAudioRoutingGroup(Box <
    MicrosoftGraphAudioRoutingGroup >)), ("#microsoft.graph.auditEvent",
    MicrosoftGraphAuditEvent(Box < MicrosoftGraphAuditEvent >)),
    ("#microsoft.graph.auditLogRoot", MicrosoftGraphAuditLogRoot(Box <
    MicrosoftGraphAuditLogRoot >)), ("#microsoft.graph.authentication",
    MicrosoftGraphAuthentication(Box < MicrosoftGraphAuthentication >)),
    ("#microsoft.graph.authenticationCombinationConfiguration",
    MicrosoftGraphAuthenticationCombinationConfiguration(Box <
    MicrosoftGraphAuthenticationCombinationConfiguration >)),
    ("#microsoft.graph.authenticationContextClassReference",
    MicrosoftGraphAuthenticationContextClassReference(Box <
    MicrosoftGraphAuthenticationContextClassReference >)),
    ("#microsoft.graph.authenticationEventListener",
    MicrosoftGraphAuthenticationEventListener(Box <
    MicrosoftGraphAuthenticationEventListener >)),
    ("#microsoft.graph.authenticationEventsFlow",
    MicrosoftGraphAuthenticationEventsFlow(Box < MicrosoftGraphAuthenticationEventsFlow
    >)), ("#microsoft.graph.authenticationFlowsPolicy",
    MicrosoftGraphAuthenticationFlowsPolicy(Box < MicrosoftGraphAuthenticationFlowsPolicy
    >)), ("#microsoft.graph.authenticationMethod", MicrosoftGraphAuthenticationMethod(Box
    < MicrosoftGraphAuthenticationMethod >)),
    ("#microsoft.graph.authenticationMethodConfiguration",
    MicrosoftGraphAuthenticationMethodConfiguration(Box <
    MicrosoftGraphAuthenticationMethodConfiguration >)),
    ("#microsoft.graph.authenticationMethodModeDetail",
    MicrosoftGraphAuthenticationMethodModeDetail(Box <
    MicrosoftGraphAuthenticationMethodModeDetail >)),
    ("#microsoft.graph.authenticationMethodTarget",
    MicrosoftGraphAuthenticationMethodTarget(Box <
    MicrosoftGraphAuthenticationMethodTarget >)),
    ("#microsoft.graph.authenticationMethodsPolicy",
    MicrosoftGraphAuthenticationMethodsPolicy(Box <
    MicrosoftGraphAuthenticationMethodsPolicy >)),
    ("#microsoft.graph.authenticationMethodsRoot",
    MicrosoftGraphAuthenticationMethodsRoot(Box < MicrosoftGraphAuthenticationMethodsRoot
    >)), ("#microsoft.graph.authenticationStrengthPolicy",
    MicrosoftGraphAuthenticationStrengthPolicy(Box <
    MicrosoftGraphAuthenticationStrengthPolicy >)),
    ("#microsoft.graph.authenticationStrengthRoot",
    MicrosoftGraphAuthenticationStrengthRoot(Box <
    MicrosoftGraphAuthenticationStrengthRoot >)), ("#microsoft.graph.authoredNote",
    MicrosoftGraphAuthoredNote(Box < MicrosoftGraphAuthoredNote >)),
    ("#microsoft.graph.backupRestoreRoot", MicrosoftGraphBackupRestoreRoot(Box <
    MicrosoftGraphBackupRestoreRoot >)), ("#microsoft.graph.baseItem",
    MicrosoftGraphBaseItem(Box < MicrosoftGraphBaseItem >)),
    ("#microsoft.graph.baseItemVersion", MicrosoftGraphBaseItemVersion(Box <
    MicrosoftGraphBaseItemVersion >)), ("#microsoft.graph.bitlocker",
    MicrosoftGraphBitlocker(Box < MicrosoftGraphBitlocker >)),
    ("#microsoft.graph.bitlockerRecoveryKey", MicrosoftGraphBitlockerRecoveryKey(Box <
    MicrosoftGraphBitlockerRecoveryKey >)), ("#microsoft.graph.bookingAppointment",
    MicrosoftGraphBookingAppointment(Box < MicrosoftGraphBookingAppointment >)),
    ("#microsoft.graph.bookingBusiness", MicrosoftGraphBookingBusiness(Box <
    MicrosoftGraphBookingBusiness >)), ("#microsoft.graph.bookingCurrency",
    MicrosoftGraphBookingCurrency(Box < MicrosoftGraphBookingCurrency >)),
    ("#microsoft.graph.bookingCustomQuestion", MicrosoftGraphBookingCustomQuestion(Box <
    MicrosoftGraphBookingCustomQuestion >)), ("#microsoft.graph.bookingCustomerBase",
    MicrosoftGraphBookingCustomerBase(Box < MicrosoftGraphBookingCustomerBase >)),
    ("#microsoft.graph.bookingService", MicrosoftGraphBookingService(Box <
    MicrosoftGraphBookingService >)), ("#microsoft.graph.bookingStaffMemberBase",
    MicrosoftGraphBookingStaffMemberBase(Box < MicrosoftGraphBookingStaffMemberBase >)),
    ("#microsoft.graph.browserSharedCookie", MicrosoftGraphBrowserSharedCookie(Box <
    MicrosoftGraphBrowserSharedCookie >)), ("#microsoft.graph.browserSite",
    MicrosoftGraphBrowserSite(Box < MicrosoftGraphBrowserSite >)),
    ("#microsoft.graph.browserSiteList", MicrosoftGraphBrowserSiteList(Box <
    MicrosoftGraphBrowserSiteList >)), ("#microsoft.graph.bulkUpload",
    MicrosoftGraphBulkUpload(Box < MicrosoftGraphBulkUpload >)),
    ("#microsoft.graph.calendar", MicrosoftGraphCalendar(Box < MicrosoftGraphCalendar
    >)), ("#microsoft.graph.calendarGroup", MicrosoftGraphCalendarGroup(Box <
    MicrosoftGraphCalendarGroup >)), ("#microsoft.graph.calendarPermission",
    MicrosoftGraphCalendarPermission(Box < MicrosoftGraphCalendarPermission >)),
    ("#microsoft.graph.call", MicrosoftGraphCall(Box < MicrosoftGraphCall >)),
    ("#microsoft.graph.callEvent", MicrosoftGraphCallEvent(Box < MicrosoftGraphCallEvent
    >)), ("#microsoft.graph.callRecording", MicrosoftGraphCallRecording(Box <
    MicrosoftGraphCallRecording >)), ("#microsoft.graph.callRecords.callRecord",
    MicrosoftGraphCallRecordsCallRecord(Box < MicrosoftGraphCallRecordsCallRecord >)),
    ("#microsoft.graph.callRecords.participantBase",
    MicrosoftGraphCallRecordsParticipantBase(Box <
    MicrosoftGraphCallRecordsParticipantBase >)),
    ("#microsoft.graph.callRecords.segment", MicrosoftGraphCallRecordsSegment(Box <
    MicrosoftGraphCallRecordsSegment >)), ("#microsoft.graph.callRecords.session",
    MicrosoftGraphCallRecordsSession(Box < MicrosoftGraphCallRecordsSession >)),
    ("#microsoft.graph.callTranscript", MicrosoftGraphCallTranscript(Box <
    MicrosoftGraphCallTranscript >)), ("#microsoft.graph.canvasLayout",
    MicrosoftGraphCanvasLayout(Box < MicrosoftGraphCanvasLayout >)),
    ("#microsoft.graph.certificateBasedAuthConfiguration",
    MicrosoftGraphCertificateBasedAuthConfiguration(Box <
    MicrosoftGraphCertificateBasedAuthConfiguration >)),
    ("#microsoft.graph.changeTrackedEntity", MicrosoftGraphChangeTrackedEntity(Box <
    MicrosoftGraphChangeTrackedEntity >)), ("#microsoft.graph.channel",
    MicrosoftGraphChannel(Box < MicrosoftGraphChannel >)), ("#microsoft.graph.chat",
    MicrosoftGraphChat(Box < MicrosoftGraphChat >)), ("#microsoft.graph.chatMessage",
    MicrosoftGraphChatMessage(Box < MicrosoftGraphChatMessage >)),
    ("#microsoft.graph.chatMessageInfo", MicrosoftGraphChatMessageInfo(Box <
    MicrosoftGraphChatMessageInfo >)), ("#microsoft.graph.checklistItem",
    MicrosoftGraphChecklistItem(Box < MicrosoftGraphChecklistItem >)),
    ("#microsoft.graph.cloudClipboardItem", MicrosoftGraphCloudClipboardItem(Box <
    MicrosoftGraphCloudClipboardItem >)), ("#microsoft.graph.cloudClipboardRoot",
    MicrosoftGraphCloudClipboardRoot(Box < MicrosoftGraphCloudClipboardRoot >)),
    ("#microsoft.graph.cloudPC", MicrosoftGraphCloudPc(Box < MicrosoftGraphCloudPc >)),
    ("#microsoft.graph.cloudPcAuditEvent", MicrosoftGraphCloudPcAuditEvent(Box <
    MicrosoftGraphCloudPcAuditEvent >)), ("#microsoft.graph.cloudPcDeviceImage",
    MicrosoftGraphCloudPcDeviceImage(Box < MicrosoftGraphCloudPcDeviceImage >)),
    ("#microsoft.graph.cloudPcGalleryImage", MicrosoftGraphCloudPcGalleryImage(Box <
    MicrosoftGraphCloudPcGalleryImage >)),
    ("#microsoft.graph.cloudPcOnPremisesConnection",
    MicrosoftGraphCloudPcOnPremisesConnection(Box <
    MicrosoftGraphCloudPcOnPremisesConnection >)),
    ("#microsoft.graph.cloudPcProvisioningPolicy",
    MicrosoftGraphCloudPcProvisioningPolicy(Box < MicrosoftGraphCloudPcProvisioningPolicy
    >)), ("#microsoft.graph.cloudPcProvisioningPolicyAssignment",
    MicrosoftGraphCloudPcProvisioningPolicyAssignment(Box <
    MicrosoftGraphCloudPcProvisioningPolicyAssignment >)),
    ("#microsoft.graph.cloudPcUserSetting", MicrosoftGraphCloudPcUserSetting(Box <
    MicrosoftGraphCloudPcUserSetting >)),
    ("#microsoft.graph.cloudPcUserSettingAssignment",
    MicrosoftGraphCloudPcUserSettingAssignment(Box <
    MicrosoftGraphCloudPcUserSettingAssignment >)), ("#microsoft.graph.columnDefinition",
    MicrosoftGraphColumnDefinition(Box < MicrosoftGraphColumnDefinition >)),
    ("#microsoft.graph.columnLink", MicrosoftGraphColumnLink(Box <
    MicrosoftGraphColumnLink >)), ("#microsoft.graph.commsOperation",
    MicrosoftGraphCommsOperation(Box < MicrosoftGraphCommsOperation >)),
    ("#microsoft.graph.community", MicrosoftGraphCommunity(Box < MicrosoftGraphCommunity
    >)), ("#microsoft.graph.companySubscription", MicrosoftGraphCompanySubscription(Box <
    MicrosoftGraphCompanySubscription >)),
    ("#microsoft.graph.complianceManagementPartner",
    MicrosoftGraphComplianceManagementPartner(Box <
    MicrosoftGraphComplianceManagementPartner >)),
    ("#microsoft.graph.conditionalAccessPolicy",
    MicrosoftGraphConditionalAccessPolicy(Box < MicrosoftGraphConditionalAccessPolicy
    >)), ("#microsoft.graph.conditionalAccessRoot",
    MicrosoftGraphConditionalAccessRoot(Box < MicrosoftGraphConditionalAccessRoot >)),
    ("#microsoft.graph.conditionalAccessTemplate",
    MicrosoftGraphConditionalAccessTemplate(Box < MicrosoftGraphConditionalAccessTemplate
    >)), ("#microsoft.graph.connectedOrganization",
    MicrosoftGraphConnectedOrganization(Box < MicrosoftGraphConnectedOrganization >)),
    ("#microsoft.graph.contactFolder", MicrosoftGraphContactFolder(Box <
    MicrosoftGraphContactFolder >)), ("#microsoft.graph.contentActivity",
    MicrosoftGraphContentActivity(Box < MicrosoftGraphContentActivity >)),
    ("#microsoft.graph.contentSharingSession", MicrosoftGraphContentSharingSession(Box <
    MicrosoftGraphContentSharingSession >)), ("#microsoft.graph.contentType",
    MicrosoftGraphContentType(Box < MicrosoftGraphContentType >)),
    ("#microsoft.graph.conversation", MicrosoftGraphConversation(Box <
    MicrosoftGraphConversation >)), ("#microsoft.graph.conversationMember",
    MicrosoftGraphConversationMember(Box < MicrosoftGraphConversationMember >)),
    ("#microsoft.graph.conversationThread", MicrosoftGraphConversationThread(Box <
    MicrosoftGraphConversationThread >)), ("#microsoft.graph.copilotAdmin",
    MicrosoftGraphCopilotAdmin(Box < MicrosoftGraphCopilotAdmin >)),
    ("#microsoft.graph.copilotAdminLimitedMode",
    MicrosoftGraphCopilotAdminLimitedMode(Box < MicrosoftGraphCopilotAdminLimitedMode
    >)), ("#microsoft.graph.copilotAdminSetting", MicrosoftGraphCopilotAdminSetting(Box <
    MicrosoftGraphCopilotAdminSetting >)),
    ("#microsoft.graph.crossTenantAccessPolicyConfigurationDefault",
    MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault(Box <
    MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault >)),
    ("#microsoft.graph.customCalloutExtension", MicrosoftGraphCustomCalloutExtension(Box
    < MicrosoftGraphCustomCalloutExtension >)),
    ("#microsoft.graph.customExtensionStageSetting",
    MicrosoftGraphCustomExtensionStageSetting(Box <
    MicrosoftGraphCustomExtensionStageSetting >)),
    ("#microsoft.graph.customSecurityAttributeDefinition",
    MicrosoftGraphCustomSecurityAttributeDefinition(Box <
    MicrosoftGraphCustomSecurityAttributeDefinition >)),
    ("#microsoft.graph.dataPolicyOperation", MicrosoftGraphDataPolicyOperation(Box <
    MicrosoftGraphDataPolicyOperation >)), ("#microsoft.graph.dataSecurityAndGovernance",
    MicrosoftGraphDataSecurityAndGovernance(Box < MicrosoftGraphDataSecurityAndGovernance
    >)), ("#microsoft.graph.delegatedAdminAccessAssignment",
    MicrosoftGraphDelegatedAdminAccessAssignment(Box <
    MicrosoftGraphDelegatedAdminAccessAssignment >)),
    ("#microsoft.graph.delegatedAdminCustomer", MicrosoftGraphDelegatedAdminCustomer(Box
    < MicrosoftGraphDelegatedAdminCustomer >)),
    ("#microsoft.graph.delegatedAdminRelationship",
    MicrosoftGraphDelegatedAdminRelationship(Box <
    MicrosoftGraphDelegatedAdminRelationship >)),
    ("#microsoft.graph.delegatedAdminRelationshipOperation",
    MicrosoftGraphDelegatedAdminRelationshipOperation(Box <
    MicrosoftGraphDelegatedAdminRelationshipOperation >)),
    ("#microsoft.graph.delegatedAdminRelationshipRequest",
    MicrosoftGraphDelegatedAdminRelationshipRequest(Box <
    MicrosoftGraphDelegatedAdminRelationshipRequest >)),
    ("#microsoft.graph.delegatedAdminServiceManagementDetail",
    MicrosoftGraphDelegatedAdminServiceManagementDetail(Box <
    MicrosoftGraphDelegatedAdminServiceManagementDetail >)),
    ("#microsoft.graph.delegatedPermissionClassification",
    MicrosoftGraphDelegatedPermissionClassification(Box <
    MicrosoftGraphDelegatedPermissionClassification >)), ("#microsoft.graph.deletedChat",
    MicrosoftGraphDeletedChat(Box < MicrosoftGraphDeletedChat >)),
    ("#microsoft.graph.deletedItemContainer", MicrosoftGraphDeletedItemContainer(Box <
    MicrosoftGraphDeletedItemContainer >)), ("#microsoft.graph.deletedTeam",
    MicrosoftGraphDeletedTeam(Box < MicrosoftGraphDeletedTeam >)),
    ("#microsoft.graph.deltaParticipants", MicrosoftGraphDeltaParticipants(Box <
    MicrosoftGraphDeltaParticipants >)), ("#microsoft.graph.detectedApp",
    MicrosoftGraphDetectedApp(Box < MicrosoftGraphDetectedApp >)),
    ("#microsoft.graph.deviceAppManagement", MicrosoftGraphDeviceAppManagement(Box <
    MicrosoftGraphDeviceAppManagement >)), ("#microsoft.graph.deviceCategory",
    MicrosoftGraphDeviceCategory(Box < MicrosoftGraphDeviceCategory >)),
    ("#microsoft.graph.deviceComplianceActionItem",
    MicrosoftGraphDeviceComplianceActionItem(Box <
    MicrosoftGraphDeviceComplianceActionItem >)),
    ("#microsoft.graph.deviceComplianceDeviceOverview",
    MicrosoftGraphDeviceComplianceDeviceOverview(Box <
    MicrosoftGraphDeviceComplianceDeviceOverview >)),
    ("#microsoft.graph.deviceComplianceDeviceStatus",
    MicrosoftGraphDeviceComplianceDeviceStatus(Box <
    MicrosoftGraphDeviceComplianceDeviceStatus >)),
    ("#microsoft.graph.deviceCompliancePolicy", MicrosoftGraphDeviceCompliancePolicy(Box
    < MicrosoftGraphDeviceCompliancePolicy >)),
    ("#microsoft.graph.deviceCompliancePolicyAssignment",
    MicrosoftGraphDeviceCompliancePolicyAssignment(Box <
    MicrosoftGraphDeviceCompliancePolicyAssignment >)),
    ("#microsoft.graph.deviceCompliancePolicyDeviceStateSummary",
    MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary(Box <
    MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary >)),
    ("#microsoft.graph.deviceCompliancePolicySettingStateSummary",
    MicrosoftGraphDeviceCompliancePolicySettingStateSummary(Box <
    MicrosoftGraphDeviceCompliancePolicySettingStateSummary >)),
    ("#microsoft.graph.deviceCompliancePolicyState",
    MicrosoftGraphDeviceCompliancePolicyState(Box <
    MicrosoftGraphDeviceCompliancePolicyState >)),
    ("#microsoft.graph.deviceComplianceScheduledActionForRule",
    MicrosoftGraphDeviceComplianceScheduledActionForRule(Box <
    MicrosoftGraphDeviceComplianceScheduledActionForRule >)),
    ("#microsoft.graph.deviceComplianceSettingState",
    MicrosoftGraphDeviceComplianceSettingState(Box <
    MicrosoftGraphDeviceComplianceSettingState >)),
    ("#microsoft.graph.deviceComplianceUserOverview",
    MicrosoftGraphDeviceComplianceUserOverview(Box <
    MicrosoftGraphDeviceComplianceUserOverview >)),
    ("#microsoft.graph.deviceComplianceUserStatus",
    MicrosoftGraphDeviceComplianceUserStatus(Box <
    MicrosoftGraphDeviceComplianceUserStatus >)),
    ("#microsoft.graph.deviceConfiguration", MicrosoftGraphDeviceConfiguration(Box <
    MicrosoftGraphDeviceConfiguration >)),
    ("#microsoft.graph.deviceConfigurationAssignment",
    MicrosoftGraphDeviceConfigurationAssignment(Box <
    MicrosoftGraphDeviceConfigurationAssignment >)),
    ("#microsoft.graph.deviceConfigurationDeviceOverview",
    MicrosoftGraphDeviceConfigurationDeviceOverview(Box <
    MicrosoftGraphDeviceConfigurationDeviceOverview >)),
    ("#microsoft.graph.deviceConfigurationDeviceStateSummary",
    MicrosoftGraphDeviceConfigurationDeviceStateSummary(Box <
    MicrosoftGraphDeviceConfigurationDeviceStateSummary >)),
    ("#microsoft.graph.deviceConfigurationDeviceStatus",
    MicrosoftGraphDeviceConfigurationDeviceStatus(Box <
    MicrosoftGraphDeviceConfigurationDeviceStatus >)),
    ("#microsoft.graph.deviceConfigurationState",
    MicrosoftGraphDeviceConfigurationState(Box < MicrosoftGraphDeviceConfigurationState
    >)), ("#microsoft.graph.deviceConfigurationUserOverview",
    MicrosoftGraphDeviceConfigurationUserOverview(Box <
    MicrosoftGraphDeviceConfigurationUserOverview >)),
    ("#microsoft.graph.deviceConfigurationUserStatus",
    MicrosoftGraphDeviceConfigurationUserStatus(Box <
    MicrosoftGraphDeviceConfigurationUserStatus >)),
    ("#microsoft.graph.deviceEnrollmentConfiguration",
    MicrosoftGraphDeviceEnrollmentConfiguration(Box <
    MicrosoftGraphDeviceEnrollmentConfiguration >)),
    ("#microsoft.graph.deviceInstallState", MicrosoftGraphDeviceInstallState(Box <
    MicrosoftGraphDeviceInstallState >)), ("#microsoft.graph.deviceLocalCredentialInfo",
    MicrosoftGraphDeviceLocalCredentialInfo(Box < MicrosoftGraphDeviceLocalCredentialInfo
    >)), ("#microsoft.graph.deviceLogCollectionResponse",
    MicrosoftGraphDeviceLogCollectionResponse(Box <
    MicrosoftGraphDeviceLogCollectionResponse >)), ("#microsoft.graph.deviceManagement",
    MicrosoftGraphDeviceManagement(Box < MicrosoftGraphDeviceManagement >)),
    ("#microsoft.graph.deviceManagementCachedReportConfiguration",
    MicrosoftGraphDeviceManagementCachedReportConfiguration(Box <
    MicrosoftGraphDeviceManagementCachedReportConfiguration >)),
    ("#microsoft.graph.deviceManagementExchangeConnector",
    MicrosoftGraphDeviceManagementExchangeConnector(Box <
    MicrosoftGraphDeviceManagementExchangeConnector >)),
    ("#microsoft.graph.deviceManagementExportJob",
    MicrosoftGraphDeviceManagementExportJob(Box < MicrosoftGraphDeviceManagementExportJob
    >)), ("#microsoft.graph.deviceManagementPartner",
    MicrosoftGraphDeviceManagementPartner(Box < MicrosoftGraphDeviceManagementPartner
    >)), ("#microsoft.graph.deviceManagementReports",
    MicrosoftGraphDeviceManagementReports(Box < MicrosoftGraphDeviceManagementReports
    >)), ("#microsoft.graph.deviceManagementTroubleshootingEvent",
    MicrosoftGraphDeviceManagementTroubleshootingEvent(Box <
    MicrosoftGraphDeviceManagementTroubleshootingEvent >)),
    ("#microsoft.graph.deviceRegistrationPolicy",
    MicrosoftGraphDeviceRegistrationPolicy(Box < MicrosoftGraphDeviceRegistrationPolicy
    >)), ("#microsoft.graph.directory", MicrosoftGraphDirectory(Box <
    MicrosoftGraphDirectory >)), ("#microsoft.graph.directoryAudit",
    MicrosoftGraphDirectoryAudit(Box < MicrosoftGraphDirectoryAudit >)),
    ("#microsoft.graph.directoryDefinition", MicrosoftGraphDirectoryDefinition(Box <
    MicrosoftGraphDirectoryDefinition >)), ("#microsoft.graph.directoryObject",
    MicrosoftGraphDirectoryObject(Box < MicrosoftGraphDirectoryObject >)),
    ("#microsoft.graph.domain", MicrosoftGraphDomain(Box < MicrosoftGraphDomain >)),
    ("#microsoft.graph.domainDnsRecord", MicrosoftGraphDomainDnsRecord(Box <
    MicrosoftGraphDomainDnsRecord >)), ("#microsoft.graph.eBookInstallSummary",
    MicrosoftGraphEBookInstallSummary(Box < MicrosoftGraphEBookInstallSummary >)),
    ("#microsoft.graph.edge", MicrosoftGraphEdge(Box < MicrosoftGraphEdge >)),
    ("#microsoft.graph.educationAssignment", MicrosoftGraphEducationAssignment(Box <
    MicrosoftGraphEducationAssignment >)),
    ("#microsoft.graph.educationAssignmentDefaults",
    MicrosoftGraphEducationAssignmentDefaults(Box <
    MicrosoftGraphEducationAssignmentDefaults >)),
    ("#microsoft.graph.educationAssignmentResource",
    MicrosoftGraphEducationAssignmentResource(Box <
    MicrosoftGraphEducationAssignmentResource >)),
    ("#microsoft.graph.educationAssignmentSettings",
    MicrosoftGraphEducationAssignmentSettings(Box <
    MicrosoftGraphEducationAssignmentSettings >)), ("#microsoft.graph.educationCategory",
    MicrosoftGraphEducationCategory(Box < MicrosoftGraphEducationCategory >)),
    ("#microsoft.graph.educationClass", MicrosoftGraphEducationClass(Box <
    MicrosoftGraphEducationClass >)), ("#microsoft.graph.educationGradingCategory",
    MicrosoftGraphEducationGradingCategory(Box < MicrosoftGraphEducationGradingCategory
    >)), ("#microsoft.graph.educationModule", MicrosoftGraphEducationModule(Box <
    MicrosoftGraphEducationModule >)), ("#microsoft.graph.educationModuleResource",
    MicrosoftGraphEducationModuleResource(Box < MicrosoftGraphEducationModuleResource
    >)), ("#microsoft.graph.educationOrganization",
    MicrosoftGraphEducationOrganization(Box < MicrosoftGraphEducationOrganization >)),
    ("#microsoft.graph.educationOutcome", MicrosoftGraphEducationOutcome(Box <
    MicrosoftGraphEducationOutcome >)), ("#microsoft.graph.educationRubric",
    MicrosoftGraphEducationRubric(Box < MicrosoftGraphEducationRubric >)),
    ("#microsoft.graph.educationSubmission", MicrosoftGraphEducationSubmission(Box <
    MicrosoftGraphEducationSubmission >)),
    ("#microsoft.graph.educationSubmissionResource",
    MicrosoftGraphEducationSubmissionResource(Box <
    MicrosoftGraphEducationSubmissionResource >)), ("#microsoft.graph.educationUser",
    MicrosoftGraphEducationUser(Box < MicrosoftGraphEducationUser >)),
    ("#microsoft.graph.employeeExperienceUser", MicrosoftGraphEmployeeExperienceUser(Box
    < MicrosoftGraphEmployeeExperienceUser >)), ("#microsoft.graph.endUserNotification",
    MicrosoftGraphEndUserNotification(Box < MicrosoftGraphEndUserNotification >)),
    ("#microsoft.graph.endUserNotificationDetail",
    MicrosoftGraphEndUserNotificationDetail(Box < MicrosoftGraphEndUserNotificationDetail
    >)), ("#microsoft.graph.enrollmentConfigurationAssignment",
    MicrosoftGraphEnrollmentConfigurationAssignment(Box <
    MicrosoftGraphEnrollmentConfigurationAssignment >)),
    ("#microsoft.graph.enterpriseCodeSigningCertificate",
    MicrosoftGraphEnterpriseCodeSigningCertificate(Box <
    MicrosoftGraphEnterpriseCodeSigningCertificate >)),
    ("#microsoft.graph.entitlementManagement", MicrosoftGraphEntitlementManagement(Box <
    MicrosoftGraphEntitlementManagement >)),
    ("#microsoft.graph.entitlementManagementSettings",
    MicrosoftGraphEntitlementManagementSettings(Box <
    MicrosoftGraphEntitlementManagementSettings >)), ("#microsoft.graph.extension",
    MicrosoftGraphExtension(Box < MicrosoftGraphExtension >)),
    ("#microsoft.graph.externalConnectors.connectionOperation",
    MicrosoftGraphExternalConnectorsConnectionOperation(Box <
    MicrosoftGraphExternalConnectorsConnectionOperation >)),
    ("#microsoft.graph.externalConnectors.externalActivity",
    MicrosoftGraphExternalConnectorsExternalActivity(Box <
    MicrosoftGraphExternalConnectorsExternalActivity >)),
    ("#microsoft.graph.externalConnectors.externalConnection",
    MicrosoftGraphExternalConnectorsExternalConnection(Box <
    MicrosoftGraphExternalConnectorsExternalConnection >)),
    ("#microsoft.graph.externalConnectors.externalGroup",
    MicrosoftGraphExternalConnectorsExternalGroup(Box <
    MicrosoftGraphExternalConnectorsExternalGroup >)),
    ("#microsoft.graph.externalConnectors.externalItem",
    MicrosoftGraphExternalConnectorsExternalItem(Box <
    MicrosoftGraphExternalConnectorsExternalItem >)),
    ("#microsoft.graph.externalConnectors.identity",
    MicrosoftGraphExternalConnectorsIdentity(Box <
    MicrosoftGraphExternalConnectorsIdentity >)),
    ("#microsoft.graph.externalConnectors.schema",
    MicrosoftGraphExternalConnectorsSchema(Box < MicrosoftGraphExternalConnectorsSchema
    >)), ("#microsoft.graph.externalDomainName", MicrosoftGraphExternalDomainName(Box <
    MicrosoftGraphExternalDomainName >)), ("#microsoft.graph.featureRolloutPolicy",
    MicrosoftGraphFeatureRolloutPolicy(Box < MicrosoftGraphFeatureRolloutPolicy >)),
    ("#microsoft.graph.federatedIdentityCredential",
    MicrosoftGraphFederatedIdentityCredential(Box <
    MicrosoftGraphFederatedIdentityCredential >)), ("#microsoft.graph.fieldValueSet",
    MicrosoftGraphFieldValueSet(Box < MicrosoftGraphFieldValueSet >)),
    ("#microsoft.graph.fileStorage", MicrosoftGraphFileStorage(Box <
    MicrosoftGraphFileStorage >)), ("#microsoft.graph.fileStorageContainer",
    MicrosoftGraphFileStorageContainer(Box < MicrosoftGraphFileStorageContainer >)),
    ("#microsoft.graph.filterOperatorSchema", MicrosoftGraphFilterOperatorSchema(Box <
    MicrosoftGraphFilterOperatorSchema >)), ("#microsoft.graph.governanceInsight",
    MicrosoftGraphGovernanceInsight(Box < MicrosoftGraphGovernanceInsight >)),
    ("#microsoft.graph.groupLifecyclePolicy", MicrosoftGraphGroupLifecyclePolicy(Box <
    MicrosoftGraphGroupLifecyclePolicy >)), ("#microsoft.graph.groupSetting",
    MicrosoftGraphGroupSetting(Box < MicrosoftGraphGroupSetting >)),
    ("#microsoft.graph.horizontalSection", MicrosoftGraphHorizontalSection(Box <
    MicrosoftGraphHorizontalSection >)), ("#microsoft.graph.horizontalSectionColumn",
    MicrosoftGraphHorizontalSectionColumn(Box < MicrosoftGraphHorizontalSectionColumn
    >)), ("#microsoft.graph.identityApiConnector", MicrosoftGraphIdentityApiConnector(Box
    < MicrosoftGraphIdentityApiConnector >)), ("#microsoft.graph.identityContainer",
    MicrosoftGraphIdentityContainer(Box < MicrosoftGraphIdentityContainer >)),
    ("#microsoft.graph.identityGovernance.insights",
    MicrosoftGraphIdentityGovernanceInsights(Box <
    MicrosoftGraphIdentityGovernanceInsights >)),
    ("#microsoft.graph.identityGovernance.lifecycleManagementSettings",
    MicrosoftGraphIdentityGovernanceLifecycleManagementSettings(Box <
    MicrosoftGraphIdentityGovernanceLifecycleManagementSettings >)),
    ("#microsoft.graph.identityGovernance.lifecycleWorkflowsContainer",
    MicrosoftGraphIdentityGovernanceLifecycleWorkflowsContainer(Box <
    MicrosoftGraphIdentityGovernanceLifecycleWorkflowsContainer >)),
    ("#microsoft.graph.identityGovernance.run", MicrosoftGraphIdentityGovernanceRun(Box <
    MicrosoftGraphIdentityGovernanceRun >)), ("#microsoft.graph.identityGovernance.task",
    MicrosoftGraphIdentityGovernanceTask(Box < MicrosoftGraphIdentityGovernanceTask >)),
    ("#microsoft.graph.identityGovernance.taskDefinition",
    MicrosoftGraphIdentityGovernanceTaskDefinition(Box <
    MicrosoftGraphIdentityGovernanceTaskDefinition >)),
    ("#microsoft.graph.identityGovernance.taskProcessingResult",
    MicrosoftGraphIdentityGovernanceTaskProcessingResult(Box <
    MicrosoftGraphIdentityGovernanceTaskProcessingResult >)),
    ("#microsoft.graph.identityGovernance.taskReport",
    MicrosoftGraphIdentityGovernanceTaskReport(Box <
    MicrosoftGraphIdentityGovernanceTaskReport >)),
    ("#microsoft.graph.identityGovernance.userProcessingResult",
    MicrosoftGraphIdentityGovernanceUserProcessingResult(Box <
    MicrosoftGraphIdentityGovernanceUserProcessingResult >)),
    ("#microsoft.graph.identityGovernance.workflowTemplate",
    MicrosoftGraphIdentityGovernanceWorkflowTemplate(Box <
    MicrosoftGraphIdentityGovernanceWorkflowTemplate >)),
    ("#microsoft.graph.identityProvider", MicrosoftGraphIdentityProvider(Box <
    MicrosoftGraphIdentityProvider >)), ("#microsoft.graph.identityProviderBase",
    MicrosoftGraphIdentityProviderBase(Box < MicrosoftGraphIdentityProviderBase >)),
    ("#microsoft.graph.identityUserFlow", MicrosoftGraphIdentityUserFlow(Box <
    MicrosoftGraphIdentityUserFlow >)), ("#microsoft.graph.identityUserFlowAttribute",
    MicrosoftGraphIdentityUserFlowAttribute(Box < MicrosoftGraphIdentityUserFlowAttribute
    >)), ("#microsoft.graph.identityUserFlowAttributeAssignment",
    MicrosoftGraphIdentityUserFlowAttributeAssignment(Box <
    MicrosoftGraphIdentityUserFlowAttributeAssignment >)),
    ("#microsoft.graph.importedWindowsAutopilotDeviceIdentity",
    MicrosoftGraphImportedWindowsAutopilotDeviceIdentity(Box <
    MicrosoftGraphImportedWindowsAutopilotDeviceIdentity >)),
    ("#microsoft.graph.importedWindowsAutopilotDeviceIdentityUpload",
    MicrosoftGraphImportedWindowsAutopilotDeviceIdentityUpload(Box <
    MicrosoftGraphImportedWindowsAutopilotDeviceIdentityUpload >)),
    ("#microsoft.graph.inferenceClassification",
    MicrosoftGraphInferenceClassification(Box < MicrosoftGraphInferenceClassification
    >)), ("#microsoft.graph.inferenceClassificationOverride",
    MicrosoftGraphInferenceClassificationOverride(Box <
    MicrosoftGraphInferenceClassificationOverride >)),
    ("#microsoft.graph.insightsSettings", MicrosoftGraphInsightsSettings(Box <
    MicrosoftGraphInsightsSettings >)), ("#microsoft.graph.internetExplorerMode",
    MicrosoftGraphInternetExplorerMode(Box < MicrosoftGraphInternetExplorerMode >)),
    ("#microsoft.graph.invitation", MicrosoftGraphInvitation(Box <
    MicrosoftGraphInvitation >)),
    ("#microsoft.graph.iosLobAppProvisioningConfigurationAssignment",
    MicrosoftGraphIosLobAppProvisioningConfigurationAssignment(Box <
    MicrosoftGraphIosLobAppProvisioningConfigurationAssignment >)),
    ("#microsoft.graph.iosUpdateDeviceStatus", MicrosoftGraphIosUpdateDeviceStatus(Box <
    MicrosoftGraphIosUpdateDeviceStatus >)), ("#microsoft.graph.itemActivity",
    MicrosoftGraphItemActivity(Box < MicrosoftGraphItemActivity >)),
    ("#microsoft.graph.itemActivityStat", MicrosoftGraphItemActivityStat(Box <
    MicrosoftGraphItemActivityStat >)), ("#microsoft.graph.itemAnalytics",
    MicrosoftGraphItemAnalytics(Box < MicrosoftGraphItemAnalytics >)),
    ("#microsoft.graph.itemRetentionLabel", MicrosoftGraphItemRetentionLabel(Box <
    MicrosoftGraphItemRetentionLabel >)), ("#microsoft.graph.labelContentRight",
    MicrosoftGraphLabelContentRight(Box < MicrosoftGraphLabelContentRight >)),
    ("#microsoft.graph.landingPage", MicrosoftGraphLandingPage(Box <
    MicrosoftGraphLandingPage >)), ("#microsoft.graph.landingPageDetail",
    MicrosoftGraphLandingPageDetail(Box < MicrosoftGraphLandingPageDetail >)),
    ("#microsoft.graph.learningContent", MicrosoftGraphLearningContent(Box <
    MicrosoftGraphLearningContent >)), ("#microsoft.graph.learningCourseActivity",
    MicrosoftGraphLearningCourseActivity(Box < MicrosoftGraphLearningCourseActivity >)),
    ("#microsoft.graph.learningProvider", MicrosoftGraphLearningProvider(Box <
    MicrosoftGraphLearningProvider >)), ("#microsoft.graph.licenseDetails",
    MicrosoftGraphLicenseDetails(Box < MicrosoftGraphLicenseDetails >)),
    ("#microsoft.graph.linkedResource", MicrosoftGraphLinkedResource(Box <
    MicrosoftGraphLinkedResource >)), ("#microsoft.graph.localizedNotificationMessage",
    MicrosoftGraphLocalizedNotificationMessage(Box <
    MicrosoftGraphLocalizedNotificationMessage >)), ("#microsoft.graph.loginPage",
    MicrosoftGraphLoginPage(Box < MicrosoftGraphLoginPage >)),
    ("#microsoft.graph.longRunningOperation", MicrosoftGraphLongRunningOperation(Box <
    MicrosoftGraphLongRunningOperation >)),
    ("#microsoft.graph.m365AppsInstallationOptions",
    MicrosoftGraphM365AppsInstallationOptions(Box <
    MicrosoftGraphM365AppsInstallationOptions >)), ("#microsoft.graph.mailFolder",
    MicrosoftGraphMailFolder(Box < MicrosoftGraphMailFolder >)),
    ("#microsoft.graph.malwareStateForWindowsDevice",
    MicrosoftGraphMalwareStateForWindowsDevice(Box <
    MicrosoftGraphMalwareStateForWindowsDevice >)),
    ("#microsoft.graph.managedAppOperation", MicrosoftGraphManagedAppOperation(Box <
    MicrosoftGraphManagedAppOperation >)), ("#microsoft.graph.managedAppPolicy",
    MicrosoftGraphManagedAppPolicy(Box < MicrosoftGraphManagedAppPolicy >)),
    ("#microsoft.graph.managedAppPolicyDeploymentSummary",
    MicrosoftGraphManagedAppPolicyDeploymentSummary(Box <
    MicrosoftGraphManagedAppPolicyDeploymentSummary >)),
    ("#microsoft.graph.managedAppRegistration", MicrosoftGraphManagedAppRegistration(Box
    < MicrosoftGraphManagedAppRegistration >)), ("#microsoft.graph.managedAppStatus",
    MicrosoftGraphManagedAppStatus(Box < MicrosoftGraphManagedAppStatus >)),
    ("#microsoft.graph.managedDevice", MicrosoftGraphManagedDevice(Box <
    MicrosoftGraphManagedDevice >)),
    ("#microsoft.graph.managedDeviceMobileAppConfiguration",
    MicrosoftGraphManagedDeviceMobileAppConfiguration(Box <
    MicrosoftGraphManagedDeviceMobileAppConfiguration >)),
    ("#microsoft.graph.managedDeviceMobileAppConfigurationAssignment",
    MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment(Box <
    MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment >)),
    ("#microsoft.graph.managedDeviceMobileAppConfigurationDeviceStatus",
    MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus(Box <
    MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus >)),
    ("#microsoft.graph.managedDeviceMobileAppConfigurationDeviceSummary",
    MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary(Box <
    MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary >)),
    ("#microsoft.graph.managedDeviceMobileAppConfigurationUserStatus",
    MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus(Box <
    MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus >)),
    ("#microsoft.graph.managedDeviceMobileAppConfigurationUserSummary",
    MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary(Box <
    MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary >)),
    ("#microsoft.graph.managedDeviceOverview", MicrosoftGraphManagedDeviceOverview(Box <
    MicrosoftGraphManagedDeviceOverview >)), ("#microsoft.graph.managedEBook",
    MicrosoftGraphManagedEbook(Box < MicrosoftGraphManagedEbook >)),
    ("#microsoft.graph.managedEBookAssignment", MicrosoftGraphManagedEbookAssignment(Box
    < MicrosoftGraphManagedEbookAssignment >)), ("#microsoft.graph.managedMobileApp",
    MicrosoftGraphManagedMobileApp(Box < MicrosoftGraphManagedMobileApp >)),
    ("#microsoft.graph.meetingAttendanceReport",
    MicrosoftGraphMeetingAttendanceReport(Box < MicrosoftGraphMeetingAttendanceReport
    >)), ("#microsoft.graph.messageRule", MicrosoftGraphMessageRule(Box <
    MicrosoftGraphMessageRule >)), ("#microsoft.graph.mobileApp",
    MicrosoftGraphMobileApp(Box < MicrosoftGraphMobileApp >)),
    ("#microsoft.graph.mobileAppAssignment", MicrosoftGraphMobileAppAssignment(Box <
    MicrosoftGraphMobileAppAssignment >)), ("#microsoft.graph.mobileAppCategory",
    MicrosoftGraphMobileAppCategory(Box < MicrosoftGraphMobileAppCategory >)),
    ("#microsoft.graph.mobileAppContent", MicrosoftGraphMobileAppContent(Box <
    MicrosoftGraphMobileAppContent >)), ("#microsoft.graph.mobileAppContentFile",
    MicrosoftGraphMobileAppContentFile(Box < MicrosoftGraphMobileAppContentFile >)),
    ("#microsoft.graph.mobileAppRelationship", MicrosoftGraphMobileAppRelationship(Box <
    MicrosoftGraphMobileAppRelationship >)),
    ("#microsoft.graph.mobileAppTroubleshootingEvent",
    MicrosoftGraphMobileAppTroubleshootingEvent(Box <
    MicrosoftGraphMobileAppTroubleshootingEvent >)),
    ("#microsoft.graph.mobileContainedApp", MicrosoftGraphMobileContainedApp(Box <
    MicrosoftGraphMobileContainedApp >)),
    ("#microsoft.graph.mobileThreatDefenseConnector",
    MicrosoftGraphMobileThreatDefenseConnector(Box <
    MicrosoftGraphMobileThreatDefenseConnector >)),
    ("#microsoft.graph.multiTenantOrganization",
    MicrosoftGraphMultiTenantOrganization(Box < MicrosoftGraphMultiTenantOrganization
    >)), ("#microsoft.graph.multiTenantOrganizationIdentitySyncPolicyTemplate",
    MicrosoftGraphMultiTenantOrganizationIdentitySyncPolicyTemplate(Box <
    MicrosoftGraphMultiTenantOrganizationIdentitySyncPolicyTemplate >)),
    ("#microsoft.graph.multiTenantOrganizationJoinRequestRecord",
    MicrosoftGraphMultiTenantOrganizationJoinRequestRecord(Box <
    MicrosoftGraphMultiTenantOrganizationJoinRequestRecord >)),
    ("#microsoft.graph.multiTenantOrganizationPartnerConfigurationTemplate",
    MicrosoftGraphMultiTenantOrganizationPartnerConfigurationTemplate(Box <
    MicrosoftGraphMultiTenantOrganizationPartnerConfigurationTemplate >)),
    ("#microsoft.graph.multiValueLegacyExtendedProperty",
    MicrosoftGraphMultiValueLegacyExtendedProperty(Box <
    MicrosoftGraphMultiValueLegacyExtendedProperty >)),
    ("#microsoft.graph.namedLocation", MicrosoftGraphNamedLocation(Box <
    MicrosoftGraphNamedLocation >)), ("#microsoft.graph.notificationMessageTemplate",
    MicrosoftGraphNotificationMessageTemplate(Box <
    MicrosoftGraphNotificationMessageTemplate >)),
    ("#microsoft.graph.oAuth2PermissionGrant", MicrosoftGraphOAuth2PermissionGrant(Box <
    MicrosoftGraphOAuth2PermissionGrant >)), ("#microsoft.graph.officeGraphInsights",
    MicrosoftGraphOfficeGraphInsights(Box < MicrosoftGraphOfficeGraphInsights >)),
    ("#microsoft.graph.onPremisesConditionalAccessSettings",
    MicrosoftGraphOnPremisesConditionalAccessSettings(Box <
    MicrosoftGraphOnPremisesConditionalAccessSettings >)),
    ("#microsoft.graph.onPremisesDirectorySynchronization",
    MicrosoftGraphOnPremisesDirectorySynchronization(Box <
    MicrosoftGraphOnPremisesDirectorySynchronization >)), ("#microsoft.graph.onenote",
    MicrosoftGraphOnenote(Box < MicrosoftGraphOnenote >)),
    ("#microsoft.graph.onenoteEntityBaseModel", MicrosoftGraphOnenoteEntityBaseModel(Box
    < MicrosoftGraphOnenoteEntityBaseModel >)), ("#microsoft.graph.onlineMeetingBase",
    MicrosoftGraphOnlineMeetingBase(Box < MicrosoftGraphOnlineMeetingBase >)),
    ("#microsoft.graph.operation", MicrosoftGraphOperation(Box < MicrosoftGraphOperation
    >)), ("#microsoft.graph.organizationalBrandingProperties",
    MicrosoftGraphOrganizationalBrandingProperties(Box <
    MicrosoftGraphOrganizationalBrandingProperties >)),
    ("#microsoft.graph.outlookCategory", MicrosoftGraphOutlookCategory(Box <
    MicrosoftGraphOutlookCategory >)), ("#microsoft.graph.outlookItem",
    MicrosoftGraphOutlookItem(Box < MicrosoftGraphOutlookItem >)),
    ("#microsoft.graph.outlookUser", MicrosoftGraphOutlookUser(Box <
    MicrosoftGraphOutlookUser >)), ("#microsoft.graph.participant",
    MicrosoftGraphParticipant(Box < MicrosoftGraphParticipant >)),
    ("#microsoft.graph.participantJoiningNotification",
    MicrosoftGraphParticipantJoiningNotification(Box <
    MicrosoftGraphParticipantJoiningNotification >)),
    ("#microsoft.graph.participantLeftNotification",
    MicrosoftGraphParticipantLeftNotification(Box <
    MicrosoftGraphParticipantLeftNotification >)), ("#microsoft.graph.partners",
    MicrosoftGraphPartners(Box < MicrosoftGraphPartners >)),
    ("#microsoft.graph.partners.billing.azureUsage",
    MicrosoftGraphPartnersBillingAzureUsage(Box < MicrosoftGraphPartnersBillingAzureUsage
    >)), ("#microsoft.graph.partners.billing.billedReconciliation",
    MicrosoftGraphPartnersBillingBilledReconciliation(Box <
    MicrosoftGraphPartnersBillingBilledReconciliation >)),
    ("#microsoft.graph.partners.billing.billedUsage",
    MicrosoftGraphPartnersBillingBilledUsage(Box <
    MicrosoftGraphPartnersBillingBilledUsage >)),
    ("#microsoft.graph.partners.billing.billing",
    MicrosoftGraphPartnersBillingBilling(Box < MicrosoftGraphPartnersBillingBilling >)),
    ("#microsoft.graph.partners.billing.billingReconciliation",
    MicrosoftGraphPartnersBillingBillingReconciliation(Box <
    MicrosoftGraphPartnersBillingBillingReconciliation >)),
    ("#microsoft.graph.partners.billing.manifest",
    MicrosoftGraphPartnersBillingManifest(Box < MicrosoftGraphPartnersBillingManifest
    >)), ("#microsoft.graph.partners.billing.operation",
    MicrosoftGraphPartnersBillingOperation(Box < MicrosoftGraphPartnersBillingOperation
    >)), ("#microsoft.graph.partners.billing.unbilledReconciliation",
    MicrosoftGraphPartnersBillingUnbilledReconciliation(Box <
    MicrosoftGraphPartnersBillingUnbilledReconciliation >)),
    ("#microsoft.graph.partners.billing.unbilledUsage",
    MicrosoftGraphPartnersBillingUnbilledUsage(Box <
    MicrosoftGraphPartnersBillingUnbilledUsage >)), ("#microsoft.graph.payload",
    MicrosoftGraphPayload(Box < MicrosoftGraphPayload >)),
    ("#microsoft.graph.peopleAdminSettings", MicrosoftGraphPeopleAdminSettings(Box <
    MicrosoftGraphPeopleAdminSettings >)), ("#microsoft.graph.permission",
    MicrosoftGraphPermission(Box < MicrosoftGraphPermission >)),
    ("#microsoft.graph.permissionGrantConditionSet",
    MicrosoftGraphPermissionGrantConditionSet(Box <
    MicrosoftGraphPermissionGrantConditionSet >)), ("#microsoft.graph.person",
    MicrosoftGraphPerson(Box < MicrosoftGraphPerson >)),
    ("#microsoft.graph.pinnedChatMessageInfo", MicrosoftGraphPinnedChatMessageInfo(Box <
    MicrosoftGraphPinnedChatMessageInfo >)), ("#microsoft.graph.place",
    MicrosoftGraphPlace(Box < MicrosoftGraphPlace >)), ("#microsoft.graph.planner",
    MicrosoftGraphPlanner(Box < MicrosoftGraphPlanner >)),
    ("#microsoft.graph.plannerAssignedToTaskBoardTaskFormat",
    MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat(Box <
    MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat >)),
    ("#microsoft.graph.plannerBucket", MicrosoftGraphPlannerBucket(Box <
    MicrosoftGraphPlannerBucket >)),
    ("#microsoft.graph.plannerBucketTaskBoardTaskFormat",
    MicrosoftGraphPlannerBucketTaskBoardTaskFormat(Box <
    MicrosoftGraphPlannerBucketTaskBoardTaskFormat >)), ("#microsoft.graph.plannerGroup",
    MicrosoftGraphPlannerGroup(Box < MicrosoftGraphPlannerGroup >)),
    ("#microsoft.graph.plannerPlan", MicrosoftGraphPlannerPlan(Box <
    MicrosoftGraphPlannerPlan >)), ("#microsoft.graph.plannerPlanDetails",
    MicrosoftGraphPlannerPlanDetails(Box < MicrosoftGraphPlannerPlanDetails >)),
    ("#microsoft.graph.plannerProgressTaskBoardTaskFormat",
    MicrosoftGraphPlannerProgressTaskBoardTaskFormat(Box <
    MicrosoftGraphPlannerProgressTaskBoardTaskFormat >)),
    ("#microsoft.graph.plannerTask", MicrosoftGraphPlannerTask(Box <
    MicrosoftGraphPlannerTask >)), ("#microsoft.graph.plannerTaskDetails",
    MicrosoftGraphPlannerTaskDetails(Box < MicrosoftGraphPlannerTaskDetails >)),
    ("#microsoft.graph.plannerUser", MicrosoftGraphPlannerUser(Box <
    MicrosoftGraphPlannerUser >)), ("#microsoft.graph.policyRoot",
    MicrosoftGraphPolicyRoot(Box < MicrosoftGraphPolicyRoot >)),
    ("#microsoft.graph.policyTemplate", MicrosoftGraphPolicyTemplate(Box <
    MicrosoftGraphPolicyTemplate >)), ("#microsoft.graph.presence",
    MicrosoftGraphPresence(Box < MicrosoftGraphPresence >)),
    ("#microsoft.graph.printConnector", MicrosoftGraphPrintConnector(Box <
    MicrosoftGraphPrintConnector >)), ("#microsoft.graph.printDocument",
    MicrosoftGraphPrintDocument(Box < MicrosoftGraphPrintDocument >)),
    ("#microsoft.graph.printJob", MicrosoftGraphPrintJob(Box < MicrosoftGraphPrintJob
    >)), ("#microsoft.graph.printOperation", MicrosoftGraphPrintOperation(Box <
    MicrosoftGraphPrintOperation >)), ("#microsoft.graph.printService",
    MicrosoftGraphPrintService(Box < MicrosoftGraphPrintService >)),
    ("#microsoft.graph.printServiceEndpoint", MicrosoftGraphPrintServiceEndpoint(Box <
    MicrosoftGraphPrintServiceEndpoint >)), ("#microsoft.graph.printTask",
    MicrosoftGraphPrintTask(Box < MicrosoftGraphPrintTask >)),
    ("#microsoft.graph.printTaskDefinition", MicrosoftGraphPrintTaskDefinition(Box <
    MicrosoftGraphPrintTaskDefinition >)), ("#microsoft.graph.printTaskTrigger",
    MicrosoftGraphPrintTaskTrigger(Box < MicrosoftGraphPrintTaskTrigger >)),
    ("#microsoft.graph.printUsage", MicrosoftGraphPrintUsage(Box <
    MicrosoftGraphPrintUsage >)), ("#microsoft.graph.printerBase",
    MicrosoftGraphPrinterBase(Box < MicrosoftGraphPrinterBase >)),
    ("#microsoft.graph.privilegedAccessGroup", MicrosoftGraphPrivilegedAccessGroup(Box <
    MicrosoftGraphPrivilegedAccessGroup >)), ("#microsoft.graph.privilegedAccessRoot",
    MicrosoftGraphPrivilegedAccessRoot(Box < MicrosoftGraphPrivilegedAccessRoot >)),
    ("#microsoft.graph.privilegedAccessSchedule",
    MicrosoftGraphPrivilegedAccessSchedule(Box < MicrosoftGraphPrivilegedAccessSchedule
    >)), ("#microsoft.graph.privilegedAccessScheduleInstance",
    MicrosoftGraphPrivilegedAccessScheduleInstance(Box <
    MicrosoftGraphPrivilegedAccessScheduleInstance >)),
    ("#microsoft.graph.profileCardProperty", MicrosoftGraphProfileCardProperty(Box <
    MicrosoftGraphProfileCardProperty >)), ("#microsoft.graph.profilePhoto",
    MicrosoftGraphProfilePhoto(Box < MicrosoftGraphProfilePhoto >)),
    ("#microsoft.graph.pronounsSettings", MicrosoftGraphPronounsSettings(Box <
    MicrosoftGraphPronounsSettings >)), ("#microsoft.graph.protectionPolicyBase",
    MicrosoftGraphProtectionPolicyBase(Box < MicrosoftGraphProtectionPolicyBase >)),
    ("#microsoft.graph.protectionRuleBase", MicrosoftGraphProtectionRuleBase(Box <
    MicrosoftGraphProtectionRuleBase >)), ("#microsoft.graph.protectionUnitBase",
    MicrosoftGraphProtectionUnitBase(Box < MicrosoftGraphProtectionUnitBase >)),
    ("#microsoft.graph.protectionUnitsBulkJobBase",
    MicrosoftGraphProtectionUnitsBulkJobBase(Box <
    MicrosoftGraphProtectionUnitsBulkJobBase >)),
    ("#microsoft.graph.provisioningObjectSummary",
    MicrosoftGraphProvisioningObjectSummary(Box < MicrosoftGraphProvisioningObjectSummary
    >)), ("#microsoft.graph.publicKeyInfrastructureRoot",
    MicrosoftGraphPublicKeyInfrastructureRoot(Box <
    MicrosoftGraphPublicKeyInfrastructureRoot >)), ("#microsoft.graph.rbacApplication",
    MicrosoftGraphRbacApplication(Box < MicrosoftGraphRbacApplication >)),
    ("#microsoft.graph.readingAssignmentSubmission",
    MicrosoftGraphReadingAssignmentSubmission(Box <
    MicrosoftGraphReadingAssignmentSubmission >)),
    ("#microsoft.graph.reflectCheckInResponse", MicrosoftGraphReflectCheckInResponse(Box
    < MicrosoftGraphReflectCheckInResponse >)),
    ("#microsoft.graph.relyingPartyDetailedSummary",
    MicrosoftGraphRelyingPartyDetailedSummary(Box <
    MicrosoftGraphRelyingPartyDetailedSummary >)),
    ("#microsoft.graph.remoteAssistancePartner",
    MicrosoftGraphRemoteAssistancePartner(Box < MicrosoftGraphRemoteAssistancePartner
    >)), ("#microsoft.graph.remoteDesktopSecurityConfiguration",
    MicrosoftGraphRemoteDesktopSecurityConfiguration(Box <
    MicrosoftGraphRemoteDesktopSecurityConfiguration >)),
    ("#microsoft.graph.reportsRoot", MicrosoftGraphReportsRoot(Box <
    MicrosoftGraphReportsRoot >)), ("#microsoft.graph.request", MicrosoftGraphRequest(Box
    < MicrosoftGraphRequest >)), ("#microsoft.graph.resourceOperation",
    MicrosoftGraphResourceOperation(Box < MicrosoftGraphResourceOperation >)),
    ("#microsoft.graph.restoreArtifactBase", MicrosoftGraphRestoreArtifactBase(Box <
    MicrosoftGraphRestoreArtifactBase >)),
    ("#microsoft.graph.restoreArtifactsBulkRequestBase",
    MicrosoftGraphRestoreArtifactsBulkRequestBase(Box <
    MicrosoftGraphRestoreArtifactsBulkRequestBase >)), ("#microsoft.graph.restorePoint",
    MicrosoftGraphRestorePoint(Box < MicrosoftGraphRestorePoint >)),
    ("#microsoft.graph.restoreSessionBase", MicrosoftGraphRestoreSessionBase(Box <
    MicrosoftGraphRestoreSessionBase >)), ("#microsoft.graph.riskDetection",
    MicrosoftGraphRiskDetection(Box < MicrosoftGraphRiskDetection >)),
    ("#microsoft.graph.riskyServicePrincipal", MicrosoftGraphRiskyServicePrincipal(Box <
    MicrosoftGraphRiskyServicePrincipal >)), ("#microsoft.graph.riskyUser",
    MicrosoftGraphRiskyUser(Box < MicrosoftGraphRiskyUser >)),
    ("#microsoft.graph.roleAssignment", MicrosoftGraphRoleAssignment(Box <
    MicrosoftGraphRoleAssignment >)), ("#microsoft.graph.roleDefinition",
    MicrosoftGraphRoleDefinition(Box < MicrosoftGraphRoleDefinition >)),
    ("#microsoft.graph.schedule", MicrosoftGraphSchedule(Box < MicrosoftGraphSchedule
    >)), ("#microsoft.graph.schemaExtension", MicrosoftGraphSchemaExtension(Box <
    MicrosoftGraphSchemaExtension >)), ("#microsoft.graph.scopedRoleMembership",
    MicrosoftGraphScopedRoleMembership(Box < MicrosoftGraphScopedRoleMembership >)),
    ("#microsoft.graph.search.searchAnswer", MicrosoftGraphSearchSearchAnswer(Box <
    MicrosoftGraphSearchSearchAnswer >)), ("#microsoft.graph.searchEntity",
    MicrosoftGraphSearchEntity(Box < MicrosoftGraphSearchEntity >)),
    ("#microsoft.graph.secureScore", MicrosoftGraphSecureScore(Box <
    MicrosoftGraphSecureScore >)), ("#microsoft.graph.secureScoreControlProfile",
    MicrosoftGraphSecureScoreControlProfile(Box < MicrosoftGraphSecureScoreControlProfile
    >)), ("#microsoft.graph.security", MicrosoftGraphSecurity(Box <
    MicrosoftGraphSecurity >)), ("#microsoft.graph.security.alert",
    MicrosoftGraphSecurityAlert(Box < MicrosoftGraphSecurityAlert >)),
    ("#microsoft.graph.security.article", MicrosoftGraphSecurityArticle(Box <
    MicrosoftGraphSecurityArticle >)), ("#microsoft.graph.security.artifact",
    MicrosoftGraphSecurityArtifact(Box < MicrosoftGraphSecurityArtifact >)),
    ("#microsoft.graph.security.case", MicrosoftGraphSecurityCase(Box <
    MicrosoftGraphSecurityCase >)), ("#microsoft.graph.security.caseOperation",
    MicrosoftGraphSecurityCaseOperation(Box < MicrosoftGraphSecurityCaseOperation >)),
    ("#microsoft.graph.security.casesRoot", MicrosoftGraphSecurityCasesRoot(Box <
    MicrosoftGraphSecurityCasesRoot >)), ("#microsoft.graph.security.dataSet",
    MicrosoftGraphSecurityDataSet(Box < MicrosoftGraphSecurityDataSet >)),
    ("#microsoft.graph.security.dataSource", MicrosoftGraphSecurityDataSource(Box <
    MicrosoftGraphSecurityDataSource >)),
    ("#microsoft.graph.security.dataSourceContainer",
    MicrosoftGraphSecurityDataSourceContainer(Box <
    MicrosoftGraphSecurityDataSourceContainer >)),
    ("#microsoft.graph.security.dispositionReviewStage",
    MicrosoftGraphSecurityDispositionReviewStage(Box <
    MicrosoftGraphSecurityDispositionReviewStage >)),
    ("#microsoft.graph.security.ediscoveryCaseSettings",
    MicrosoftGraphSecurityEdiscoveryCaseSettings(Box <
    MicrosoftGraphSecurityEdiscoveryCaseSettings >)),
    ("#microsoft.graph.security.filePlanDescriptor",
    MicrosoftGraphSecurityFilePlanDescriptor(Box <
    MicrosoftGraphSecurityFilePlanDescriptor >)),
    ("#microsoft.graph.security.filePlanDescriptorTemplate",
    MicrosoftGraphSecurityFilePlanDescriptorTemplate(Box <
    MicrosoftGraphSecurityFilePlanDescriptorTemplate >)),
    ("#microsoft.graph.security.healthIssue", MicrosoftGraphSecurityHealthIssue(Box <
    MicrosoftGraphSecurityHealthIssue >)), ("#microsoft.graph.security.hostPair",
    MicrosoftGraphSecurityHostPair(Box < MicrosoftGraphSecurityHostPair >)),
    ("#microsoft.graph.security.hostPort", MicrosoftGraphSecurityHostPort(Box <
    MicrosoftGraphSecurityHostPort >)), ("#microsoft.graph.security.hostReputation",
    MicrosoftGraphSecurityHostReputation(Box < MicrosoftGraphSecurityHostReputation >)),
    ("#microsoft.graph.security.identityContainer",
    MicrosoftGraphSecurityIdentityContainer(Box < MicrosoftGraphSecurityIdentityContainer
    >)), ("#microsoft.graph.security.incident", MicrosoftGraphSecurityIncident(Box <
    MicrosoftGraphSecurityIncident >)), ("#microsoft.graph.security.indicator",
    MicrosoftGraphSecurityIndicator(Box < MicrosoftGraphSecurityIndicator >)),
    ("#microsoft.graph.security.intelligenceProfile",
    MicrosoftGraphSecurityIntelligenceProfile(Box <
    MicrosoftGraphSecurityIntelligenceProfile >)),
    ("#microsoft.graph.security.labelsRoot", MicrosoftGraphSecurityLabelsRoot(Box <
    MicrosoftGraphSecurityLabelsRoot >)), ("#microsoft.graph.security.networkAdapter",
    MicrosoftGraphSecurityNetworkAdapter(Box < MicrosoftGraphSecurityNetworkAdapter >)),
    ("#microsoft.graph.security.retentionEvent", MicrosoftGraphSecurityRetentionEvent(Box
    < MicrosoftGraphSecurityRetentionEvent >)),
    ("#microsoft.graph.security.retentionEventType",
    MicrosoftGraphSecurityRetentionEventType(Box <
    MicrosoftGraphSecurityRetentionEventType >)),
    ("#microsoft.graph.security.retentionLabel", MicrosoftGraphSecurityRetentionLabel(Box
    < MicrosoftGraphSecurityRetentionLabel >)), ("#microsoft.graph.security.search",
    MicrosoftGraphSecuritySearch(Box < MicrosoftGraphSecuritySearch >)),
    ("#microsoft.graph.security.sensor", MicrosoftGraphSecuritySensor(Box <
    MicrosoftGraphSecuritySensor >)), ("#microsoft.graph.security.subdomain",
    MicrosoftGraphSecuritySubdomain(Box < MicrosoftGraphSecuritySubdomain >)),
    ("#microsoft.graph.security.tag", MicrosoftGraphSecurityTag(Box <
    MicrosoftGraphSecurityTag >)), ("#microsoft.graph.security.threatIntelligence",
    MicrosoftGraphSecurityThreatIntelligence(Box <
    MicrosoftGraphSecurityThreatIntelligence >)),
    ("#microsoft.graph.security.triggerTypesRoot",
    MicrosoftGraphSecurityTriggerTypesRoot(Box < MicrosoftGraphSecurityTriggerTypesRoot
    >)), ("#microsoft.graph.security.triggersRoot",
    MicrosoftGraphSecurityTriggersRoot(Box < MicrosoftGraphSecurityTriggersRoot >)),
    ("#microsoft.graph.security.vulnerability", MicrosoftGraphSecurityVulnerability(Box <
    MicrosoftGraphSecurityVulnerability >)),
    ("#microsoft.graph.security.vulnerabilityComponent",
    MicrosoftGraphSecurityVulnerabilityComponent(Box <
    MicrosoftGraphSecurityVulnerabilityComponent >)),
    ("#microsoft.graph.security.whoisBaseRecord",
    MicrosoftGraphSecurityWhoisBaseRecord(Box < MicrosoftGraphSecurityWhoisBaseRecord
    >)), ("#microsoft.graph.securityReportsRoot", MicrosoftGraphSecurityReportsRoot(Box <
    MicrosoftGraphSecurityReportsRoot >)), ("#microsoft.graph.sensitivityLabel",
    MicrosoftGraphSensitivityLabel(Box < MicrosoftGraphSensitivityLabel >)),
    ("#microsoft.graph.serviceAnnouncement", MicrosoftGraphServiceAnnouncement(Box <
    MicrosoftGraphServiceAnnouncement >)),
    ("#microsoft.graph.serviceAnnouncementAttachment",
    MicrosoftGraphServiceAnnouncementAttachment(Box <
    MicrosoftGraphServiceAnnouncementAttachment >)),
    ("#microsoft.graph.serviceAnnouncementBase",
    MicrosoftGraphServiceAnnouncementBase(Box < MicrosoftGraphServiceAnnouncementBase
    >)), ("#microsoft.graph.serviceApp", MicrosoftGraphServiceApp(Box <
    MicrosoftGraphServiceApp >)), ("#microsoft.graph.serviceHealth",
    MicrosoftGraphServiceHealth(Box < MicrosoftGraphServiceHealth >)),
    ("#microsoft.graph.servicePrincipalRiskDetection",
    MicrosoftGraphServicePrincipalRiskDetection(Box <
    MicrosoftGraphServicePrincipalRiskDetection >)),
    ("#microsoft.graph.settingStateDeviceSummary",
    MicrosoftGraphSettingStateDeviceSummary(Box < MicrosoftGraphSettingStateDeviceSummary
    >)), ("#microsoft.graph.sharedInsight", MicrosoftGraphSharedInsight(Box <
    MicrosoftGraphSharedInsight >)), ("#microsoft.graph.sharepoint",
    MicrosoftGraphSharepoint(Box < MicrosoftGraphSharepoint >)),
    ("#microsoft.graph.sharepointSettings", MicrosoftGraphSharepointSettings(Box <
    MicrosoftGraphSharepointSettings >)), ("#microsoft.graph.signIn",
    MicrosoftGraphSignIn(Box < MicrosoftGraphSignIn >)), ("#microsoft.graph.simulation",
    MicrosoftGraphSimulation(Box < MicrosoftGraphSimulation >)),
    ("#microsoft.graph.simulationAutomation", MicrosoftGraphSimulationAutomation(Box <
    MicrosoftGraphSimulationAutomation >)), ("#microsoft.graph.simulationAutomationRun",
    MicrosoftGraphSimulationAutomationRun(Box < MicrosoftGraphSimulationAutomationRun
    >)), ("#microsoft.graph.singleValueLegacyExtendedProperty",
    MicrosoftGraphSingleValueLegacyExtendedProperty(Box <
    MicrosoftGraphSingleValueLegacyExtendedProperty >)),
    ("#microsoft.graph.softwareUpdateStatusSummary",
    MicrosoftGraphSoftwareUpdateStatusSummary(Box <
    MicrosoftGraphSoftwareUpdateStatusSummary >)),
    ("#microsoft.graph.storageQuotaBreakdown", MicrosoftGraphStorageQuotaBreakdown(Box <
    MicrosoftGraphStorageQuotaBreakdown >)), ("#microsoft.graph.storageSettings",
    MicrosoftGraphStorageSettings(Box < MicrosoftGraphStorageSettings >)),
    ("#microsoft.graph.subjectRightsRequest", MicrosoftGraphSubjectRightsRequest(Box <
    MicrosoftGraphSubjectRightsRequest >)), ("#microsoft.graph.subscribedSku",
    MicrosoftGraphSubscribedSku(Box < MicrosoftGraphSubscribedSku >)),
    ("#microsoft.graph.subscription", MicrosoftGraphSubscription(Box <
    MicrosoftGraphSubscription >)), ("#microsoft.graph.synchronization",
    MicrosoftGraphSynchronization(Box < MicrosoftGraphSynchronization >)),
    ("#microsoft.graph.synchronizationJob", MicrosoftGraphSynchronizationJob(Box <
    MicrosoftGraphSynchronizationJob >)), ("#microsoft.graph.synchronizationSchema",
    MicrosoftGraphSynchronizationSchema(Box < MicrosoftGraphSynchronizationSchema >)),
    ("#microsoft.graph.synchronizationTemplate",
    MicrosoftGraphSynchronizationTemplate(Box < MicrosoftGraphSynchronizationTemplate
    >)), ("#microsoft.graph.targetDeviceGroup", MicrosoftGraphTargetDeviceGroup(Box <
    MicrosoftGraphTargetDeviceGroup >)),
    ("#microsoft.graph.targetedManagedAppPolicyAssignment",
    MicrosoftGraphTargetedManagedAppPolicyAssignment(Box <
    MicrosoftGraphTargetedManagedAppPolicyAssignment >)), ("#microsoft.graph.team",
    MicrosoftGraphTeam(Box < MicrosoftGraphTeam >)), ("#microsoft.graph.teamInfo",
    MicrosoftGraphTeamInfo(Box < MicrosoftGraphTeamInfo >)),
    ("#microsoft.graph.teamsApp", MicrosoftGraphTeamsApp(Box < MicrosoftGraphTeamsApp
    >)), ("#microsoft.graph.teamsAppDefinition", MicrosoftGraphTeamsAppDefinition(Box <
    MicrosoftGraphTeamsAppDefinition >)), ("#microsoft.graph.teamsAppInstallation",
    MicrosoftGraphTeamsAppInstallation(Box < MicrosoftGraphTeamsAppInstallation >)),
    ("#microsoft.graph.teamsAppSettings", MicrosoftGraphTeamsAppSettings(Box <
    MicrosoftGraphTeamsAppSettings >)), ("#microsoft.graph.teamsAsyncOperation",
    MicrosoftGraphTeamsAsyncOperation(Box < MicrosoftGraphTeamsAsyncOperation >)),
    ("#microsoft.graph.teamsTab", MicrosoftGraphTeamsTab(Box < MicrosoftGraphTeamsTab
    >)), ("#microsoft.graph.teamsTemplate", MicrosoftGraphTeamsTemplate(Box <
    MicrosoftGraphTeamsTemplate >)), ("#microsoft.graph.teamwork",
    MicrosoftGraphTeamwork(Box < MicrosoftGraphTeamwork >)),
    ("#microsoft.graph.teamworkBot", MicrosoftGraphTeamworkBot(Box <
    MicrosoftGraphTeamworkBot >)), ("#microsoft.graph.teamworkHostedContent",
    MicrosoftGraphTeamworkHostedContent(Box < MicrosoftGraphTeamworkHostedContent >)),
    ("#microsoft.graph.teamworkTag", MicrosoftGraphTeamworkTag(Box <
    MicrosoftGraphTeamworkTag >)), ("#microsoft.graph.teamworkTagMember",
    MicrosoftGraphTeamworkTagMember(Box < MicrosoftGraphTeamworkTagMember >)),
    ("#microsoft.graph.telecomExpenseManagementPartner",
    MicrosoftGraphTelecomExpenseManagementPartner(Box <
    MicrosoftGraphTelecomExpenseManagementPartner >)),
    ("#microsoft.graph.tenantProtectionScopeContainer",
    MicrosoftGraphTenantProtectionScopeContainer(Box <
    MicrosoftGraphTenantProtectionScopeContainer >)),
    ("#microsoft.graph.termStore.group", MicrosoftGraphTermStoreGroup(Box <
    MicrosoftGraphTermStoreGroup >)), ("#microsoft.graph.termStore.relation",
    MicrosoftGraphTermStoreRelation(Box < MicrosoftGraphTermStoreRelation >)),
    ("#microsoft.graph.termStore.set", MicrosoftGraphTermStoreSet(Box <
    MicrosoftGraphTermStoreSet >)), ("#microsoft.graph.termStore.store",
    MicrosoftGraphTermStoreStore(Box < MicrosoftGraphTermStoreStore >)),
    ("#microsoft.graph.termStore.term", MicrosoftGraphTermStoreTerm(Box <
    MicrosoftGraphTermStoreTerm >)), ("#microsoft.graph.termsAndConditions",
    MicrosoftGraphTermsAndConditions(Box < MicrosoftGraphTermsAndConditions >)),
    ("#microsoft.graph.termsAndConditionsAcceptanceStatus",
    MicrosoftGraphTermsAndConditionsAcceptanceStatus(Box <
    MicrosoftGraphTermsAndConditionsAcceptanceStatus >)),
    ("#microsoft.graph.termsAndConditionsAssignment",
    MicrosoftGraphTermsAndConditionsAssignment(Box <
    MicrosoftGraphTermsAndConditionsAssignment >)),
    ("#microsoft.graph.termsOfUseContainer", MicrosoftGraphTermsOfUseContainer(Box <
    MicrosoftGraphTermsOfUseContainer >)), ("#microsoft.graph.threatAssessmentRequest",
    MicrosoftGraphThreatAssessmentRequest(Box < MicrosoftGraphThreatAssessmentRequest
    >)), ("#microsoft.graph.threatAssessmentResult",
    MicrosoftGraphThreatAssessmentResult(Box < MicrosoftGraphThreatAssessmentResult >)),
    ("#microsoft.graph.thumbnailSet", MicrosoftGraphThumbnailSet(Box <
    MicrosoftGraphThumbnailSet >)), ("#microsoft.graph.todo", MicrosoftGraphTodo(Box <
    MicrosoftGraphTodo >)), ("#microsoft.graph.todoTask", MicrosoftGraphTodoTask(Box <
    MicrosoftGraphTodoTask >)), ("#microsoft.graph.todoTaskList",
    MicrosoftGraphTodoTaskList(Box < MicrosoftGraphTodoTaskList >)),
    ("#microsoft.graph.training", MicrosoftGraphTraining(Box < MicrosoftGraphTraining
    >)), ("#microsoft.graph.trainingLanguageDetail",
    MicrosoftGraphTrainingLanguageDetail(Box < MicrosoftGraphTrainingLanguageDetail >)),
    ("#microsoft.graph.trending", MicrosoftGraphTrending(Box < MicrosoftGraphTrending
    >)), ("#microsoft.graph.unifiedRbacResourceAction",
    MicrosoftGraphUnifiedRbacResourceAction(Box < MicrosoftGraphUnifiedRbacResourceAction
    >)), ("#microsoft.graph.unifiedRbacResourceNamespace",
    MicrosoftGraphUnifiedRbacResourceNamespace(Box <
    MicrosoftGraphUnifiedRbacResourceNamespace >)),
    ("#microsoft.graph.unifiedRoleAssignment", MicrosoftGraphUnifiedRoleAssignment(Box <
    MicrosoftGraphUnifiedRoleAssignment >)), ("#microsoft.graph.unifiedRoleDefinition",
    MicrosoftGraphUnifiedRoleDefinition(Box < MicrosoftGraphUnifiedRoleDefinition >)),
    ("#microsoft.graph.unifiedRoleManagementPolicy",
    MicrosoftGraphUnifiedRoleManagementPolicy(Box <
    MicrosoftGraphUnifiedRoleManagementPolicy >)),
    ("#microsoft.graph.unifiedRoleManagementPolicyAssignment",
    MicrosoftGraphUnifiedRoleManagementPolicyAssignment(Box <
    MicrosoftGraphUnifiedRoleManagementPolicyAssignment >)),
    ("#microsoft.graph.unifiedRoleManagementPolicyRule",
    MicrosoftGraphUnifiedRoleManagementPolicyRule(Box <
    MicrosoftGraphUnifiedRoleManagementPolicyRule >)),
    ("#microsoft.graph.unifiedRoleScheduleBase",
    MicrosoftGraphUnifiedRoleScheduleBase(Box < MicrosoftGraphUnifiedRoleScheduleBase
    >)), ("#microsoft.graph.unifiedRoleScheduleInstanceBase",
    MicrosoftGraphUnifiedRoleScheduleInstanceBase(Box <
    MicrosoftGraphUnifiedRoleScheduleInstanceBase >)),
    ("#microsoft.graph.unifiedStorageQuota", MicrosoftGraphUnifiedStorageQuota(Box <
    MicrosoftGraphUnifiedStorageQuota >)), ("#microsoft.graph.usageRightsIncluded",
    MicrosoftGraphUsageRightsIncluded(Box < MicrosoftGraphUsageRightsIncluded >)),
    ("#microsoft.graph.usedInsight", MicrosoftGraphUsedInsight(Box <
    MicrosoftGraphUsedInsight >)), ("#microsoft.graph.userActivity",
    MicrosoftGraphUserActivity(Box < MicrosoftGraphUserActivity >)),
    ("#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails",
    MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails(Box <
    MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails >)),
    ("#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId",
    MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId(Box
    < MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId
    >)), ("#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByOSVersion",
    MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByOsversion(Box <
    MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByOsversion >)),
    ("#microsoft.graph.userExperienceAnalyticsAppHealthApplicationPerformance",
    MicrosoftGraphUserExperienceAnalyticsAppHealthApplicationPerformance(Box <
    MicrosoftGraphUserExperienceAnalyticsAppHealthApplicationPerformance >)),
    ("#microsoft.graph.userExperienceAnalyticsAppHealthDeviceModelPerformance",
    MicrosoftGraphUserExperienceAnalyticsAppHealthDeviceModelPerformance(Box <
    MicrosoftGraphUserExperienceAnalyticsAppHealthDeviceModelPerformance >)),
    ("#microsoft.graph.userExperienceAnalyticsAppHealthDevicePerformance",
    MicrosoftGraphUserExperienceAnalyticsAppHealthDevicePerformance(Box <
    MicrosoftGraphUserExperienceAnalyticsAppHealthDevicePerformance >)),
    ("#microsoft.graph.userExperienceAnalyticsAppHealthDevicePerformanceDetails",
    MicrosoftGraphUserExperienceAnalyticsAppHealthDevicePerformanceDetails(Box <
    MicrosoftGraphUserExperienceAnalyticsAppHealthDevicePerformanceDetails >)),
    ("#microsoft.graph.userExperienceAnalyticsAppHealthOSVersionPerformance",
    MicrosoftGraphUserExperienceAnalyticsAppHealthOsversionPerformance(Box <
    MicrosoftGraphUserExperienceAnalyticsAppHealthOsversionPerformance >)),
    ("#microsoft.graph.userExperienceAnalyticsBaseline",
    MicrosoftGraphUserExperienceAnalyticsBaseline(Box <
    MicrosoftGraphUserExperienceAnalyticsBaseline >)),
    ("#microsoft.graph.userExperienceAnalyticsCategory",
    MicrosoftGraphUserExperienceAnalyticsCategory(Box <
    MicrosoftGraphUserExperienceAnalyticsCategory >)),
    ("#microsoft.graph.userExperienceAnalyticsDevicePerformance",
    MicrosoftGraphUserExperienceAnalyticsDevicePerformance(Box <
    MicrosoftGraphUserExperienceAnalyticsDevicePerformance >)),
    ("#microsoft.graph.userExperienceAnalyticsDeviceScores",
    MicrosoftGraphUserExperienceAnalyticsDeviceScores(Box <
    MicrosoftGraphUserExperienceAnalyticsDeviceScores >)),
    ("#microsoft.graph.userExperienceAnalyticsDeviceStartupHistory",
    MicrosoftGraphUserExperienceAnalyticsDeviceStartupHistory(Box <
    MicrosoftGraphUserExperienceAnalyticsDeviceStartupHistory >)),
    ("#microsoft.graph.userExperienceAnalyticsDeviceStartupProcess",
    MicrosoftGraphUserExperienceAnalyticsDeviceStartupProcess(Box <
    MicrosoftGraphUserExperienceAnalyticsDeviceStartupProcess >)),
    ("#microsoft.graph.userExperienceAnalyticsDeviceStartupProcessPerformance",
    MicrosoftGraphUserExperienceAnalyticsDeviceStartupProcessPerformance(Box <
    MicrosoftGraphUserExperienceAnalyticsDeviceStartupProcessPerformance >)),
    ("#microsoft.graph.userExperienceAnalyticsMetric",
    MicrosoftGraphUserExperienceAnalyticsMetric(Box <
    MicrosoftGraphUserExperienceAnalyticsMetric >)),
    ("#microsoft.graph.userExperienceAnalyticsMetricHistory",
    MicrosoftGraphUserExperienceAnalyticsMetricHistory(Box <
    MicrosoftGraphUserExperienceAnalyticsMetricHistory >)),
    ("#microsoft.graph.userExperienceAnalyticsModelScores",
    MicrosoftGraphUserExperienceAnalyticsModelScores(Box <
    MicrosoftGraphUserExperienceAnalyticsModelScores >)),
    ("#microsoft.graph.userExperienceAnalyticsOverview",
    MicrosoftGraphUserExperienceAnalyticsOverview(Box <
    MicrosoftGraphUserExperienceAnalyticsOverview >)),
    ("#microsoft.graph.userExperienceAnalyticsScoreHistory",
    MicrosoftGraphUserExperienceAnalyticsScoreHistory(Box <
    MicrosoftGraphUserExperienceAnalyticsScoreHistory >)),
    ("#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereDevice",
    MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDevice(Box <
    MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDevice >)),
    ("#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric",
    MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric(Box <
    MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric >)),
    ("#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereMetric",
    MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereMetric(Box <
    MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereMetric >)),
    ("#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereModelPerformance",
    MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformance(Box <
    MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformance >)),
    ("#microsoft.graph.userFlowLanguageConfiguration",
    MicrosoftGraphUserFlowLanguageConfiguration(Box <
    MicrosoftGraphUserFlowLanguageConfiguration >)),
    ("#microsoft.graph.userFlowLanguagePage", MicrosoftGraphUserFlowLanguagePage(Box <
    MicrosoftGraphUserFlowLanguagePage >)), ("#microsoft.graph.userInsightsSettings",
    MicrosoftGraphUserInsightsSettings(Box < MicrosoftGraphUserInsightsSettings >)),
    ("#microsoft.graph.userInstallStateSummary",
    MicrosoftGraphUserInstallStateSummary(Box < MicrosoftGraphUserInstallStateSummary
    >)), ("#microsoft.graph.userProtectionScopeContainer",
    MicrosoftGraphUserProtectionScopeContainer(Box <
    MicrosoftGraphUserProtectionScopeContainer >)),
    ("#microsoft.graph.userRegistrationDetails",
    MicrosoftGraphUserRegistrationDetails(Box < MicrosoftGraphUserRegistrationDetails
    >)), ("#microsoft.graph.userSettings", MicrosoftGraphUserSettings(Box <
    MicrosoftGraphUserSettings >)), ("#microsoft.graph.userSolutionRoot",
    MicrosoftGraphUserSolutionRoot(Box < MicrosoftGraphUserSolutionRoot >)),
    ("#microsoft.graph.userStorage", MicrosoftGraphUserStorage(Box <
    MicrosoftGraphUserStorage >)), ("#microsoft.graph.userTeamwork",
    MicrosoftGraphUserTeamwork(Box < MicrosoftGraphUserTeamwork >)),
    ("#microsoft.graph.verticalSection", MicrosoftGraphVerticalSection(Box <
    MicrosoftGraphVerticalSection >)), ("#microsoft.graph.virtualEndpoint",
    MicrosoftGraphVirtualEndpoint(Box < MicrosoftGraphVirtualEndpoint >)),
    ("#microsoft.graph.virtualEvent", MicrosoftGraphVirtualEvent(Box <
    MicrosoftGraphVirtualEvent >)), ("#microsoft.graph.virtualEventPresenter",
    MicrosoftGraphVirtualEventPresenter(Box < MicrosoftGraphVirtualEventPresenter >)),
    ("#microsoft.graph.virtualEventRegistration",
    MicrosoftGraphVirtualEventRegistration(Box < MicrosoftGraphVirtualEventRegistration
    >)), ("#microsoft.graph.virtualEventRegistrationConfiguration",
    MicrosoftGraphVirtualEventRegistrationConfiguration(Box <
    MicrosoftGraphVirtualEventRegistrationConfiguration >)),
    ("#microsoft.graph.virtualEventRegistrationQuestionBase",
    MicrosoftGraphVirtualEventRegistrationQuestionBase(Box <
    MicrosoftGraphVirtualEventRegistrationQuestionBase >)),
    ("#microsoft.graph.virtualEventsRoot", MicrosoftGraphVirtualEventsRoot(Box <
    MicrosoftGraphVirtualEventsRoot >)), ("#microsoft.graph.vppToken",
    MicrosoftGraphVppToken(Box < MicrosoftGraphVppToken >)), ("#microsoft.graph.webPart",
    MicrosoftGraphWebPart(Box < MicrosoftGraphWebPart >)),
    ("#microsoft.graph.windowsAutopilotDeploymentProfile",
    MicrosoftGraphWindowsAutopilotDeploymentProfile(Box <
    MicrosoftGraphWindowsAutopilotDeploymentProfile >)),
    ("#microsoft.graph.windowsAutopilotDeploymentProfileAssignment",
    MicrosoftGraphWindowsAutopilotDeploymentProfileAssignment(Box <
    MicrosoftGraphWindowsAutopilotDeploymentProfileAssignment >)),
    ("#microsoft.graph.windowsAutopilotDeviceIdentity",
    MicrosoftGraphWindowsAutopilotDeviceIdentity(Box <
    MicrosoftGraphWindowsAutopilotDeviceIdentity >)),
    ("#microsoft.graph.windowsDeviceMalwareState",
    MicrosoftGraphWindowsDeviceMalwareState(Box < MicrosoftGraphWindowsDeviceMalwareState
    >)), ("#microsoft.graph.windowsInformationProtectionAppLearningSummary",
    MicrosoftGraphWindowsInformationProtectionAppLearningSummary(Box <
    MicrosoftGraphWindowsInformationProtectionAppLearningSummary >)),
    ("#microsoft.graph.windowsInformationProtectionAppLockerFile",
    MicrosoftGraphWindowsInformationProtectionAppLockerFile(Box <
    MicrosoftGraphWindowsInformationProtectionAppLockerFile >)),
    ("#microsoft.graph.windowsInformationProtectionNetworkLearningSummary",
    MicrosoftGraphWindowsInformationProtectionNetworkLearningSummary(Box <
    MicrosoftGraphWindowsInformationProtectionNetworkLearningSummary >)),
    ("#microsoft.graph.windowsMalwareInformation",
    MicrosoftGraphWindowsMalwareInformation(Box < MicrosoftGraphWindowsMalwareInformation
    >)), ("#microsoft.graph.windowsProtectionState",
    MicrosoftGraphWindowsProtectionState(Box < MicrosoftGraphWindowsProtectionState >)),
    ("#microsoft.graph.windowsSetting", MicrosoftGraphWindowsSetting(Box <
    MicrosoftGraphWindowsSetting >)), ("#microsoft.graph.windowsSettingInstance",
    MicrosoftGraphWindowsSettingInstance(Box < MicrosoftGraphWindowsSettingInstance >)),
    ("#microsoft.graph.workbook", MicrosoftGraphWorkbook(Box < MicrosoftGraphWorkbook
    >)), ("#microsoft.graph.workbookApplication", MicrosoftGraphWorkbookApplication(Box <
    MicrosoftGraphWorkbookApplication >)), ("#microsoft.graph.workbookChart",
    MicrosoftGraphWorkbookChart(Box < MicrosoftGraphWorkbookChart >)),
    ("#microsoft.graph.workbookChartAreaFormat",
    MicrosoftGraphWorkbookChartAreaFormat(Box < MicrosoftGraphWorkbookChartAreaFormat
    >)), ("#microsoft.graph.workbookChartAxes", MicrosoftGraphWorkbookChartAxes(Box <
    MicrosoftGraphWorkbookChartAxes >)), ("#microsoft.graph.workbookChartAxis",
    MicrosoftGraphWorkbookChartAxis(Box < MicrosoftGraphWorkbookChartAxis >)),
    ("#microsoft.graph.workbookChartAxisFormat",
    MicrosoftGraphWorkbookChartAxisFormat(Box < MicrosoftGraphWorkbookChartAxisFormat
    >)), ("#microsoft.graph.workbookChartAxisTitle",
    MicrosoftGraphWorkbookChartAxisTitle(Box < MicrosoftGraphWorkbookChartAxisTitle >)),
    ("#microsoft.graph.workbookChartAxisTitleFormat",
    MicrosoftGraphWorkbookChartAxisTitleFormat(Box <
    MicrosoftGraphWorkbookChartAxisTitleFormat >)),
    ("#microsoft.graph.workbookChartDataLabelFormat",
    MicrosoftGraphWorkbookChartDataLabelFormat(Box <
    MicrosoftGraphWorkbookChartDataLabelFormat >)),
    ("#microsoft.graph.workbookChartDataLabels",
    MicrosoftGraphWorkbookChartDataLabels(Box < MicrosoftGraphWorkbookChartDataLabels
    >)), ("#microsoft.graph.workbookChartFill", MicrosoftGraphWorkbookChartFill(Box <
    MicrosoftGraphWorkbookChartFill >)), ("#microsoft.graph.workbookChartFont",
    MicrosoftGraphWorkbookChartFont(Box < MicrosoftGraphWorkbookChartFont >)),
    ("#microsoft.graph.workbookChartGridlines", MicrosoftGraphWorkbookChartGridlines(Box
    < MicrosoftGraphWorkbookChartGridlines >)),
    ("#microsoft.graph.workbookChartGridlinesFormat",
    MicrosoftGraphWorkbookChartGridlinesFormat(Box <
    MicrosoftGraphWorkbookChartGridlinesFormat >)),
    ("#microsoft.graph.workbookChartLegend", MicrosoftGraphWorkbookChartLegend(Box <
    MicrosoftGraphWorkbookChartLegend >)), ("#microsoft.graph.workbookChartLegendFormat",
    MicrosoftGraphWorkbookChartLegendFormat(Box < MicrosoftGraphWorkbookChartLegendFormat
    >)), ("#microsoft.graph.workbookChartLineFormat",
    MicrosoftGraphWorkbookChartLineFormat(Box < MicrosoftGraphWorkbookChartLineFormat
    >)), ("#microsoft.graph.workbookChartPoint", MicrosoftGraphWorkbookChartPoint(Box <
    MicrosoftGraphWorkbookChartPoint >)), ("#microsoft.graph.workbookChartPointFormat",
    MicrosoftGraphWorkbookChartPointFormat(Box < MicrosoftGraphWorkbookChartPointFormat
    >)), ("#microsoft.graph.workbookChartSeries", MicrosoftGraphWorkbookChartSeries(Box <
    MicrosoftGraphWorkbookChartSeries >)), ("#microsoft.graph.workbookChartSeriesFormat",
    MicrosoftGraphWorkbookChartSeriesFormat(Box < MicrosoftGraphWorkbookChartSeriesFormat
    >)), ("#microsoft.graph.workbookChartTitle", MicrosoftGraphWorkbookChartTitle(Box <
    MicrosoftGraphWorkbookChartTitle >)), ("#microsoft.graph.workbookChartTitleFormat",
    MicrosoftGraphWorkbookChartTitleFormat(Box < MicrosoftGraphWorkbookChartTitleFormat
    >)), ("#microsoft.graph.workbookComment", MicrosoftGraphWorkbookComment(Box <
    MicrosoftGraphWorkbookComment >)), ("#microsoft.graph.workbookCommentReply",
    MicrosoftGraphWorkbookCommentReply(Box < MicrosoftGraphWorkbookCommentReply >)),
    ("#microsoft.graph.workbookFilter", MicrosoftGraphWorkbookFilter(Box <
    MicrosoftGraphWorkbookFilter >)), ("#microsoft.graph.workbookFormatProtection",
    MicrosoftGraphWorkbookFormatProtection(Box < MicrosoftGraphWorkbookFormatProtection
    >)), ("#microsoft.graph.workbookFunctionResult",
    MicrosoftGraphWorkbookFunctionResult(Box < MicrosoftGraphWorkbookFunctionResult >)),
    ("#microsoft.graph.workbookFunctions", MicrosoftGraphWorkbookFunctions(Box <
    MicrosoftGraphWorkbookFunctions >)), ("#microsoft.graph.workbookNamedItem",
    MicrosoftGraphWorkbookNamedItem(Box < MicrosoftGraphWorkbookNamedItem >)),
    ("#microsoft.graph.workbookOperation", MicrosoftGraphWorkbookOperation(Box <
    MicrosoftGraphWorkbookOperation >)), ("#microsoft.graph.workbookPivotTable",
    MicrosoftGraphWorkbookPivotTable(Box < MicrosoftGraphWorkbookPivotTable >)),
    ("#microsoft.graph.workbookRange", MicrosoftGraphWorkbookRange(Box <
    MicrosoftGraphWorkbookRange >)), ("#microsoft.graph.workbookRangeBorder",
    MicrosoftGraphWorkbookRangeBorder(Box < MicrosoftGraphWorkbookRangeBorder >)),
    ("#microsoft.graph.workbookRangeFill", MicrosoftGraphWorkbookRangeFill(Box <
    MicrosoftGraphWorkbookRangeFill >)), ("#microsoft.graph.workbookRangeFont",
    MicrosoftGraphWorkbookRangeFont(Box < MicrosoftGraphWorkbookRangeFont >)),
    ("#microsoft.graph.workbookRangeFormat", MicrosoftGraphWorkbookRangeFormat(Box <
    MicrosoftGraphWorkbookRangeFormat >)), ("#microsoft.graph.workbookRangeSort",
    MicrosoftGraphWorkbookRangeSort(Box < MicrosoftGraphWorkbookRangeSort >)),
    ("#microsoft.graph.workbookRangeView", MicrosoftGraphWorkbookRangeView(Box <
    MicrosoftGraphWorkbookRangeView >)), ("#microsoft.graph.workbookTable",
    MicrosoftGraphWorkbookTable(Box < MicrosoftGraphWorkbookTable >)),
    ("#microsoft.graph.workbookTableColumn", MicrosoftGraphWorkbookTableColumn(Box <
    MicrosoftGraphWorkbookTableColumn >)), ("#microsoft.graph.workbookTableRow",
    MicrosoftGraphWorkbookTableRow(Box < MicrosoftGraphWorkbookTableRow >)),
    ("#microsoft.graph.workbookTableSort", MicrosoftGraphWorkbookTableSort(Box <
    MicrosoftGraphWorkbookTableSort >)), ("#microsoft.graph.workbookWorksheet",
    MicrosoftGraphWorkbookWorksheet(Box < MicrosoftGraphWorkbookWorksheet >)),
    ("#microsoft.graph.workbookWorksheetProtection",
    MicrosoftGraphWorkbookWorksheetProtection(Box <
    MicrosoftGraphWorkbookWorksheetProtection >)),
    ("#microsoft.graph.workingTimeSchedule", MicrosoftGraphWorkingTimeSchedule(Box <
    MicrosoftGraphWorkingTimeSchedule >))], fallback : Entity(Box <
    MicrosoftGraphEntityBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEntityBase {
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEnumeratedDeviceRegistrationMembership {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.enumeratedDeviceRegistrationMembership".to_string())]
    pub odata_type: String,
    pub groups: Option<Vec<Option<String>>>,
    pub users: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEvent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.event".to_string())]
    pub odata_type: String,
    ///true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. The default is true.
    #[serde(rename = "allowNewTimeProposals")]
    pub allow_new_time_proposals: Option<bool>,
    ///The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
    pub attachments: Option<Vec<MicrosoftGraphAttachment>>,
    ///The collection of attendees for the event.
    pub attendees: Option<Vec<MicrosoftGraphAttendee>>,
    ///The body of the message associated with the event. It can be in HTML or text format.
    pub body: Option<MicrosoftGraphItemBody>,
    ///The preview of the message associated with the event. It's in text format.
    #[serde(rename = "bodyPreview")]
    pub body_preview: Option<String>,
    ///The calendar that contains the event. Navigation property. Read-only.
    pub calendar: Option<Box<MicrosoftGraphCalendar>>,
    ///Contains occurrenceId property values of canceled instances in a recurring series, if the event is the series master. Instances in a recurring series that are canceled are called canceled occurences.Returned only on $select in a Get operation which specifies the ID (seriesMasterId property value) of a series master event.
    #[serde(rename = "cancelledOccurrences")]
    pub cancelled_occurrences: Option<Vec<String>>,
    ///The categories associated with the item
    pub categories: Option<Vec<Option<String>>>,
    ///Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
    #[serde(rename = "changeKey")]
    pub change_key: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date, time, and time zone that the event ends. By default, the end time is in UTC.
    pub end: Option<MicrosoftGraphDateTimeTimeZone>,
    ///Contains the id property values of the event instances that are exceptions in a recurring series.Exceptions can differ from other occurrences in a recurring series, such as the subject, start or end times, or attendees. Exceptions don't include canceled occurrences.Returned only on $select and $expand in a GET operation that specifies the ID (seriesMasterId property value) of a series master event.
    #[serde(rename = "exceptionOccurrences")]
    pub exception_occurrences: Option<Vec<MicrosoftGraphEvent>>,
    ///The collection of open extensions defined for the event. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///Set to true if the event has attachments.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. The default is false.
    #[serde(rename = "hideAttendees")]
    pub hide_attendees: Option<bool>,
    ///A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
    #[serde(rename = "iCalUId")]
    pub i_cal_uid: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The importance of the event. The possible values are: low, normal, high.
    pub importance: Option<MicrosoftGraphImportance>,
    ///The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions modified, but doesn't include occurrences canceled from the series. Navigation property. Read-only. Nullable.
    pub instances: Option<Vec<MicrosoftGraphEvent>>,
    ///Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start, and endtime must be set to midnight and be in the same time zone.
    #[serde(rename = "isAllDay")]
    pub is_all_day: Option<bool>,
    ///Set to true if the event has been canceled.
    #[serde(rename = "isCancelled")]
    pub is_cancelled: Option<bool>,
    ///Set to true if the user has updated the meeting in Outlook but hasn't sent the updates to attendees. Set to false if all changes are sent, or if the event is an appointment without any attendees.
    #[serde(rename = "isDraft")]
    pub is_draft: Option<bool>,
    ///True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently, Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online.
    #[serde(rename = "isOnlineMeeting")]
    pub is_online_meeting: Option<bool>,
    ///Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). It also applies if a delegate organized the event on behalf of the owner.
    #[serde(rename = "isOrganizer")]
    pub is_organizer: Option<bool>,
    ///Set to true if an alert is set to remind the user of the event.
    #[serde(rename = "isReminderOn")]
    pub is_reminder_on: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The location of the event.
    pub location: Option<MicrosoftGraphLocation>,
    ///The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection are removed and replaced by the new location value.
    pub locations: Option<Vec<MicrosoftGraphLocation>>,
    ///The collection of multi-value extended properties defined for the event. Read-only. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///Details for an attendee to join the meeting online. The default is null. Read-only. After you set the isOnlineMeeting and onlineMeetingProvider properties to enable a meeting online, Microsoft Graph initializes onlineMeeting. When set, the meeting remains available online, and you can't change the isOnlineMeeting, onlineMeetingProvider, and onlneMeeting properties again.
    #[serde(rename = "onlineMeeting")]
    pub online_meeting: Option<MicrosoftGraphOnlineMeetingInfo>,
    ///Represents the online meeting service provider. By default, onlineMeetingProvider is unknown. The possible values are unknown, teamsForBusiness, skypeForBusiness, and skypeForConsumer. Optional.  After you set onlineMeetingProvider, Microsoft Graph initializes onlineMeeting. Subsequently, you can't change onlineMeetingProvider again, and the meeting remains available online.
    #[serde(rename = "onlineMeetingProvider")]
    pub online_meeting_provider: Option<MicrosoftGraphOnlineMeetingProviderType>,
    ///A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future.
    #[serde(rename = "onlineMeetingUrl")]
    pub online_meeting_url: Option<String>,
    ///The organizer of the event.
    pub organizer: Option<MicrosoftGraphRecipient>,
    ///The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
    #[serde(rename = "originalEndTimeZone")]
    pub original_end_time_zone: Option<String>,
    ///Represents the start time of an event when it's initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "originalStart")]
    pub original_start: Option<chrono::DateTime<chrono::Utc>>,
    ///The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
    #[serde(rename = "originalStartTimeZone")]
    pub original_start_time_zone: Option<String>,
    ///The recurrence pattern for the event.
    pub recurrence: Option<MicrosoftGraphPatternedRecurrence>,
    ///The number of minutes before the event start time that the reminder alert occurs.
    #[serde(rename = "reminderMinutesBeforeStart")]
    pub reminder_minutes_before_start: Option<f64>,
    ///Default is true, which represents the organizer would like an invitee to send a response to the event.
    #[serde(rename = "responseRequested")]
    pub response_requested: Option<bool>,
    ///Indicates the type of response sent in response to an event message.
    #[serde(rename = "responseStatus")]
    pub response_status: Option<MicrosoftGraphResponseStatus>,
    ///Possible values are: normal, personal, private, and confidential.
    pub sensitivity: Option<MicrosoftGraphSensitivity>,
    ///The ID for the recurring series master item, if this event is part of a recurring series.
    #[serde(rename = "seriesMasterId")]
    pub series_master_id: Option<String>,
    ///The status to show. Possible values are: free, tentative, busy, oof, workingElsewhere, unknown.
    #[serde(rename = "showAs")]
    pub show_as: Option<MicrosoftGraphFreeBusyStatus>,
    ///The collection of single-value extended properties defined for the event. Read-only. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
    ///The start date, time, and time zone of the event. By default, the start time is in UTC.
    pub start: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The text of the event's subject line.
    pub subject: Option<String>,
    ///A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. It's useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you can't change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional.
    #[serde(rename = "transactionId")]
    pub transaction_id: Option<String>,
    ///The event type. Possible values are: singleInstance, occurrence, exception, seriesMaster. Read-only
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphEventType>,
    ///The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL can't be accessed from within an iFrame.
    #[serde(rename = "webLink")]
    pub web_link: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEventMessage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.eventMessage".to_string())]
    pub odata_type: String,
    ///The fileAttachment and itemAttachment attachments for the message.
    pub attachments: Option<Vec<MicrosoftGraphAttachment>>,
    ///The Bcc: recipients for the message.
    #[serde(rename = "bccRecipients")]
    pub bcc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body.
    pub body: Option<MicrosoftGraphItemBody>,
    ///The first 255 characters of the message body. It is in text format.
    #[serde(rename = "bodyPreview")]
    pub body_preview: Option<String>,
    ///The categories associated with the item
    pub categories: Option<Vec<Option<String>>>,
    ///The Cc: recipients for the message.
    #[serde(rename = "ccRecipients")]
    pub cc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
    #[serde(rename = "changeKey")]
    pub change_key: Option<String>,
    ///The ID of the conversation the email belongs to.
    #[serde(rename = "conversationId")]
    pub conversation_id: Option<String>,
    ///Indicates the position of the message within the conversation.
    #[serde(rename = "conversationIndex")]
    pub conversation_index: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The event associated with the event message. The assumption for attendees or room resources is that the Calendar Attendant is set to automatically update the calendar with an event when meeting request event messages arrive. Navigation property. Read-only.
    pub event: Option<Box<MicrosoftGraphEvent>>,
    ///The collection of open extensions defined for the message. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///Indicates the status, start date, due date, or completion date for the message.
    pub flag: Option<MicrosoftGraphFollowupFlag>,
    ///The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender property, except for sharing or delegation scenarios. The value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
    pub from: Option<MicrosoftGraphRecipient>,
    ///Indicates whether the message has attachments. This property doesn't include inline attachments, so if a message contains only inline attachments, this property is false. To verify the existence of inline attachments, parse the body property to look for a src attribute, such as <IMG src='cid:image001.jpg@01D26CD8.6C05F070'>.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The importance of the message. The possible values are: low, normal, and high.
    pub importance: Option<MicrosoftGraphImportance>,
    ///The classification of the message for the user, based on inferred relevance or importance, or on an explicit override. The possible values are: focused or other.
    #[serde(rename = "inferenceClassification")]
    pub inference_classification: Option<MicrosoftGraphInferenceClassificationType>,
    ///A collection of message headers defined by RFC5322. The set includes message headers indicating the network path taken by a message from the sender to the recipient. It can also contain custom message headers that hold app data for the message.  Returned only on applying a $select query option. Read-only.
    #[serde(rename = "internetMessageHeaders")]
    pub internet_message_headers: Option<Vec<MicrosoftGraphInternetMessageHeader>>,
    ///The message ID in the format specified by RFC2822.
    #[serde(rename = "internetMessageId")]
    pub internet_message_id: Option<String>,
    #[serde(rename = "isAllDay")]
    pub is_all_day: Option<bool>,
    ///True if this meeting request is accessible to a delegate, false otherwise. The default is false.
    #[serde(rename = "isDelegated")]
    pub is_delegated: Option<bool>,
    ///Indicates whether a read receipt is requested for the message.
    #[serde(rename = "isDeliveryReceiptRequested")]
    pub is_delivery_receipt_requested: Option<bool>,
    ///Indicates whether the message is a draft. A message is a draft if it hasn't been sent yet.
    #[serde(rename = "isDraft")]
    pub is_draft: Option<bool>,
    #[serde(rename = "isOutOfDate")]
    pub is_out_of_date: Option<bool>,
    ///Indicates whether the message has been read.
    #[serde(rename = "isRead")]
    pub is_read: Option<bool>,
    ///Indicates whether a read receipt is requested for the message.
    #[serde(rename = "isReadReceiptRequested")]
    pub is_read_receipt_requested: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub location: Option<MicrosoftGraphLocation>,
    ///The type of event message: none, meetingRequest, meetingCancelled, meetingAccepted, meetingTenativelyAccepted, meetingDeclined.
    #[serde(rename = "meetingMessageType")]
    pub meeting_message_type: Option<MicrosoftGraphMeetingMessageType>,
    ///The collection of multi-value extended properties defined for the message. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///The unique identifier for the message's parent mailFolder.
    #[serde(rename = "parentFolderId")]
    pub parent_folder_id: Option<String>,
    ///The date and time the message was received.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "receivedDateTime")]
    pub received_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub recurrence: Option<MicrosoftGraphPatternedRecurrence>,
    ///The email addresses to use when replying.
    #[serde(rename = "replyTo")]
    pub reply_to: Option<Vec<MicrosoftGraphRecipient>>,
    ///The account that is used to generate the message. In most cases, this value is the same as the from property. You can set this property to a different value when sending a message from a shared mailbox, for a shared calendar, or as a delegate. In any case, the value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
    pub sender: Option<MicrosoftGraphRecipient>,
    ///The date and time the message was sent.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "sentDateTime")]
    pub sent_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of single-value extended properties defined for the message. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The subject of the message.
    pub subject: Option<String>,
    ///The To: recipients for the message.
    #[serde(rename = "toRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphEventType>,
    ///The part of the body of the message that is unique to the current message. uniqueBody is not returned by default but can be retrieved for a given message by use of the ?$select=uniqueBody query. It can be in HTML or text format.
    #[serde(rename = "uniqueBody")]
    pub unique_body: Option<MicrosoftGraphItemBody>,
    ///The URL to open the message in Outlook on the web.You can append an ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to 0, the browser shows the message in the Outlook on the web review pane.The message opens in the browser if you are signed in to your mailbox via Outlook on the web. You are prompted to sign in if you are not already signed in with the browser.This URL cannot be accessed from within an iFrame.
    #[serde(rename = "webLink")]
    pub web_link: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphEventMessageDetail { discriminator : "@odata.type", variants :
    [("#microsoft.graph.callEndedEventMessageDetail",
    MicrosoftGraphCallEndedEventMessageDetail(Box <
    MicrosoftGraphCallEndedEventMessageDetail >)),
    ("#microsoft.graph.callRecordingEventMessageDetail",
    MicrosoftGraphCallRecordingEventMessageDetail(Box <
    MicrosoftGraphCallRecordingEventMessageDetail >)),
    ("#microsoft.graph.callStartedEventMessageDetail",
    MicrosoftGraphCallStartedEventMessageDetail(Box <
    MicrosoftGraphCallStartedEventMessageDetail >)),
    ("#microsoft.graph.callTranscriptEventMessageDetail",
    MicrosoftGraphCallTranscriptEventMessageDetail(Box <
    MicrosoftGraphCallTranscriptEventMessageDetail >)),
    ("#microsoft.graph.channelAddedEventMessageDetail",
    MicrosoftGraphChannelAddedEventMessageDetail(Box <
    MicrosoftGraphChannelAddedEventMessageDetail >)),
    ("#microsoft.graph.channelDeletedEventMessageDetail",
    MicrosoftGraphChannelDeletedEventMessageDetail(Box <
    MicrosoftGraphChannelDeletedEventMessageDetail >)),
    ("#microsoft.graph.channelDescriptionUpdatedEventMessageDetail",
    MicrosoftGraphChannelDescriptionUpdatedEventMessageDetail(Box <
    MicrosoftGraphChannelDescriptionUpdatedEventMessageDetail >)),
    ("#microsoft.graph.channelRenamedEventMessageDetail",
    MicrosoftGraphChannelRenamedEventMessageDetail(Box <
    MicrosoftGraphChannelRenamedEventMessageDetail >)),
    ("#microsoft.graph.channelSetAsFavoriteByDefaultEventMessageDetail",
    MicrosoftGraphChannelSetAsFavoriteByDefaultEventMessageDetail(Box <
    MicrosoftGraphChannelSetAsFavoriteByDefaultEventMessageDetail >)),
    ("#microsoft.graph.channelUnsetAsFavoriteByDefaultEventMessageDetail",
    MicrosoftGraphChannelUnsetAsFavoriteByDefaultEventMessageDetail(Box <
    MicrosoftGraphChannelUnsetAsFavoriteByDefaultEventMessageDetail >)),
    ("#microsoft.graph.chatRenamedEventMessageDetail",
    MicrosoftGraphChatRenamedEventMessageDetail(Box <
    MicrosoftGraphChatRenamedEventMessageDetail >)),
    ("#microsoft.graph.conversationMemberRoleUpdatedEventMessageDetail",
    MicrosoftGraphConversationMemberRoleUpdatedEventMessageDetail(Box <
    MicrosoftGraphConversationMemberRoleUpdatedEventMessageDetail >)),
    ("#microsoft.graph.meetingPolicyUpdatedEventMessageDetail",
    MicrosoftGraphMeetingPolicyUpdatedEventMessageDetail(Box <
    MicrosoftGraphMeetingPolicyUpdatedEventMessageDetail >)),
    ("#microsoft.graph.membersAddedEventMessageDetail",
    MicrosoftGraphMembersAddedEventMessageDetail(Box <
    MicrosoftGraphMembersAddedEventMessageDetail >)),
    ("#microsoft.graph.membersDeletedEventMessageDetail",
    MicrosoftGraphMembersDeletedEventMessageDetail(Box <
    MicrosoftGraphMembersDeletedEventMessageDetail >)),
    ("#microsoft.graph.membersJoinedEventMessageDetail",
    MicrosoftGraphMembersJoinedEventMessageDetail(Box <
    MicrosoftGraphMembersJoinedEventMessageDetail >)),
    ("#microsoft.graph.membersLeftEventMessageDetail",
    MicrosoftGraphMembersLeftEventMessageDetail(Box <
    MicrosoftGraphMembersLeftEventMessageDetail >)),
    ("#microsoft.graph.messagePinnedEventMessageDetail",
    MicrosoftGraphMessagePinnedEventMessageDetail(Box <
    MicrosoftGraphMessagePinnedEventMessageDetail >)),
    ("#microsoft.graph.messageUnpinnedEventMessageDetail",
    MicrosoftGraphMessageUnpinnedEventMessageDetail(Box <
    MicrosoftGraphMessageUnpinnedEventMessageDetail >)),
    ("#microsoft.graph.tabUpdatedEventMessageDetail",
    MicrosoftGraphTabUpdatedEventMessageDetail(Box <
    MicrosoftGraphTabUpdatedEventMessageDetail >)),
    ("#microsoft.graph.teamArchivedEventMessageDetail",
    MicrosoftGraphTeamArchivedEventMessageDetail(Box <
    MicrosoftGraphTeamArchivedEventMessageDetail >)),
    ("#microsoft.graph.teamCreatedEventMessageDetail",
    MicrosoftGraphTeamCreatedEventMessageDetail(Box <
    MicrosoftGraphTeamCreatedEventMessageDetail >)),
    ("#microsoft.graph.teamDescriptionUpdatedEventMessageDetail",
    MicrosoftGraphTeamDescriptionUpdatedEventMessageDetail(Box <
    MicrosoftGraphTeamDescriptionUpdatedEventMessageDetail >)),
    ("#microsoft.graph.teamJoiningDisabledEventMessageDetail",
    MicrosoftGraphTeamJoiningDisabledEventMessageDetail(Box <
    MicrosoftGraphTeamJoiningDisabledEventMessageDetail >)),
    ("#microsoft.graph.teamJoiningEnabledEventMessageDetail",
    MicrosoftGraphTeamJoiningEnabledEventMessageDetail(Box <
    MicrosoftGraphTeamJoiningEnabledEventMessageDetail >)),
    ("#microsoft.graph.teamRenamedEventMessageDetail",
    MicrosoftGraphTeamRenamedEventMessageDetail(Box <
    MicrosoftGraphTeamRenamedEventMessageDetail >)),
    ("#microsoft.graph.teamUnarchivedEventMessageDetail",
    MicrosoftGraphTeamUnarchivedEventMessageDetail(Box <
    MicrosoftGraphTeamUnarchivedEventMessageDetail >)),
    ("#microsoft.graph.teamsAppInstalledEventMessageDetail",
    MicrosoftGraphTeamsAppInstalledEventMessageDetail(Box <
    MicrosoftGraphTeamsAppInstalledEventMessageDetail >)),
    ("#microsoft.graph.teamsAppRemovedEventMessageDetail",
    MicrosoftGraphTeamsAppRemovedEventMessageDetail(Box <
    MicrosoftGraphTeamsAppRemovedEventMessageDetail >)),
    ("#microsoft.graph.teamsAppUpgradedEventMessageDetail",
    MicrosoftGraphTeamsAppUpgradedEventMessageDetail(Box <
    MicrosoftGraphTeamsAppUpgradedEventMessageDetail >))], fallback :
    EventMessageDetail(Box < MicrosoftGraphEventMessageDetailBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEventMessageDetailBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEventMessageRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.eventMessageRequest".to_string())]
    pub odata_type: String,
    ///True if the meeting organizer allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.
    #[serde(rename = "allowNewTimeProposals")]
    pub allow_new_time_proposals: Option<bool>,
    ///The fileAttachment and itemAttachment attachments for the message.
    pub attachments: Option<Vec<MicrosoftGraphAttachment>>,
    ///The Bcc: recipients for the message.
    #[serde(rename = "bccRecipients")]
    pub bcc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body.
    pub body: Option<MicrosoftGraphItemBody>,
    ///The first 255 characters of the message body. It is in text format.
    #[serde(rename = "bodyPreview")]
    pub body_preview: Option<String>,
    ///The categories associated with the item
    pub categories: Option<Vec<Option<String>>>,
    ///The Cc: recipients for the message.
    #[serde(rename = "ccRecipients")]
    pub cc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
    #[serde(rename = "changeKey")]
    pub change_key: Option<String>,
    ///The ID of the conversation the email belongs to.
    #[serde(rename = "conversationId")]
    pub conversation_id: Option<String>,
    ///Indicates the position of the message within the conversation.
    #[serde(rename = "conversationIndex")]
    pub conversation_index: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The event associated with the event message. The assumption for attendees or room resources is that the Calendar Attendant is set to automatically update the calendar with an event when meeting request event messages arrive. Navigation property. Read-only.
    pub event: Option<Box<MicrosoftGraphEvent>>,
    ///The collection of open extensions defined for the message. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///Indicates the status, start date, due date, or completion date for the message.
    pub flag: Option<MicrosoftGraphFollowupFlag>,
    ///The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender property, except for sharing or delegation scenarios. The value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
    pub from: Option<MicrosoftGraphRecipient>,
    ///Indicates whether the message has attachments. This property doesn't include inline attachments, so if a message contains only inline attachments, this property is false. To verify the existence of inline attachments, parse the body property to look for a src attribute, such as <IMG src='cid:image001.jpg@01D26CD8.6C05F070'>.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The importance of the message. The possible values are: low, normal, and high.
    pub importance: Option<MicrosoftGraphImportance>,
    ///The classification of the message for the user, based on inferred relevance or importance, or on an explicit override. The possible values are: focused or other.
    #[serde(rename = "inferenceClassification")]
    pub inference_classification: Option<MicrosoftGraphInferenceClassificationType>,
    ///A collection of message headers defined by RFC5322. The set includes message headers indicating the network path taken by a message from the sender to the recipient. It can also contain custom message headers that hold app data for the message.  Returned only on applying a $select query option. Read-only.
    #[serde(rename = "internetMessageHeaders")]
    pub internet_message_headers: Option<Vec<MicrosoftGraphInternetMessageHeader>>,
    ///The message ID in the format specified by RFC2822.
    #[serde(rename = "internetMessageId")]
    pub internet_message_id: Option<String>,
    #[serde(rename = "isAllDay")]
    pub is_all_day: Option<bool>,
    ///True if this meeting request is accessible to a delegate, false otherwise. The default is false.
    #[serde(rename = "isDelegated")]
    pub is_delegated: Option<bool>,
    ///Indicates whether a read receipt is requested for the message.
    #[serde(rename = "isDeliveryReceiptRequested")]
    pub is_delivery_receipt_requested: Option<bool>,
    ///Indicates whether the message is a draft. A message is a draft if it hasn't been sent yet.
    #[serde(rename = "isDraft")]
    pub is_draft: Option<bool>,
    #[serde(rename = "isOutOfDate")]
    pub is_out_of_date: Option<bool>,
    ///Indicates whether the message has been read.
    #[serde(rename = "isRead")]
    pub is_read: Option<bool>,
    ///Indicates whether a read receipt is requested for the message.
    #[serde(rename = "isReadReceiptRequested")]
    pub is_read_receipt_requested: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub location: Option<MicrosoftGraphLocation>,
    ///The type of event message: none, meetingRequest, meetingCancelled, meetingAccepted, meetingTenativelyAccepted, meetingDeclined.
    #[serde(rename = "meetingMessageType")]
    pub meeting_message_type: Option<MicrosoftGraphMeetingMessageType>,
    #[serde(rename = "meetingRequestType")]
    pub meeting_request_type: Option<MicrosoftGraphMeetingRequestType>,
    ///The collection of multi-value extended properties defined for the message. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///The unique identifier for the message's parent mailFolder.
    #[serde(rename = "parentFolderId")]
    pub parent_folder_id: Option<String>,
    ///If the meeting update changes the meeting end time, this property specifies the previous meeting end time.
    #[serde(rename = "previousEndDateTime")]
    pub previous_end_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///If the meeting update changes the meeting location, this property specifies the previous meeting location.
    #[serde(rename = "previousLocation")]
    pub previous_location: Option<MicrosoftGraphLocation>,
    ///If the meeting update changes the meeting start time, this property specifies the previous meeting start time.
    #[serde(rename = "previousStartDateTime")]
    pub previous_start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The date and time the message was received.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "receivedDateTime")]
    pub received_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub recurrence: Option<MicrosoftGraphPatternedRecurrence>,
    ///The email addresses to use when replying.
    #[serde(rename = "replyTo")]
    pub reply_to: Option<Vec<MicrosoftGraphRecipient>>,
    ///Set to true if the sender would like the invitee to send a response to the requested meeting.
    #[serde(rename = "responseRequested")]
    pub response_requested: Option<bool>,
    ///The account that is used to generate the message. In most cases, this value is the same as the from property. You can set this property to a different value when sending a message from a shared mailbox, for a shared calendar, or as a delegate. In any case, the value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
    pub sender: Option<MicrosoftGraphRecipient>,
    ///The date and time the message was sent.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "sentDateTime")]
    pub sent_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of single-value extended properties defined for the message. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The subject of the message.
    pub subject: Option<String>,
    ///The To: recipients for the message.
    #[serde(rename = "toRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphEventType>,
    ///The part of the body of the message that is unique to the current message. uniqueBody is not returned by default but can be retrieved for a given message by use of the ?$select=uniqueBody query. It can be in HTML or text format.
    #[serde(rename = "uniqueBody")]
    pub unique_body: Option<MicrosoftGraphItemBody>,
    ///The URL to open the message in Outlook on the web.You can append an ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to 0, the browser shows the message in the Outlook on the web review pane.The message opens in the browser if you are signed in to your mailbox via Outlook on the web. You are prompted to sign in if you are not already signed in with the browser.This URL cannot be accessed from within an iFrame.
    #[serde(rename = "webLink")]
    pub web_link: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphEventMessageResponse {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.eventMessageResponse".to_string())]
    pub odata_type: String,
    ///The fileAttachment and itemAttachment attachments for the message.
    pub attachments: Option<Vec<MicrosoftGraphAttachment>>,
    ///The Bcc: recipients for the message.
    #[serde(rename = "bccRecipients")]
    pub bcc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body.
    pub body: Option<MicrosoftGraphItemBody>,
    ///The first 255 characters of the message body. It is in text format.
    #[serde(rename = "bodyPreview")]
    pub body_preview: Option<String>,
    ///The categories associated with the item
    pub categories: Option<Vec<Option<String>>>,
    ///The Cc: recipients for the message.
    #[serde(rename = "ccRecipients")]
    pub cc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
    #[serde(rename = "changeKey")]
    pub change_key: Option<String>,
    ///The ID of the conversation the email belongs to.
    #[serde(rename = "conversationId")]
    pub conversation_id: Option<String>,
    ///Indicates the position of the message within the conversation.
    #[serde(rename = "conversationIndex")]
    pub conversation_index: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The event associated with the event message. The assumption for attendees or room resources is that the Calendar Attendant is set to automatically update the calendar with an event when meeting request event messages arrive. Navigation property. Read-only.
    pub event: Option<Box<MicrosoftGraphEvent>>,
    ///The collection of open extensions defined for the message. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///Indicates the status, start date, due date, or completion date for the message.
    pub flag: Option<MicrosoftGraphFollowupFlag>,
    ///The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender property, except for sharing or delegation scenarios. The value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
    pub from: Option<MicrosoftGraphRecipient>,
    ///Indicates whether the message has attachments. This property doesn't include inline attachments, so if a message contains only inline attachments, this property is false. To verify the existence of inline attachments, parse the body property to look for a src attribute, such as <IMG src='cid:image001.jpg@01D26CD8.6C05F070'>.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The importance of the message. The possible values are: low, normal, and high.
    pub importance: Option<MicrosoftGraphImportance>,
    ///The classification of the message for the user, based on inferred relevance or importance, or on an explicit override. The possible values are: focused or other.
    #[serde(rename = "inferenceClassification")]
    pub inference_classification: Option<MicrosoftGraphInferenceClassificationType>,
    ///A collection of message headers defined by RFC5322. The set includes message headers indicating the network path taken by a message from the sender to the recipient. It can also contain custom message headers that hold app data for the message.  Returned only on applying a $select query option. Read-only.
    #[serde(rename = "internetMessageHeaders")]
    pub internet_message_headers: Option<Vec<MicrosoftGraphInternetMessageHeader>>,
    ///The message ID in the format specified by RFC2822.
    #[serde(rename = "internetMessageId")]
    pub internet_message_id: Option<String>,
    #[serde(rename = "isAllDay")]
    pub is_all_day: Option<bool>,
    ///True if this meeting request is accessible to a delegate, false otherwise. The default is false.
    #[serde(rename = "isDelegated")]
    pub is_delegated: Option<bool>,
    ///Indicates whether a read receipt is requested for the message.
    #[serde(rename = "isDeliveryReceiptRequested")]
    pub is_delivery_receipt_requested: Option<bool>,
    ///Indicates whether the message is a draft. A message is a draft if it hasn't been sent yet.
    #[serde(rename = "isDraft")]
    pub is_draft: Option<bool>,
    #[serde(rename = "isOutOfDate")]
    pub is_out_of_date: Option<bool>,
    ///Indicates whether the message has been read.
    #[serde(rename = "isRead")]
    pub is_read: Option<bool>,
    ///Indicates whether a read receipt is requested for the message.
    #[serde(rename = "isReadReceiptRequested")]
    pub is_read_receipt_requested: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub location: Option<MicrosoftGraphLocation>,
    ///The type of event message: none, meetingRequest, meetingCancelled, meetingAccepted, meetingTenativelyAccepted, meetingDeclined.
    #[serde(rename = "meetingMessageType")]
    pub meeting_message_type: Option<MicrosoftGraphMeetingMessageType>,
    ///The collection of multi-value extended properties defined for the message. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///The unique identifier for the message's parent mailFolder.
    #[serde(rename = "parentFolderId")]
    pub parent_folder_id: Option<String>,
    ///An alternate date/time proposed by an invitee for a meeting request to start and end. Read-only. Not filterable.
    #[serde(rename = "proposedNewTime")]
    pub proposed_new_time: Option<MicrosoftGraphTimeSlot>,
    ///The date and time the message was received.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "receivedDateTime")]
    pub received_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub recurrence: Option<MicrosoftGraphPatternedRecurrence>,
    ///The email addresses to use when replying.
    #[serde(rename = "replyTo")]
    pub reply_to: Option<Vec<MicrosoftGraphRecipient>>,
    ///Specifies the type of response to a meeting request. Possible values are: tentativelyAccepted, accepted, declined. For the eventMessageResponse type, none, organizer, and notResponded are not supported. Read-only. Not filterable.
    #[serde(rename = "responseType")]
    pub response_type: Option<MicrosoftGraphResponseType>,
    ///The account that is used to generate the message. In most cases, this value is the same as the from property. You can set this property to a different value when sending a message from a shared mailbox, for a shared calendar, or as a delegate. In any case, the value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
    pub sender: Option<MicrosoftGraphRecipient>,
    ///The date and time the message was sent.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "sentDateTime")]
    pub sent_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of single-value extended properties defined for the message. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The subject of the message.
    pub subject: Option<String>,
    ///The To: recipients for the message.
    #[serde(rename = "toRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphEventType>,
    ///The part of the body of the message that is unique to the current message. uniqueBody is not returned by default but can be retrieved for a given message by use of the ?$select=uniqueBody query. It can be in HTML or text format.
    #[serde(rename = "uniqueBody")]
    pub unique_body: Option<MicrosoftGraphItemBody>,
    ///The URL to open the message in Outlook on the web.You can append an ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to 0, the browser shows the message in the Outlook on the web review pane.The message opens in the browser if you are signed in to your mailbox via Outlook on the web. You are prompted to sign in if you are not already signed in with the browser.This URL cannot be accessed from within an iFrame.
    #[serde(rename = "webLink")]
    pub web_link: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphEventType {
    #[serde(rename = "singleInstance")]
    #[default]
    SingleInstance,
    #[serde(rename = "occurrence")]
    Occurrence,
    #[serde(rename = "exception")]
    Exception,
    #[serde(rename = "seriesMaster")]
    SeriesMaster,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExchangeProtectionPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.exchangeProtectionPolicy".to_string())]
    pub odata_type: String,
    ///The identity of person who created the policy.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the policy.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the policy to be created.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the person who last modified the policy.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The timestamp of the last modification of the policy.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The rules associated with the Exchange protection policy.
    #[serde(rename = "mailboxInclusionRules")]
    pub mailbox_inclusion_rules: Option<Vec<MicrosoftGraphMailboxProtectionRule>>,
    ///The protection units (mailboxes) that are  protected under the Exchange protection policy.
    #[serde(rename = "mailboxProtectionUnits")]
    pub mailbox_protection_units: Option<Vec<MicrosoftGraphMailboxProtectionUnit>>,
    #[serde(rename = "mailboxProtectionUnitsBulkAdditionJobs")]
    pub mailbox_protection_units_bulk_addition_jobs: Option<
        Vec<MicrosoftGraphMailboxProtectionUnitsBulkAdditionJob>,
    >,
    ///Contains the retention setting details for the policy.
    #[serde(rename = "retentionSettings")]
    pub retention_settings: Option<Vec<MicrosoftGraphRetentionSetting>>,
    ///The aggregated status of the protection units associated with the policy. The possible values are: inactive, activeWithErrors, updating, active, unknownFutureValue.
    pub status: Option<MicrosoftGraphProtectionPolicyStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExchangeRestoreSession {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.exchangeRestoreSession".to_string())]
    pub odata_type: String,
    ///The time of completion of the restore session.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The identity of person who created the restore session.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the restore session.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains error details if the restore session fails or completes with an error.
    pub error: Option<MicrosoftGraphPublicError>,
    #[serde(rename = "granularMailboxRestoreArtifacts")]
    pub granular_mailbox_restore_artifacts: Option<
        Vec<MicrosoftGraphGranularMailboxRestoreArtifact>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the restore session.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification of the restore session.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A collection of restore points and destination details that can be used to restore Exchange mailboxes.
    #[serde(rename = "mailboxRestoreArtifacts")]
    pub mailbox_restore_artifacts: Option<Vec<MicrosoftGraphMailboxRestoreArtifact>>,
    ///A collection of user mailboxes and destination details that can be used to restore Exchange mailboxes.
    #[serde(rename = "mailboxRestoreArtifactsBulkAdditionRequests")]
    pub mailbox_restore_artifacts_bulk_addition_requests: Option<
        Vec<MicrosoftGraphMailboxRestoreArtifactsBulkAdditionRequest>,
    >,
    ///Indicates whether the restore session was created normally or by a bulk job.
    #[serde(rename = "restoreJobType")]
    pub restore_job_type: Option<MicrosoftGraphRestoreJobType>,
    ///The number of metadata artifacts that belong to this restore session.
    #[serde(rename = "restoreSessionArtifactCount")]
    pub restore_session_artifact_count: Option<
        MicrosoftGraphRestoreSessionArtifactCount,
    >,
    ///Status of the restore session. The value is an aggregated status of the restored artifacts. The possible values are: draft, activating, active, completedWithError, completed, unknownFutureValue, failed. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: failed.
    pub status: Option<MicrosoftGraphRestoreSessionStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExcludeTarget {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The object identifier of a Microsoft Entra user or group.
    pub id: Option<String>,
    #[serde(rename = "targetType")]
    pub target_type: Option<MicrosoftGraphAuthenticationMethodTargetType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExclusionGroupAssignmentTarget {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.exclusionGroupAssignmentTarget".to_string())]
    pub odata_type: String,
    ///The group Id that is the target of the assignment.
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExpirationPattern {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The requestor's desired duration of access represented in ISO 8601 format for durations. For example, PT3H refers to three hours.  If specified in a request, endDateTime should not be present and the type property should be set to afterDuration.
    pub duration: Option<String>,
    ///Timestamp of date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The requestor's desired expiration pattern type. The possible values are: notSpecified, noExpiration, afterDateTime, afterDuration.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphExpirationPatternType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExpirationPatternType {
    #[serde(rename = "notSpecified")]
    #[default]
    NotSpecified,
    #[serde(rename = "noExpiration")]
    NoExpiration,
    #[serde(rename = "afterDateTime")]
    AfterDateTime,
    #[serde(rename = "afterDuration")]
    AfterDuration,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.extension".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExtensionCollectionResponse {
    #[serde(rename = "@odata.count")]
    pub odata_count: Option<i64>,
    #[serde(rename = "@odata.nextLink")]
    pub odata_next_link: Option<String>,
    pub value: Option<Vec<MicrosoftGraphExtension>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExtensionProperty {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.extensionProperty".to_string())]
    pub odata_type: String,
    ///Display name of the application object on which this extension property is defined. Read-only.
    #[serde(rename = "appDisplayName")]
    pub app_display_name: Option<String>,
    ///Specifies the data type of the value the extension property can hold. Following values are supported. Binary - 256 bytes maximumBooleanDateTime - Must be specified in ISO 8601 format. Will be stored in UTC.Integer - 32-bit value.LargeInteger - 64-bit value.String - 256 characters maximumNot nullable. For multivalued directory extensions, these limits apply per value in the collection.
    #[serde(rename = "dataType")]
    pub data_type: Option<String>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Defines the directory extension as a multi-valued property. When true, the directory extension property can store a collection of objects of the dataType; for example, a collection of string types such as 'extensionb7b1c57b532f40b8b5ed4b7a7ba67401jobGroupTracker': ['String 1', 'String 2']. The default value is false. Supports $filter (eq).
    #[serde(rename = "isMultiValued")]
    pub is_multi_valued: Option<bool>,
    ///Indicates if this extension property was synced from on-premises active directory using Microsoft Entra Connect. Read-only.
    #[serde(rename = "isSyncedFromOnPremises")]
    pub is_synced_from_on_premises: Option<bool>,
    ///Name of the extension property. Not nullable. Supports $filter (eq).
    pub name: Option<String>,
    ///Following values are supported. Not nullable. UserGroupAdministrativeUnitApplicationDeviceOrganization
    #[serde(rename = "targetObjects")]
    pub target_objects: Option<Vec<String>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExtensionSchemaProperty {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The name of the strongly typed property defined as part of a schema extension.
    pub name: Option<String>,
    ///The type of the property that is defined as part of a schema extension.  Allowed values are Binary, Boolean, DateTime, Integer, or String. For more information, see Supported property data types.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalAudienceScope {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "contactsOnly")]
    ContactsOnly,
    #[serde(rename = "all")]
    All,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalConnectorsAccessType {
    #[serde(rename = "grant")]
    #[default]
    Grant,
    #[serde(rename = "deny")]
    Deny,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsAcl {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "accessType")]
    pub access_type: Option<MicrosoftGraphExternalConnectorsAccessType>,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphExternalConnectorsAclType>,
    ///The unique identifer of the identity. For Microsoft Entra identities, value is set to the object identifier of the user, group or tenant for types user, group and everyone (and everyoneExceptGuests) respectively. For external groups value is set to the ID of the externalGroup
    pub value: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalConnectorsAclType {
    #[serde(rename = "user")]
    #[default]
    User,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "everyone")]
    Everyone,
    #[serde(rename = "everyoneExceptGuests")]
    EveryoneExceptGuests,
    #[serde(rename = "externalGroup")]
    ExternalGroup,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsActivitySettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies configurations to identify an externalItem based on a shared URL.
    #[serde(rename = "urlToItemResolvers")]
    pub url_to_item_resolvers: Option<
        Vec<MicrosoftGraphExternalConnectorsUrlToItemResolverBase>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A collection of application IDs for registered Microsoft Entra apps that are allowed to manage the externalConnection and to index content in the externalConnection.
    #[serde(rename = "authorizedAppIds")]
    pub authorized_app_ids: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsConnectionOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalConnectors.connectionOperation".to_string())]
    pub odata_type: String,
    ///If status is failed, provides more information about the error that caused the failure.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates the status of the asynchronous operation. Possible values are: unspecified, inprogress, completed, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphExternalConnectorsConnectionOperationStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalConnectorsConnectionOperationStatus {
    #[serde(rename = "unspecified")]
    #[default]
    Unspecified,
    #[serde(rename = "inprogress")]
    Inprogress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalConnectorsConnectionState {
    #[serde(rename = "draft")]
    #[default]
    Draft,
    #[serde(rename = "ready")]
    Ready,
    #[serde(rename = "obsolete")]
    Obsolete,
    #[serde(rename = "limitExceeded")]
    LimitExceeded,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsDisplayTemplate {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The text identifier for the display template; for example, contosoTickets. Maximum 16 characters. Only alphanumeric characters allowed.
    pub id: Option<String>,
    ///The definition of the content's appearance, represented by an Adaptive Card, which is a JSON-serialized card object model.
    pub layout: Option<serde_json::Value>,
    ///Defines the priority of a display template. A display template with priority 1 is evaluated before a template with priority 4. Gaps in priority values are supported. Must be positive value.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub priority: Option<f64>,
    ///Specifies additional rules for selecting this display template based on the item schema. Optional.
    pub rules: Option<Vec<MicrosoftGraphExternalConnectorsPropertyRule>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsExternalActivity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalConnectors.externalActivity".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents an identity used to identify who is responsible for the activity.
    #[serde(rename = "performedBy")]
    pub performed_by: Option<MicrosoftGraphExternalConnectorsIdentity>,
    ///The date and time when the particular activity occurred. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphExternalConnectorsExternalActivityType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsExternalActivityResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalConnectors.externalActivityResult".to_string())]
    pub odata_type: String,
    ///Error information that explains the failure to process an external activity.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents an identity used to identify who is responsible for the activity.
    #[serde(rename = "performedBy")]
    pub performed_by: Option<MicrosoftGraphExternalConnectorsIdentity>,
    ///The date and time when the particular activity occurred. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphExternalConnectorsExternalActivityType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalConnectorsExternalActivityType {
    #[serde(rename = "viewed")]
    #[default]
    Viewed,
    #[serde(rename = "modified")]
    Modified,
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "commented")]
    Commented,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsExternalConnection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalConnectors.externalConnection".to_string())]
    pub odata_type: String,
    ///Collects configurable settings related to activities involving connector content.
    #[serde(rename = "activitySettings")]
    pub activity_settings: Option<MicrosoftGraphExternalConnectorsActivitySettings>,
    ///Specifies additional application IDs that are allowed to manage the connection and to index content in the connection. Optional.
    pub configuration: Option<MicrosoftGraphExternalConnectorsConfiguration>,
    ///The Teams app ID. Optional.
    #[serde(rename = "connectorId")]
    pub connector_id: Option<String>,
    ///Description of the connection displayed in the Microsoft 365 admin center. Optional.
    pub description: Option<String>,
    pub groups: Option<Vec<MicrosoftGraphExternalConnectorsExternalGroup>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub items: Option<Vec<MicrosoftGraphExternalConnectorsExternalItem>>,
    ///The display name of the connection to be displayed in the Microsoft 365 admin center. Maximum length of 128 characters. Required.
    pub name: Option<String>,
    pub operations: Option<Vec<MicrosoftGraphExternalConnectorsConnectionOperation>>,
    pub schema: Option<MicrosoftGraphExternalConnectorsSchema>,
    ///The settings configuring the search experience for content in this connection, such as the display templates for search results.
    #[serde(rename = "searchSettings")]
    pub search_settings: Option<MicrosoftGraphExternalConnectorsSearchSettings>,
    ///Indicates the current state of the connection. Possible values are: draft, ready, obsolete, limitExceeded, unknownFutureValue.
    pub state: Option<MicrosoftGraphExternalConnectorsConnectionState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsExternalGroup {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalConnectors.externalGroup".to_string())]
    pub odata_type: String,
    ///The description of the external group. Optional.
    pub description: Option<String>,
    ///The friendly name of the external group. Optional.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A member added to an externalGroup. You can add Microsoft Entra users, Microsoft Entra groups, or an externalGroup as members.
    pub members: Option<Vec<MicrosoftGraphExternalConnectorsIdentity>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsExternalItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalConnectors.externalItem".to_string())]
    pub odata_type: String,
    ///An array of access control entries. Each entry specifies the access granted to a user or group. Required.
    pub acl: Option<Vec<MicrosoftGraphExternalConnectorsAcl>>,
    ///Returns a list of activities performed on the item. Write-only.
    pub activities: Option<Vec<MicrosoftGraphExternalConnectorsExternalActivity>>,
    ///A plain-text  representation of the contents of the item. The text in this property is full-text indexed. Optional.
    pub content: Option<MicrosoftGraphExternalConnectorsExternalItemContent>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A property bag with the properties of the item. The properties MUST conform to the schema defined for the externalConnection. Required.
    pub properties: Option<MicrosoftGraphExternalConnectorsProperties>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsExternalItemContent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphExternalConnectorsExternalItemContentType>,
    ///The content for the externalItem. Required.
    pub value: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalConnectorsExternalItemContentType {
    #[serde(rename = "text")]
    #[default]
    Text,
    #[serde(rename = "html")]
    Html,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalConnectors.identity".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The type of identity. Possible values are: user or group for Microsoft Entra identities and externalgroup for groups in an external system.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphExternalConnectorsIdentityType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalConnectorsIdentityType {
    #[serde(rename = "user")]
    #[default]
    User,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "externalGroup")]
    ExternalGroup,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsItemIdResolver {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalConnectors.itemIdResolver".to_string())]
    pub odata_type: String,
    ///Pattern that specifies how to form the ID of the external item that the URL represents. The named groups from the regular expression in urlPattern within the urlMatchInfo can be referenced by inserting the group name inside curly brackets.
    #[serde(rename = "itemId")]
    pub item_id: Option<String>,
    ///The priority which defines the sequence in which the urlToItemResolverBase instances are evaluated.
    pub priority: Option<f64>,
    ///Configurations to match and resolve URL.
    #[serde(rename = "urlMatchInfo")]
    pub url_match_info: Option<MicrosoftGraphExternalConnectorsUrlMatchInfo>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalConnectorsLabel {
    #[serde(rename = "title")]
    #[default]
    Title,
    #[serde(rename = "url")]
    Url,
    #[serde(rename = "createdBy")]
    CreatedBy,
    #[serde(rename = "lastModifiedBy")]
    LastModifiedBy,
    #[serde(rename = "authors")]
    Authors,
    #[serde(rename = "createdDateTime")]
    CreatedDateTime,
    #[serde(rename = "lastModifiedDateTime")]
    LastModifiedDateTime,
    #[serde(rename = "fileName")]
    FileName,
    #[serde(rename = "fileExtension")]
    FileExtension,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "iconUrl")]
    IconUrl,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsProperties {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsProperty {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A set of aliases or a friendly name for the property. Maximum 32 characters. Only alphanumeric characters allowed. For example, each string may not contain control characters, whitespace, or any of the following: :, ;, ,, (, ), [, ], {, }, %, $, +, !, *, =, &, ?, @, #, /, ~, ', ', <, >, `, ^. Optional.
    pub aliases: Option<Vec<Option<String>>>,
    ///Specifies if the property is queryable. Queryable properties can be used in Keyword Query Language (KQL) queries. Optional.
    #[serde(rename = "isQueryable")]
    pub is_queryable: Option<bool>,
    ///Specifies if the property is refinable.  Refinable properties can be used to filter search results in the Search API and add a refiner control in the Microsoft Search user experience. Optional.
    #[serde(rename = "isRefinable")]
    pub is_refinable: Option<bool>,
    ///Specifies if the property is retrievable. Retrievable properties are returned in the result set when items are returned by the search API. Retrievable properties are also available to add to the display template used to render search results. Optional.
    #[serde(rename = "isRetrievable")]
    pub is_retrievable: Option<bool>,
    ///Specifies if the property is searchable. Only properties of type String or StringCollection can be searchable. Nonsearchable properties aren't added to the search index. Optional.
    #[serde(rename = "isSearchable")]
    pub is_searchable: Option<bool>,
    ///Specifies one or more well-known tags added against a property. Labels help Microsoft Search understand the semantics of the data in the connection. Adding appropriate labels would result in an enhanced search experience (for example, better relevance). Optional.The possible values are: title, url, createdBy, lastModifiedBy, authors, createdDateTime, lastModifiedDateTime, fileName, fileExtension, unknownFutureValue, iconUrl. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: iconUrl.
    pub labels: Option<Vec<MicrosoftGraphExternalConnectorsLabel>>,
    ///The name of the property. Maximum 32 characters. Only alphanumeric characters allowed. For example, each string may not contain control characters, whitespace, or any of the following: :, ;, ,, (, ), [, ], {, }, %, $, +, !, *, =, &, ?, @, #, /, ~, ', ', <, >, `, ^.  Required.
    pub name: Option<String>,
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphExternalConnectorsPropertyType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsPropertyRule {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub operation: Option<MicrosoftGraphExternalConnectorsRuleOperation>,
    ///The property from the externalItem schema. Required.
    pub property: Option<String>,
    ///A collection with one or many strings. One or more specified strings are matched with the specified property using the specified operation. Required.
    pub values: Option<Vec<String>>,
    #[serde(rename = "valuesJoinedBy")]
    pub values_joined_by: Option<MicrosoftGraphBinaryOperator>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalConnectorsPropertyType {
    #[serde(rename = "string")]
    #[default]
    String,
    #[serde(rename = "int64")]
    Int64,
    #[serde(rename = "double")]
    Double,
    #[serde(rename = "dateTime")]
    DateTime,
    #[serde(rename = "boolean")]
    Boolean,
    #[serde(rename = "stringCollection")]
    StringCollection,
    #[serde(rename = "int64Collection")]
    Int64Collection,
    #[serde(rename = "doubleCollection")]
    DoubleCollection,
    #[serde(rename = "dateTimeCollection")]
    DateTimeCollection,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalConnectorsRuleOperation {
    #[serde(rename = "null")]
    #[default]
    Null,
    #[serde(rename = "equals")]
    Equals,
    #[serde(rename = "notEquals")]
    NotEquals,
    #[serde(rename = "contains")]
    Contains,
    #[serde(rename = "notContains")]
    NotContains,
    #[serde(rename = "lessThan")]
    LessThan,
    #[serde(rename = "greaterThan")]
    GreaterThan,
    #[serde(rename = "startsWith")]
    StartsWith,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsSchema {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalConnectors.schema".to_string())]
    pub odata_type: String,
    ///Must be set to microsoft.graph.externalConnector.externalItem. Required.
    #[serde(rename = "baseType")]
    pub base_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The properties defined for the items in the connection. The minimum number of properties is one, the maximum is 128.
    pub properties: Option<Vec<MicrosoftGraphExternalConnectorsProperty>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsSearchSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Enables the developer to define the appearance of the content and configure conditions that dictate when the template should be displayed. Maximum of 2 search result templates per connection.
    #[serde(rename = "searchResultTemplates")]
    pub search_result_templates: Option<
        Vec<MicrosoftGraphExternalConnectorsDisplayTemplate>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsUrlMatchInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A list of the URL prefixes that must match URLs to be processed by this URL-to-item-resolver.
    #[serde(rename = "baseUrls")]
    pub base_urls: Option<Vec<Option<String>>>,
    ///A regular expression that will be matched towards the URL that is processed by this URL-to-item-resolver. The ECMAScript specification for regular expressions (ECMA-262) is used for the evaluation. The named groups defined by the regular expression will be used later to extract values from the URL.
    #[serde(rename = "urlPattern")]
    pub url_pattern: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphExternalConnectorsUrlToItemResolverBase { discriminator :
    "@odata.type", variants : [("#microsoft.graph.externalConnectors.itemIdResolver",
    MicrosoftGraphExternalConnectorsItemIdResolver(Box <
    MicrosoftGraphExternalConnectorsItemIdResolver >))], fallback :
    UrlToItemResolverBase(Box < MicrosoftGraphExternalConnectorsUrlToItemResolverBaseBase
    >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalConnectorsUrlToItemResolverBaseBase {
    ///The priority which defines the sequence in which the urlToItemResolverBase instances are evaluated.
    pub priority: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalDomainFederation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalDomainFederation".to_string())]
    pub odata_type: String,
    ///The name of the identity source, typically also the domain name. Read only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The domain name. Read only.
    #[serde(rename = "domainName")]
    pub domain_name: Option<String>,
    ///The issuerURI of the incoming federation. Read only.
    #[serde(rename = "issuerUri")]
    pub issuer_uri: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalDomainName {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalDomainName".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphExternalEmailOtpState {
    #[serde(rename = "default")]
    #[default]
    Default,
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalLink {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The URL of the link.
    pub href: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalSponsors {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalSponsors".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphExternalUsersSelfServiceSignUpEventsFlow {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.externalUsersSelfServiceSignUpEventsFlow".to_string())]
    pub odata_type: String,
    ///The conditions representing the context of the authentication request that's used to decide whether the events policy is invoked.  Supports $filter (eq). See support for filtering on user flows for syntax information.
    pub conditions: Option<MicrosoftGraphAuthenticationConditions>,
    ///The description of the events policy.
    pub description: Option<String>,
    ///Required. The display name for the events policy.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The configuration for what to invoke when attributes are ready to be collected from the user.
    #[serde(rename = "onAttributeCollection")]
    pub on_attribute_collection: Option<MicrosoftGraphOnAttributeCollectionHandler>,
    ///The configuration for what to invoke when attribution collection starts.
    #[serde(rename = "onAttributeCollectionStart")]
    pub on_attribute_collection_start: Option<
        MicrosoftGraphOnAttributeCollectionStartHandler,
    >,
    ///The configuration for what to invoke when attributes are submitted at the end of attribution collection.
    #[serde(rename = "onAttributeCollectionSubmit")]
    pub on_attribute_collection_submit: Option<
        MicrosoftGraphOnAttributeCollectionSubmitHandler,
    >,
    ///Required. The configuration for what to invoke when authentication methods are ready to be presented to the user. Must have at least one identity provider linked.  Supports $filter (eq). See support for filtering on user flows for syntax information.
    #[serde(rename = "onAuthenticationMethodLoadStart")]
    pub on_authentication_method_load_start: Option<
        MicrosoftGraphOnAuthenticationMethodLoadStartHandler,
    >,
    ///Required. The configuration for what to invoke when an authentication flow is ready to be initiated.
    #[serde(rename = "onInteractiveAuthFlowStart")]
    pub on_interactive_auth_flow_start: Option<
        MicrosoftGraphOnInteractiveAuthFlowStartHandler,
    >,
    ///The configuration for what to invoke during user creation.
    #[serde(rename = "onUserCreateStart")]
    pub on_user_create_start: Option<MicrosoftGraphOnUserCreateStartHandler>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFallbackToMicrosoftProviderOnError {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.fallbackToMicrosoftProviderOnError".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFeatureRolloutPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.featureRolloutPolicy".to_string())]
    pub odata_type: String,
    ///Nullable. Specifies a list of directoryObject resources that feature is enabled for.
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///A description for this feature rollout policy.
    pub description: Option<String>,
    ///The display name for this  feature rollout policy.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    pub feature: Option<MicrosoftGraphStagedFeatureName>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether this feature rollout policy should be applied to the entire organization.
    #[serde(rename = "isAppliedToOrganization")]
    pub is_applied_to_organization: Option<bool>,
    ///Indicates whether the feature rollout is enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFeatureTarget {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The ID of the entity that's targeted in the include or exclude rule, or all_users to target all users.
    pub id: Option<String>,
    ///The kind of entity that's targeted. The possible values are: group, administrativeUnit, role, unknownFutureValue.
    #[serde(rename = "targetType")]
    pub target_type: Option<MicrosoftGraphFeatureTargetType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphFeatureTargetType {
    #[serde(rename = "group")]
    #[default]
    Group,
    #[serde(rename = "administrativeUnit")]
    AdministrativeUnit,
    #[serde(rename = "role")]
    Role,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFederatedIdentityCredential {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.federatedIdentityCredential".to_string())]
    pub odata_type: String,
    ///The audience that can appear in the external token. This field is mandatory and should be set to api://AzureADTokenExchange for Microsoft Entra ID. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Microsoft Entra ID in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your identity provider to serve as the audience of this token. This field can only accept a single value and has a limit of 600 characters. Required.
    pub audiences: Option<Vec<String>>,
    ///The unvalidated description of the federated identity credential, provided by the user. It has a limit of 600 characters. Optional.
    pub description: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The URL of the external identity provider, which must match the issuer claim of the external token being exchanged. The combination of the values of issuer and subject must be unique within the app. It has a limit of 600 characters. Required.
    pub issuer: Option<String>,
    ///The unique identifier for the federated identity credential, which has a limit of 120 characters and must be URL friendly. The string is immutable after it's created. Alternate key. Required. Not nullable. Supports $filter (eq).
    pub name: Option<String>,
    ///Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format; each identity provider uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Microsoft Entra ID. The combination of issuer and subject must be unique within the app. It has a limit of 600 characters. Supports $filter (eq).
    pub subject: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphFederatedIdpMfaBehavior {
    #[serde(rename = "acceptIfMfaDoneByFederatedIdp")]
    #[default]
    AcceptIfMfaDoneByFederatedIdp,
    #[serde(rename = "enforceMfaByFederatedIdp")]
    EnforceMfaByFederatedIdp,
    #[serde(rename = "rejectMfaByFederatedIdp")]
    RejectMfaByFederatedIdp,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFido2AuthenticationMethod {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.fido2AuthenticationMethod".to_string())]
    pub odata_type: String,
    ///Authenticator Attestation GUID, an identifier that indicates the type (e.g. make and model) of the authenticator.
    #[serde(rename = "aaGuid")]
    pub aa_guid: Option<String>,
    ///The attestation certificate(s) attached to this security key.
    #[serde(rename = "attestationCertificates")]
    pub attestation_certificates: Option<Vec<Option<String>>>,
    ///The attestation level of this FIDO2 security key. Possible values are: attested, or notAttested.
    #[serde(rename = "attestationLevel")]
    pub attestation_level: Option<MicrosoftGraphAttestationLevel>,
    ///The timestamp when this key was registered to the user.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The display name of the key as given by the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The manufacturer-assigned model of the FIDO2 security key.
    pub model: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFido2AuthenticationMethodConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.fido2AuthenticationMethodConfiguration".to_string())]
    pub odata_type: String,
    ///Groups of users that are excluded from a policy.
    #[serde(rename = "excludeTargets")]
    pub exclude_targets: Option<Vec<MicrosoftGraphExcludeTarget>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of groups that are enabled to use the authentication method.
    #[serde(rename = "includeTargets")]
    pub include_targets: Option<Vec<MicrosoftGraphAuthenticationMethodTarget>>,
    ///Determines whether attestation must be enforced for FIDO2 security key registration.
    #[serde(rename = "isAttestationEnforced")]
    pub is_attestation_enforced: Option<bool>,
    ///Determines if users can register new FIDO2 security keys.
    #[serde(rename = "isSelfServiceRegistrationAllowed")]
    pub is_self_service_registration_allowed: Option<bool>,
    ///Controls whether key restrictions are enforced on FIDO2 security keys, either allowing or disallowing certain key types as defined by Authenticator Attestation GUID (AAGUID), an identifier that indicates the type (for example, make and model) of the authenticator.
    #[serde(rename = "keyRestrictions")]
    pub key_restrictions: Option<MicrosoftGraphFido2KeyRestrictions>,
    ///The state of the policy. Possible values are: enabled, disabled.
    pub state: Option<MicrosoftGraphAuthenticationMethodState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFido2CombinationConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.fido2CombinationConfiguration".to_string())]
    pub odata_type: String,
    ///A list of AAGUIDs allowed to be used as part of the specified authentication method combinations.
    #[serde(rename = "allowedAAGUIDs")]
    pub allowed_aaguids: Option<Vec<String>>,
    ///Which authentication method combinations this configuration applies to. Must be an allowedCombinations object, part of the authenticationStrengthPolicy. The only possible value for fido2combinationConfigurations is 'fido2'.
    #[serde(rename = "appliesToCombinations")]
    pub applies_to_combinations: Option<Vec<MicrosoftGraphAuthenticationMethodModes>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFido2KeyRestrictions {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A collection of Authenticator Attestation GUIDs. AADGUIDs define key types and manufacturers.
    #[serde(rename = "aaGuids")]
    pub aa_guids: Option<Vec<Option<String>>>,
    ///Enforcement type. Possible values are: allow, block.
    #[serde(rename = "enforcementType")]
    pub enforcement_type: Option<MicrosoftGraphFido2RestrictionEnforcementType>,
    ///Determines if the configured key enforcement is enabled.
    #[serde(rename = "isEnforced")]
    pub is_enforced: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphFido2RestrictionEnforcementType {
    #[serde(rename = "allow")]
    #[default]
    Allow,
    #[serde(rename = "block")]
    Block,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFieldValueSet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.fieldValueSet".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFile {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Hashes of the file's binary content, if available. Read-only.
    pub hashes: Option<MicrosoftGraphHashes>,
    ///The MIME type for the file. This is determined by logic on the server and might not be the value provided when the file was uploaded. Read-only.
    #[serde(rename = "mimeType")]
    pub mime_type: Option<String>,
    #[serde(rename = "processingMetadata")]
    pub processing_metadata: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFileAssessmentRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.fileAssessmentRequest".to_string())]
    pub odata_type: String,
    pub category: Option<MicrosoftGraphThreatCategory>,
    ///Base64 encoded file content. The file content can't fetch back because it isn't stored.
    #[serde(rename = "contentData")]
    pub content_data: Option<String>,
    ///The content type of threat assessment. Possible values are: mail, url, file.
    #[serde(rename = "contentType")]
    pub content_type: Option<MicrosoftGraphThreatAssessmentContentType>,
    ///The threat assessment request creator.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "expectedAssessment")]
    pub expected_assessment: Option<MicrosoftGraphThreatExpectedAssessment>,
    ///The file name.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The source of the threat assessment request. Possible values are: administrator.
    #[serde(rename = "requestSource")]
    pub request_source: Option<MicrosoftGraphThreatAssessmentRequestSource>,
    ///A collection of threat assessment results. Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.
    pub results: Option<Vec<MicrosoftGraphThreatAssessmentResult>>,
    ///The assessment process status. Possible values are: pending, completed.
    pub status: Option<MicrosoftGraphThreatAssessmentStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFileAttachment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.fileAttachment".to_string())]
    pub odata_type: String,
    ///The base64-encoded contents of the file.
    #[serde(rename = "contentBytes")]
    pub content_bytes: Option<String>,
    ///The ID of the attachment in the Exchange store.
    #[serde(rename = "contentId")]
    pub content_id: Option<String>,
    ///Don't use this property as it isn't supported.
    #[serde(rename = "contentLocation")]
    pub content_location: Option<String>,
    ///The MIME type.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///true if the attachment is an inline attachment; otherwise, false.
    #[serde(rename = "isInline")]
    pub is_inline: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The attachment's file name.
    pub name: Option<String>,
    ///The length of the attachment in bytes.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFileHash {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///File hash type. Possible values are: unknown, sha1, sha256, md5, authenticodeHash256, lsHash, ctph, peSha1, peSha256.
    #[serde(rename = "hashType")]
    pub hash_type: Option<MicrosoftGraphFileHashType>,
    ///Value of the file hash.
    #[serde(rename = "hashValue")]
    pub hash_value: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphFileHashType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "sha1")]
    Sha1,
    #[serde(rename = "sha256")]
    Sha256,
    #[serde(rename = "md5")]
    Md5,
    #[serde(rename = "authenticodeHash256")]
    AuthenticodeHash256,
    #[serde(rename = "lsHash")]
    LsHash,
    #[serde(rename = "ctph")]
    Ctph,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFileSecurityState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Complex type containing file hashes (cryptographic and location-sensitive).
    #[serde(rename = "fileHash")]
    pub file_hash: Option<MicrosoftGraphFileHash>,
    ///File name (without path).
    pub name: Option<String>,
    ///Full file path of the file/imageFile.
    pub path: Option<String>,
    ///Provider generated/calculated risk score of the alert file. Recommended value range of 0-1, which equates to a percentage.
    #[serde(rename = "riskScore")]
    pub risk_score: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFileStorage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.fileStorage".to_string())]
    pub odata_type: String,
    pub containers: Option<Vec<MicrosoftGraphFileStorageContainer>>,
    #[serde(rename = "deletedContainers")]
    pub deleted_containers: Option<Vec<MicrosoftGraphFileStorageContainer>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFileStorageContainer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.fileStorageContainer".to_string())]
    pub odata_type: String,
    pub columns: Option<Vec<MicrosoftGraphColumnDefinition>>,
    ///Container type ID of the fileStorageContainer. For details about container types, see Container Types. Each container must have only one container type. Read-only.
    #[serde(rename = "containerTypeId")]
    pub container_type_id: Option<uuid::Uuid>,
    ///Date and time of the fileStorageContainer creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Custom property collection for the fileStorageContainer. Read-write.
    #[serde(rename = "customProperties")]
    pub custom_properties: Option<
        MicrosoftGraphFileStorageContainerCustomPropertyDictionary,
    >,
    ///Provides a user-visible description of the fileStorageContainer. Read-write.
    pub description: Option<String>,
    ///The display name of the fileStorageContainer. Read-write.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The drive of the resource fileStorageContainer. Read-only.
    pub drive: Option<Box<MicrosoftGraphDrive>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates the lock state of the fileStorageContainer. The possible values are unlocked and lockedReadOnly. Read-only.
    #[serde(rename = "lockState")]
    pub lock_state: Option<MicrosoftGraphSiteLockState>,
    ///The set of permissions for users in the fileStorageContainer. Permission for each user is set by the roles property. The possible values are: reader, writer, manager, and owner. Read-write.
    pub permissions: Option<Vec<MicrosoftGraphPermission>>,
    ///Recycle bin of the fileStorageContainer. Read-only.
    #[serde(rename = "recycleBin")]
    pub recycle_bin: Option<MicrosoftGraphRecycleBin>,
    pub settings: Option<MicrosoftGraphFileStorageContainerSettings>,
    ///Status of the fileStorageContainer. Containers are created as inactive and require activation. Inactive containers are subjected to automatic deletion in 24 hours. The possible values are: inactive, active. Read-only.
    pub status: Option<MicrosoftGraphFileStorageContainerStatus>,
    ///Data specific to the current user. Read-only.
    pub viewpoint: Option<MicrosoftGraphFileStorageContainerViewpoint>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFileStorageContainerCustomPropertyDictionary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.fileStorageContainerCustomPropertyDictionary".to_string()
    )]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFileStorageContainerSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether versioning is enabled for items in the container. Optional. Read-write.
    #[serde(rename = "isItemVersioningEnabled")]
    pub is_item_versioning_enabled: Option<bool>,
    ///Indicates whether Optical Character Recognition (OCR) is enabled for the container. The default value is false. When set to true, OCR extraction is performed for new and updated documents of supported document types, and the extracted fields in the metadata of the document enable end-user search and search-driven solutions. When set to false, existing OCR metadata is not impacted. Optional. Read-write.
    #[serde(rename = "isOcrEnabled")]
    pub is_ocr_enabled: Option<bool>,
    ///The maximum major versions allowed for items in the container. Optional. Read-write.
    #[serde(rename = "itemMajorVersionLimit")]
    pub item_major_version_limit: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphFileStorageContainerStatus {
    #[serde(rename = "inactive")]
    #[default]
    Inactive,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFileStorageContainerViewpoint {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The current user's effective role. Read-only.
    #[serde(rename = "effectiveRole")]
    pub effective_role: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFileSystemInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The UTC date and time the file was created on a client.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The UTC date and time the file was last accessed. Available for the recent file list only.
    #[serde(rename = "lastAccessedDateTime")]
    pub last_accessed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The UTC date and time the file was last modified on a client.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFilter {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///*Experimental* Filter group set used to decide whether given object belongs and should be processed as part of this object mapping. An object is considered in scope if ANY of the groups in the collection is evaluated to true.
    #[serde(rename = "categoryFilterGroups")]
    pub category_filter_groups: Option<Vec<MicrosoftGraphFilterGroup>>,
    ///Filter group set used to decide whether given object is in scope for provisioning. This is the filter which should be used in most cases. If an object used to satisfy this filter at a given moment, and then the object or the filter was changed so that filter isn't satisfied any longer, such object will get deprovisioned'. An object is considered in scope if ANY of the groups in the collection is evaluated to true.
    pub groups: Option<Vec<MicrosoftGraphFilterGroup>>,
    ///*Experimental* Filter group set used to filter out objects at the early stage of reading them from the directory. If an object doesn't satisfy this filter, then it will not be processed further. Important to understand is that if an object used to satisfy this filter at a given moment, and then the object or the filter was changed so that filter is no longer satisfied, such object will NOT get deprovisioned. An object is considered in scope if ANY of the groups in the collection is evaluated to true.
    #[serde(rename = "inputFilterGroups")]
    pub input_filter_groups: Option<Vec<MicrosoftGraphFilterGroup>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFilterClause {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Name of the operator to be applied to the source and target operands. Must be one of the supported operators. Supported operators can be discovered.
    #[serde(rename = "operatorName")]
    pub operator_name: Option<String>,
    ///Name of source operand (the operand being tested). The source operand name must match one of the attribute names on the source object.
    #[serde(rename = "sourceOperandName")]
    pub source_operand_name: Option<String>,
    ///Values that the source operand will be tested against.
    #[serde(rename = "targetOperand")]
    pub target_operand: Option<MicrosoftGraphFilterOperand>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFilterGroup {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Filter clauses (conditions) of this group. All clauses in a group must be satisfied in order for the filter group to evaluate to true.
    pub clauses: Option<Vec<MicrosoftGraphFilterClause>>,
    ///Human-readable name of the filter group.
    pub name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphFilterMode {
    #[serde(rename = "include")]
    #[default]
    Include,
    #[serde(rename = "exclude")]
    Exclude,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFilterOperand {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Collection of values.
    pub values: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFilterOperatorSchema {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.filterOperatorSchema".to_string())]
    pub odata_type: String,
    pub arity: Option<MicrosoftGraphScopeOperatorType>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "multivaluedComparisonType")]
    pub multivalued_comparison_type: Option<
        MicrosoftGraphScopeOperatorMultiValuedComparisonType,
    >,
    ///Attribute types supported by the operator. Possible values are: Boolean, Binary, Reference, Integer, String.
    #[serde(rename = "supportedAttributeTypes")]
    pub supported_attribute_types: Option<Vec<MicrosoftGraphAttributeType>>,
}
///Possible values for firewallCertificateRevocationListCheckMethod
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphFirewallCertificateRevocationListCheckMethodType {
    #[serde(rename = "deviceDefault")]
    #[default]
    DeviceDefault,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "attempt")]
    Attempt,
    #[serde(rename = "require")]
    Require,
}
///Possible values for firewallPacketQueueingMethod
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphFirewallPacketQueueingMethodType {
    #[serde(rename = "deviceDefault")]
    #[default]
    DeviceDefault,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "queueInbound")]
    QueueInbound,
    #[serde(rename = "queueOutbound")]
    QueueOutbound,
    #[serde(rename = "queueBoth")]
    QueueBoth,
}
///Possible values for firewallPreSharedKeyEncodingMethod
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphFirewallPreSharedKeyEncodingMethodType {
    #[serde(rename = "deviceDefault")]
    #[default]
    DeviceDefault,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "utF8")]
    UtF8,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFolder {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Number of children contained immediately within this container.
    #[serde(rename = "childCount")]
    pub child_count: Option<f64>,
    ///A collection of properties defining the recommended view for the folder.
    pub view: Option<MicrosoftGraphFolderView>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFolderView {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The method by which the folder should be sorted.
    #[serde(rename = "sortBy")]
    pub sort_by: Option<String>,
    ///If true, indicates that items should be sorted in descending order. Otherwise, items should be sorted ascending.
    #[serde(rename = "sortOrder")]
    pub sort_order: Option<String>,
    ///The type of view that should be used to represent the folder.
    #[serde(rename = "viewType")]
    pub view_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphFollowupFlag {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The date and time that the follow-up was finished.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The date and time that the follow-up is to be finished. Note: To set the due date, you must also specify the startDateTime; otherwise, you get a 400 Bad Request response.
    #[serde(rename = "dueDateTime")]
    pub due_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The status for follow-up for an item. Possible values are notFlagged, complete, and flagged.
    #[serde(rename = "flagStatus")]
    pub flag_status: Option<MicrosoftGraphFollowupFlagStatus>,
    ///The date and time that the follow-up is to begin.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphFollowupFlagStatus {
    #[serde(rename = "notFlagged")]
    #[default]
    NotFlagged,
    #[serde(rename = "complete")]
    Complete,
    #[serde(rename = "flagged")]
    Flagged,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphFreeBusyStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "free")]
    Free,
    #[serde(rename = "tentative")]
    Tentative,
    #[serde(rename = "busy")]
    Busy,
    #[serde(rename = "oof")]
    Oof,
    #[serde(rename = "workingElsewhere")]
    WorkingElsewhere,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGeoCoordinates {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Optional. The altitude (height), in feet,  above sea level for the item. Read-only.
    pub altitude: Option<MicrosoftGraphGeoCoordinatesAltitude>,
    ///Optional. The latitude, in decimal, for the item. Read-only.
    pub latitude: Option<MicrosoftGraphGeoCoordinatesLatitude>,
    ///Optional. The longitude, in decimal, for the item. Read-only.
    pub longitude: Option<MicrosoftGraphGeoCoordinatesLongitude>,
}
///Optional. The altitude (height), in feet,  above sea level for the item. Read-only.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphGeoCoordinatesAltitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Optional. The latitude, in decimal, for the item. Read-only.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphGeoCoordinatesLatitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Optional. The longitude, in decimal, for the item. Read-only.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphGeoCoordinatesLongitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGeolocationColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphGiphyRatingType {
    #[serde(rename = "strict")]
    #[default]
    Strict,
    #[serde(rename = "moderate")]
    Moderate,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGovernanceInsight {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.governanceInsight".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates when the insight was created.
    #[serde(rename = "insightCreatedDateTime")]
    pub insight_created_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGranularMailboxRestoreArtifact {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.granularMailboxRestoreArtifact".to_string())]
    pub odata_type: String,
    ///This property will be deprecated soon. Don't use.
    #[serde(rename = "artifactCount")]
    pub artifact_count: Option<f64>,
    ///The time when restoration of restore artifact is completed.
    #[serde(rename = "completionDateTime")]
    pub completion_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the restoration destination. The possible values are: new, inPlace, unknownFutureValue.
    #[serde(rename = "destinationType")]
    pub destination_type: Option<MicrosoftGraphDestinationType>,
    ///Contains error details if the restore session fails or completes with an error.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the date and time when an artifact is protected by a protectionPolicy and can be restored.
    #[serde(rename = "restorePoint")]
    pub restore_point: Option<MicrosoftGraphRestorePoint>,
    ///The new restored folder identifier for the user.
    #[serde(rename = "restoredFolderId")]
    pub restored_folder_id: Option<String>,
    ///The new restored folder name.
    #[serde(rename = "restoredFolderName")]
    pub restored_folder_name: Option<String>,
    ///The number of items that are being restored in the folder.
    #[serde(rename = "restoredItemCount")]
    pub restored_item_count: Option<f64>,
    ///.
    #[serde(rename = "searchResponseId")]
    pub search_response_id: Option<String>,
    ///The time when restoration of restore artifact is started.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The individual restoration status of the restore artifact. The possible values are: added, scheduling, scheduled, inProgress, succeeded, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphArtifactRestoreStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGroup {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.group".to_string())]
    pub odata_type: String,
    ///The list of users or groups allowed to create posts or calendar events in this group. If this list is nonempty, then only users or groups listed here are allowed to post.
    #[serde(rename = "acceptedSenders")]
    pub accepted_senders: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Indicates if people external to the organization can send messages to the group. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
    #[serde(rename = "allowExternalSenders")]
    pub allow_external_senders: Option<bool>,
    ///Represents the app roles granted to a group for an application. Supports $expand.
    #[serde(rename = "appRoleAssignments")]
    pub app_role_assignments: Option<Vec<MicrosoftGraphAppRoleAssignment>>,
    ///The list of sensitivity label pairs (label ID, label name) associated with a Microsoft 365 group. Returned only on $select. This property can be updated only in delegated scenarios where the caller requires both the Microsoft Graph permission and a supported administrator role.
    #[serde(rename = "assignedLabels")]
    pub assigned_labels: Option<Vec<MicrosoftGraphAssignedLabel>>,
    ///The licenses that are assigned to the group. Returned only on $select. Supports $filter (eq). Read-only.
    #[serde(rename = "assignedLicenses")]
    pub assigned_licenses: Option<Vec<MicrosoftGraphAssignedLicense>>,
    ///Indicates if new members added to the group are autosubscribed to receive email notifications. You can set this property in a PATCH request for the group; don't set it in the initial POST request that creates the group. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
    #[serde(rename = "autoSubscribeNewMembers")]
    pub auto_subscribe_new_members: Option<bool>,
    ///The group's calendar. Read-only.
    pub calendar: Option<Box<MicrosoftGraphCalendar>>,
    ///The calendar view for the calendar. Read-only.
    #[serde(rename = "calendarView")]
    pub calendar_view: Option<Vec<MicrosoftGraphEvent>>,
    ///Describes a classification for the group (such as low, medium, or high business impact). Valid values for this property are defined by creating a ClassificationList setting value, based on the template definition.Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith).
    pub classification: Option<String>,
    ///The group's conversations.
    pub conversations: Option<Vec<MicrosoftGraphConversation>>,
    ///Timestamp of when the group was created. The value can't be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user (or application) that created the group. NOTE: This property isn't set if the user is an administrator. Read-only.
    #[serde(rename = "createdOnBehalfOf")]
    pub created_on_behalf_of: Option<MicrosoftGraphDirectoryObject>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///An optional description for the group. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith) and $search.
    pub description: Option<String>,
    ///The display name for the group. This property is required when a group is created and can't be cleared during updates. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The group's default drive. Read-only.
    pub drive: Option<Box<MicrosoftGraphDrive>>,
    ///The group's drives. Read-only.
    pub drives: Option<Vec<MicrosoftGraphDrive>>,
    ///The group's calendar events.
    pub events: Option<Vec<MicrosoftGraphEvent>>,
    ///Timestamp of when the group is set to expire. It's null for security groups, but for Microsoft 365 groups, it represents when the group is set to expire as defined in the groupLifecyclePolicy. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of open extensions defined for the group. Read-only. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///The collection of lifecycle policies for this group. Read-only. Nullable.
    #[serde(rename = "groupLifecyclePolicies")]
    pub group_lifecycle_policies: Option<Vec<MicrosoftGraphGroupLifecyclePolicy>>,
    ///Specifies the group type and its membership. If the collection contains Unified, the group is a Microsoft 365 group; otherwise, it's either a security group or a distribution group. For details, see groups overview.If the collection includes DynamicMembership, the group has dynamic membership; otherwise, membership is static. Returned by default. Supports $filter (eq, not).
    #[serde(rename = "groupTypes")]
    pub group_types: Option<Vec<String>>,
    ///Indicates whether there are members in this group that have license errors from its group-based license assignment. This property is never returned on a GET operation. You can use it as a $filter argument to get groups that have members with license errors (that is, filter for this property being true). See an example. Supports $filter (eq).
    #[serde(rename = "hasMembersWithLicenseErrors")]
    pub has_members_with_license_errors: Option<bool>,
    ///True if the group isn't displayed in certain parts of the Outlook UI: the Address Book, address lists for selecting message recipients, and the Browse Groups dialog for searching groups; otherwise, false. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
    #[serde(rename = "hideFromAddressLists")]
    pub hide_from_address_lists: Option<bool>,
    ///True if the group isn't displayed in Outlook clients, such as Outlook for Windows and Outlook on the web; otherwise, false. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
    #[serde(rename = "hideFromOutlookClients")]
    pub hide_from_outlook_clients: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When a group is associated with a team, this property determines whether the team is in read-only mode.To read this property, use the /group/{groupId}/team endpoint or the Get team API. To update this property, use the archiveTeam and unarchiveTeam APIs.
    #[serde(rename = "isArchived")]
    pub is_archived: Option<bool>,
    ///Indicates whether this group can be assigned to a Microsoft Entra role. Optional. This property can only be set while creating the group and is immutable. If set to true, the securityEnabled property must also be set to true, visibility must be Hidden, and the group can't be a dynamic group (that is, groupTypes can't contain DynamicMembership). Only callers with at least the Privileged Role Administrator role can set this property. The caller must also be assigned the RoleManagement.ReadWrite.Directory permission to set this property or update the membership of such groups. For more, see Using a group to manage Microsoft Entra role assignmentsUsing this feature requires a Microsoft Entra ID P1 license. Returned by default. Supports $filter (eq, ne, not).
    #[serde(rename = "isAssignableToRole")]
    pub is_assignable_to_role: Option<bool>,
    ///Indicates whether the group is a member of a restricted management administrative unit. If not set, the default value is null and the default behavior is false. Read-only.  To manage a group member of a restricted management administrative unit, the administrator or calling app must be assigned a Microsoft Entra role at the scope of the restricted management administrative unit. Returned only on $select.
    #[serde(rename = "isManagementRestricted")]
    pub is_management_restricted: Option<bool>,
    ///Indicates whether the signed-in user is subscribed to receive email conversations. The default value is true. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
    #[serde(rename = "isSubscribedByMail")]
    pub is_subscribed_by_mail: Option<bool>,
    ///Indicates the status of the group license assignment to all group members. The default value is false. Read-only. Possible values: QueuedForProcessing, ProcessingInProgress, and ProcessingComplete.Returned only on $select. Read-only.
    #[serde(rename = "licenseProcessingState")]
    pub license_processing_state: Option<MicrosoftGraphLicenseProcessingState>,
    ///The SMTP address for the group, for example, 'serviceadmins@contoso.com'. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    pub mail: Option<String>,
    ///Specifies whether the group is mail-enabled. Required. Returned by default. Supports $filter (eq, ne, not).
    #[serde(rename = "mailEnabled")]
    pub mail_enabled: Option<bool>,
    ///The mail alias for the group, unique for Microsoft 365 groups in the organization. Maximum length is 64 characters. This property can contain only characters in the ASCII character set 0 - 127 except the following characters: @ () / [] ' ; : <> , SPACE. Required. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "mailNickname")]
    pub mail_nickname: Option<String>,
    ///Groups that this group is a member of. HTTP Methods: GET (supported for all groups). Read-only. Nullable. Supports $expand.
    #[serde(rename = "memberOf")]
    pub member_of: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The members of this group, who can be users, devices, other groups, or service principals. Supports the List members, Add member, and Remove member operations. Nullable. Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,'Role')&$select=id,displayName&$expand=members($select=id,userPrincipalName,displayName).
    pub members: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///A list of group members with license errors from this group-based license assignment. Read-only.
    #[serde(rename = "membersWithLicenseErrors")]
    pub members_with_license_errors: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The rule that determines members for this group if the group is a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of the membership rule, see Membership Rules syntax. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith).
    #[serde(rename = "membershipRule")]
    pub membership_rule: Option<String>,
    ///Indicates whether the dynamic membership processing is on or paused. Possible values are On or Paused. Returned by default. Supports $filter (eq, ne, not, in).
    #[serde(rename = "membershipRuleProcessingState")]
    pub membership_rule_processing_state: Option<String>,
    ///Contains the on-premises domain FQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Read-only.
    #[serde(rename = "onPremisesDomainName")]
    pub on_premises_domain_name: Option<String>,
    ///Indicates the last time at which the group was synced with the on-premises directory. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in).
    #[serde(rename = "onPremisesLastSyncDateTime")]
    pub on_premises_last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains the on-premises netBios name synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Read-only.
    #[serde(rename = "onPremisesNetBiosName")]
    pub on_premises_net_bios_name: Option<String>,
    ///Errors when using Microsoft synchronization product during provisioning. Returned by default. Supports $filter (eq, not).
    #[serde(rename = "onPremisesProvisioningErrors")]
    pub on_premises_provisioning_errors: Option<
        Vec<MicrosoftGraphOnPremisesProvisioningError>,
    >,
    ///Contains the on-premises SAM account name synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith). Read-only.
    #[serde(rename = "onPremisesSamAccountName")]
    pub on_premises_sam_account_name: Option<String>,
    ///Contains the on-premises security identifier (SID) for the group synchronized from on-premises to the cloud. Read-only. Returned by default. Supports $filter (eq including on null values).
    #[serde(rename = "onPremisesSecurityIdentifier")]
    pub on_premises_security_identifier: Option<String>,
    ///true if this group is synced from an on-premises directory; false if this group was originally synced from an on-premises directory but is no longer synced; null if this object has never synced from an on-premises directory (default). Returned by default. Read-only. Supports $filter (eq, ne, not, in, and eq on null values).
    #[serde(rename = "onPremisesSyncEnabled")]
    pub on_premises_sync_enabled: Option<bool>,
    pub onenote: Option<MicrosoftGraphOnenote>,
    ///The owners of the group who can be users or service principals. Limited to 100 owners. Nullable. If this property isn't specified when creating a Microsoft 365 group the calling user (admin or non-admin) is automatically assigned as the group owner. A non-admin user can't explicitly add themselves to this collection when they're creating the group. For more information, see the related known issue. For security groups, the admin user isn't automatically added to this collection. For more information, see the related known issue. Supports $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1); Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,'Role')&$select=id,displayName&$expand=owners($select=id,userPrincipalName,displayName).
    pub owners: Option<Vec<MicrosoftGraphDirectoryObject>>,
    #[serde(rename = "permissionGrants")]
    pub permission_grants: Option<Vec<MicrosoftGraphResourceSpecificPermissionGrant>>,
    ///The group's profile photo
    pub photo: Option<MicrosoftGraphProfilePhoto>,
    ///The profile photos owned by the group. Read-only. Nullable.
    pub photos: Option<Vec<MicrosoftGraphProfilePhoto>>,
    ///Entry-point to Planner resource that might exist for a Unified Group.
    pub planner: Option<MicrosoftGraphPlannerGroup>,
    ///The preferred data location for the Microsoft 365 group. By default, the group inherits the group creator's preferred data location. To set this property, the calling app must be granted the Directory.ReadWrite.All permission and the user be assigned at least one of the following Microsoft Entra roles: User Account Administrator Directory Writer  Exchange Administrator  SharePoint Administrator  For more information about this property, see OneDrive Online Multi-Geo. Nullable. Returned by default.
    #[serde(rename = "preferredDataLocation")]
    pub preferred_data_location: Option<String>,
    ///The preferred language for a Microsoft 365 group. Should follow ISO 639-1 Code; for example, en-US. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "preferredLanguage")]
    pub preferred_language: Option<String>,
    ///Email addresses for the group that direct to the same group mailbox. For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. The any operator is required to filter expressions on multi-valued properties. Returned by default. Read-only. Not nullable. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0).
    #[serde(rename = "proxyAddresses")]
    pub proxy_addresses: Option<Vec<String>>,
    ///The list of users or groups not allowed to create posts or calendar events in this group. Nullable
    #[serde(rename = "rejectedSenders")]
    pub rejected_senders: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Timestamp of when the group was last renewed. This value can't be modified directly and is only updated via the renew service action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only.
    #[serde(rename = "renewedDateTime")]
    pub renewed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies whether the group is a security group. Required. Returned by default. Supports $filter (eq, ne, not, in).
    #[serde(rename = "securityEnabled")]
    pub security_enabled: Option<bool>,
    ///Security identifier of the group, used in Windows scenarios. Read-only. Returned by default.
    #[serde(rename = "securityIdentifier")]
    pub security_identifier: Option<String>,
    ///Errors published by a federated service describing a nontransient, service-specific error regarding the properties or link from a group object.  Supports $filter (eq, not, for isResolved and serviceInstance).
    #[serde(rename = "serviceProvisioningErrors")]
    pub service_provisioning_errors: Option<Vec<MicrosoftGraphServiceProvisioningError>>,
    ///Settings that can govern this group's behavior, like whether members can invite guests to the group. Nullable.
    pub settings: Option<Vec<MicrosoftGraphGroupSetting>>,
    ///The list of SharePoint sites in this group. Access the default site with /sites/root.
    pub sites: Option<Vec<MicrosoftGraphSite>>,
    ///The team associated with this group.
    pub team: Option<Box<MicrosoftGraphTeam>>,
    ///Specifies a Microsoft 365 group's color theme. Possible values are Teal, Purple, Green, Blue, Pink, Orange, or Red. Returned by default.
    pub theme: Option<String>,
    ///The group's conversation threads. Nullable.
    pub threads: Option<Vec<MicrosoftGraphConversationThread>>,
    ///The groups that a group is a member of, either directly or through nested membership. Nullable.
    #[serde(rename = "transitiveMemberOf")]
    pub transitive_member_of: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The direct and transitive members of a group. Nullable.
    #[serde(rename = "transitiveMembers")]
    pub transitive_members: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The unique identifier that can be assigned to a group and used as an alternate key. Immutable. Read-only.
    #[serde(rename = "uniqueName")]
    pub unique_name: Option<String>,
    ///Count of conversations that received new posts since the signed-in user last visited the group. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
    #[serde(rename = "unseenCount")]
    pub unseen_count: Option<f64>,
    ///Specifies the group join policy and group content visibility for groups. Possible values are: Private, Public, or HiddenMembership. HiddenMembership can be set only for Microsoft 365 groups when the groups are created. It can't be updated later. Other values of visibility can be updated after group creation. If visibility value isn't specified during group creation on Microsoft Graph, a security group is created as Private by default, and the Microsoft 365 group is Public. Groups assignable to roles are always Private. To learn more, see group visibility options. Returned by default. Nullable.
    pub visibility: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGroupAssignmentTarget {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.groupAssignmentTarget".to_string())]
    pub odata_type: String,
    ///The group Id that is the target of the assignment.
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGroupFilter {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "includedGroups")]
    pub included_groups: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGroupLifecyclePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.groupLifecyclePolicy".to_string())]
    pub odata_type: String,
    ///List of email address to send notifications for groups without owners. Multiple email address can be defined by separating email address with a semicolon.
    #[serde(rename = "alternateNotificationEmails")]
    pub alternate_notification_emails: Option<String>,
    ///Number of days before a group expires and needs to be renewed. Once renewed, the group expiration is extended by the number of days defined.
    #[serde(rename = "groupLifetimeInDays")]
    pub group_lifetime_in_days: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The group type for which the expiration policy applies. Possible values are All, Selected or None.
    #[serde(rename = "managedGroupTypes")]
    pub managed_group_types: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGroupMembers {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.groupMembers".to_string())]
    pub odata_type: String,
    ///The name of the group in Microsoft Entra ID. Read-only.
    pub description: Option<String>,
    ///The ID of the group in Microsoft Entra ID.
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGroupPeerOutlierRecommendationInsightSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.groupPeerOutlierRecommendationInsightSettings".to_string()
    )]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGroupSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.groupSetting".to_string())]
    pub odata_type: String,
    ///Display name of this group of settings, which comes from the associated template.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Unique identifier for the tenant-level groupSettingTemplates object that's been customized for this group-level settings object. Read-only.
    #[serde(rename = "templateId")]
    pub template_id: Option<String>,
    ///Collection of name-value pairs corresponding to the name and defaultValue properties in the referenced groupSettingTemplates object.
    pub values: Option<Vec<MicrosoftGraphSettingValue>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphGroupSettingTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.groupSettingTemplate".to_string())]
    pub odata_type: String,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description of the template.
    pub description: Option<String>,
    ///Display name of the template. The template named Group.Unified can be used to configure tenant-wide Microsoft 365 group settings, while the template named Group.Unified.Guest can be used to configure group-specific settings.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Collection of settingTemplateValues that list the set of available settings, defaults and types that make up this template.
    pub values: Option<Vec<MicrosoftGraphSettingTemplateValue>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphGroupType {
    #[serde(rename = "unifiedGroups")]
    #[default]
    UnifiedGroups,
    #[serde(rename = "azureAD")]
    AzureAd,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphHashes {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The CRC32 value of the file (if available). Read-only.
    #[serde(rename = "crc32Hash")]
    pub crc32hash: Option<String>,
    ///A proprietary hash of the file that can be used to determine if the contents of the file change (if available). Read-only.
    #[serde(rename = "quickXorHash")]
    pub quick_xor_hash: Option<String>,
    ///SHA1 hash for the contents of the file (if available). Read-only.
    #[serde(rename = "sha1Hash")]
    pub sha1hash: Option<String>,
    ///This property isn't supported. Don't use.
    #[serde(rename = "sha256Hash")]
    pub sha256hash: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphHomeRealmDiscoveryPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.homeRealmDiscoveryPolicy".to_string())]
    pub odata_type: String,
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///A string collection containing a JSON string that defines the rules and settings for a policy. The syntax for the definition differs for each derived policy type. Required.
    pub definition: Option<Vec<String>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If set to true, activates this policy. There can be many policies for the same policy type, but only one can be activated as the organization default. Optional, default value is false.
    #[serde(rename = "isOrganizationDefault")]
    pub is_organization_default: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphHorizontalSection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.horizontalSection".to_string())]
    pub odata_type: String,
    ///The set of vertical columns in this section.
    pub columns: Option<Vec<MicrosoftGraphHorizontalSectionColumn>>,
    ///Enumeration value that indicates the emphasis of the section background. The possible values are: none, netural, soft, strong, unknownFutureValue.
    pub emphasis: Option<MicrosoftGraphSectionEmphasisType>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Layout type of the section. The possible values are: none, oneColumn, twoColumns, threeColumns, oneThirdLeftColumn, oneThirdRightColumn, fullWidth, unknownFutureValue.
    pub layout: Option<MicrosoftGraphHorizontalSectionLayoutType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphHorizontalSectionColumn {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.horizontalSectionColumn".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The collection of WebParts in this column.
    pub webparts: Option<Vec<MicrosoftGraphWebPart>>,
    ///Width of the column. A horizontal section is divided into 12 grids. A column should have a value of 1-12 to represent its range spans. For example, there can be two columns both have a width of 6 in a section.
    pub width: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphHorizontalSectionLayoutType {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "oneColumn")]
    OneColumn,
    #[serde(rename = "twoColumns")]
    TwoColumns,
    #[serde(rename = "threeColumns")]
    ThreeColumns,
    #[serde(rename = "oneThirdLeftColumn")]
    OneThirdLeftColumn,
    #[serde(rename = "oneThirdRightColumn")]
    OneThirdRightColumn,
    #[serde(rename = "fullWidth")]
    FullWidth,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphHostSecurityState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Host FQDN (Fully Qualified Domain Name) (for example, machine.company.com).
    pub fqdn: Option<String>,
    #[serde(rename = "isAzureAdJoined")]
    pub is_azure_ad_joined: Option<bool>,
    #[serde(rename = "isAzureAdRegistered")]
    pub is_azure_ad_registered: Option<bool>,
    ///True if the host is domain joined to an on-premises Active Directory domain.
    #[serde(rename = "isHybridAzureDomainJoined")]
    pub is_hybrid_azure_domain_joined: Option<bool>,
    ///The local host name, without the DNS domain name.
    #[serde(rename = "netBiosName")]
    pub net_bios_name: Option<String>,
    ///Host Operating System. (For example, Windows 10, macOS, RHEL, etc.).
    pub os: Option<String>,
    ///Private (not routable) IPv4 or IPv6 address (see RFC 1918) at the time of the alert.
    #[serde(rename = "privateIpAddress")]
    pub private_ip_address: Option<String>,
    ///Publicly routable IPv4 or IPv6 address (see RFC 1918) at time of the alert.
    #[serde(rename = "publicIpAddress")]
    pub public_ip_address: Option<String>,
    ///Provider-generated/calculated risk score of the host.  Recommended value range of 0-1, which equates to a percentage.
    #[serde(rename = "riskScore")]
    pub risk_score: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphHttpRequestEndpoint {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.httpRequestEndpoint".to_string())]
    pub odata_type: String,
    ///The HTTP endpoint that a custom extension calls.
    #[serde(rename = "targetUrl")]
    pub target_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphHyperlinkOrPictureColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies whether the display format used for URL columns is an image or a hyperlink.
    #[serde(rename = "isPicture")]
    pub is_picture: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIPv4CidrRange {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iPv4CidrRange".to_string())]
    pub odata_type: String,
    ///IPv4 address in CIDR notation. Not nullable.
    #[serde(rename = "cidrAddress")]
    pub cidr_address: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIPv4Range {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iPv4Range".to_string())]
    pub odata_type: String,
    ///Lower address.
    #[serde(rename = "lowerAddress")]
    pub lower_address: Option<String>,
    ///Upper address.
    #[serde(rename = "upperAddress")]
    pub upper_address: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIPv6CidrRange {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iPv6CidrRange".to_string())]
    pub odata_type: String,
    ///IPv6 address in CIDR notation. Not nullable.
    #[serde(rename = "cidrAddress")]
    pub cidr_address: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIPv6Range {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iPv6Range".to_string())]
    pub odata_type: String,
    ///Lower address.
    #[serde(rename = "lowerAddress")]
    pub lower_address: Option<String>,
    ///Upper address.
    #[serde(rename = "upperAddress")]
    pub upper_address: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphIdentity { discriminator : "@odata.type", variants :
    [("#microsoft.graph.azureCommunicationServicesUserIdentity",
    MicrosoftGraphAzureCommunicationServicesUserIdentity(Box <
    MicrosoftGraphAzureCommunicationServicesUserIdentity >)),
    ("#microsoft.graph.callRecords.userIdentity",
    MicrosoftGraphCallRecordsUserIdentity(Box < MicrosoftGraphCallRecordsUserIdentity
    >)), ("#microsoft.graph.communicationsApplicationIdentity",
    MicrosoftGraphCommunicationsApplicationIdentity(Box <
    MicrosoftGraphCommunicationsApplicationIdentity >)),
    ("#microsoft.graph.communicationsApplicationInstanceIdentity",
    MicrosoftGraphCommunicationsApplicationInstanceIdentity(Box <
    MicrosoftGraphCommunicationsApplicationInstanceIdentity >)),
    ("#microsoft.graph.communicationsEncryptedIdentity",
    MicrosoftGraphCommunicationsEncryptedIdentity(Box <
    MicrosoftGraphCommunicationsEncryptedIdentity >)),
    ("#microsoft.graph.communicationsGuestIdentity",
    MicrosoftGraphCommunicationsGuestIdentity(Box <
    MicrosoftGraphCommunicationsGuestIdentity >)),
    ("#microsoft.graph.communicationsPhoneIdentity",
    MicrosoftGraphCommunicationsPhoneIdentity(Box <
    MicrosoftGraphCommunicationsPhoneIdentity >)),
    ("#microsoft.graph.communicationsUserIdentity",
    MicrosoftGraphCommunicationsUserIdentity(Box <
    MicrosoftGraphCommunicationsUserIdentity >)), ("#microsoft.graph.emailIdentity",
    MicrosoftGraphEmailIdentity(Box < MicrosoftGraphEmailIdentity >)),
    ("#microsoft.graph.initiator", MicrosoftGraphInitiator(Box < MicrosoftGraphInitiator
    >)), ("#microsoft.graph.provisionedIdentity", MicrosoftGraphProvisionedIdentity(Box <
    MicrosoftGraphProvisionedIdentity >)),
    ("#microsoft.graph.provisioningServicePrincipal",
    MicrosoftGraphProvisioningServicePrincipal(Box <
    MicrosoftGraphProvisioningServicePrincipal >)),
    ("#microsoft.graph.provisioningSystem", MicrosoftGraphProvisioningSystem(Box <
    MicrosoftGraphProvisioningSystem >)), ("#microsoft.graph.servicePrincipalIdentity",
    MicrosoftGraphServicePrincipalIdentity(Box < MicrosoftGraphServicePrincipalIdentity
    >)), ("#microsoft.graph.sharePointIdentity", MicrosoftGraphSharePointIdentity(Box <
    MicrosoftGraphSharePointIdentity >)),
    ("#microsoft.graph.teamworkApplicationIdentity",
    MicrosoftGraphTeamworkApplicationIdentity(Box <
    MicrosoftGraphTeamworkApplicationIdentity >)),
    ("#microsoft.graph.teamworkConversationIdentity",
    MicrosoftGraphTeamworkConversationIdentity(Box <
    MicrosoftGraphTeamworkConversationIdentity >)),
    ("#microsoft.graph.teamworkTagIdentity", MicrosoftGraphTeamworkTagIdentity(Box <
    MicrosoftGraphTeamworkTagIdentity >)), ("#microsoft.graph.teamworkUserIdentity",
    MicrosoftGraphTeamworkUserIdentity(Box < MicrosoftGraphTeamworkUserIdentity >)),
    ("#microsoft.graph.userIdentity", MicrosoftGraphUserIdentity(Box <
    MicrosoftGraphUserIdentity >))], fallback : Identity(Box < MicrosoftGraphIdentityBase
    >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityApiConnector {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityApiConnector".to_string())]
    pub odata_type: String,
    ///The object which describes the authentication configuration details for calling the API. Basic and PKCS 12 client certificate are supported.
    #[serde(rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<
        MicrosoftGraphApiAuthenticationConfigurationBase,
    >,
    ///The name of the API connector.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The URL of the API endpoint to call.
    #[serde(rename = "targetUrl")]
    pub target_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityBase {
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityBuiltInUserFlowAttribute {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityBuiltInUserFlowAttribute".to_string())]
    pub odata_type: String,
    #[serde(rename = "dataType")]
    pub data_type: Option<MicrosoftGraphIdentityUserFlowAttributeDataType>,
    ///The description of the user flow attribute that's shown to the user at the time of sign up.
    pub description: Option<String>,
    ///The display name of the user flow attribute.  Supports $filter (eq, ne).
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "userFlowAttributeType")]
    pub user_flow_attribute_type: Option<MicrosoftGraphIdentityUserFlowAttributeType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityContainer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityContainer".to_string())]
    pub odata_type: String,
    ///Represents entry point for API connectors.
    #[serde(rename = "apiConnectors")]
    pub api_connectors: Option<Vec<MicrosoftGraphIdentityApiConnector>>,
    ///Represents listeners for custom authentication extension events in Azure AD for workforce and customers.
    #[serde(rename = "authenticationEventListeners")]
    pub authentication_event_listeners: Option<
        Vec<MicrosoftGraphAuthenticationEventListener>,
    >,
    ///Represents the entry point for self-service sign-up and sign-in user flows in both Microsoft Entra workforce and external tenants.
    #[serde(rename = "authenticationEventsFlows")]
    pub authentication_events_flows: Option<Vec<MicrosoftGraphAuthenticationEventsFlow>>,
    ///Represents entry point for B2X/self-service sign-up identity userflows.
    #[serde(rename = "b2xUserFlows")]
    pub b2x_user_flows: Option<Vec<MicrosoftGraphB2xIdentityUserFlow>>,
    ///the entry point for the Conditional Access (CA) object model.
    #[serde(rename = "conditionalAccess")]
    pub conditional_access: Option<MicrosoftGraphConditionalAccessRoot>,
    ///Represents custom extensions to authentication flows in Azure AD for workforce and customers.
    #[serde(rename = "customAuthenticationExtensions")]
    pub custom_authentication_extensions: Option<
        Vec<MicrosoftGraphCustomAuthenticationExtension>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "identityProviders")]
    pub identity_providers: Option<Vec<MicrosoftGraphIdentityProviderBase>>,
    ///Represents entry point for identity userflow attributes.
    #[serde(rename = "userFlowAttributes")]
    pub user_flow_attributes: Option<Vec<MicrosoftGraphIdentityUserFlowAttribute>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityCustomUserFlowAttribute {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityCustomUserFlowAttribute".to_string())]
    pub odata_type: String,
    #[serde(rename = "dataType")]
    pub data_type: Option<MicrosoftGraphIdentityUserFlowAttributeDataType>,
    ///The description of the user flow attribute that's shown to the user at the time of sign up.
    pub description: Option<String>,
    ///The display name of the user flow attribute.  Supports $filter (eq, ne).
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "userFlowAttributeType")]
    pub user_flow_attribute_type: Option<MicrosoftGraphIdentityUserFlowAttributeType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceAttributeChangeTrigger {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.attributeChangeTrigger".to_string())]
    pub odata_type: String,
    ///The trigger attribute being changed that triggers the workflowexecutiontrigger of a workflow.)
    #[serde(rename = "triggerAttributes")]
    pub trigger_attributes: Option<
        Vec<MicrosoftGraphIdentityGovernanceTriggerAttribute>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceCustomTaskExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.customTaskExtension".to_string())]
    pub odata_type: String,
    ///Configuration for securing the API call to the logic app. For example, using OAuth client credentials flow.
    #[serde(rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<
        MicrosoftGraphCustomExtensionAuthenticationConfiguration,
    >,
    ///The callback configuration for a custom task extension.
    #[serde(rename = "callbackConfiguration")]
    pub callback_configuration: Option<
        MicrosoftGraphCustomExtensionCallbackConfiguration,
    >,
    ///HTTP connection settings that define how long Microsoft Entra ID can wait for a connection to a logic app, how many times you can retry a timed-out connection and the exception scenarios when retries are allowed.
    #[serde(rename = "clientConfiguration")]
    pub client_configuration: Option<MicrosoftGraphCustomExtensionClientConfiguration>,
    ///The unique identifier of the Microsoft Entra user that created the custom task extension.Supports $filter(eq, ne) and $expand.
    #[serde(rename = "createdBy")]
    pub created_by: Option<Box<MicrosoftGraphUser>>,
    ///When the custom task extension was created.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for the customCalloutExtension object.
    pub description: Option<String>,
    ///Display name for the customCalloutExtension object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The type and details for configuring the endpoint to call the logic app's workflow.
    #[serde(rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<
        MicrosoftGraphCustomExtensionEndpointConfiguration,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The unique identifier of the Microsoft Entra user that modified the custom task extension last.Supports $filter(eq, ne) and $expand.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<Box<MicrosoftGraphUser>>,
    ///When the custom extension was last modified.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceCustomTaskExtensionCallbackConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.identityGovernance.customTaskExtensionCallbackConfiguration".to_string(

        )
    )]
    pub odata_type: String,
    #[serde(rename = "authorizedApps")]
    pub authorized_apps: Option<Vec<MicrosoftGraphApplication>>,
    ///The maximum duration in ISO 8601 format that Microsoft Entra ID will wait for a resume action for the callout it sent to the logic app. The valid range for custom extensions in lifecycle workflows is five minutes to three hours. The valid range for custom extensions in entitlement management is between 5 minutes and 14 days. For example, PT3H refers to three hours, P3D refers to three days, PT10M refers to ten minutes.
    #[serde(rename = "timeoutDuration")]
    pub timeout_duration: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceGroupBasedSubjectSet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.groupBasedSubjectSet".to_string())]
    pub odata_type: String,
    pub groups: Option<Vec<MicrosoftGraphGroup>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceInsights {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.insights".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceLifecycleManagementSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.identityGovernance.lifecycleManagementSettings".to_string()
    )]
    pub odata_type: String,
    #[serde(rename = "emailSettings")]
    pub email_settings: Option<MicrosoftGraphEmailSettings>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The interval in hours at which all workflows running in the tenant should be scheduled for execution. This interval has a minimum value of 1 and a maximum value of 24. The default value is 3 hours.
    #[serde(rename = "workflowScheduleIntervalInHours")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub workflow_schedule_interval_in_hours: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIdentityGovernanceLifecycleTaskCategory {
    #[serde(rename = "joiner")]
    #[default]
    Joiner,
    #[serde(rename = "leaver")]
    Leaver,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "mover")]
    Mover,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIdentityGovernanceLifecycleWorkflowCategory {
    #[serde(rename = "joiner")]
    #[default]
    Joiner,
    #[serde(rename = "leaver")]
    Leaver,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "mover")]
    Mover,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIdentityGovernanceLifecycleWorkflowProcessingStatus {
    #[serde(rename = "queued")]
    #[default]
    Queued,
    #[serde(rename = "inProgress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "completedWithErrors")]
    CompletedWithErrors,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceLifecycleWorkflowsContainer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.identityGovernance.lifecycleWorkflowsContainer".to_string()
    )]
    pub odata_type: String,
    ///The customTaskExtension instance.
    #[serde(rename = "customTaskExtensions")]
    pub custom_task_extensions: Option<
        Vec<MicrosoftGraphIdentityGovernanceCustomTaskExtension>,
    >,
    ///Deleted workflows in your lifecycle workflows instance.
    #[serde(rename = "deletedItems")]
    pub deleted_items: Option<MicrosoftGraphDeletedItemContainer>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The insight container holding workflow insight summaries for a tenant.
    pub insights: Option<MicrosoftGraphIdentityGovernanceInsights>,
    pub settings: Option<MicrosoftGraphIdentityGovernanceLifecycleManagementSettings>,
    ///The definition of tasks within the lifecycle workflows instance.
    #[serde(rename = "taskDefinitions")]
    pub task_definitions: Option<Vec<MicrosoftGraphIdentityGovernanceTaskDefinition>>,
    ///The workflow templates in the lifecycle workflow instance.
    #[serde(rename = "workflowTemplates")]
    pub workflow_templates: Option<
        Vec<MicrosoftGraphIdentityGovernanceWorkflowTemplate>,
    >,
    ///The workflows in the lifecycle workflows instance.
    pub workflows: Option<Vec<MicrosoftGraphIdentityGovernanceWorkflow>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceMembershipChangeTrigger {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.membershipChangeTrigger".to_string())]
    pub odata_type: String,
    #[serde(rename = "changeType")]
    pub change_type: Option<MicrosoftGraphIdentityGovernanceMembershipChangeType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIdentityGovernanceMembershipChangeType {
    #[serde(rename = "add")]
    #[default]
    Add,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceOnDemandExecutionOnly {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.onDemandExecutionOnly".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceParameter {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The name of the parameter.
    pub name: Option<String>,
    #[serde(rename = "valueType")]
    pub value_type: Option<MicrosoftGraphIdentityGovernanceValueType>,
    ///The values of the parameter.
    pub values: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceRuleBasedSubjectSet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.ruleBasedSubjectSet".to_string())]
    pub odata_type: String,
    ///The rule for the subject set. Lifecycle Workflows supports a rich set of user properties for configuring the rules using $filter query expressions. For more information, see supported user and query parameters.
    pub rule: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceRun {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.run".to_string())]
    pub odata_type: String,
    ///The date time that the run completed. Value is null if the workflow hasn't completed.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The number of tasks that failed in the run execution.
    #[serde(rename = "failedTasksCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_tasks_count: Option<f64>,
    ///The number of users that failed in the run execution.
    #[serde(rename = "failedUsersCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_users_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The datetime that the run was last updated.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "processingStatus")]
    pub processing_status: Option<
        MicrosoftGraphIdentityGovernanceLifecycleWorkflowProcessingStatus,
    >,
    ///The date time that the run is scheduled to be executed for a workflow.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "scheduledDateTime")]
    pub scheduled_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date time that the run execution started.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "startedDateTime")]
    pub started_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The number of successfully completed users in the run.
    #[serde(rename = "successfulUsersCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub successful_users_count: Option<f64>,
    ///The related taskProcessingResults.
    #[serde(rename = "taskProcessingResults")]
    pub task_processing_results: Option<
        Vec<MicrosoftGraphIdentityGovernanceTaskProcessingResult>,
    >,
    #[serde(rename = "totalTasksCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_tasks_count: Option<f64>,
    ///The total number of unprocessed tasks in the run execution.
    #[serde(rename = "totalUnprocessedTasksCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_unprocessed_tasks_count: Option<f64>,
    ///The total number of users in the workflow execution.
    #[serde(rename = "totalUsersCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_users_count: Option<f64>,
    ///The associated individual user execution.
    #[serde(rename = "userProcessingResults")]
    pub user_processing_results: Option<
        Vec<MicrosoftGraphIdentityGovernanceUserProcessingResult>,
    >,
    #[serde(rename = "workflowExecutionType")]
    pub workflow_execution_type: Option<
        MicrosoftGraphIdentityGovernanceWorkflowExecutionType,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceTask {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.task".to_string())]
    pub odata_type: String,
    ///Arguments included within the task.  For guidance to configure this property, see Configure the arguments for built-in Lifecycle Workflow tasks. Required.
    pub arguments: Option<Vec<MicrosoftGraphKeyValuePair>>,
    pub category: Option<MicrosoftGraphIdentityGovernanceLifecycleTaskCategory>,
    ///A Boolean value that specifies whether, if this task fails, the workflow stops, and subsequent tasks aren't run. Optional.
    #[serde(rename = "continueOnError")]
    pub continue_on_error: Option<bool>,
    ///A string that describes the purpose of the task for administrative use. Optional.
    pub description: Option<String>,
    ///A unique string that identifies the task. Required.Supports $filter(eq, ne) and orderBy.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///An integer that states in what order the task runs in a workflow.Supports $orderby.
    #[serde(rename = "executionSequence")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub execution_sequence: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A Boolean value that denotes whether the task is set to run or not. Optional.Supports $filter(eq, ne) and orderBy.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///A unique template identifier for the task. For more information about the tasks that Lifecycle Workflows currently supports and their unique identifiers, see Configure the arguments for built-in Lifecycle Workflow tasks. Required.Supports $filter(eq, ne).
    #[serde(rename = "taskDefinitionId")]
    pub task_definition_id: Option<String>,
    ///The result of processing the task.
    #[serde(rename = "taskProcessingResults")]
    pub task_processing_results: Option<
        Vec<MicrosoftGraphIdentityGovernanceTaskProcessingResult>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceTaskDefinition {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.taskDefinition".to_string())]
    pub odata_type: String,
    pub category: Option<MicrosoftGraphIdentityGovernanceLifecycleTaskCategory>,
    ///Defines if the workflow will continue if the task has an error.
    #[serde(rename = "continueOnError")]
    pub continue_on_error: Option<bool>,
    ///The description of the taskDefinition.
    pub description: Option<String>,
    ///The display name of the taskDefinition.Supports $filter(eq, ne) and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The parameters that must be supplied when creating a workflow task object.Supports $filter(any).
    pub parameters: Option<Vec<MicrosoftGraphIdentityGovernanceParameter>>,
    ///The version number of the taskDefinition. New records are pushed when we add support for new parameters.Supports $filter(ge, gt, le, lt, eq, ne) and $orderby.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceTaskProcessingResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.taskProcessingResult".to_string())]
    pub odata_type: String,
    ///The date time when taskProcessingResult execution ended. Value is null if task execution is still in progress.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date time when the taskProcessingResult was created.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Describes why the taskProcessingResult has failed.
    #[serde(rename = "failureReason")]
    pub failure_reason: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "processingStatus")]
    pub processing_status: Option<
        MicrosoftGraphIdentityGovernanceLifecycleWorkflowProcessingStatus,
    >,
    ///The date time when taskProcessingResult execution started. Value is null if task execution has not yet started.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "startedDateTime")]
    pub started_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub subject: Option<Box<MicrosoftGraphUser>>,
    pub task: Option<Box<MicrosoftGraphIdentityGovernanceTask>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceTaskReport {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.taskReport".to_string())]
    pub odata_type: String,
    ///The date time that the associated run completed. Value is null if the run has not completed.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The number of users in the run execution for which the associated task failed.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "failedUsersCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_users_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time that the task report was last updated.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "processingStatus")]
    pub processing_status: Option<
        MicrosoftGraphIdentityGovernanceLifecycleWorkflowProcessingStatus,
    >,
    ///The unique identifier of the associated run.
    #[serde(rename = "runId")]
    pub run_id: Option<String>,
    ///The date time that the associated run started. Value is null if the run has not started.
    #[serde(rename = "startedDateTime")]
    pub started_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The number of users in the run execution for which the associated task succeeded.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "successfulUsersCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub successful_users_count: Option<f64>,
    pub task: Option<Box<MicrosoftGraphIdentityGovernanceTask>>,
    #[serde(rename = "taskDefinition")]
    pub task_definition: Option<MicrosoftGraphIdentityGovernanceTaskDefinition>,
    ///The related lifecycle workflow taskProcessingResults.
    #[serde(rename = "taskProcessingResults")]
    pub task_processing_results: Option<
        Vec<MicrosoftGraphIdentityGovernanceTaskProcessingResult>,
    >,
    ///The total number of users in the run execution for which the associated task was scheduled to execute.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "totalUsersCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_users_count: Option<f64>,
    ///The number of users in the run execution for which the associated task is queued, in progress, or canceled.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "unprocessedUsersCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub unprocessed_users_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceTimeBasedAttributeTrigger {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.identityGovernance.timeBasedAttributeTrigger".to_string()
    )]
    pub odata_type: String,
    ///How many days before or after the time-based attribute specified the workflow should trigger. For example, if the attribute is employeeHireDate and offsetInDays is -1, then the workflow should trigger one day before the employee hire date. The value can range between -180 and 180 days.
    #[serde(rename = "offsetInDays")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub offset_in_days: Option<f64>,
    #[serde(rename = "timeBasedAttribute")]
    pub time_based_attribute: Option<
        MicrosoftGraphIdentityGovernanceWorkflowTriggerTimeBasedAttribute,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceTriggerAndScopeBasedConditions {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.identityGovernance.triggerAndScopeBasedConditions".to_string()
    )]
    pub odata_type: String,
    ///Defines who the workflow runs for.
    pub scope: Option<MicrosoftGraphSubjectSet>,
    ///What triggers a workflow to run.
    pub trigger: Option<MicrosoftGraphIdentityGovernanceWorkflowExecutionTrigger>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceTriggerAttribute {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The name of the trigger attribute that is changed to trigger an attributeChangeTrigger workflow.
    pub name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceUserProcessingResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.userProcessingResult".to_string())]
    pub odata_type: String,
    ///The date time that the workflow execution for a user completed. Value is null if the workflow hasn't completed.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The number of tasks that failed in the workflow execution.
    #[serde(rename = "failedTasksCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_tasks_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "processingStatus")]
    pub processing_status: Option<
        MicrosoftGraphIdentityGovernanceLifecycleWorkflowProcessingStatus,
    >,
    ///The date time that the workflow is scheduled to be executed for a user.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "scheduledDateTime")]
    pub scheduled_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date time that the workflow execution started. Value is null if the workflow execution has not started.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "startedDateTime")]
    pub started_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub subject: Option<Box<MicrosoftGraphUser>>,
    ///The associated individual task execution.
    #[serde(rename = "taskProcessingResults")]
    pub task_processing_results: Option<
        Vec<MicrosoftGraphIdentityGovernanceTaskProcessingResult>,
    >,
    ///The total number of tasks that in the workflow execution.
    #[serde(rename = "totalTasksCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_tasks_count: Option<f64>,
    ///The total number of unprocessed tasks for the workflow.
    #[serde(rename = "totalUnprocessedTasksCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_unprocessed_tasks_count: Option<f64>,
    #[serde(rename = "workflowExecutionType")]
    pub workflow_execution_type: Option<
        MicrosoftGraphIdentityGovernanceWorkflowExecutionType,
    >,
    ///The version of the workflow that was executed.
    #[serde(rename = "workflowVersion")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub workflow_version: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIdentityGovernanceValueType {
    #[serde(rename = "enum")]
    #[default]
    Enum,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "int")]
    Int,
    #[serde(rename = "bool")]
    Bool,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceWorkflow {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.workflow".to_string())]
    pub odata_type: String,
    pub category: Option<MicrosoftGraphIdentityGovernanceLifecycleWorkflowCategory>,
    ///The user who created the workflow.
    #[serde(rename = "createdBy")]
    pub created_by: Option<Box<MicrosoftGraphUser>>,
    ///When a workflow was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///When the workflow was deleted.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A string that describes the purpose of the workflow.
    pub description: Option<String>,
    ///A string to identify the workflow.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Defines when and for who the workflow will run.
    #[serde(rename = "executionConditions")]
    pub execution_conditions: Option<
        MicrosoftGraphIdentityGovernanceWorkflowExecutionConditions,
    >,
    ///The unique identifier of the Microsoft Entra identity that last modified the workflow object.
    #[serde(rename = "executionScope")]
    pub execution_scope: Option<
        Vec<MicrosoftGraphIdentityGovernanceUserProcessingResult>,
    >,
    ///Identifier used for individually addressing a specific workflow.Supports $filter(eq, ne) and $orderby.
    pub id: Option<String>,
    ///Whether the workflow is enabled or disabled. If this setting is true, the workflow can be run on demand or on schedule when isSchedulingEnabled is true.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///If true, the Lifecycle Workflow engine executes the workflow based on the schedule defined by tenant settings. Can't be true for a disabled workflow (where isEnabled is false).
    #[serde(rename = "isSchedulingEnabled")]
    pub is_scheduling_enabled: Option<bool>,
    ///The unique identifier of the Microsoft Entra identity that last modified the workflow.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<Box<MicrosoftGraphUser>>,
    ///When the workflow was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date time when the workflow is expected to run next based on the schedule interval, if there are any users matching the execution conditions. Supports $filter(lt,gt) and $orderby.
    #[serde(rename = "nextScheduleRunDateTime")]
    pub next_schedule_run_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Workflow runs.
    pub runs: Option<Vec<MicrosoftGraphIdentityGovernanceRun>>,
    ///Represents the aggregation of task execution data for tasks within a workflow object.
    #[serde(rename = "taskReports")]
    pub task_reports: Option<Vec<MicrosoftGraphIdentityGovernanceTaskReport>>,
    ///The tasks in the workflow.
    pub tasks: Option<Vec<MicrosoftGraphIdentityGovernanceTask>>,
    ///Per-user workflow execution results.
    #[serde(rename = "userProcessingResults")]
    pub user_processing_results: Option<
        Vec<MicrosoftGraphIdentityGovernanceUserProcessingResult>,
    >,
    ///The current version number of the workflow. Value is 1 when the workflow is first created.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    pub version: Option<f64>,
    ///The workflow versions that are available.
    pub versions: Option<Vec<MicrosoftGraphIdentityGovernanceWorkflowVersion>>,
}
discriminated_enum! {
    pub enum MicrosoftGraphIdentityGovernanceWorkflowBase { discriminator :
    "@odata.type", variants : [("#microsoft.graph.identityGovernance.workflow",
    MicrosoftGraphIdentityGovernanceWorkflow(Box <
    MicrosoftGraphIdentityGovernanceWorkflow >)),
    ("#microsoft.graph.identityGovernance.workflowVersion",
    MicrosoftGraphIdentityGovernanceWorkflowVersion(Box <
    MicrosoftGraphIdentityGovernanceWorkflowVersion >))], fallback : WorkflowBase(Box <
    MicrosoftGraphIdentityGovernanceWorkflowBaseBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceWorkflowBaseBase {
    pub category: Option<MicrosoftGraphIdentityGovernanceLifecycleWorkflowCategory>,
    ///The user who created the workflow.
    #[serde(rename = "createdBy")]
    pub created_by: Option<Box<MicrosoftGraphUser>>,
    ///When a workflow was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A string that describes the purpose of the workflow.
    pub description: Option<String>,
    ///A string to identify the workflow.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Defines when and for who the workflow will run.
    #[serde(rename = "executionConditions")]
    pub execution_conditions: Option<
        MicrosoftGraphIdentityGovernanceWorkflowExecutionConditions,
    >,
    ///Whether the workflow is enabled or disabled. If this setting is true, the workflow can be run on demand or on schedule when isSchedulingEnabled is true.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///If true, the Lifecycle Workflow engine executes the workflow based on the schedule defined by tenant settings. Can't be true for a disabled workflow (where isEnabled is false).
    #[serde(rename = "isSchedulingEnabled")]
    pub is_scheduling_enabled: Option<bool>,
    ///The unique identifier of the Microsoft Entra identity that last modified the workflow.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<Box<MicrosoftGraphUser>>,
    ///When the workflow was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The tasks in the workflow.
    pub tasks: Option<Vec<MicrosoftGraphIdentityGovernanceTask>>,
}
discriminated_enum! {
    pub enum MicrosoftGraphIdentityGovernanceWorkflowExecutionConditions { discriminator
    : "@odata.type", variants :
    [("#microsoft.graph.identityGovernance.onDemandExecutionOnly",
    MicrosoftGraphIdentityGovernanceOnDemandExecutionOnly(Box <
    MicrosoftGraphIdentityGovernanceOnDemandExecutionOnly >)),
    ("#microsoft.graph.identityGovernance.triggerAndScopeBasedConditions",
    MicrosoftGraphIdentityGovernanceTriggerAndScopeBasedConditions(Box <
    MicrosoftGraphIdentityGovernanceTriggerAndScopeBasedConditions >))], fallback :
    WorkflowExecutionConditions(Box <
    MicrosoftGraphIdentityGovernanceWorkflowExecutionConditionsBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceWorkflowExecutionConditionsBase {}
discriminated_enum! {
    pub enum MicrosoftGraphIdentityGovernanceWorkflowExecutionTrigger { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.identityGovernance.attributeChangeTrigger",
    MicrosoftGraphIdentityGovernanceAttributeChangeTrigger(Box <
    MicrosoftGraphIdentityGovernanceAttributeChangeTrigger >)),
    ("#microsoft.graph.identityGovernance.membershipChangeTrigger",
    MicrosoftGraphIdentityGovernanceMembershipChangeTrigger(Box <
    MicrosoftGraphIdentityGovernanceMembershipChangeTrigger >)),
    ("#microsoft.graph.identityGovernance.timeBasedAttributeTrigger",
    MicrosoftGraphIdentityGovernanceTimeBasedAttributeTrigger(Box <
    MicrosoftGraphIdentityGovernanceTimeBasedAttributeTrigger >))], fallback :
    WorkflowExecutionTrigger(Box <
    MicrosoftGraphIdentityGovernanceWorkflowExecutionTriggerBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceWorkflowExecutionTriggerBase {}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIdentityGovernanceWorkflowExecutionType {
    #[serde(rename = "scheduled")]
    #[default]
    Scheduled,
    #[serde(rename = "onDemand")]
    OnDemand,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceWorkflowTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.workflowTemplate".to_string())]
    pub odata_type: String,
    pub category: Option<MicrosoftGraphIdentityGovernanceLifecycleWorkflowCategory>,
    ///The description of the workflowTemplate.
    pub description: Option<String>,
    ///The display name of the workflowTemplate.Supports $filter(eq, ne) and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Conditions describing when to execute the workflow and the criteria to identify in-scope subject set.
    #[serde(rename = "executionConditions")]
    pub execution_conditions: Option<
        MicrosoftGraphIdentityGovernanceWorkflowExecutionConditions,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the configured tasks to execute and their execution sequence within a workflow. This relationship is expanded by default.
    pub tasks: Option<Vec<MicrosoftGraphIdentityGovernanceTask>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIdentityGovernanceWorkflowTriggerTimeBasedAttribute {
    #[serde(rename = "employeeHireDate")]
    #[default]
    EmployeeHireDate,
    #[serde(rename = "employeeLeaveDateTime")]
    EmployeeLeaveDateTime,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "createdDateTime")]
    CreatedDateTime,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityGovernanceWorkflowVersion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityGovernance.workflowVersion".to_string())]
    pub odata_type: String,
    pub category: Option<MicrosoftGraphIdentityGovernanceLifecycleWorkflowCategory>,
    ///The user who created the workflow.
    #[serde(rename = "createdBy")]
    pub created_by: Option<Box<MicrosoftGraphUser>>,
    ///When a workflow was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A string that describes the purpose of the workflow.
    pub description: Option<String>,
    ///A string to identify the workflow.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Defines when and for who the workflow will run.
    #[serde(rename = "executionConditions")]
    pub execution_conditions: Option<
        MicrosoftGraphIdentityGovernanceWorkflowExecutionConditions,
    >,
    ///Whether the workflow is enabled or disabled. If this setting is true, the workflow can be run on demand or on schedule when isSchedulingEnabled is true.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///If true, the Lifecycle Workflow engine executes the workflow based on the schedule defined by tenant settings. Can't be true for a disabled workflow (where isEnabled is false).
    #[serde(rename = "isSchedulingEnabled")]
    pub is_scheduling_enabled: Option<bool>,
    ///The unique identifier of the Microsoft Entra identity that last modified the workflow.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<Box<MicrosoftGraphUser>>,
    ///When the workflow was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The tasks in the workflow.
    pub tasks: Option<Vec<MicrosoftGraphIdentityGovernanceTask>>,
    ///The version of the workflow.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
    #[serde(rename = "versionNumber")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version_number: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityProvider {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityProvider".to_string())]
    pub odata_type: String,
    ///The client ID for the application. This is the client ID obtained when registering the application with the identity provider. Required. Not nullable.
    #[serde(rename = "clientId")]
    pub client_id: Option<String>,
    ///The client secret for the application. This is the client secret obtained when registering the application with the identity provider. This is write-only. A read operation will return .  Required. Not nullable.
    #[serde(rename = "clientSecret")]
    pub client_secret: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The display name of the identity provider. Not nullable.
    pub name: Option<String>,
    ///The identity provider type is a required field. For B2B scenario: Google, Facebook. For B2C scenario: Microsoft, Google, Amazon, LinkedIn, Facebook, GitHub, Twitter, Weibo, QQ, WeChat, OpenIDConnect. Not nullable.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityProviderBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityProviderBase".to_string())]
    pub odata_type: String,
    ///The display name of the identity provider.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentitySecurityDefaultsEnforcementPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identitySecurityDefaultsEnforcementPolicy".to_string())]
    pub odata_type: String,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If set to true, Microsoft Entra security defaults are enabled for the tenant.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
}
discriminated_enum! {
    pub enum MicrosoftGraphIdentitySet { discriminator : "@odata.type", variants :
    [("#microsoft.graph.aiInteractionMentionedIdentitySet",
    MicrosoftGraphAiInteractionMentionedIdentitySet(Box <
    MicrosoftGraphAiInteractionMentionedIdentitySet >)),
    ("#microsoft.graph.chatMessageFromIdentitySet",
    MicrosoftGraphChatMessageFromIdentitySet(Box <
    MicrosoftGraphChatMessageFromIdentitySet >)),
    ("#microsoft.graph.chatMessageMentionedIdentitySet",
    MicrosoftGraphChatMessageMentionedIdentitySet(Box <
    MicrosoftGraphChatMessageMentionedIdentitySet >)),
    ("#microsoft.graph.chatMessageReactionIdentitySet",
    MicrosoftGraphChatMessageReactionIdentitySet(Box <
    MicrosoftGraphChatMessageReactionIdentitySet >)),
    ("#microsoft.graph.communicationsIdentitySet",
    MicrosoftGraphCommunicationsIdentitySet(Box < MicrosoftGraphCommunicationsIdentitySet
    >)), ("#microsoft.graph.sharePointIdentitySet",
    MicrosoftGraphSharePointIdentitySet(Box < MicrosoftGraphSharePointIdentitySet >))],
    fallback : IdentitySet(Box < MicrosoftGraphIdentitySetBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentitySetBase {
    ///Optional. The application associated with this action.
    pub application: Option<MicrosoftGraphIdentity>,
    ///Optional. The device associated with this action.
    pub device: Option<MicrosoftGraphIdentity>,
    ///Optional. The user associated with this action.
    pub user: Option<MicrosoftGraphIdentity>,
}
discriminated_enum! {
    pub enum MicrosoftGraphIdentitySource { discriminator : "@odata.type", variants :
    [("#microsoft.graph.azureActiveDirectoryTenant",
    MicrosoftGraphAzureActiveDirectoryTenant(Box <
    MicrosoftGraphAzureActiveDirectoryTenant >)),
    ("#microsoft.graph.crossCloudAzureActiveDirectoryTenant",
    MicrosoftGraphCrossCloudAzureActiveDirectoryTenant(Box <
    MicrosoftGraphCrossCloudAzureActiveDirectoryTenant >)),
    ("#microsoft.graph.domainIdentitySource", MicrosoftGraphDomainIdentitySource(Box <
    MicrosoftGraphDomainIdentitySource >)), ("#microsoft.graph.externalDomainFederation",
    MicrosoftGraphExternalDomainFederation(Box < MicrosoftGraphExternalDomainFederation
    >)), ("#microsoft.graph.socialIdentitySource", MicrosoftGraphSocialIdentitySource(Box
    < MicrosoftGraphSocialIdentitySource >))], fallback : IdentitySource(Box <
    MicrosoftGraphIdentitySourceBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentitySourceBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityUserFlow {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityUserFlow".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "userFlowType")]
    pub user_flow_type: Option<MicrosoftGraphUserFlowType>,
    #[serde(rename = "userFlowTypeVersion")]
    pub user_flow_type_version: Option<
        MicrosoftGraphIdentityUserFlowUserFlowTypeVersion,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityUserFlowAttribute {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityUserFlowAttribute".to_string())]
    pub odata_type: String,
    #[serde(rename = "dataType")]
    pub data_type: Option<MicrosoftGraphIdentityUserFlowAttributeDataType>,
    ///The description of the user flow attribute that's shown to the user at the time of sign up.
    pub description: Option<String>,
    ///The display name of the user flow attribute.  Supports $filter (eq, ne).
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "userFlowAttributeType")]
    pub user_flow_attribute_type: Option<MicrosoftGraphIdentityUserFlowAttributeType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdentityUserFlowAttributeAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.identityUserFlowAttributeAssignment".to_string())]
    pub odata_type: String,
    ///The display name of the identityUserFlowAttribute within a user flow.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines whether the identityUserFlowAttribute is optional. true means the user doesn't have to provide a value. false means the user can't complete sign-up without providing a value.
    #[serde(rename = "isOptional")]
    pub is_optional: Option<bool>,
    ///Determines whether the identityUserFlowAttribute requires verification, and is only used for verifying the user's phone number or email address.
    #[serde(rename = "requiresVerification")]
    pub requires_verification: Option<bool>,
    ///The user attribute that you want to add to your user flow.
    #[serde(rename = "userAttribute")]
    pub user_attribute: Option<MicrosoftGraphIdentityUserFlowAttribute>,
    ///The input options for the user flow attribute. Only applicable when the userInputType is radioSingleSelect, dropdownSingleSelect, or checkboxMultiSelect.
    #[serde(rename = "userAttributeValues")]
    pub user_attribute_values: Option<Vec<MicrosoftGraphUserAttributeValuesItem>>,
    #[serde(rename = "userInputType")]
    pub user_input_type: Option<MicrosoftGraphIdentityUserFlowAttributeInputType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIdentityUserFlowAttributeDataType {
    #[serde(rename = "string")]
    #[default]
    String,
    #[serde(rename = "boolean")]
    Boolean,
    #[serde(rename = "int64")]
    Int64,
    #[serde(rename = "stringCollection")]
    StringCollection,
    #[serde(rename = "dateTime")]
    DateTime,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIdentityUserFlowAttributeInputType {
    #[serde(rename = "textBox")]
    #[default]
    TextBox,
    #[serde(rename = "dateTimeDropdown")]
    DateTimeDropdown,
    #[serde(rename = "radioSingleSelect")]
    RadioSingleSelect,
    #[serde(rename = "dropdownSingleSelect")]
    DropdownSingleSelect,
    #[serde(rename = "emailBox")]
    EmailBox,
    #[serde(rename = "checkboxMultiSelect")]
    CheckboxMultiSelect,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIdentityUserFlowAttributeType {
    #[serde(rename = "builtIn")]
    #[default]
    BuiltIn,
    #[serde(rename = "custom")]
    Custom,
    #[serde(rename = "required")]
    Required,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIdentityUserFlowUserFlowTypeVersion {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIdleSessionSignOut {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether the idle session sign-out policy is enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Number of seconds of inactivity after which a user is signed out.
    #[serde(rename = "signOutAfterInSeconds")]
    pub sign_out_after_in_seconds: Option<f64>,
    ///Number of seconds of inactivity after which a user is notified that they'll be signed out.
    #[serde(rename = "warnAfterInSeconds")]
    pub warn_after_in_seconds: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphImage {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Optional. Height of the image, in pixels. Read-only.
    pub height: Option<f64>,
    ///Optional. Width of the image, in pixels. Read-only.
    pub width: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphImageInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Optional; parameter used to indicate the server is able to render image dynamically in response to parameterization. For example – a high contrast image
    #[serde(rename = "addImageQuery")]
    pub add_image_query: Option<bool>,
    ///Optional; alt-text accessible content for the image
    #[serde(rename = "alternateText")]
    pub alternate_text: Option<String>,
    #[serde(rename = "alternativeText")]
    pub alternative_text: Option<String>,
    ///Optional; URI that points to an icon which represents the application used to generate the activity
    #[serde(rename = "iconUrl")]
    pub icon_url: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphImageTaggingChoice {
    #[serde(rename = "disabled")]
    #[default]
    Disabled,
    #[serde(rename = "basic")]
    Basic,
    #[serde(rename = "enhanced")]
    Enhanced,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphImplicitGrantSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies whether this web application can request an access token using the OAuth 2.0 implicit flow.
    #[serde(rename = "enableAccessTokenIssuance")]
    pub enable_access_token_issuance: Option<bool>,
    ///Specifies whether this web application can request an ID token using the OAuth 2.0 implicit flow.
    #[serde(rename = "enableIdTokenIssuance")]
    pub enable_id_token_issuance: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphImportance {
    #[serde(rename = "low")]
    #[default]
    Low,
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "high")]
    High,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphImportedWindowsAutopilotDeviceIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.importedWindowsAutopilotDeviceIdentity".to_string())]
    pub odata_type: String,
    ///UPN of the user the device will be assigned
    #[serde(rename = "assignedUserPrincipalName")]
    pub assigned_user_principal_name: Option<String>,
    ///Group Tag of the Windows autopilot device.
    #[serde(rename = "groupTag")]
    pub group_tag: Option<String>,
    ///Hardware Blob of the Windows autopilot device.
    #[serde(rename = "hardwareIdentifier")]
    pub hardware_identifier: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Import Id of the Windows autopilot device.
    #[serde(rename = "importId")]
    pub import_id: Option<String>,
    ///Product Key of the Windows autopilot device.
    #[serde(rename = "productKey")]
    pub product_key: Option<String>,
    ///Serial number of the Windows autopilot device.
    #[serde(rename = "serialNumber")]
    pub serial_number: Option<String>,
    ///Current state of the imported device.
    pub state: Option<MicrosoftGraphImportedWindowsAutopilotDeviceIdentityState>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphImportedWindowsAutopilotDeviceIdentityImportStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "partial")]
    Partial,
    #[serde(rename = "complete")]
    Complete,
    #[serde(rename = "error")]
    Error,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphImportedWindowsAutopilotDeviceIdentityState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Device error code reported by Device Directory Service(DDS).
    #[serde(rename = "deviceErrorCode")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_error_code: Option<f64>,
    ///Device error name reported by Device Directory Service(DDS).
    #[serde(rename = "deviceErrorName")]
    pub device_error_name: Option<String>,
    #[serde(rename = "deviceImportStatus")]
    pub device_import_status: Option<
        MicrosoftGraphImportedWindowsAutopilotDeviceIdentityImportStatus,
    >,
    ///Device Registration ID for successfully added device reported by Device Directory Service(DDS).
    #[serde(rename = "deviceRegistrationId")]
    pub device_registration_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphImportedWindowsAutopilotDeviceIdentityUpload {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.importedWindowsAutopilotDeviceIdentityUpload".to_string()
    )]
    pub odata_type: String,
    ///DateTime when the entity is created.
    #[serde(rename = "createdDateTimeUtc")]
    pub created_date_time_utc: Option<chrono::DateTime<chrono::Utc>>,
    ///Collection of all Autopilot devices as a part of this upload.
    #[serde(rename = "deviceIdentities")]
    pub device_identities: Option<
        Vec<MicrosoftGraphImportedWindowsAutopilotDeviceIdentity>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub status: Option<MicrosoftGraphImportedWindowsAutopilotDeviceIdentityUploadStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphImportedWindowsAutopilotDeviceIdentityUploadStatus {
    #[serde(rename = "noUpload")]
    #[default]
    NoUpload,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "complete")]
    Complete,
    #[serde(rename = "error")]
    Error,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInboundOutboundPolicyConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Defines whether external users coming inbound are allowed.
    #[serde(rename = "inboundAllowed")]
    pub inbound_allowed: Option<bool>,
    ///Defines whether internal users are allowed to go outbound.
    #[serde(rename = "outboundAllowed")]
    pub outbound_allowed: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIncludeAllAccountTargetContent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.includeAllAccountTargetContent".to_string())]
    pub odata_type: String,
    ///The type of account target content. Possible values are: unknown, includeAll, addressBook, unknownFutureValue.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphAccountTargetContentType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIncomingCallOptions {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.incomingCallOptions".to_string())]
    pub odata_type: String,
    ///Indicates whether to hide the app after the call is escalated.
    #[serde(rename = "hideBotAfterEscalation")]
    pub hide_bot_after_escalation: Option<bool>,
    ///Indicates whether content sharing notifications should be enabled for the call.
    #[serde(rename = "isContentSharingNotificationEnabled")]
    pub is_content_sharing_notification_enabled: Option<bool>,
    ///Indicates whether delta roster is enabled for the call.
    #[serde(rename = "isDeltaRosterEnabled")]
    pub is_delta_roster_enabled: Option<bool>,
    ///Indicates whether delta roster filtering by participant interactivity is enabled.
    #[serde(rename = "isInteractiveRosterEnabled")]
    pub is_interactive_roster_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIncomingContext {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The ID of the participant that is under observation. Read-only.
    #[serde(rename = "observedParticipantId")]
    pub observed_participant_id: Option<String>,
    ///The identity that the call is happening on behalf of.
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<MicrosoftGraphIdentitySet>,
    ///The ID of the participant that triggered the incoming call. Read-only.
    #[serde(rename = "sourceParticipantId")]
    pub source_participant_id: Option<String>,
    ///The identity that transferred the call.
    pub transferor: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIncompleteData {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The service does not have source data before the specified time.
    #[serde(rename = "missingDataBeforeDateTime")]
    pub missing_data_before_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Some data was not recorded due to excessive activity.
    #[serde(rename = "wasThrottled")]
    pub was_throttled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInferenceClassification {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.inferenceClassification".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.
    pub overrides: Option<Vec<MicrosoftGraphInferenceClassificationOverride>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInferenceClassificationOverride {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.inferenceClassificationOverride".to_string())]
    pub odata_type: String,
    ///Specifies how incoming messages from a specific sender should always be classified as. The possible values are: focused, other.
    #[serde(rename = "classifyAs")]
    pub classify_as: Option<MicrosoftGraphInferenceClassificationType>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The email address information of the sender for whom the override is created.
    #[serde(rename = "senderEmailAddress")]
    pub sender_email_address: Option<MicrosoftGraphEmailAddress>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphInferenceClassificationType {
    #[serde(rename = "focused")]
    #[default]
    Focused,
    #[serde(rename = "other")]
    Other,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInformationalUrl {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///CDN URL to the application's logo, Read-only.
    #[serde(rename = "logoUrl")]
    pub logo_url: Option<String>,
    ///Link to the application's marketing page. For example, https://www.contoso.com/app/marketing
    #[serde(rename = "marketingUrl")]
    pub marketing_url: Option<String>,
    ///Link to the application's privacy statement. For example, https://www.contoso.com/app/privacy
    #[serde(rename = "privacyStatementUrl")]
    pub privacy_statement_url: Option<String>,
    ///Link to the application's support page. For example, https://www.contoso.com/app/support
    #[serde(rename = "supportUrl")]
    pub support_url: Option<String>,
    ///Link to the application's terms of service statement. For example, https://www.contoso.com/app/termsofservice
    #[serde(rename = "termsOfServiceUrl")]
    pub terms_of_service_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInitiator {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.initiator".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
    ///Type of initiator. Possible values are: user, application, system, unknownFutureValue.
    #[serde(rename = "initiatorType")]
    pub initiator_type: Option<MicrosoftGraphInitiatorType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphInitiatorType {
    #[serde(rename = "user")]
    #[default]
    User,
    #[serde(rename = "application")]
    Application,
    #[serde(rename = "system")]
    System,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInsightIdentity {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The email address of the user who shared the item.
    pub address: Option<String>,
    ///The display name of the user who shared the item.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The ID of the user who shared the item.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInsightValueDouble {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.insightValueDouble".to_string())]
    pub odata_type: String,
    ///The double value of the user experience analytics insight.
    pub value: Option<MicrosoftGraphInsightValueDoubleValue>,
}
///The double value of the user experience analytics insight.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphInsightValueDoubleValue {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInsightValueInt {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.insightValueInt".to_string())]
    pub odata_type: String,
    ///The int value of the user experience analytics insight.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub value: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInsightsSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.insightsSettings".to_string())]
    pub odata_type: String,
    ///The ID of a Microsoft Entra group, of which the specified type of insights are disabled for its members. The default value is null. Optional.
    #[serde(rename = "disabledForGroup")]
    pub disabled_for_group: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///true if insights of the specified type are enabled for the organization; false if insights of the specified type are disabled for all users without exceptions. The default value is true. Optional.
    #[serde(rename = "isEnabledInOrganization")]
    pub is_enabled_in_organization: Option<bool>,
}
///Possible values for the install intent chosen by the admin.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphInstallIntent {
    #[serde(rename = "available")]
    #[default]
    Available,
    #[serde(rename = "required")]
    Required,
    #[serde(rename = "uninstall")]
    Uninstall,
    #[serde(rename = "availableWithoutEnrollment")]
    AvailableWithoutEnrollment,
}
///Possible values for install state.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphInstallState {
    #[serde(rename = "notApplicable")]
    #[default]
    NotApplicable,
    #[serde(rename = "installed")]
    Installed,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "notInstalled")]
    NotInstalled,
    #[serde(rename = "uninstallFailed")]
    UninstallFailed,
    #[serde(rename = "unknown")]
    Unknown,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIntegerRange {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The inclusive upper bound of the integer range.
    pub end: Option<f64>,
    ///The inclusive lower bound of the integer range.
    pub start: Option<f64>,
}
discriminated_enum! {
    pub enum MicrosoftGraphIntegratedApplicationMetadata { discriminator : "@odata.type",
    variants : [("#microsoft.graph.protectedApplicationMetadata",
    MicrosoftGraphProtectedApplicationMetadata(Box <
    MicrosoftGraphProtectedApplicationMetadata >))], fallback :
    IntegratedApplicationMetadata(Box < MicrosoftGraphIntegratedApplicationMetadataBase
    >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIntegratedApplicationMetadataBase {
    ///The name of the integrated application.
    pub name: Option<String>,
    ///The version number of the integrated application.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInternalDomainFederation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.internalDomainFederation".to_string())]
    pub odata_type: String,
    ///URL of the endpoint used by active clients when authenticating with federated domains set up for single sign-on in Microsoft Entra ID. Corresponds to the ActiveLogOnUri property of the Set-EntraDomainFederationSettings PowerShell cmdlet.
    #[serde(rename = "activeSignInUri")]
    pub active_sign_in_uri: Option<String>,
    ///The display name of the identity provider.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Determines whether Microsoft Entra ID accepts the MFA performed by the federated IdP when a federated user accesses an application that is governed by a conditional access policy that requires MFA. The possible values are: acceptIfMfaDoneByFederatedIdp, enforceMfaByFederatedIdp, rejectMfaByFederatedIdp, unknownFutureValue. For more information, see federatedIdpMfaBehavior values.
    #[serde(rename = "federatedIdpMfaBehavior")]
    pub federated_idp_mfa_behavior: Option<MicrosoftGraphFederatedIdpMfaBehavior>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If true, when SAML authentication requests are sent to the federated SAML IdP, Microsoft Entra ID will sign those requests using the OrgID signing key. If false (default), the SAML authentication requests sent to the federated IdP aren't signed.
    #[serde(rename = "isSignedAuthenticationRequestRequired")]
    pub is_signed_authentication_request_required: Option<bool>,
    ///Issuer URI of the federation server.
    #[serde(rename = "issuerUri")]
    pub issuer_uri: Option<String>,
    ///URI of the metadata exchange endpoint used for authentication from rich client applications.
    #[serde(rename = "metadataExchangeUri")]
    pub metadata_exchange_uri: Option<String>,
    ///Fallback token signing certificate that can also be used to sign tokens, for example when the primary signing certificate expires. Formatted as Base64 encoded strings of the public portion of the federated IdP's token signing certificate. Needs to be compatible with the X509Certificate2 class. Much like the signingCertificate, the nextSigningCertificate property is used if a rollover is required outside of the auto-rollover update, a new federation service is being set up, or if the new token signing certificate isn't present in the federation properties after the federation service certificate has been updated.
    #[serde(rename = "nextSigningCertificate")]
    pub next_signing_certificate: Option<String>,
    ///URI that web-based clients are directed to when signing in to Microsoft Entra services.
    #[serde(rename = "passiveSignInUri")]
    pub passive_sign_in_uri: Option<String>,
    #[serde(rename = "passwordResetUri")]
    pub password_reset_uri: Option<String>,
    ///Preferred authentication protocol. The possible values are: wsFed, saml, unknownFutureValue.
    #[serde(rename = "preferredAuthenticationProtocol")]
    pub preferred_authentication_protocol: Option<MicrosoftGraphAuthenticationProtocol>,
    ///Sets the preferred behavior for the sign-in prompt. The possible values are: translateToFreshPasswordAuthentication, nativeSupport, disabled, unknownFutureValue.
    #[serde(rename = "promptLoginBehavior")]
    pub prompt_login_behavior: Option<MicrosoftGraphPromptLoginBehavior>,
    ///URI that clients are redirected to when they sign out of Microsoft Entra services. Corresponds to the LogOffUri property of the Set-EntraDomainFederationSettings PowerShell cmdlet.
    #[serde(rename = "signOutUri")]
    pub sign_out_uri: Option<String>,
    ///Current certificate used to sign tokens passed to the Microsoft identity platform. The certificate is formatted as a Base64 encoded string of the public portion of the federated IdP's token signing certificate and must be compatible with the X509Certificate2 class.   This property is used in the following scenarios:  if a rollover is required outside of the autorollover update a new federation service is being set up  if the new token signing certificate isn't present in the federation properties after the federation service certificate has been updated.   Microsoft Entra ID updates certificates via an autorollover process in which it attempts to retrieve a new certificate from the federation service metadata, 30 days before expiry of the current certificate. If a new certificate isn't available, Microsoft Entra ID monitors the metadata daily and will update the federation settings for the domain when a new certificate is available.
    #[serde(rename = "signingCertificate")]
    pub signing_certificate: Option<String>,
    ///Provides status and timestamp of the last update of the signing certificate.
    #[serde(rename = "signingCertificateUpdateStatus")]
    pub signing_certificate_update_status: Option<
        MicrosoftGraphSigningCertificateUpdateStatus,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInternalSponsors {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.internalSponsors".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInternetExplorerMode {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.internetExplorerMode".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of site lists to support Internet Explorer mode.
    #[serde(rename = "siteLists")]
    pub site_lists: Option<Vec<MicrosoftGraphBrowserSiteList>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInternetMessageHeader {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents the key in a key-value pair.
    pub name: Option<String>,
    ///The value in a key-value pair.
    pub value: Option<String>,
}
///Possible values for internet site security level.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphInternetSiteSecurityLevel {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "mediumHigh")]
    MediumHigh,
    #[serde(rename = "high")]
    High,
}
///intuneBrand contains data which is used in customizing the appearance of the Company Portal applications as well as the end user web portal.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIntuneBrand {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Email address of the person/organization responsible for IT support.
    #[serde(rename = "contactITEmailAddress")]
    pub contact_itemail_address: Option<String>,
    ///Name of the person/organization responsible for IT support.
    #[serde(rename = "contactITName")]
    pub contact_itname: Option<String>,
    ///Text comments regarding the person/organization responsible for IT support.
    #[serde(rename = "contactITNotes")]
    pub contact_itnotes: Option<String>,
    ///Phone number of the person/organization responsible for IT support.
    #[serde(rename = "contactITPhoneNumber")]
    pub contact_itphone_number: Option<String>,
    ///Logo image displayed in Company Portal apps which have a dark background behind the logo.
    #[serde(rename = "darkBackgroundLogo")]
    pub dark_background_logo: Option<MicrosoftGraphMimeContent>,
    ///Company/organization name that is displayed to end users.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Logo image displayed in Company Portal apps which have a light background behind the logo.
    #[serde(rename = "lightBackgroundLogo")]
    pub light_background_logo: Option<MicrosoftGraphMimeContent>,
    ///Display name of the company/organization’s IT helpdesk site.
    #[serde(rename = "onlineSupportSiteName")]
    pub online_support_site_name: Option<String>,
    ///URL to the company/organization’s IT helpdesk site.
    #[serde(rename = "onlineSupportSiteUrl")]
    pub online_support_site_url: Option<String>,
    ///URL to the company/organization’s privacy policy.
    #[serde(rename = "privacyUrl")]
    pub privacy_url: Option<String>,
    ///Boolean that represents whether the administrator-supplied display name will be shown next to the logo image.
    #[serde(rename = "showDisplayNameNextToLogo")]
    pub show_display_name_next_to_logo: Option<bool>,
    ///Boolean that represents whether the administrator-supplied logo images are shown or not shown.
    #[serde(rename = "showLogo")]
    pub show_logo: Option<bool>,
    ///Boolean that represents whether the administrator-supplied display name will be shown next to the logo image.
    #[serde(rename = "showNameNextToLogo")]
    pub show_name_next_to_logo: Option<bool>,
    ///Primary theme color used in the Company Portal applications and web portal.
    #[serde(rename = "themeColor")]
    pub theme_color: Option<MicrosoftGraphRgbColor>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInvestigationSecurityState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub name: Option<String>,
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInvitation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.invitation".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The URL the user can use to redeem their invitation. Read-only.
    #[serde(rename = "inviteRedeemUrl")]
    pub invite_redeem_url: Option<String>,
    ///The URL the user should be redirected to after the invitation is redeemed. Required.
    #[serde(rename = "inviteRedirectUrl")]
    pub invite_redirect_url: Option<String>,
    ///The user created as part of the invitation creation. Read-only. The id property is required in the request body to reset a redemption status.
    #[serde(rename = "invitedUser")]
    pub invited_user: Option<Box<MicrosoftGraphUser>>,
    ///The display name of the user being invited.
    #[serde(rename = "invitedUserDisplayName")]
    pub invited_user_display_name: Option<String>,
    ///The email address of the user being invited. Required. The following special characters aren't permitted in the email address:Tilde (~)Exclamation point (!)Number sign (#)Dollar sign ($)Percent (%)Circumflex (^)Ampersand (&)Asterisk (*)Parentheses (( ))Plus sign (+)Equal sign (=)Brackets ([ ])Braces ({ })Backslash (/)Slash mark (/)Pipe (/|)Semicolon (;)Colon (:)Quotation marks (')Angle brackets (< >)Question mark (?)Comma (,)However, the following exceptions apply:A period (.) or a hyphen (-) is permitted anywhere in the user name, except at the beginning or end of the name.An underscore (_) is permitted anywhere in the user name, including at the beginning or end of the name.
    #[serde(rename = "invitedUserEmailAddress")]
    pub invited_user_email_address: Option<String>,
    ///Contains configuration for the message being sent to the invited user, including customizing message text, language, and cc recipient list.
    #[serde(rename = "invitedUserMessageInfo")]
    pub invited_user_message_info: Option<MicrosoftGraphInvitedUserMessageInfo>,
    ///The users or groups who are sponsors of the invited user. Sponsors are users and groups that are responsible for guest users' privileges in the tenant and for keeping the guest users' information and access up to date.
    #[serde(rename = "invitedUserSponsors")]
    pub invited_user_sponsors: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The userType of the user being invited. By default, this is Guest. You can invite as Member if you're a company administrator.
    #[serde(rename = "invitedUserType")]
    pub invited_user_type: Option<String>,
    ///Reset the user's redemption status and reinvite a user while retaining their user identifier, group memberships, and app assignments. This property allows you to enable a user to sign-in using a different email address from the one in the previous invitation. When true, the invitedUser/id relationship is required. For more information about using this property, see Reset redemption status for a guest user.
    #[serde(rename = "resetRedemption")]
    pub reset_redemption: Option<bool>,
    ///Indicates whether an email should be sent to the user being invited. The default is false.
    #[serde(rename = "sendInvitationMessage")]
    pub send_invitation_message: Option<bool>,
    ///The status of the invitation. Possible values are: PendingAcceptance, Completed, InProgress, and Error.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInvitationParticipantInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Optional. Whether to hide the participant from the roster.
    pub hidden: Option<bool>,
    pub identity: Option<MicrosoftGraphIdentitySet>,
    ///Optional. The ID of the target participant.
    #[serde(rename = "participantId")]
    pub participant_id: Option<String>,
    ///Optional. Whether to remove them from the main mixer.
    #[serde(rename = "removeFromDefaultAudioRoutingGroup")]
    pub remove_from_default_audio_routing_group: Option<bool>,
    ///Optional. The call which the target identity is currently a part of. For peer-to-peer case, the call will be dropped once the participant is added successfully.
    #[serde(rename = "replacesCallId")]
    pub replaces_call_id: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphInvitationRedemptionIdentityProviderConfiguration {
    discriminator : "@odata.type", variants :
    [("#microsoft.graph.defaultInvitationRedemptionIdentityProviderConfiguration",
    MicrosoftGraphDefaultInvitationRedemptionIdentityProviderConfiguration(Box <
    MicrosoftGraphDefaultInvitationRedemptionIdentityProviderConfiguration >))], fallback
    : InvitationRedemptionIdentityProviderConfiguration(Box <
    MicrosoftGraphInvitationRedemptionIdentityProviderConfigurationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInvitationRedemptionIdentityProviderConfigurationBase {
    ///The fallback identity provider to be used in case no primary identity provider can be used for guest invitation redemption. Possible values are: defaultConfiguredIdp, emailOneTimePasscode, or microsoftAccount.
    #[serde(rename = "fallbackIdentityProvider")]
    pub fallback_identity_provider: Option<MicrosoftGraphB2bIdentityProvidersType>,
    ///Collection of identity providers in priority order of preference to be used for guest invitation redemption. Possible values are: azureActiveDirectory, externalFederation, or socialIdentityProviders.
    #[serde(rename = "primaryIdentityProviderPrecedenceOrder")]
    pub primary_identity_provider_precedence_order: Option<
        Vec<MicrosoftGraphB2bIdentityProvidersType>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInviteParticipantsOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.inviteParticipantsOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The participants to invite.
    pub participants: Option<Vec<MicrosoftGraphInvitationParticipantInfo>>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphInvitedUserMessageInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Additional recipients the invitation message should be sent to. Currently only one additional recipient is supported.
    #[serde(rename = "ccRecipients")]
    pub cc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///Customized message body you want to send if you don't want the default message. Only plain text is allowed.
    #[serde(rename = "customizedMessageBody")]
    pub customized_message_body: Option<String>,
    ///The language you want to send the default message in. If the customizedMessageBody is specified, this property is ignored, and the message is sent using the customizedMessageBody. The language format should be in ISO 639. The default is en-US.
    #[serde(rename = "messageLanguage")]
    pub message_language: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosCertificateProfile {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosCertificateProfile".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosCompliancePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosCompliancePolicy".to_string())]
    pub odata_type: String,
    ///The collection of assignments for this compliance policy.
    pub assignments: Option<Vec<MicrosoftGraphDeviceCompliancePolicyAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Compliance Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device compliance devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceComplianceDeviceOverview>,
    ///List of DeviceComplianceDeviceStatus.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceComplianceDeviceStatus>>,
    ///Require that devices have enabled device threat protection .
    #[serde(rename = "deviceThreatProtectionEnabled")]
    pub device_threat_protection_enabled: Option<bool>,
    ///Device threat protection levels for the Device Threat Protection API.
    #[serde(rename = "deviceThreatProtectionRequiredSecurityLevel")]
    pub device_threat_protection_required_security_level: Option<
        MicrosoftGraphDeviceThreatProtectionLevel,
    >,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether or not to require a managed email profile.
    #[serde(rename = "managedEmailProfileRequired")]
    pub managed_email_profile_required: Option<bool>,
    ///Maximum IOS version.
    #[serde(rename = "osMaximumVersion")]
    pub os_maximum_version: Option<String>,
    ///Minimum IOS version.
    #[serde(rename = "osMinimumVersion")]
    pub os_minimum_version: Option<String>,
    ///Indicates whether or not to block simple passcodes.
    #[serde(rename = "passcodeBlockSimple")]
    pub passcode_block_simple: Option<bool>,
    ///Number of days before the passcode expires. Valid values 1 to 65535
    #[serde(rename = "passcodeExpirationDays")]
    pub passcode_expiration_days: Option<f64>,
    ///The number of character sets required in the password.
    #[serde(rename = "passcodeMinimumCharacterSetCount")]
    pub passcode_minimum_character_set_count: Option<f64>,
    ///Minimum length of passcode. Valid values 4 to 14
    #[serde(rename = "passcodeMinimumLength")]
    pub passcode_minimum_length: Option<f64>,
    ///Minutes of inactivity before a passcode is required.
    #[serde(rename = "passcodeMinutesOfInactivityBeforeLock")]
    pub passcode_minutes_of_inactivity_before_lock: Option<f64>,
    ///Number of previous passcodes to block. Valid values 1 to 24
    #[serde(rename = "passcodePreviousPasscodeBlockCount")]
    pub passcode_previous_passcode_block_count: Option<f64>,
    ///Indicates whether or not to require a passcode.
    #[serde(rename = "passcodeRequired")]
    pub passcode_required: Option<bool>,
    ///Possible values of required passwords.
    #[serde(rename = "passcodeRequiredType")]
    pub passcode_required_type: Option<MicrosoftGraphRequiredPasswordType>,
    ///The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.
    #[serde(rename = "scheduledActionsForRule")]
    pub scheduled_actions_for_rule: Option<
        Vec<MicrosoftGraphDeviceComplianceScheduledActionForRule>,
    >,
    ///Devices must not be jailbroken or rooted.
    #[serde(rename = "securityBlockJailbrokenDevices")]
    pub security_block_jailbroken_devices: Option<bool>,
    ///Device compliance users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceComplianceUserOverview>,
    ///List of DeviceComplianceUserStatus.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceComplianceUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosCustomConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosCustomConfiguration".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Payload. (UTF8 encoded byte array)
    pub payload: Option<String>,
    ///Payload file name (.mobileconfig
    #[serde(rename = "payloadFileName")]
    pub payload_file_name: Option<String>,
    ///Name that is displayed to the user.
    #[serde(rename = "payloadName")]
    pub payload_name: Option<String>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosDdmLobAppAssignmentSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosDdmLobAppAssignmentSettings".to_string())]
    pub odata_type: String,
    ///Domain names to associate with the app
    #[serde(rename = "associatedDomains")]
    pub associated_domains: Option<Vec<Option<String>>>,
    ///When true, the system allows direct downloads for the AssociatedDomains. When false, the system will not allow direct downloads for the AssociatedDomains. Default is false.
    #[serde(rename = "associatedDomainsDirectDownloadAllowed")]
    pub associated_domains_direct_download_allowed: Option<bool>,
    ///When true, indicates that the app should not be backed up to iCloud. When false, indicates that the app may be backed up to iCloud. Default is false.
    #[serde(rename = "preventManagedAppBackup")]
    pub prevent_managed_app_backup: Option<bool>,
    ///When true, the device locks its screen after every transaction that requires a customer’s card PIN. When false, the user can choose the behavior. Default value is false.
    #[serde(rename = "tapToPayScreenLockEnabled")]
    pub tap_to_pay_screen_lock_enabled: Option<bool>,
    ///The unique identifier of the relay to associate with the app.
    #[serde(rename = "vpnConfigurationId")]
    pub vpn_configuration_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosDeviceFeaturesConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosDeviceFeaturesConfiguration".to_string())]
    pub odata_type: String,
    ///Asset tag information for the device, displayed on the login window and lock screen.
    #[serde(rename = "assetTagTemplate")]
    pub asset_tag_template: Option<String>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///A list of app and folders to appear on the Home Screen Dock. This collection can contain a maximum of 500 elements.
    #[serde(rename = "homeScreenDockIcons")]
    pub home_screen_dock_icons: Option<Vec<MicrosoftGraphIosHomeScreenItem>>,
    ///A list of pages on the Home Screen. This collection can contain a maximum of 500 elements.
    #[serde(rename = "homeScreenPages")]
    pub home_screen_pages: Option<Vec<MicrosoftGraphIosHomeScreenPage>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A footnote displayed on the login window and lock screen. Available in iOS 9.3.1 and later.
    #[serde(rename = "lockScreenFootnote")]
    pub lock_screen_footnote: Option<String>,
    ///Notification settings for each bundle id. Applicable to devices in supervised mode only (iOS 9.3 and later). This collection can contain a maximum of 500 elements.
    #[serde(rename = "notificationSettings")]
    pub notification_settings: Option<Vec<MicrosoftGraphIosNotificationSettings>>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Contains properties of the possible iOS device types the mobile app can run on.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosDeviceType {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Whether the app should run on iPads.
    #[serde(rename = "iPad")]
    pub i_pad: Option<bool>,
    ///Whether the app should run on iPhones and iPods.
    #[serde(rename = "iPhoneAndIPod")]
    pub i_phone_and_ipod: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosGeneralDeviceConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosGeneralDeviceConfiguration".to_string())]
    pub odata_type: String,
    ///Indicates whether or not to allow account modification when the device is in supervised mode.
    #[serde(rename = "accountBlockModification")]
    pub account_block_modification: Option<bool>,
    ///Indicates whether or not to allow activation lock when the device is in the supervised mode.
    #[serde(rename = "activationLockAllowWhenSupervised")]
    pub activation_lock_allow_when_supervised: Option<bool>,
    ///Indicates whether or not to allow AirDrop when the device is in supervised mode.
    #[serde(rename = "airDropBlocked")]
    pub air_drop_blocked: Option<bool>,
    ///Indicates whether or not to cause AirDrop to be considered an unmanaged drop target (iOS 9.0 and later).
    #[serde(rename = "airDropForceUnmanagedDropTarget")]
    pub air_drop_force_unmanaged_drop_target: Option<bool>,
    ///Indicates whether or not to enforce all devices receiving AirPlay requests from this device to use a pairing password.
    #[serde(rename = "airPlayForcePairingPasswordForOutgoingRequests")]
    pub air_play_force_pairing_password_for_outgoing_requests: Option<bool>,
    ///Indicates whether or not to block the automatic downloading of apps purchased on other devices when the device is in supervised mode (iOS 9.0 and later).
    #[serde(rename = "appStoreBlockAutomaticDownloads")]
    pub app_store_block_automatic_downloads: Option<bool>,
    ///Indicates whether or not to block the user from making in app purchases.
    #[serde(rename = "appStoreBlockInAppPurchases")]
    pub app_store_block_in_app_purchases: Option<bool>,
    ///Indicates whether or not to block the App Store app, not restricting installation through Host apps. Applies to supervised mode only (iOS 9.0 and later).
    #[serde(rename = "appStoreBlockUIAppInstallation")]
    pub app_store_block_uiapp_installation: Option<bool>,
    ///Indicates whether or not to block the user from using the App Store. Requires a supervised device for iOS 13 and later.
    #[serde(rename = "appStoreBlocked")]
    pub app_store_blocked: Option<bool>,
    ///Indicates whether or not to require a password when using the app store.
    #[serde(rename = "appStoreRequirePassword")]
    pub app_store_require_password: Option<bool>,
    ///Indicates whether or not to block the user from using News when the device is in supervised mode (iOS 9.0 and later).
    #[serde(rename = "appleNewsBlocked")]
    pub apple_news_blocked: Option<bool>,
    ///Indicates whether or not to allow Apple Watch pairing when the device is in supervised mode (iOS 9.0 and later).
    #[serde(rename = "appleWatchBlockPairing")]
    pub apple_watch_block_pairing: Option<bool>,
    ///Indicates whether or not to force a paired Apple Watch to use Wrist Detection (iOS 8.2 and later).
    #[serde(rename = "appleWatchForceWristDetection")]
    pub apple_watch_force_wrist_detection: Option<bool>,
    ///Gets or sets the list of iOS apps allowed to autonomously enter Single App Mode. Supervised only. iOS 7.0 and later. This collection can contain a maximum of 500 elements.
    #[serde(rename = "appsSingleAppModeList")]
    pub apps_single_app_mode_list: Option<Vec<MicrosoftGraphAppListItem>>,
    ///List of apps in the visibility list (either visible/launchable apps list or hidden/unlaunchable apps list, controlled by AppsVisibilityListType) (iOS 9.3 and later). This collection can contain a maximum of 10000 elements.
    #[serde(rename = "appsVisibilityList")]
    pub apps_visibility_list: Option<Vec<MicrosoftGraphAppListItem>>,
    ///Possible values of the compliance app list.
    #[serde(rename = "appsVisibilityListType")]
    pub apps_visibility_list_type: Option<MicrosoftGraphAppListType>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///Indicates whether or not to allow modification of Bluetooth settings when the device is in supervised mode (iOS 10.0 and later).
    #[serde(rename = "bluetoothBlockModification")]
    pub bluetooth_block_modification: Option<bool>,
    ///Indicates whether or not to block the user from accessing the camera of the device. Requires a supervised device for iOS 13 and later.
    #[serde(rename = "cameraBlocked")]
    pub camera_blocked: Option<bool>,
    ///Indicates whether or not to block data roaming.
    #[serde(rename = "cellularBlockDataRoaming")]
    pub cellular_block_data_roaming: Option<bool>,
    ///Indicates whether or not to block global background fetch while roaming.
    #[serde(rename = "cellularBlockGlobalBackgroundFetchWhileRoaming")]
    pub cellular_block_global_background_fetch_while_roaming: Option<bool>,
    ///Indicates whether or not to allow changes to cellular app data usage settings when the device is in supervised mode.
    #[serde(rename = "cellularBlockPerAppDataModification")]
    pub cellular_block_per_app_data_modification: Option<bool>,
    ///Indicates whether or not to block Personal Hotspot.
    #[serde(rename = "cellularBlockPersonalHotspot")]
    pub cellular_block_personal_hotspot: Option<bool>,
    ///Indicates whether or not to block voice roaming.
    #[serde(rename = "cellularBlockVoiceRoaming")]
    pub cellular_block_voice_roaming: Option<bool>,
    ///Indicates whether or not to block untrusted TLS certificates.
    #[serde(rename = "certificatesBlockUntrustedTlsCertificates")]
    pub certificates_block_untrusted_tls_certificates: Option<bool>,
    ///Indicates whether or not to allow remote screen observation by Classroom app when the device is in supervised mode (iOS 9.3 and later).
    #[serde(rename = "classroomAppBlockRemoteScreenObservation")]
    pub classroom_app_block_remote_screen_observation: Option<bool>,
    ///Indicates whether or not to automatically give permission to the teacher of a managed course on the Classroom app to view a student's screen without prompting when the device is in supervised mode.
    #[serde(rename = "classroomAppForceUnpromptedScreenObservation")]
    pub classroom_app_force_unprompted_screen_observation: Option<bool>,
    ///Possible values of the compliance app list.
    #[serde(rename = "compliantAppListType")]
    pub compliant_app_list_type: Option<MicrosoftGraphAppListType>,
    ///List of apps in the compliance (either allow list or block list, controlled by CompliantAppListType). This collection can contain a maximum of 10000 elements.
    #[serde(rename = "compliantAppsList")]
    pub compliant_apps_list: Option<Vec<MicrosoftGraphAppListItem>>,
    ///Indicates whether or not to block the user from installing configuration profiles and certificates interactively when the device is in supervised mode.
    #[serde(rename = "configurationProfileBlockChanges")]
    pub configuration_profile_block_changes: Option<bool>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether or not to block definition lookup when the device is in supervised mode (iOS 8.1.3 and later ).
    #[serde(rename = "definitionLookupBlocked")]
    pub definition_lookup_blocked: Option<bool>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Indicates whether or not to allow the user to enables restrictions in the device settings when the device is in supervised mode.
    #[serde(rename = "deviceBlockEnableRestrictions")]
    pub device_block_enable_restrictions: Option<bool>,
    ///Indicates whether or not to allow the use of the 'Erase all content and settings' option on the device when the device is in supervised mode.
    #[serde(rename = "deviceBlockEraseContentAndSettings")]
    pub device_block_erase_content_and_settings: Option<bool>,
    ///Indicates whether or not to allow device name modification when the device is in supervised mode (iOS 9.0 and later).
    #[serde(rename = "deviceBlockNameModification")]
    pub device_block_name_modification: Option<bool>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Indicates whether or not to block diagnostic data submission.
    #[serde(rename = "diagnosticDataBlockSubmission")]
    pub diagnostic_data_block_submission: Option<bool>,
    ///Indicates whether or not to allow diagnostics submission settings modification when the device is in supervised mode (iOS 9.3.2 and later).
    #[serde(rename = "diagnosticDataBlockSubmissionModification")]
    pub diagnostic_data_block_submission_modification: Option<bool>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Indicates whether or not to block the user from viewing managed documents in unmanaged apps.
    #[serde(rename = "documentsBlockManagedDocumentsInUnmanagedApps")]
    pub documents_block_managed_documents_in_unmanaged_apps: Option<bool>,
    ///Indicates whether or not to block the user from viewing unmanaged documents in managed apps.
    #[serde(rename = "documentsBlockUnmanagedDocumentsInManagedApps")]
    pub documents_block_unmanaged_documents_in_managed_apps: Option<bool>,
    ///An email address lacking a suffix that matches any of these strings will be considered out-of-domain.
    #[serde(rename = "emailInDomainSuffixes")]
    pub email_in_domain_suffixes: Option<Vec<Option<String>>>,
    ///Indicates whether or not to block the user from trusting an enterprise app.
    #[serde(rename = "enterpriseAppBlockTrust")]
    pub enterprise_app_block_trust: Option<bool>,
    ///[Deprecated] Configuring this setting and setting the value to 'true' has no effect on the device.
    #[serde(rename = "enterpriseAppBlockTrustModification")]
    pub enterprise_app_block_trust_modification: Option<bool>,
    ///Indicates whether or not to block the user from using FaceTime. Requires a supervised device for iOS 13 and later.
    #[serde(rename = "faceTimeBlocked")]
    pub face_time_blocked: Option<bool>,
    ///Indicates whether or not to block changes to Find My Friends when the device is in supervised mode.
    #[serde(rename = "findMyFriendsBlocked")]
    pub find_my_friends_blocked: Option<bool>,
    ///Indicates whether or not to block the user from using Game Center when the device is in supervised mode.
    #[serde(rename = "gameCenterBlocked")]
    pub game_center_blocked: Option<bool>,
    ///Indicates whether or not to block the user from having friends in Game Center. Requires a supervised device for iOS 13 and later.
    #[serde(rename = "gamingBlockGameCenterFriends")]
    pub gaming_block_game_center_friends: Option<bool>,
    ///Indicates whether or not to block the user from using multiplayer gaming. Requires a supervised device for iOS 13 and later.
    #[serde(rename = "gamingBlockMultiplayer")]
    pub gaming_block_multiplayer: Option<bool>,
    ///indicates whether or not to allow host pairing to control the devices an iOS device can pair with when the iOS device is in supervised mode.
    #[serde(rename = "hostPairingBlocked")]
    pub host_pairing_blocked: Option<bool>,
    ///Indicates whether or not to block the user from downloading media from the iBookstore that has been tagged as erotica.
    #[serde(rename = "iBooksStoreBlockErotica")]
    pub i_books_store_block_erotica: Option<bool>,
    ///Indicates whether or not to block the user from using the iBooks Store when the device is in supervised mode.
    #[serde(rename = "iBooksStoreBlocked")]
    pub i_books_store_blocked: Option<bool>,
    ///Indicates whether or not to block the user from continuing work they started on iOS device to another iOS or macOS device.
    #[serde(rename = "iCloudBlockActivityContinuation")]
    pub i_cloud_block_activity_continuation: Option<bool>,
    ///Indicates whether or not to block iCloud backup. Requires a supervised device for iOS 13 and later.
    #[serde(rename = "iCloudBlockBackup")]
    pub i_cloud_block_backup: Option<bool>,
    ///Indicates whether or not to block iCloud document sync. Requires a supervised device for iOS 13 and later.
    #[serde(rename = "iCloudBlockDocumentSync")]
    pub i_cloud_block_document_sync: Option<bool>,
    ///Indicates whether or not to block Managed Apps Cloud Sync.
    #[serde(rename = "iCloudBlockManagedAppsSync")]
    pub i_cloud_block_managed_apps_sync: Option<bool>,
    ///Indicates whether or not to block iCloud Photo Library.
    #[serde(rename = "iCloudBlockPhotoLibrary")]
    pub i_cloud_block_photo_library: Option<bool>,
    ///Indicates whether or not to block iCloud Photo Stream Sync.
    #[serde(rename = "iCloudBlockPhotoStreamSync")]
    pub i_cloud_block_photo_stream_sync: Option<bool>,
    ///Indicates whether or not to block Shared Photo Stream.
    #[serde(rename = "iCloudBlockSharedPhotoStream")]
    pub i_cloud_block_shared_photo_stream: Option<bool>,
    ///Indicates whether or not to require backups to iCloud be encrypted.
    #[serde(rename = "iCloudRequireEncryptedBackup")]
    pub i_cloud_require_encrypted_backup: Option<bool>,
    ///Indicates whether or not to block the user from accessing explicit content in iTunes and the App Store. Requires a supervised device for iOS 13 and later.
    #[serde(rename = "iTunesBlockExplicitContent")]
    pub i_tunes_block_explicit_content: Option<bool>,
    ///Indicates whether or not to block Music service and revert Music app to classic mode when the device is in supervised mode (iOS 9.3 and later and macOS 10.12 and later).
    #[serde(rename = "iTunesBlockMusicService")]
    pub i_tunes_block_music_service: Option<bool>,
    ///Indicates whether or not to block the user from using iTunes Radio when the device is in supervised mode (iOS 9.3 and later).
    #[serde(rename = "iTunesBlockRadio")]
    pub i_tunes_block_radio: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether or not to block keyboard auto-correction when the device is in supervised mode (iOS 8.1.3 and later).
    #[serde(rename = "keyboardBlockAutoCorrect")]
    pub keyboard_block_auto_correct: Option<bool>,
    ///Indicates whether or not to block the user from using dictation input when the device is in supervised mode.
    #[serde(rename = "keyboardBlockDictation")]
    pub keyboard_block_dictation: Option<bool>,
    ///Indicates whether or not to block predictive keyboards when device is in supervised mode (iOS 8.1.3 and later).
    #[serde(rename = "keyboardBlockPredictive")]
    pub keyboard_block_predictive: Option<bool>,
    ///Indicates whether or not to block keyboard shortcuts when the device is in supervised mode (iOS 9.0 and later).
    #[serde(rename = "keyboardBlockShortcuts")]
    pub keyboard_block_shortcuts: Option<bool>,
    ///Indicates whether or not to block keyboard spell-checking when the device is in supervised mode (iOS 8.1.3 and later).
    #[serde(rename = "keyboardBlockSpellCheck")]
    pub keyboard_block_spell_check: Option<bool>,
    ///Indicates whether or not to allow assistive speak while in kiosk mode.
    #[serde(rename = "kioskModeAllowAssistiveSpeak")]
    pub kiosk_mode_allow_assistive_speak: Option<bool>,
    ///Indicates whether or not to allow access to the Assistive Touch Settings while in kiosk mode.
    #[serde(rename = "kioskModeAllowAssistiveTouchSettings")]
    pub kiosk_mode_allow_assistive_touch_settings: Option<bool>,
    ///Indicates whether or not to allow device auto lock while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockAutoLock instead.
    #[serde(rename = "kioskModeAllowAutoLock")]
    pub kiosk_mode_allow_auto_lock: Option<bool>,
    ///Indicates whether or not to allow access to the Color Inversion Settings while in kiosk mode.
    #[serde(rename = "kioskModeAllowColorInversionSettings")]
    pub kiosk_mode_allow_color_inversion_settings: Option<bool>,
    ///Indicates whether or not to allow use of the ringer switch while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockRingerSwitch instead.
    #[serde(rename = "kioskModeAllowRingerSwitch")]
    pub kiosk_mode_allow_ringer_switch: Option<bool>,
    ///Indicates whether or not to allow screen rotation while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockScreenRotation instead.
    #[serde(rename = "kioskModeAllowScreenRotation")]
    pub kiosk_mode_allow_screen_rotation: Option<bool>,
    ///Indicates whether or not to allow use of the sleep button while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockSleepButton instead.
    #[serde(rename = "kioskModeAllowSleepButton")]
    pub kiosk_mode_allow_sleep_button: Option<bool>,
    ///Indicates whether or not to allow use of the touchscreen while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockTouchscreen instead.
    #[serde(rename = "kioskModeAllowTouchscreen")]
    pub kiosk_mode_allow_touchscreen: Option<bool>,
    ///Indicates whether or not to allow access to the voice over settings while in kiosk mode.
    #[serde(rename = "kioskModeAllowVoiceOverSettings")]
    pub kiosk_mode_allow_voice_over_settings: Option<bool>,
    ///Indicates whether or not to allow use of the volume buttons while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockVolumeButtons instead.
    #[serde(rename = "kioskModeAllowVolumeButtons")]
    pub kiosk_mode_allow_volume_buttons: Option<bool>,
    ///Indicates whether or not to allow access to the zoom settings while in kiosk mode.
    #[serde(rename = "kioskModeAllowZoomSettings")]
    pub kiosk_mode_allow_zoom_settings: Option<bool>,
    ///URL in the app store to the app to use for kiosk mode. Use if KioskModeManagedAppId is not known.
    #[serde(rename = "kioskModeAppStoreUrl")]
    pub kiosk_mode_app_store_url: Option<String>,
    ///ID for built-in apps to use for kiosk mode. Used when KioskModeManagedAppId and KioskModeAppStoreUrl are not set.
    #[serde(rename = "kioskModeBuiltInAppId")]
    pub kiosk_mode_built_in_app_id: Option<String>,
    ///Managed app id of the app to use for kiosk mode. If KioskModeManagedAppId is specified then KioskModeAppStoreUrl will be ignored.
    #[serde(rename = "kioskModeManagedAppId")]
    pub kiosk_mode_managed_app_id: Option<String>,
    ///Indicates whether or not to require assistive touch while in kiosk mode.
    #[serde(rename = "kioskModeRequireAssistiveTouch")]
    pub kiosk_mode_require_assistive_touch: Option<bool>,
    ///Indicates whether or not to require color inversion while in kiosk mode.
    #[serde(rename = "kioskModeRequireColorInversion")]
    pub kiosk_mode_require_color_inversion: Option<bool>,
    ///Indicates whether or not to require mono audio while in kiosk mode.
    #[serde(rename = "kioskModeRequireMonoAudio")]
    pub kiosk_mode_require_mono_audio: Option<bool>,
    ///Indicates whether or not to require voice over while in kiosk mode.
    #[serde(rename = "kioskModeRequireVoiceOver")]
    pub kiosk_mode_require_voice_over: Option<bool>,
    ///Indicates whether or not to require zoom while in kiosk mode.
    #[serde(rename = "kioskModeRequireZoom")]
    pub kiosk_mode_require_zoom: Option<bool>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether or not to block the user from using control center on the lock screen.
    #[serde(rename = "lockScreenBlockControlCenter")]
    pub lock_screen_block_control_center: Option<bool>,
    ///Indicates whether or not to block the user from using the notification view on the lock screen.
    #[serde(rename = "lockScreenBlockNotificationView")]
    pub lock_screen_block_notification_view: Option<bool>,
    ///Indicates whether or not to block the user from using passbook when the device is locked.
    #[serde(rename = "lockScreenBlockPassbook")]
    pub lock_screen_block_passbook: Option<bool>,
    ///Indicates whether or not to block the user from using the Today View on the lock screen.
    #[serde(rename = "lockScreenBlockTodayView")]
    pub lock_screen_block_today_view: Option<bool>,
    ///Apps rating as in media content
    #[serde(rename = "mediaContentRatingApps")]
    pub media_content_rating_apps: Option<MicrosoftGraphRatingAppsType>,
    ///Media content rating settings for Australia
    #[serde(rename = "mediaContentRatingAustralia")]
    pub media_content_rating_australia: Option<
        MicrosoftGraphMediaContentRatingAustralia,
    >,
    ///Media content rating settings for Canada
    #[serde(rename = "mediaContentRatingCanada")]
    pub media_content_rating_canada: Option<MicrosoftGraphMediaContentRatingCanada>,
    ///Media content rating settings for France
    #[serde(rename = "mediaContentRatingFrance")]
    pub media_content_rating_france: Option<MicrosoftGraphMediaContentRatingFrance>,
    ///Media content rating settings for Germany
    #[serde(rename = "mediaContentRatingGermany")]
    pub media_content_rating_germany: Option<MicrosoftGraphMediaContentRatingGermany>,
    ///Media content rating settings for Ireland
    #[serde(rename = "mediaContentRatingIreland")]
    pub media_content_rating_ireland: Option<MicrosoftGraphMediaContentRatingIreland>,
    ///Media content rating settings for Japan
    #[serde(rename = "mediaContentRatingJapan")]
    pub media_content_rating_japan: Option<MicrosoftGraphMediaContentRatingJapan>,
    ///Media content rating settings for New Zealand
    #[serde(rename = "mediaContentRatingNewZealand")]
    pub media_content_rating_new_zealand: Option<
        MicrosoftGraphMediaContentRatingNewZealand,
    >,
    ///Media content rating settings for United Kingdom
    #[serde(rename = "mediaContentRatingUnitedKingdom")]
    pub media_content_rating_united_kingdom: Option<
        MicrosoftGraphMediaContentRatingUnitedKingdom,
    >,
    ///Media content rating settings for United States
    #[serde(rename = "mediaContentRatingUnitedStates")]
    pub media_content_rating_united_states: Option<
        MicrosoftGraphMediaContentRatingUnitedStates,
    >,
    ///Indicates whether or not to block the user from using the Messages app on the supervised device.
    #[serde(rename = "messagesBlocked")]
    pub messages_blocked: Option<bool>,
    ///List of managed apps and the network rules that applies to them. This collection can contain a maximum of 1000 elements.
    #[serde(rename = "networkUsageRules")]
    pub network_usage_rules: Option<Vec<MicrosoftGraphIosNetworkUsageRule>>,
    ///Indicates whether or not to allow notifications settings modification (iOS 9.3 and later).
    #[serde(rename = "notificationsBlockSettingsModification")]
    pub notifications_block_settings_modification: Option<bool>,
    ///Block modification of registered Touch ID fingerprints when in supervised mode.
    #[serde(rename = "passcodeBlockFingerprintModification")]
    pub passcode_block_fingerprint_modification: Option<bool>,
    ///Indicates whether or not to block fingerprint unlock.
    #[serde(rename = "passcodeBlockFingerprintUnlock")]
    pub passcode_block_fingerprint_unlock: Option<bool>,
    ///Indicates whether or not to allow passcode modification on the supervised device (iOS 9.0 and later).
    #[serde(rename = "passcodeBlockModification")]
    pub passcode_block_modification: Option<bool>,
    ///Indicates whether or not to block simple passcodes.
    #[serde(rename = "passcodeBlockSimple")]
    pub passcode_block_simple: Option<bool>,
    ///Number of days before the passcode expires. Valid values 1 to 65535
    #[serde(rename = "passcodeExpirationDays")]
    pub passcode_expiration_days: Option<f64>,
    ///Number of character sets a passcode must contain. Valid values 0 to 4
    #[serde(rename = "passcodeMinimumCharacterSetCount")]
    pub passcode_minimum_character_set_count: Option<f64>,
    ///Minimum length of passcode. Valid values 4 to 14
    #[serde(rename = "passcodeMinimumLength")]
    pub passcode_minimum_length: Option<f64>,
    ///Minutes of inactivity before a passcode is required.
    #[serde(rename = "passcodeMinutesOfInactivityBeforeLock")]
    pub passcode_minutes_of_inactivity_before_lock: Option<f64>,
    ///Minutes of inactivity before the screen times out.
    #[serde(rename = "passcodeMinutesOfInactivityBeforeScreenTimeout")]
    pub passcode_minutes_of_inactivity_before_screen_timeout: Option<f64>,
    ///Number of previous passcodes to block. Valid values 1 to 24
    #[serde(rename = "passcodePreviousPasscodeBlockCount")]
    pub passcode_previous_passcode_block_count: Option<f64>,
    ///Indicates whether or not to require a passcode.
    #[serde(rename = "passcodeRequired")]
    pub passcode_required: Option<bool>,
    ///Possible values of required passwords.
    #[serde(rename = "passcodeRequiredType")]
    pub passcode_required_type: Option<MicrosoftGraphRequiredPasswordType>,
    ///Number of sign in failures allowed before wiping the device. Valid values 2 to 11
    #[serde(rename = "passcodeSignInFailureCountBeforeWipe")]
    pub passcode_sign_in_failure_count_before_wipe: Option<f64>,
    ///Indicates whether or not to block the user from using podcasts on the supervised device (iOS 8.0 and later).
    #[serde(rename = "podcastsBlocked")]
    pub podcasts_blocked: Option<bool>,
    ///Indicates whether or not to block the user from using Auto fill in Safari. Requires a supervised device for iOS 13 and later.
    #[serde(rename = "safariBlockAutofill")]
    pub safari_block_autofill: Option<bool>,
    ///Indicates whether or not to block JavaScript in Safari.
    #[serde(rename = "safariBlockJavaScript")]
    pub safari_block_java_script: Option<bool>,
    ///Indicates whether or not to block popups in Safari.
    #[serde(rename = "safariBlockPopups")]
    pub safari_block_popups: Option<bool>,
    ///Indicates whether or not to block the user from using Safari. Requires a supervised device for iOS 13 and later.
    #[serde(rename = "safariBlocked")]
    pub safari_blocked: Option<bool>,
    ///Web Browser Cookie Settings.
    #[serde(rename = "safariCookieSettings")]
    pub safari_cookie_settings: Option<MicrosoftGraphWebBrowserCookieSettings>,
    ///URLs matching the patterns listed here will be considered managed.
    #[serde(rename = "safariManagedDomains")]
    pub safari_managed_domains: Option<Vec<Option<String>>>,
    ///Users can save passwords in Safari only from URLs matching the patterns listed here. Applies to devices in supervised mode (iOS 9.3 and later).
    #[serde(rename = "safariPasswordAutoFillDomains")]
    pub safari_password_auto_fill_domains: Option<Vec<Option<String>>>,
    ///Indicates whether or not to require fraud warning in Safari.
    #[serde(rename = "safariRequireFraudWarning")]
    pub safari_require_fraud_warning: Option<bool>,
    ///Indicates whether or not to block the user from taking Screenshots.
    #[serde(rename = "screenCaptureBlocked")]
    pub screen_capture_blocked: Option<bool>,
    ///Indicates whether or not to block Siri from querying user-generated content when used on a supervised device.
    #[serde(rename = "siriBlockUserGeneratedContent")]
    pub siri_block_user_generated_content: Option<bool>,
    ///Indicates whether or not to block the user from using Siri.
    #[serde(rename = "siriBlocked")]
    pub siri_blocked: Option<bool>,
    ///Indicates whether or not to block the user from using Siri when locked.
    #[serde(rename = "siriBlockedWhenLocked")]
    pub siri_blocked_when_locked: Option<bool>,
    ///Indicates whether or not to prevent Siri from dictating, or speaking profane language on supervised device.
    #[serde(rename = "siriRequireProfanityFilter")]
    pub siri_require_profanity_filter: Option<bool>,
    ///Indicates whether or not to block Spotlight search from returning internet results on supervised device.
    #[serde(rename = "spotlightBlockInternetResults")]
    pub spotlight_block_internet_results: Option<bool>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
    ///Indicates whether or not to block voice dialing.
    #[serde(rename = "voiceDialingBlocked")]
    pub voice_dialing_blocked: Option<bool>,
    ///Indicates whether or not to allow wallpaper modification on supervised device (iOS 9.0 and later) .
    #[serde(rename = "wallpaperBlockModification")]
    pub wallpaper_block_modification: Option<bool>,
    ///Indicates whether or not to force the device to use only Wi-Fi networks from configuration profiles when the device is in supervised mode. Available for devices running iOS and iPadOS versions 14.4 and earlier. Devices running 14.5+ should use the setting, 'WiFiConnectToAllowedNetworksOnlyForced.
    #[serde(rename = "wiFiConnectOnlyToConfiguredNetworks")]
    pub wi_fi_connect_only_to_configured_networks: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosHomeScreenApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosHomeScreenApp".to_string())]
    pub odata_type: String,
    ///BundleID of the app if isWebClip is false or the URL of a web clip if isWebClip is true.
    #[serde(rename = "bundleID")]
    pub bundle_id: Option<String>,
    ///Name of the app
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosHomeScreenFolder {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosHomeScreenFolder".to_string())]
    pub odata_type: String,
    ///Name of the app
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Pages of Home Screen Layout Icons which must be applications or web clips. This collection can contain a maximum of 500 elements.
    pub pages: Option<Vec<MicrosoftGraphIosHomeScreenFolderPage>>,
}
///A page for a folder containing apps and web clips on the Home Screen.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosHomeScreenFolderPage {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A list of apps and web clips to appear on a page within a folder. This collection can contain a maximum of 500 elements.
    pub apps: Option<Vec<MicrosoftGraphIosHomeScreenApp>>,
    ///Name of the folder page
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
///Represents an item on the iOS Home Screen
discriminated_enum! {
    pub enum MicrosoftGraphIosHomeScreenItem { discriminator : "@odata.type", variants :
    [("#microsoft.graph.iosHomeScreenApp", MicrosoftGraphIosHomeScreenApp(Box <
    MicrosoftGraphIosHomeScreenApp >)), ("#microsoft.graph.iosHomeScreenFolder",
    MicrosoftGraphIosHomeScreenFolder(Box < MicrosoftGraphIosHomeScreenFolder >))],
    fallback : IosHomeScreenItem(Box < MicrosoftGraphIosHomeScreenItemBase >), }
}
///Represents an item on the iOS Home Screen
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosHomeScreenItemBase {
    ///Name of the app
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
///A page containing apps, folders, and web clips on the Home Screen.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosHomeScreenPage {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Name of the page
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///A list of apps, folders, and web clips to appear on a page. This collection can contain a maximum of 500 elements.
    pub icons: Option<Vec<MicrosoftGraphIosHomeScreenItem>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosLobApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosLobApp".to_string())]
    pub odata_type: String,
    ///Contains properties of the possible iOS device types the mobile app can run on.
    #[serde(rename = "applicableDeviceType")]
    pub applicable_device_type: Option<MicrosoftGraphIosDeviceType>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The build number of iOS Line of Business (LoB) app.
    #[serde(rename = "buildNumber")]
    pub build_number: Option<String>,
    ///The Identity Name.
    #[serde(rename = "bundleId")]
    pub bundle_id: Option<String>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The expiration time.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The value for the minimum applicable operating system.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphIosMinimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
    ///The version number of iOS Line of Business (LoB) app.
    #[serde(rename = "versionNumber")]
    pub version_number: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosLobAppAssignmentSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosLobAppAssignmentSettings".to_string())]
    pub odata_type: String,
    ///When TRUE, indicates that the app can be uninstalled by the user. When FALSE, indicates that the app cannot be uninstalled by the user. By default, this property is set to null which internally is treated as TRUE.
    #[serde(rename = "isRemovable")]
    pub is_removable: Option<bool>,
    ///When TRUE, indicates that the app should be uninstalled when the device is removed from Intune. When FALSE, indicates that the app will not be uninstalled when the device is removed from Intune. By default, property is set to null which internally is treated as TRUE.
    #[serde(rename = "uninstallOnDeviceRemoval")]
    pub uninstall_on_device_removal: Option<bool>,
    ///This is the unique identifier (Id) of the VPN Configuration to apply to the app.
    #[serde(rename = "vpnConfigurationId")]
    pub vpn_configuration_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosLobAppProvisioningConfigurationAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.iosLobAppProvisioningConfigurationAssignment".to_string()
    )]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The target group assignment defined by the admin.
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosManagedAppProtection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosManagedAppProtection".to_string())]
    pub odata_type: String,
    ///Data storage locations where a user may store managed data.
    #[serde(rename = "allowedDataStorageLocations")]
    pub allowed_data_storage_locations: Option<
        Vec<MicrosoftGraphManagedAppDataStorageLocation>,
    >,
    ///Data can be transferred from/to these classes of apps
    #[serde(rename = "allowedInboundDataTransferSources")]
    pub allowed_inbound_data_transfer_sources: Option<
        MicrosoftGraphManagedAppDataTransferLevel,
    >,
    ///Represents the level to which the device's clipboard may be shared between apps
    #[serde(rename = "allowedOutboundClipboardSharingLevel")]
    pub allowed_outbound_clipboard_sharing_level: Option<
        MicrosoftGraphManagedAppClipboardSharingLevel,
    >,
    ///Data can be transferred from/to these classes of apps
    #[serde(rename = "allowedOutboundDataTransferDestinations")]
    pub allowed_outbound_data_transfer_destinations: Option<
        MicrosoftGraphManagedAppDataTransferLevel,
    >,
    ///Represents the level to which app data is encrypted for managed apps
    #[serde(rename = "appDataEncryptionType")]
    pub app_data_encryption_type: Option<MicrosoftGraphManagedAppDataEncryptionType>,
    ///List of apps to which the policy is deployed.
    pub apps: Option<Vec<MicrosoftGraphManagedMobileApp>>,
    ///Navigation property to list of inclusion and exclusion groups to which the policy is deployed.
    pub assignments: Option<Vec<MicrosoftGraphTargetedManagedAppPolicyAssignment>>,
    ///Indicates whether contacts can be synced to the user's device.
    #[serde(rename = "contactSyncBlocked")]
    pub contact_sync_blocked: Option<bool>,
    ///The date and time the policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A custom browser protocol to open weblink on iOS. When this property is configured, ManagedBrowserToOpenLinksRequired should be true.
    #[serde(rename = "customBrowserProtocol")]
    pub custom_browser_protocol: Option<String>,
    ///Indicates whether the backup of a managed app's data is blocked.
    #[serde(rename = "dataBackupBlocked")]
    pub data_backup_blocked: Option<bool>,
    ///Count of apps to which the current policy is deployed.
    #[serde(rename = "deployedAppCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub deployed_app_count: Option<f64>,
    ///Navigation property to deployment summary of the configuration.
    #[serde(rename = "deploymentSummary")]
    pub deployment_summary: Option<MicrosoftGraphManagedAppPolicyDeploymentSummary>,
    ///The policy's description.
    pub description: Option<String>,
    ///Indicates whether device compliance is required.
    #[serde(rename = "deviceComplianceRequired")]
    pub device_compliance_required: Option<bool>,
    ///Indicates whether use of the app pin is required if the device pin is set.
    #[serde(rename = "disableAppPinIfDevicePinIsSet")]
    pub disable_app_pin_if_device_pin_is_set: Option<bool>,
    ///Policy display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Indicates whether use of the FaceID is allowed in place of a pin if PinRequired is set to True.
    #[serde(rename = "faceIdBlocked")]
    pub face_id_blocked: Option<bool>,
    ///Indicates whether use of the fingerprint reader is allowed in place of a pin if PinRequired is set to True.
    #[serde(rename = "fingerprintBlocked")]
    pub fingerprint_blocked: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates if the policy is deployed to any inclusion groups or not.
    #[serde(rename = "isAssigned")]
    pub is_assigned: Option<bool>,
    ///Last time the policy was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Type of managed browser
    #[serde(rename = "managedBrowser")]
    pub managed_browser: Option<MicrosoftGraphManagedBrowserType>,
    ///Indicates whether internet links should be opened in the managed browser app, or any custom browser specified by CustomBrowserProtocol (for iOS) or CustomBrowserPackageId/CustomBrowserDisplayName (for Android)
    #[serde(rename = "managedBrowserToOpenLinksRequired")]
    pub managed_browser_to_open_links_required: Option<bool>,
    ///Maximum number of incorrect pin retry attempts before the managed app is either blocked or wiped.
    #[serde(rename = "maximumPinRetries")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub maximum_pin_retries: Option<f64>,
    ///Minimum pin length required for an app-level pin if PinRequired is set to True
    #[serde(rename = "minimumPinLength")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub minimum_pin_length: Option<f64>,
    ///Versions less than the specified version will block the managed app from accessing company data.
    #[serde(rename = "minimumRequiredAppVersion")]
    pub minimum_required_app_version: Option<String>,
    ///Versions less than the specified version will block the managed app from accessing company data.
    #[serde(rename = "minimumRequiredOsVersion")]
    pub minimum_required_os_version: Option<String>,
    ///Versions less than the specified version will block the managed app from accessing company data.
    #[serde(rename = "minimumRequiredSdkVersion")]
    pub minimum_required_sdk_version: Option<String>,
    ///Versions less than the specified version will result in warning message on the managed app.
    #[serde(rename = "minimumWarningAppVersion")]
    pub minimum_warning_app_version: Option<String>,
    ///Versions less than the specified version will result in warning message on the managed app from accessing company data.
    #[serde(rename = "minimumWarningOsVersion")]
    pub minimum_warning_os_version: Option<String>,
    ///Indicates whether organizational credentials are required for app use.
    #[serde(rename = "organizationalCredentialsRequired")]
    pub organizational_credentials_required: Option<bool>,
    ///TimePeriod before the all-level pin must be reset if PinRequired is set to True.
    #[serde(rename = "periodBeforePinReset")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_before_pin_reset: Option<String>,
    ///The period after which access is checked when the device is not connected to the internet.
    #[serde(rename = "periodOfflineBeforeAccessCheck")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_offline_before_access_check: Option<String>,
    ///The amount of time an app is allowed to remain disconnected from the internet before all managed data it is wiped.
    #[serde(rename = "periodOfflineBeforeWipeIsEnforced")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_offline_before_wipe_is_enforced: Option<String>,
    ///The period after which access is checked when the device is connected to the internet.
    #[serde(rename = "periodOnlineBeforeAccessCheck")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_online_before_access_check: Option<String>,
    ///Character set which is to be used for a user's app PIN
    #[serde(rename = "pinCharacterSet")]
    pub pin_character_set: Option<MicrosoftGraphManagedAppPinCharacterSet>,
    ///Indicates whether an app-level pin is required.
    #[serde(rename = "pinRequired")]
    pub pin_required: Option<bool>,
    ///Indicates whether printing is allowed from managed apps.
    #[serde(rename = "printBlocked")]
    pub print_blocked: Option<bool>,
    ///Indicates whether users may use the 'Save As' menu item to save a copy of protected files.
    #[serde(rename = "saveAsBlocked")]
    pub save_as_blocked: Option<bool>,
    ///Indicates whether simplePin is blocked.
    #[serde(rename = "simplePinBlocked")]
    pub simple_pin_blocked: Option<bool>,
    ///Version of the entity.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosManagedAppRegistration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosManagedAppRegistration".to_string())]
    pub odata_type: String,
    ///The app package Identifier
    #[serde(rename = "appIdentifier")]
    pub app_identifier: Option<MicrosoftGraphMobileAppIdentifier>,
    ///App version
    #[serde(rename = "applicationVersion")]
    pub application_version: Option<String>,
    ///Zero or more policys already applied on the registered app when it last synchronized with managment service.
    #[serde(rename = "appliedPolicies")]
    pub applied_policies: Option<Vec<MicrosoftGraphManagedAppPolicy>>,
    ///Date and time of creation
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Host device name
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    ///App management SDK generated tag, which helps relate apps hosted on the same device. Not guaranteed to relate apps in all conditions.
    #[serde(rename = "deviceTag")]
    pub device_tag: Option<String>,
    ///Host device type
    #[serde(rename = "deviceType")]
    pub device_type: Option<String>,
    ///Zero or more reasons an app registration is flagged. E.g. app running on rooted device
    #[serde(rename = "flaggedReasons")]
    pub flagged_reasons: Option<Vec<MicrosoftGraphManagedAppFlaggedReason>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Zero or more policies admin intended for the app as of now.
    #[serde(rename = "intendedPolicies")]
    pub intended_policies: Option<Vec<MicrosoftGraphManagedAppPolicy>>,
    ///Date and time of last the app synced with management service.
    #[serde(rename = "lastSyncDateTime")]
    pub last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///App management SDK version
    #[serde(rename = "managementSdkVersion")]
    pub management_sdk_version: Option<String>,
    ///Zero or more long running operations triggered on the app registration.
    pub operations: Option<Vec<MicrosoftGraphManagedAppOperation>>,
    ///Operating System version
    #[serde(rename = "platformVersion")]
    pub platform_version: Option<String>,
    ///The user Id to who this app registration belongs.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///Version of the entity.
    pub version: Option<String>,
}
///Contains properties of the minimum operating system required for an iOS mobile app.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosMinimumOperatingSystem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///When TRUE, only Version 10.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v10_0: Option<bool>,
    ///When TRUE, only Version 11.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v11_0: Option<bool>,
    ///When TRUE, only Version 12.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v12_0: Option<bool>,
    ///When TRUE, only Version 13.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v13_0: Option<bool>,
    ///When TRUE, only Version 14.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v14_0: Option<bool>,
    ///When TRUE, only Version 15.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v15_0: Option<bool>,
    ///When TRUE, only Version 8.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v8_0: Option<bool>,
    ///When TRUE, only Version 9.0 or later is supported. Default value is FALSE. Exactly one of the minimum operating system boolean values will be TRUE.
    pub v9_0: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosMobileAppConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosMobileAppConfiguration".to_string())]
    pub odata_type: String,
    ///The list of group assignemenets for app configration.
    pub assignments: Option<
        Vec<MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment>,
    >,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///App configuration device status summary.
    #[serde(rename = "deviceStatusSummary")]
    pub device_status_summary: Option<
        MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary,
    >,
    ///List of ManagedDeviceMobileAppConfigurationDeviceStatus.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<
        Vec<MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus>,
    >,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///mdm app configuration Base64 binary.
    #[serde(rename = "encodedSettingXml")]
    pub encoded_setting_xml: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///app configuration setting items.
    pub settings: Option<Vec<MicrosoftGraphAppConfigurationSettingItem>>,
    ///the associated app.
    #[serde(rename = "targetedMobileApps")]
    pub targeted_mobile_apps: Option<Vec<Option<String>>>,
    ///App configuration user status summary.
    #[serde(rename = "userStatusSummary")]
    pub user_status_summary: Option<
        MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary,
    >,
    ///List of ManagedDeviceMobileAppConfigurationUserStatus.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<
        Vec<MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus>,
    >,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosMobileAppIdentifier {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosMobileAppIdentifier".to_string())]
    pub odata_type: String,
    ///The identifier for an app, as specified in the app store.
    #[serde(rename = "bundleId")]
    pub bundle_id: Option<String>,
}
///Network Usage Rules allow enterprises to specify how managed apps use networks, such as cellular data networks.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosNetworkUsageRule {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If set to true, corresponding managed apps will not be allowed to use cellular data when roaming.
    #[serde(rename = "cellularDataBlockWhenRoaming")]
    pub cellular_data_block_when_roaming: Option<bool>,
    ///If set to true, corresponding managed apps will not be allowed to use cellular data at any time.
    #[serde(rename = "cellularDataBlocked")]
    pub cellular_data_blocked: Option<bool>,
    ///Information about the managed apps that this rule is going to apply to. This collection can contain a maximum of 500 elements.
    #[serde(rename = "managedApps")]
    pub managed_apps: Option<Vec<MicrosoftGraphAppListItem>>,
}
///Notification Settings Alert Type.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIosNotificationAlertType {
    #[serde(rename = "deviceDefault")]
    #[default]
    DeviceDefault,
    #[serde(rename = "banner")]
    Banner,
    #[serde(rename = "modal")]
    Modal,
    #[serde(rename = "none")]
    None,
}
///An item describing notification setting.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosNotificationSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Notification Settings Alert Type.
    #[serde(rename = "alertType")]
    pub alert_type: Option<MicrosoftGraphIosNotificationAlertType>,
    ///Application name to be associated with the bundleID.
    #[serde(rename = "appName")]
    pub app_name: Option<String>,
    ///Indicates whether badges are allowed for this app.
    #[serde(rename = "badgesEnabled")]
    pub badges_enabled: Option<bool>,
    ///Bundle id of app to which to apply these notification settings.
    #[serde(rename = "bundleID")]
    pub bundle_id: Option<String>,
    ///Indicates whether notifications are allowed for this app.
    pub enabled: Option<bool>,
    ///Publisher to be associated with the bundleID.
    pub publisher: Option<String>,
    ///Indicates whether notifications can be shown in notification center.
    #[serde(rename = "showInNotificationCenter")]
    pub show_in_notification_center: Option<bool>,
    ///Indicates whether notifications can be shown on the lock screen.
    #[serde(rename = "showOnLockScreen")]
    pub show_on_lock_screen: Option<bool>,
    ///Indicates whether sounds are allowed for this app.
    #[serde(rename = "soundsEnabled")]
    pub sounds_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosStoreApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosStoreApp".to_string())]
    pub odata_type: String,
    ///The Apple App Store URL
    #[serde(rename = "appStoreUrl")]
    pub app_store_url: Option<String>,
    ///Contains properties of the possible iOS device types the mobile app can run on.
    #[serde(rename = "applicableDeviceType")]
    pub applicable_device_type: Option<MicrosoftGraphIosDeviceType>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The Identity Name.
    #[serde(rename = "bundleId")]
    pub bundle_id: Option<String>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The value for the minimum applicable operating system.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphIosMinimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosStoreAppAssignmentSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosStoreAppAssignmentSettings".to_string())]
    pub odata_type: String,
    ///When TRUE, indicates that the app can be uninstalled by the user. When FALSE, indicates that the app cannot be uninstalled by the user. By default, this property is set to null which internally is treated as TRUE.
    #[serde(rename = "isRemovable")]
    pub is_removable: Option<bool>,
    ///When TRUE, indicates that the app should be uninstalled when the device is removed from Intune. When FALSE, indicates that the app will not be uninstalled when the device is removed from Intune. By default, property is set to null which internally is treated as TRUE.
    #[serde(rename = "uninstallOnDeviceRemoval")]
    pub uninstall_on_device_removal: Option<bool>,
    ///This is the unique identifier (Id) of the VPN Configuration to apply to the app.
    #[serde(rename = "vpnConfigurationId")]
    pub vpn_configuration_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosUpdateConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosUpdateConfiguration".to_string())]
    pub odata_type: String,
    ///Active Hours End (active hours mean the time window when updates install should not happen)
    #[serde(rename = "activeHoursEnd")]
    pub active_hours_end: Option<chrono::NaiveTime>,
    ///Active Hours Start (active hours mean the time window when updates install should not happen)
    #[serde(rename = "activeHoursStart")]
    pub active_hours_start: Option<chrono::NaiveTime>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Days in week for which active hours are configured. This collection can contain a maximum of 7 elements.
    #[serde(rename = "scheduledInstallDays")]
    pub scheduled_install_days: Option<Vec<MicrosoftGraphDayOfWeek>>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///UTC Time Offset indicated in minutes
    #[serde(rename = "utcTimeOffsetInMinutes")]
    pub utc_time_offset_in_minutes: Option<f64>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosUpdateDeviceStatus {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosUpdateDeviceStatus".to_string())]
    pub odata_type: String,
    ///The DateTime when device compliance grace period expires
    #[serde(rename = "complianceGracePeriodExpirationDateTime")]
    pub compliance_grace_period_expiration_date_time: Option<
        chrono::DateTime<chrono::Utc>,
    >,
    ///Device name of the DevicePolicyStatus.
    #[serde(rename = "deviceDisplayName")]
    pub device_display_name: Option<String>,
    ///The device id that is being reported.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///The device model that is being reported
    #[serde(rename = "deviceModel")]
    pub device_model: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "installStatus")]
    pub install_status: Option<MicrosoftGraphIosUpdatesInstallStatus>,
    ///Last modified date time of the policy report.
    #[serde(rename = "lastReportedDateTime")]
    pub last_reported_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The device version that is being reported.
    #[serde(rename = "osVersion")]
    pub os_version: Option<String>,
    pub status: Option<MicrosoftGraphComplianceStatus>,
    ///The User id that is being reported.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///The User Name that is being reported
    #[serde(rename = "userName")]
    pub user_name: Option<String>,
    ///UserPrincipalName.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphIosUpdatesInstallStatus {
    #[serde(rename = "deviceOsHigherThanDesiredOsVersion")]
    #[default]
    DeviceOsHigherThanDesiredOsVersion,
    #[serde(rename = "sharedDeviceUserLoggedInError")]
    SharedDeviceUserLoggedInError,
    #[serde(rename = "notSupportedOperation")]
    NotSupportedOperation,
    #[serde(rename = "installFailed")]
    InstallFailed,
    #[serde(rename = "installPhoneCallInProgress")]
    InstallPhoneCallInProgress,
    #[serde(rename = "installInsufficientPower")]
    InstallInsufficientPower,
    #[serde(rename = "installInsufficientSpace")]
    InstallInsufficientSpace,
    #[serde(rename = "installing")]
    Installing,
    #[serde(rename = "downloadInsufficientNetwork")]
    DownloadInsufficientNetwork,
    #[serde(rename = "downloadInsufficientPower")]
    DownloadInsufficientPower,
    #[serde(rename = "downloadInsufficientSpace")]
    DownloadInsufficientSpace,
    #[serde(rename = "downloadRequiresComputer")]
    DownloadRequiresComputer,
    #[serde(rename = "downloadFailed")]
    DownloadFailed,
    #[serde(rename = "downloading")]
    Downloading,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "available")]
    Available,
    #[serde(rename = "idle")]
    Idle,
    #[serde(rename = "unknown")]
    Unknown,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosVppApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosVppApp".to_string())]
    pub odata_type: String,
    ///The store URL.
    #[serde(rename = "appStoreUrl")]
    pub app_store_url: Option<String>,
    ///The applicable iOS Device Type.
    #[serde(rename = "applicableDeviceType")]
    pub applicable_device_type: Option<MicrosoftGraphIosDeviceType>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The Identity Name.
    #[serde(rename = "bundleId")]
    pub bundle_id: Option<String>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The supported License Type.
    #[serde(rename = "licensingType")]
    pub licensing_type: Option<MicrosoftGraphVppLicensingType>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The VPP application release date and time.
    #[serde(rename = "releaseDateTime")]
    pub release_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The total number of VPP licenses.
    #[serde(rename = "totalLicenseCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_license_count: Option<f64>,
    ///The number of VPP licenses in use.
    #[serde(rename = "usedLicenseCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub used_license_count: Option<f64>,
    ///Possible types of an Apple Volume Purchase Program token.
    #[serde(rename = "vppTokenAccountType")]
    pub vpp_token_account_type: Option<MicrosoftGraphVppTokenAccountType>,
    ///The Apple Id associated with the given Apple Volume Purchase Program Token.
    #[serde(rename = "vppTokenAppleId")]
    pub vpp_token_apple_id: Option<String>,
    ///The organization associated with the Apple Volume Purchase Program Token
    #[serde(rename = "vppTokenOrganizationName")]
    pub vpp_token_organization_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosVppAppAssignmentSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosVppAppAssignmentSettings".to_string())]
    pub odata_type: String,
    ///Whether or not to use device licensing.
    #[serde(rename = "useDeviceLicensing")]
    pub use_device_licensing: Option<bool>,
    ///The VPN Configuration Id to apply for this app.
    #[serde(rename = "vpnConfigurationId")]
    pub vpn_configuration_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosVppEbook {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosVppEBook".to_string())]
    pub odata_type: String,
    ///The Apple ID associated with Vpp token.
    #[serde(rename = "appleId")]
    pub apple_id: Option<String>,
    ///The list of assignments for this eBook.
    pub assignments: Option<Vec<MicrosoftGraphManagedEbookAssignment>>,
    ///The date and time when the eBook file was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description.
    pub description: Option<String>,
    ///The list of installation states for this eBook.
    #[serde(rename = "deviceStates")]
    pub device_states: Option<Vec<MicrosoftGraphDeviceInstallState>>,
    ///Name of the eBook.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Genres.
    pub genres: Option<Vec<Option<String>>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///Mobile App Install Summary.
    #[serde(rename = "installSummary")]
    pub install_summary: Option<MicrosoftGraphEBookInstallSummary>,
    ///Language.
    pub language: Option<String>,
    ///Book cover.
    #[serde(rename = "largeCover")]
    pub large_cover: Option<MicrosoftGraphMimeContent>,
    ///The date and time when the eBook was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The date and time when the eBook was published.
    #[serde(rename = "publishedDateTime")]
    pub published_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Publisher.
    pub publisher: Option<String>,
    ///Seller.
    pub seller: Option<String>,
    ///Total license count.
    #[serde(rename = "totalLicenseCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_license_count: Option<f64>,
    ///Used license count.
    #[serde(rename = "usedLicenseCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub used_license_count: Option<f64>,
    ///The list of installation states for this eBook.
    #[serde(rename = "userStateSummary")]
    pub user_state_summary: Option<Vec<MicrosoftGraphUserInstallStateSummary>>,
    ///The Vpp token's organization name.
    #[serde(rename = "vppOrganizationName")]
    pub vpp_organization_name: Option<String>,
    ///The Vpp token ID.
    #[serde(rename = "vppTokenId")]
    pub vpp_token_id: Option<uuid::Uuid>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosVppEbookAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosVppEBookAssignment".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Possible values for the install intent chosen by the admin.
    #[serde(rename = "installIntent")]
    pub install_intent: Option<MicrosoftGraphInstallIntent>,
    ///The assignment target for eBook.
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIosiPadOswebClip {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.iosiPadOSWebClip".to_string())]
    pub odata_type: String,
    ///Indicates iOS/iPadOS web clip app URL. Example: 'https://www.contoso.com'
    #[serde(rename = "appUrl")]
    pub app_url: Option<String>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///Whether or not to use managed browser. When TRUE, the app will be required to be opened in Microsoft Edge. When FALSE, the app will not be required to be opened in Microsoft Edge. By default, this property is set to FALSE.
    #[serde(rename = "useManagedBrowser")]
    pub use_managed_browser: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIpNamedLocation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.ipNamedLocation".to_string())]
    pub odata_type: String,
    ///The Timestamp type represents creation date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Human-readable name of the location.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///List of IP address ranges in IPv4 CIDR format (for example, 1.2.3.4/32) or any allowable IPv6 format from IETF RFC5969. Required.
    #[serde(rename = "ipRanges")]
    pub ip_ranges: Option<Vec<MicrosoftGraphIpRange>>,
    ///true if this location is explicitly trusted. Optional. Default value is false.
    #[serde(rename = "isTrusted")]
    pub is_trusted: Option<bool>,
    ///The Timestamp type represents last modified date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
discriminated_enum! {
    pub enum MicrosoftGraphIpRange { discriminator : "@odata.type", variants :
    [("#microsoft.graph.iPv4CidrRange", MicrosoftGraphIPv4CidrRange(Box <
    MicrosoftGraphIPv4CidrRange >)), ("#microsoft.graph.iPv4Range",
    MicrosoftGraphIPv4Range(Box < MicrosoftGraphIPv4Range >)),
    ("#microsoft.graph.iPv6CidrRange", MicrosoftGraphIPv6CidrRange(Box <
    MicrosoftGraphIPv6CidrRange >)), ("#microsoft.graph.iPv6Range",
    MicrosoftGraphIPv6Range(Box < MicrosoftGraphIPv6Range >))], fallback : IpRange(Box <
    MicrosoftGraphIpRangeBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphIpRangeBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphItemActionStat {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The number of times the action took place. Read-only.
    #[serde(rename = "actionCount")]
    pub action_count: Option<f64>,
    ///The number of distinct actors that performed the action. Read-only.
    #[serde(rename = "actorCount")]
    pub actor_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphItemActivity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.itemActivity".to_string())]
    pub odata_type: String,
    ///An item was accessed.
    pub access: Option<MicrosoftGraphAccessAction>,
    ///Details about when the activity took place. Read-only.
    #[serde(rename = "activityDateTime")]
    pub activity_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Identity of who performed the action. Read-only.
    pub actor: Option<MicrosoftGraphIdentitySet>,
    ///Exposes the driveItem that was the target of this activity.
    #[serde(rename = "driveItem")]
    pub drive_item: Option<Box<MicrosoftGraphDriveItem>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphItemActivityStat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.itemActivityStat".to_string())]
    pub odata_type: String,
    ///Statistics about the access actions in this interval. Read-only.
    pub access: Option<MicrosoftGraphItemActionStat>,
    ///Exposes the itemActivities represented in this itemActivityStat resource.
    pub activities: Option<Vec<MicrosoftGraphItemActivity>>,
    ///Statistics about the create actions in this interval. Read-only.
    pub create: Option<MicrosoftGraphItemActionStat>,
    ///Statistics about the delete actions in this interval. Read-only.
    pub delete: Option<MicrosoftGraphItemActionStat>,
    ///Statistics about the edit actions in this interval. Read-only.
    pub edit: Option<MicrosoftGraphItemActionStat>,
    ///When the interval ends. Read-only.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates that the statistics in this interval are based on incomplete data. Read-only.
    #[serde(rename = "incompleteData")]
    pub incomplete_data: Option<MicrosoftGraphIncompleteData>,
    ///Indicates whether the item is 'trending.' Read-only.
    #[serde(rename = "isTrending")]
    pub is_trending: Option<bool>,
    ///Statistics about the move actions in this interval. Read-only.
    #[serde(rename = "move")]
    pub r#move: Option<MicrosoftGraphItemActionStat>,
    ///When the interval starts. Read-only.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphItemAnalytics {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.itemAnalytics".to_string())]
    pub odata_type: String,
    #[serde(rename = "allTime")]
    pub all_time: Option<Box<MicrosoftGraphItemActivityStat>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "itemActivityStats")]
    pub item_activity_stats: Option<Vec<MicrosoftGraphItemActivityStat>>,
    #[serde(rename = "lastSevenDays")]
    pub last_seven_days: Option<Box<MicrosoftGraphItemActivityStat>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphItemAttachment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.itemAttachment".to_string())]
    pub odata_type: String,
    ///The MIME type.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///true if the attachment is an inline attachment; otherwise, false.
    #[serde(rename = "isInline")]
    pub is_inline: Option<bool>,
    ///The attached message or event. Navigation property.
    pub item: Option<MicrosoftGraphOutlookItem>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The attachment's file name.
    pub name: Option<String>,
    ///The length of the attachment in bytes.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphItemBody {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The content of the item.
    pub content: Option<String>,
    ///The type of the content. Possible values are text and html.
    #[serde(rename = "contentType")]
    pub content_type: Option<MicrosoftGraphBodyType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphItemInsights {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.itemInsights".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Calculated relationship that identifies documents shared with or by the user. This includes URLs, file attachments, and reference attachments to OneDrive for work or school and SharePoint files found in Outlook messages and meetings. This also includes URLs and reference attachments to Teams conversations. Ordered by recency of share.
    pub shared: Option<Vec<MicrosoftGraphSharedInsight>>,
    ///Calculated relationship that identifies documents trending around a user. Trending documents are calculated based on activity of the user's closest network of people and include files stored in OneDrive for work or school and SharePoint. Trending insights help the user to discover potentially useful content that the user has access to, but has never viewed before.
    pub trending: Option<Vec<MicrosoftGraphTrending>>,
    ///Calculated relationship that identifies the latest documents viewed or modified by a user, including OneDrive for work or school and SharePoint documents, ranked by recency of use.
    pub used: Option<Vec<MicrosoftGraphUsedInsight>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphItemReference {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Unique identifier of the drive instance that contains the driveItem. Only returned if the item is located in a drive. Read-only.
    #[serde(rename = "driveId")]
    pub drive_id: Option<String>,
    ///Identifies the type of drive. Only returned if the item is located in a drive. See drive resource for values.
    #[serde(rename = "driveType")]
    pub drive_type: Option<String>,
    ///Unique identifier of the driveItem in the drive or a listItem in a list. Read-only.
    pub id: Option<String>,
    ///The name of the item being referenced. Read-only.
    pub name: Option<String>,
    ///Percent-encoded path that can be used to navigate to the item. Read-only.
    pub path: Option<String>,
    ///A unique identifier for a shared resource that can be accessed via the Shares API.
    #[serde(rename = "shareId")]
    pub share_id: Option<String>,
    ///Returns identifiers useful for SharePoint REST compatibility. Read-only.
    #[serde(rename = "sharepointIds")]
    pub sharepoint_ids: Option<MicrosoftGraphSharepointIds>,
    ///For OneDrive for Business and SharePoint, this property represents the ID of the site that contains the parent document library of the driveItem resource or the parent list of the listItem resource. The value is the same as the id property of that site resource. It is an opaque string that consists of three identifiers of the site. For OneDrive, this property is not populated.
    #[serde(rename = "siteId")]
    pub site_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphItemRetentionLabel {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.itemRetentionLabel".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the label is applied explicitly on the item. True indicates that the label is applied explicitly; otherwise, the label is inherited from its parent. Read-only.
    #[serde(rename = "isLabelAppliedExplicitly")]
    pub is_label_applied_explicitly: Option<bool>,
    ///Identity of the user who applied the label. Read-only.
    #[serde(rename = "labelAppliedBy")]
    pub label_applied_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the label was applied on the item. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "labelAppliedDateTime")]
    pub label_applied_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The retention label on the document. Read-write.
    pub name: Option<String>,
    ///The retention settings enforced on the item. Read-write.
    #[serde(rename = "retentionSettings")]
    pub retention_settings: Option<MicrosoftGraphRetentionLabelSettings>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphJoinMeetingIdMeetingInfo {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.joinMeetingIdMeetingInfo".to_string())]
    pub odata_type: String,
    ///The ID used to join the meeting.
    #[serde(rename = "joinMeetingId")]
    pub join_meeting_id: Option<String>,
    ///The passcode used to join the meeting. Optional.
    pub passcode: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphJoinMeetingIdSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether a passcode is required to join a meeting when using joinMeetingId. Optional.
    #[serde(rename = "isPasscodeRequired")]
    pub is_passcode_required: Option<bool>,
    ///The meeting ID to be used to join a meeting. Optional. Read-only.
    #[serde(rename = "joinMeetingId")]
    pub join_meeting_id: Option<String>,
    ///The passcode to join a meeting.  Optional. Read-only.
    pub passcode: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphKeyCredential {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A 40-character binary type that can be used to identify the credential. Optional. When not provided in the payload, defaults to the thumbprint of the certificate.
    #[serde(rename = "customKeyIdentifier")]
    pub custom_key_identifier: Option<String>,
    ///The friendly name for the key, with a maximum length of 90 characters. Longer values are accepted but shortened. Optional.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The date and time at which the credential expires. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The certificate's raw data in byte array converted to Base64 string. Returned only on $select for a single object, that is, GET applications/{applicationId}?$select=keyCredentials or GET servicePrincipals/{servicePrincipalId}?$select=keyCredentials; otherwise, it's always null.  From a .cer certificate, you can read the key using the Convert.ToBase64String() method. For more information, see Get the certificate key.
    pub key: Option<String>,
    ///The unique identifier (GUID) for the key.
    #[serde(rename = "keyId")]
    pub key_id: Option<uuid::Uuid>,
    ///The date and time at which the credential becomes valid.The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The type of key credential; for example, Symmetric, AsymmetricX509Cert.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
    ///A string that describes the purpose for which the key can be used; for example, Verify.
    pub usage: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphKeyCredentialConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///String value that indicates the maximum lifetime for key expiration, defined as an ISO 8601 duration. For example, P4DT12H30M5S represents four days, 12 hours, 30 minutes, and five seconds. This property is required when restrictionType is set to keyLifetime.
    #[serde(rename = "maxLifetime")]
    pub max_lifetime: Option<String>,
    ///Specifies the date from which the policy restriction applies to newly created applications. For existing applications, the enforcement date can be retroactively applied.
    #[serde(rename = "restrictForAppsCreatedAfterDateTime")]
    pub restrict_for_apps_created_after_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The type of restriction being applied. Possible values are asymmetricKeyLifetime, and unknownFutureValue. Each value of restrictionType can be used only once per policy.
    #[serde(rename = "restrictionType")]
    pub restriction_type: Option<MicrosoftGraphAppKeyCredentialRestrictionType>,
    pub state: Option<MicrosoftGraphAppManagementRestrictionState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphKeyValue {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Key for the key-value pair.
    pub key: Option<String>,
    ///Value for the key-value pair.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphKeyValuePair {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Name for this key-value pair
    pub name: Option<String>,
    ///Value for this key-value pair
    pub value: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphLabelActionSource {
    #[serde(rename = "manual")]
    #[default]
    Manual,
    #[serde(rename = "automatic")]
    Automatic,
    #[serde(rename = "recommended")]
    Recommended,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLabelContentRight {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.labelContentRight".to_string())]
    pub odata_type: String,
    ///The content identifier.
    pub cid: Option<String>,
    ///The content format.
    pub format: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub label: Option<Box<MicrosoftGraphSensitivityLabel>>,
    pub rights: Option<MicrosoftGraphUsageRights>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLandingPage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.landingPage".to_string())]
    pub odata_type: String,
    ///Identity of the user who created the landing page.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the landing page was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description of the landing page as defined by the user.
    pub description: Option<String>,
    ///The detail information for a landing page associated with a simulation during its creation.
    pub details: Option<Vec<MicrosoftGraphLandingPageDetail>>,
    ///The display name of the landing page.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Email identity of the user who last modified the landing page.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the landing page was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Content locale.
    pub locale: Option<String>,
    ///The source of the content. Possible values are: unknown, global, tenant, unknownFutureValue.
    pub source: Option<MicrosoftGraphSimulationContentSource>,
    ///The status of the simulation. Possible values are: unknown, draft, ready, archive, delete, unknownFutureValue.
    pub status: Option<MicrosoftGraphSimulationContentStatus>,
    ///Supported locales.
    #[serde(rename = "supportedLocales")]
    pub supported_locales: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLandingPageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.landingPageDetail".to_string())]
    pub odata_type: String,
    ///Landing page detail content.
    pub content: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether this language detail is default for the landing page.
    #[serde(rename = "isDefaultLangauge")]
    pub is_default_langauge: Option<bool>,
    ///The content language for the landing page.
    pub language: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphLayoutTemplateType {
    #[serde(rename = "default")]
    #[default]
    Default,
    #[serde(rename = "verticalSplit")]
    VerticalSplit,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLearningAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.learningAssignment".to_string())]
    pub odata_type: String,
    ///Assigned date for the course activity. Optional.
    #[serde(rename = "assignedDateTime")]
    pub assigned_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user ID of the assigner. Optional.
    #[serde(rename = "assignerUserId")]
    pub assigner_user_id: Option<String>,
    #[serde(rename = "assignmentType")]
    pub assignment_type: Option<MicrosoftGraphAssignmentType>,
    ///Date and time when the assignment was completed. Optional.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The percentage completion value of the course activity. Optional.
    #[serde(rename = "completionPercentage")]
    pub completion_percentage: Option<f64>,
    ///Due date for the course activity. Optional.
    #[serde(rename = "dueDateTime")]
    pub due_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    #[serde(rename = "externalcourseActivityId")]
    pub externalcourse_activity_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user ID of the learner to whom the activity is assigned. Required.
    #[serde(rename = "learnerUserId")]
    pub learner_user_id: Option<String>,
    ///The ID of the learning content created in Viva Learning. Required.
    #[serde(rename = "learningContentId")]
    pub learning_content_id: Option<String>,
    ///The registration ID of the provider. Required.
    #[serde(rename = "learningProviderId")]
    pub learning_provider_id: Option<String>,
    ///Notes for the course activity. Optional.
    pub notes: Option<MicrosoftGraphItemBody>,
    ///The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
    pub status: Option<MicrosoftGraphCourseStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLearningContent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.learningContent".to_string())]
    pub odata_type: String,
    ///Keywords, topics, and other tags associated with the learning content. Optional.
    #[serde(rename = "additionalTags")]
    pub additional_tags: Option<Vec<Option<String>>>,
    ///The content web URL for the learning content. Required.
    #[serde(rename = "contentWebUrl")]
    pub content_web_url: Option<String>,
    ///The authors, creators, or contributors of the learning content. Optional.
    pub contributors: Option<Vec<Option<String>>>,
    ///The date and time when the learning content was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description or summary for the learning content. Optional.
    pub description: Option<String>,
    ///The duration of the learning content in seconds. The value is represented in ISO 8601 format for durations. Optional.
    pub duration: Option<String>,
    ///Unique external content ID for the learning content. Required.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///The format of the learning content. For example, Course, Video, Book, Book Summary, Audiobook Summary. Optional.
    pub format: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the content is active or not. Inactive content doesn't show up in the UI. The default value is true. Optional.
    #[serde(rename = "isActive")]
    pub is_active: Option<bool>,
    ///Indicates whether the learning content requires the user to sign-in on the learning provider platform or not. The default value is false. Optional.
    #[serde(rename = "isPremium")]
    pub is_premium: Option<bool>,
    ///Indicates whether the learning content is searchable or not. The default value is true. Optional.
    #[serde(rename = "isSearchable")]
    pub is_searchable: Option<bool>,
    ///The language of the learning content, for example, en-us or fr-fr. Required.
    #[serde(rename = "languageTag")]
    pub language_tag: Option<String>,
    ///The date and time when the learning content was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The difficulty level of the learning content. Possible values are: Beginner, Intermediate, Advanced, unknownFutureValue. Optional.
    pub level: Option<MicrosoftGraphLevel>,
    ///The number of pages of the learning content, for example, 9. Optional.
    #[serde(rename = "numberOfPages")]
    pub number_of_pages: Option<f64>,
    ///The skills tags associated with the learning content. Optional.
    #[serde(rename = "skillTags")]
    pub skill_tags: Option<Vec<Option<String>>>,
    ///The source name of the learning content, such as LinkedIn Learning or Coursera. Optional.
    #[serde(rename = "sourceName")]
    pub source_name: Option<String>,
    ///The URL of learning content thumbnail image. Optional.
    #[serde(rename = "thumbnailWebUrl")]
    pub thumbnail_web_url: Option<String>,
    ///The title of the learning content. Required.
    pub title: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLearningCourseActivity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.learningCourseActivity".to_string())]
    pub odata_type: String,
    ///Date and time when the assignment was completed. Optional.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The percentage completion value of the course activity. Optional.
    #[serde(rename = "completionPercentage")]
    pub completion_percentage: Option<f64>,
    #[serde(rename = "externalcourseActivityId")]
    pub externalcourse_activity_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user ID of the learner to whom the activity is assigned. Required.
    #[serde(rename = "learnerUserId")]
    pub learner_user_id: Option<String>,
    ///The ID of the learning content created in Viva Learning. Required.
    #[serde(rename = "learningContentId")]
    pub learning_content_id: Option<String>,
    ///The registration ID of the provider. Required.
    #[serde(rename = "learningProviderId")]
    pub learning_provider_id: Option<String>,
    ///The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
    pub status: Option<MicrosoftGraphCourseStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLearningProvider {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.learningProvider".to_string())]
    pub odata_type: String,
    ///The display name that appears in Viva Learning. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether a provider can ingest learning course activity records. The default value is false. Set to true to make learningCourseActivities available for this provider.
    #[serde(rename = "isCourseActivitySyncEnabled")]
    pub is_course_activity_sync_enabled: Option<bool>,
    ///Learning catalog items for the provider.
    #[serde(rename = "learningContents")]
    pub learning_contents: Option<Vec<MicrosoftGraphLearningContent>>,
    #[serde(rename = "learningCourseActivities")]
    pub learning_course_activities: Option<Vec<MicrosoftGraphLearningCourseActivity>>,
    ///Authentication URL to access the courses for the provider. Optional.
    #[serde(rename = "loginWebUrl")]
    pub login_web_url: Option<String>,
    ///The long logo URL for the dark mode that needs to be a publicly accessible image. This image would be saved to the blob storage of Viva Learning for rendering within the Viva Learning app. Required.
    #[serde(rename = "longLogoWebUrlForDarkTheme")]
    pub long_logo_web_url_for_dark_theme: Option<String>,
    ///The long logo URL for the light mode that needs to be a publicly accessible image. This image would be saved to the blob storage of Viva Learning for rendering within the Viva Learning app. Required.
    #[serde(rename = "longLogoWebUrlForLightTheme")]
    pub long_logo_web_url_for_light_theme: Option<String>,
    ///The square logo URL for the dark mode that needs to be a publicly accessible image. This image would be saved to the blob storage of Viva Learning for rendering within the Viva Learning app. Required.
    #[serde(rename = "squareLogoWebUrlForDarkTheme")]
    pub square_logo_web_url_for_dark_theme: Option<String>,
    ///The square logo URL for the light mode that needs to be a publicly accessible image. This image would be saved to the blob storage of Viva Learning for rendering within the Viva Learning app. Required.
    #[serde(rename = "squareLogoWebUrlForLightTheme")]
    pub square_logo_web_url_for_light_theme: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLearningSelfInitiatedCourse {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.learningSelfInitiatedCourse".to_string())]
    pub odata_type: String,
    ///Date and time when the assignment was completed. Optional.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The percentage completion value of the course activity. Optional.
    #[serde(rename = "completionPercentage")]
    pub completion_percentage: Option<f64>,
    #[serde(rename = "externalcourseActivityId")]
    pub externalcourse_activity_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user ID of the learner to whom the activity is assigned. Required.
    #[serde(rename = "learnerUserId")]
    pub learner_user_id: Option<String>,
    ///The ID of the learning content created in Viva Learning. Required.
    #[serde(rename = "learningContentId")]
    pub learning_content_id: Option<String>,
    ///The registration ID of the provider. Required.
    #[serde(rename = "learningProviderId")]
    pub learning_provider_id: Option<String>,
    ///The date and time on which the learner started the self-initiated course. Optional.
    #[serde(rename = "startedDateTime")]
    pub started_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
    pub status: Option<MicrosoftGraphCourseStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphLevel {
    #[serde(rename = "beginner")]
    #[default]
    Beginner,
    #[serde(rename = "intermediate")]
    Intermediate,
    #[serde(rename = "advanced")]
    Advanced,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLicenseAssignmentState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "assignedByGroup")]
    pub assigned_by_group: Option<String>,
    #[serde(rename = "disabledPlans")]
    pub disabled_plans: Option<Vec<Option<uuid::Uuid>>>,
    pub error: Option<String>,
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "skuId")]
    pub sku_id: Option<uuid::Uuid>,
    pub state: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLicenseDetails {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.licenseDetails".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Information about the service plans assigned with the license. Read-only. Not nullable.
    #[serde(rename = "servicePlans")]
    pub service_plans: Option<Vec<MicrosoftGraphServicePlanInfo>>,
    ///Unique identifier (GUID) for the service SKU. Equal to the skuId property on the related subscribedSku object. Read-only.
    #[serde(rename = "skuId")]
    pub sku_id: Option<uuid::Uuid>,
    ///Unique SKU display name. Equal to the skuPartNumber on the related subscribedSku object; for example, AAD_Premium. Read-only.
    #[serde(rename = "skuPartNumber")]
    pub sku_part_number: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLicenseProcessingState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub state: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLicenseUnitsDetail {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The number of units that are enabled for the active subscription of the service SKU.
    pub enabled: Option<f64>,
    ///The number of units that are locked out because the customer canceled their subscription of the service SKU.
    #[serde(rename = "lockedOut")]
    pub locked_out: Option<f64>,
    ///The number of units that are suspended because the subscription of the service SKU has been canceled. The units can't be assigned but can still be reactivated before they're deleted.
    pub suspended: Option<f64>,
    ///The number of units that are in warning status. When the subscription of the service SKU has expired, the customer has a grace period to renew their subscription before it's canceled (moved to a suspended state).
    pub warning: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLinkedResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.linkedResource".to_string())]
    pub odata_type: String,
    ///The app name of the source that sends the linkedResource.
    #[serde(rename = "applicationName")]
    pub application_name: Option<String>,
    ///The title of the linkedResource.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///ID of the object that is associated with this task on the third-party/partner system.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Deep link to the linkedResource.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphList {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.list".to_string())]
    pub odata_type: String,
    ///The collection of field definitions for this list.
    pub columns: Option<Vec<MicrosoftGraphColumnDefinition>>,
    ///The collection of content types present in this list.
    #[serde(rename = "contentTypes")]
    pub content_types: Option<Vec<MicrosoftGraphContentType>>,
    ///Identity of the user, device, or application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who created the item. Read-only.
    #[serde(rename = "createdByUser")]
    pub created_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Provides a user-visible description of the item. Optional.
    pub description: Option<String>,
    ///The displayable title of the list.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Allows access to the list as a drive resource with driveItems. Only present on document libraries.
    pub drive: Option<Box<MicrosoftGraphDrive>>,
    ///ETag for the item. Read-only.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///All items contained in the list.
    pub items: Option<Vec<MicrosoftGraphListItem>>,
    ///Identity of the user, device, and application that last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who last modified the item. Read-only.
    #[serde(rename = "lastModifiedByUser")]
    pub last_modified_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains more details about the list.
    pub list: Option<MicrosoftGraphListInfo>,
    ///The name of the item. Read-write.
    pub name: Option<String>,
    ///The collection of long-running operations on the list.
    pub operations: Option<Vec<MicrosoftGraphRichLongRunningOperation>>,
    ///Parent information, if the item has a parent. Read-write.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    ///Returns identifiers useful for SharePoint REST compatibility. Read-only.
    #[serde(rename = "sharepointIds")]
    pub sharepoint_ids: Option<MicrosoftGraphSharepointIds>,
    ///The set of subscriptions on the list.
    pub subscriptions: Option<Vec<MicrosoftGraphSubscription>>,
    ///If present, indicates that the list is system-managed. Read-only.
    pub system: Option<MicrosoftGraphSystemFacet>,
    ///URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphListInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If true, indicates that content types are enabled for this list.
    #[serde(rename = "contentTypesEnabled")]
    pub content_types_enabled: Option<bool>,
    ///If true, indicates that the list isn't normally visible in the SharePoint user experience.
    pub hidden: Option<bool>,
    ///An enumerated value that represents the base list template used in creating the list. Possible values include documentLibrary, genericList, task, survey, announcements, contacts, and more.
    pub template: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphListItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.listItem".to_string())]
    pub odata_type: String,
    ///Analytics about the view activities that took place on this item.
    pub analytics: Option<Box<MicrosoftGraphItemAnalytics>>,
    ///The content type of this list item
    #[serde(rename = "contentType")]
    pub content_type: Option<MicrosoftGraphContentTypeInfo>,
    ///Identity of the user, device, or application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who created the item. Read-only.
    #[serde(rename = "createdByUser")]
    pub created_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Provides a user-visible description of the item. Optional.
    pub description: Option<String>,
    ///Version information for a document set version created by a user.
    #[serde(rename = "documentSetVersions")]
    pub document_set_versions: Option<Vec<MicrosoftGraphDocumentSetVersion>>,
    ///For document libraries, the driveItem relationship exposes the listItem as a driveItem
    #[serde(rename = "driveItem")]
    pub drive_item: Option<Box<MicrosoftGraphDriveItem>>,
    ///ETag for the item. Read-only.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    ///The values of the columns set on this list item.
    pub fields: Option<MicrosoftGraphFieldValueSet>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user, device, and application that last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who last modified the item. Read-only.
    #[serde(rename = "lastModifiedByUser")]
    pub last_modified_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the item. Read-write.
    pub name: Option<String>,
    ///Parent information, if the item has a parent. Read-write.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    ///Returns identifiers useful for SharePoint REST compatibility. Read-only.
    #[serde(rename = "sharepointIds")]
    pub sharepoint_ids: Option<MicrosoftGraphSharepointIds>,
    ///The list of previous versions of the list item.
    pub versions: Option<Vec<MicrosoftGraphListItemVersion>>,
    ///URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphListItemVersion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.listItemVersion".to_string())]
    pub odata_type: String,
    ///A collection of the fields and values for this version of the list item.
    pub fields: Option<MicrosoftGraphFieldValueSet>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user which last modified the version. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Date and time the version was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the publication status of this particular version. Read-only.
    pub publication: Option<MicrosoftGraphPublicationFacet>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphLobbyBypassScope {
    #[serde(rename = "organizer")]
    #[default]
    Organizer,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "organizationAndFederated")]
    OrganizationAndFederated,
    #[serde(rename = "everyone")]
    Everyone,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "invited")]
    Invited,
    #[serde(rename = "organizationExcludingGuests")]
    OrganizationExcludingGuests,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLobbyBypassSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies whether or not to always let dial-in callers bypass the lobby. Optional.
    #[serde(rename = "isDialInBypassEnabled")]
    pub is_dial_in_bypass_enabled: Option<bool>,
    ///Specifies the type of participants that are automatically admitted into a meeting, bypassing the lobby. Optional.
    pub scope: Option<MicrosoftGraphLobbyBypassScope>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLocalAdminPasswordSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLocaleInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A name representing the user's locale in natural language, for example, 'English (United States)'.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///A locale representation for the user, which includes the user's preferred language and country/region. For example, 'en-us'. The language component follows 2-letter codes as defined in ISO 639-1, and the country component follows 2-letter codes as defined in ISO 3166-1 alpha-2.
    pub locale: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLocalizedNotificationMessage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.localizedNotificationMessage".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Flag to indicate whether or not this is the default locale for language fallback. This flag can only be set. To unset, set this property to true on another Localized Notification Message.
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The Locale for which this message is destined.
    pub locale: Option<String>,
    ///The Message Template content.
    #[serde(rename = "messageTemplate")]
    pub message_template: Option<String>,
    ///The Message Template Subject.
    pub subject: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLocateDeviceActionResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.locateDeviceActionResult".to_string())]
    pub odata_type: String,
    ///Action name
    #[serde(rename = "actionName")]
    pub action_name: Option<String>,
    ///State of the action on the device
    #[serde(rename = "actionState")]
    pub action_state: Option<MicrosoftGraphActionState>,
    ///device location
    #[serde(rename = "deviceLocation")]
    pub device_location: Option<MicrosoftGraphDeviceGeoLocation>,
    ///Time the action state was last updated
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Time the action was initiated
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
discriminated_enum! {
    pub enum MicrosoftGraphLocation { discriminator : "@odata.type", variants :
    [("#microsoft.graph.locationConstraintItem", ConstraintItem(Box <
    MicrosoftGraphLocationConstraintItem >))], fallback : Location(Box <
    MicrosoftGraphLocationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLocationBase {
    ///The street address of the location.
    pub address: Option<MicrosoftGraphPhysicalAddress>,
    ///The geographic coordinates and elevation of the location.
    pub coordinates: Option<MicrosoftGraphOutlookGeoCoordinates>,
    ///The name associated with the location.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Optional email address of the location.
    #[serde(rename = "locationEmailAddress")]
    pub location_email_address: Option<String>,
    ///The type of location. The possible values are: default, conferenceRoom, homeAddress, businessAddress,geoCoordinates, streetAddress, hotel, restaurant, localBusiness, postalAddress. Read-only.
    #[serde(rename = "locationType")]
    pub location_type: Option<MicrosoftGraphLocationType>,
    ///Optional URI representing the location.
    #[serde(rename = "locationUri")]
    pub location_uri: Option<String>,
    ///For internal use only.
    #[serde(rename = "uniqueId")]
    pub unique_id: Option<String>,
    ///For internal use only.
    #[serde(rename = "uniqueIdType")]
    pub unique_id_type: Option<MicrosoftGraphLocationUniqueIdType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLocationConstraintItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.locationConstraintItem".to_string())]
    pub odata_type: String,
    ///The street address of the location.
    pub address: Option<MicrosoftGraphPhysicalAddress>,
    ///The geographic coordinates and elevation of the location.
    pub coordinates: Option<MicrosoftGraphOutlookGeoCoordinates>,
    ///The name associated with the location.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Optional email address of the location.
    #[serde(rename = "locationEmailAddress")]
    pub location_email_address: Option<String>,
    ///The type of location. The possible values are: default, conferenceRoom, homeAddress, businessAddress,geoCoordinates, streetAddress, hotel, restaurant, localBusiness, postalAddress. Read-only.
    #[serde(rename = "locationType")]
    pub location_type: Option<MicrosoftGraphLocationType>,
    ///Optional URI representing the location.
    #[serde(rename = "locationUri")]
    pub location_uri: Option<String>,
    ///If set to true and the specified resource is busy, findMeetingTimes looks for another resource that is free. If set to false and the specified resource is busy, findMeetingTimes returns the resource best ranked in the user's cache without checking if it's free. Default is true.
    #[serde(rename = "resolveAvailability")]
    pub resolve_availability: Option<bool>,
    ///For internal use only.
    #[serde(rename = "uniqueId")]
    pub unique_id: Option<String>,
    ///For internal use only.
    #[serde(rename = "uniqueIdType")]
    pub unique_id_type: Option<MicrosoftGraphLocationUniqueIdType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphLocationType {
    #[serde(rename = "default")]
    #[default]
    Default,
    #[serde(rename = "conferenceRoom")]
    ConferenceRoom,
    #[serde(rename = "homeAddress")]
    HomeAddress,
    #[serde(rename = "businessAddress")]
    BusinessAddress,
    #[serde(rename = "geoCoordinates")]
    GeoCoordinates,
    #[serde(rename = "streetAddress")]
    StreetAddress,
    #[serde(rename = "hotel")]
    Hotel,
    #[serde(rename = "restaurant")]
    Restaurant,
    #[serde(rename = "localBusiness")]
    LocalBusiness,
    #[serde(rename = "postalAddress")]
    PostalAddress,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphLocationUniqueIdType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "locationStore")]
    LocationStore,
    #[serde(rename = "directory")]
    Directory,
    #[serde(rename = "private")]
    Private,
    #[serde(rename = "bing")]
    Bing,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLogicAppTriggerEndpointConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.logicAppTriggerEndpointConfiguration".to_string())]
    pub odata_type: String,
    ///The name of the logic app.
    #[serde(rename = "logicAppWorkflowName")]
    pub logic_app_workflow_name: Option<String>,
    ///The Azure resource group name for the logic app.
    #[serde(rename = "resourceGroupName")]
    pub resource_group_name: Option<String>,
    ///Identifier of the Azure subscription for the logic app.
    #[serde(rename = "subscriptionId")]
    pub subscription_id: Option<String>,
    ///The URL to the logic app endpoint that will be triggered. Only required for app-only token scenarios where app is creating a customCalloutExtension without a signed-in user.
    pub url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLoginPage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.loginPage".to_string())]
    pub odata_type: String,
    ///The HTML content of the login page.
    pub content: Option<String>,
    ///Identity of the user who created the login page.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the login page was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description about the login page.
    pub description: Option<String>,
    ///Display name of the login page.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The content language of the login page.
    pub language: Option<String>,
    ///Identity of the user who last modified the login page.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the login page was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The source of the content. Possible values are: unknown, global, tenant, unknownFutureValue.
    pub source: Option<MicrosoftGraphSimulationContentSource>,
    ///The login page status. Possible values are: unknown, draft, ready, archive, delete, unknownFutureValue.
    pub status: Option<MicrosoftGraphSimulationContentStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLoginPageLayoutConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Option to show the footer on the sign-in page.
    #[serde(rename = "isFooterShown")]
    pub is_footer_shown: Option<bool>,
    ///Option to show the header on the sign-in page.
    #[serde(rename = "isHeaderShown")]
    pub is_header_shown: Option<bool>,
    ///Represents the layout template to be displayed on the login page for a tenant. The possible values are  default - Represents the default Microsoft layout with a centered lightbox.  verticalSplit - Represents a layout with a background on the left side and a full-height lightbox to the right.  unknownFutureValue - Evolvable enumeration sentinel value. Don't use.
    #[serde(rename = "layoutTemplateType")]
    pub layout_template_type: Option<MicrosoftGraphLayoutTemplateType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLoginPageTextVisibilitySettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Option to hide the self-service password reset (SSPR) hyperlinks such as 'Can't access your account?', 'Forgot my password' and 'Reset it now' on the sign-in form.
    #[serde(rename = "hideAccountResetCredentials")]
    pub hide_account_reset_credentials: Option<bool>,
    ///Option to hide the self-service password reset (SSPR) 'Can't access your account?' hyperlink on the sign-in form.
    #[serde(rename = "hideCannotAccessYourAccount")]
    pub hide_cannot_access_your_account: Option<bool>,
    ///Option to hide the self-service password reset (SSPR) 'Forgot my password' hyperlink on the sign-in form.
    #[serde(rename = "hideForgotMyPassword")]
    pub hide_forgot_my_password: Option<bool>,
    ///Option to hide the 'Privacy & Cookies' hyperlink in the footer.
    #[serde(rename = "hidePrivacyAndCookies")]
    pub hide_privacy_and_cookies: Option<bool>,
    ///Option to hide the self-service password reset (SSPR) 'reset it now' hyperlink on the sign-in form.
    #[serde(rename = "hideResetItNow")]
    pub hide_reset_it_now: Option<bool>,
    ///Option to hide the 'Terms of Use' hyperlink in the footer.
    #[serde(rename = "hideTermsOfUse")]
    pub hide_terms_of_use: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphLogonType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "interactive")]
    Interactive,
    #[serde(rename = "remoteInteractive")]
    RemoteInteractive,
    #[serde(rename = "network")]
    Network,
    #[serde(rename = "batch")]
    Batch,
    #[serde(rename = "service")]
    Service,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLongRunningOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.longRunningOperation".to_string())]
    pub odata_type: String,
    ///The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The time of the last action in the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///URI of the resource that the operation is performed on.
    #[serde(rename = "resourceLocation")]
    pub resource_location: Option<String>,
    ///The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphLongRunningOperationStatus>,
    ///Details about the status of the operation.
    #[serde(rename = "statusDetail")]
    pub status_detail: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphLongRunningOperationStatus {
    #[serde(rename = "notStarted")]
    #[default]
    NotStarted,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphLookupColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether multiple values can be selected from the source.
    #[serde(rename = "allowMultipleValues")]
    pub allow_multiple_values: Option<bool>,
    ///Indicates whether values in the column should be able to exceed the standard limit of 255 characters.
    #[serde(rename = "allowUnlimitedLength")]
    pub allow_unlimited_length: Option<bool>,
    ///The name of the lookup source column.
    #[serde(rename = "columnName")]
    pub column_name: Option<String>,
    ///The unique identifier of the lookup source list.
    #[serde(rename = "listId")]
    pub list_id: Option<String>,
    ///If specified, this column is a secondary lookup, pulling an additional field from the list item looked up by the primary lookup. Use the list item looked up by the primary as the source for the column named here.
    #[serde(rename = "primaryLookupColumnId")]
    pub primary_lookup_column_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphM365AppsInstallationOptions {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.m365AppsInstallationOptions".to_string())]
    pub odata_type: String,
    #[serde(rename = "appsForMac")]
    pub apps_for_mac: Option<MicrosoftGraphAppsInstallationOptionsForMac>,
    #[serde(rename = "appsForWindows")]
    pub apps_for_windows: Option<MicrosoftGraphAppsInstallationOptionsForWindows>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "updateChannel")]
    pub update_channel: Option<MicrosoftGraphAppsUpdateChannelType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOsLobAppAssignmentSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.macOsLobAppAssignmentSettings".to_string())]
    pub odata_type: String,
    ///When TRUE, indicates that the app should be uninstalled when the device is removed from Intune. When FALSE, indicates that the app will not be uninstalled when the device is removed from Intune.
    #[serde(rename = "uninstallOnDeviceRemoval")]
    pub uninstall_on_device_removal: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOscompliancePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.macOSCompliancePolicy".to_string())]
    pub odata_type: String,
    ///The collection of assignments for this compliance policy.
    pub assignments: Option<Vec<MicrosoftGraphDeviceCompliancePolicyAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Compliance Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device compliance devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceComplianceDeviceOverview>,
    ///List of DeviceComplianceDeviceStatus.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceComplianceDeviceStatus>>,
    ///Require that devices have enabled device threat protection.
    #[serde(rename = "deviceThreatProtectionEnabled")]
    pub device_threat_protection_enabled: Option<bool>,
    ///Device threat protection levels for the Device Threat Protection API.
    #[serde(rename = "deviceThreatProtectionRequiredSecurityLevel")]
    pub device_threat_protection_required_security_level: Option<
        MicrosoftGraphDeviceThreatProtectionLevel,
    >,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Corresponds to the 'Block all incoming connections' option.
    #[serde(rename = "firewallBlockAllIncoming")]
    pub firewall_block_all_incoming: Option<bool>,
    ///Corresponds to 'Enable stealth mode.'
    #[serde(rename = "firewallEnableStealthMode")]
    pub firewall_enable_stealth_mode: Option<bool>,
    ///Whether the firewall should be enabled or not.
    #[serde(rename = "firewallEnabled")]
    pub firewall_enabled: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Maximum MacOS version.
    #[serde(rename = "osMaximumVersion")]
    pub os_maximum_version: Option<String>,
    ///Minimum MacOS version.
    #[serde(rename = "osMinimumVersion")]
    pub os_minimum_version: Option<String>,
    ///Indicates whether or not to block simple passwords.
    #[serde(rename = "passwordBlockSimple")]
    pub password_block_simple: Option<bool>,
    ///Number of days before the password expires. Valid values 1 to 65535
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///The number of character sets required in the password.
    #[serde(rename = "passwordMinimumCharacterSetCount")]
    pub password_minimum_character_set_count: Option<f64>,
    ///Minimum length of password. Valid values 4 to 14
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///Minutes of inactivity before a password is required.
    #[serde(rename = "passwordMinutesOfInactivityBeforeLock")]
    pub password_minutes_of_inactivity_before_lock: Option<f64>,
    ///Number of previous passwords to block. Valid values 1 to 24
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Whether or not to require a password.
    #[serde(rename = "passwordRequired")]
    pub password_required: Option<bool>,
    ///Possible values of required passwords.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphRequiredPasswordType>,
    ///The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.
    #[serde(rename = "scheduledActionsForRule")]
    pub scheduled_actions_for_rule: Option<
        Vec<MicrosoftGraphDeviceComplianceScheduledActionForRule>,
    >,
    ///Require encryption on Mac OS devices.
    #[serde(rename = "storageRequireEncryption")]
    pub storage_require_encryption: Option<bool>,
    ///Require that devices have enabled system integrity protection.
    #[serde(rename = "systemIntegrityProtectionEnabled")]
    pub system_integrity_protection_enabled: Option<bool>,
    ///Device compliance users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceComplianceUserOverview>,
    ///List of DeviceComplianceUserStatus.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceComplianceUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOscustomConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.macOSCustomConfiguration".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Payload. (UTF8 encoded byte array)
    pub payload: Option<String>,
    ///Payload file name (.mobileconfig
    #[serde(rename = "payloadFileName")]
    pub payload_file_name: Option<String>,
    ///Name that is displayed to the user.
    #[serde(rename = "payloadName")]
    pub payload_name: Option<String>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOsdeviceFeaturesConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.macOSDeviceFeaturesConfiguration".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOsdmgApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.macOSDmgApp".to_string())]
    pub odata_type: String,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When TRUE, indicates that the app's version will NOT be used to detect if the app is installed on a device. When FALSE, indicates that the app's version will be used to detect if the app is installed on a device. Set this to true for apps that use a self update feature. The default value is FALSE.
    #[serde(rename = "ignoreVersionDetection")]
    pub ignore_version_detection: Option<bool>,
    ///The list of .apps expected to be installed by the DMG (Apple Disk Image). This collection can contain a maximum of 500 elements.
    #[serde(rename = "includedApps")]
    pub included_apps: Option<Vec<MicrosoftGraphMacOsincludedApp>>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///ComplexType macOSMinimumOperatingSystem that indicates the minimum operating system applicable for the application.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphMacOsminimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The bundleId of the primary .app in the DMG (Apple Disk Image). This maps to the CFBundleIdentifier in the app's bundle configuration.
    #[serde(rename = "primaryBundleId")]
    pub primary_bundle_id: Option<String>,
    ///The version of the primary .app in the DMG (Apple Disk Image). This maps to the CFBundleShortVersion in the app's bundle configuration.
    #[serde(rename = "primaryBundleVersion")]
    pub primary_bundle_version: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOsgeneralDeviceConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.macOSGeneralDeviceConfiguration".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///Possible values of the compliance app list.
    #[serde(rename = "compliantAppListType")]
    pub compliant_app_list_type: Option<MicrosoftGraphAppListType>,
    ///List of apps in the compliance (either allow list or block list, controlled by CompliantAppListType). This collection can contain a maximum of 10000 elements.
    #[serde(rename = "compliantAppsList")]
    pub compliant_apps_list: Option<Vec<MicrosoftGraphAppListItem>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///An email address lacking a suffix that matches any of these strings will be considered out-of-domain.
    #[serde(rename = "emailInDomainSuffixes")]
    pub email_in_domain_suffixes: Option<Vec<Option<String>>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Block simple passwords.
    #[serde(rename = "passwordBlockSimple")]
    pub password_block_simple: Option<bool>,
    ///Number of days before the password expires.
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///Number of character sets a password must contain. Valid values 0 to 4
    #[serde(rename = "passwordMinimumCharacterSetCount")]
    pub password_minimum_character_set_count: Option<f64>,
    ///Minimum length of passwords.
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///Minutes of inactivity required before a password is required.
    #[serde(rename = "passwordMinutesOfInactivityBeforeLock")]
    pub password_minutes_of_inactivity_before_lock: Option<f64>,
    ///Minutes of inactivity required before the screen times out.
    #[serde(rename = "passwordMinutesOfInactivityBeforeScreenTimeout")]
    pub password_minutes_of_inactivity_before_screen_timeout: Option<f64>,
    ///Number of previous passwords to block.
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Whether or not to require a password.
    #[serde(rename = "passwordRequired")]
    pub password_required: Option<bool>,
    ///Possible values of required passwords.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphRequiredPasswordType>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Contains properties of an included .app in a MacOS app.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOsincludedApp {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The bundleId of the app. This maps to the CFBundleIdentifier in the app's bundle configuration.
    #[serde(rename = "bundleId")]
    pub bundle_id: Option<String>,
    ///The version of the app. This maps to the CFBundleShortVersion in the app's bundle configuration.
    #[serde(rename = "bundleVersion")]
    pub bundle_version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOslobApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.macOSLobApp".to_string())]
    pub odata_type: String,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The build number of the package. This should match the package CFBundleShortVersionString of the .pkg file.
    #[serde(rename = "buildNumber")]
    pub build_number: Option<String>,
    ///The primary bundleId of the package.
    #[serde(rename = "bundleId")]
    pub bundle_id: Option<String>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///List of ComplexType macOSLobChildApp objects. Represents the apps expected to be installed by the package.
    #[serde(rename = "childApps")]
    pub child_apps: Option<Vec<MicrosoftGraphMacOslobChildApp>>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When TRUE, indicates that the app's version will NOT be used to detect if the app is installed on a device. When FALSE, indicates that the app's version will be used to detect if the app is installed on a device. Set this to true for apps that use a self update feature.
    #[serde(rename = "ignoreVersionDetection")]
    pub ignore_version_detection: Option<bool>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///When TRUE, indicates that the app will be installed as managed (requires macOS 11.0 and other managed package restrictions). When FALSE, indicates that the app will be installed as unmanaged.
    #[serde(rename = "installAsManaged")]
    pub install_as_managed: Option<bool>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The MD5 hash codes. This is empty if the package was uploaded directly. If the Intune App Wrapping Tool is used to create a .intunemac, this value can be found inside the Detection.xml file.
    #[serde(rename = "md5Hash")]
    pub md5hash: Option<Vec<Option<String>>>,
    ///The chunk size for MD5 hash. This is '0' or empty if the package was uploaded directly. If the Intune App Wrapping Tool is used to create a .intunemac, this value can be found inside the Detection.xml file.
    #[serde(rename = "md5HashChunkSize")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub md5hash_chunk_size: Option<f64>,
    ///ComplexType macOSMinimumOperatingSystem that indicates the minimum operating system applicable for the application.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphMacOsminimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
    ///The version number of the package. This should match the package CFBundleVersion in the packageinfo file.
    #[serde(rename = "versionNumber")]
    pub version_number: Option<String>,
}
///Contains properties of a macOS .app in the package
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOslobChildApp {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The build number of the app.
    #[serde(rename = "buildNumber")]
    pub build_number: Option<String>,
    ///The bundleId of the app.
    #[serde(rename = "bundleId")]
    pub bundle_id: Option<String>,
    ///The version number of the app.
    #[serde(rename = "versionNumber")]
    pub version_number: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOsmicrosoftDefenderApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.macOSMicrosoftDefenderApp".to_string())]
    pub odata_type: String,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOsmicrosoftEdgeApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.macOSMicrosoftEdgeApp".to_string())]
    pub odata_type: String,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The enum to specify the channels for Microsoft Edge apps.
    pub channel: Option<MicrosoftGraphMicrosoftEdgeChannel>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
}
///The minimum operating system required for a macOS app.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOsminimumOperatingSystem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///When TRUE, indicates OS X 10.10 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v10_10: Option<bool>,
    ///When TRUE, indicates OS X 10.11 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v10_11: Option<bool>,
    ///When TRUE, indicates macOS 10.12 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v10_12: Option<bool>,
    ///When TRUE, indicates macOS 10.13 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v10_13: Option<bool>,
    ///When TRUE, indicates macOS 10.14 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v10_14: Option<bool>,
    ///When TRUE, indicates macOS 10.15 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v10_15: Option<bool>,
    ///When TRUE, indicates Mac OS X 10.7 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v10_7: Option<bool>,
    ///When TRUE, indicates OS X 10.8 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v10_8: Option<bool>,
    ///When TRUE, indicates OS X 10.9 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v10_9: Option<bool>,
    ///When TRUE, indicates macOS 11.0 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v11_0: Option<bool>,
    ///When TRUE, indicates macOS 12.0 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v12_0: Option<bool>,
    ///When TRUE, indicates macOS 13.0 or later is required to install the app. When FALSE, indicates some other OS version is the minimum OS to install the app. Default value is FALSE.
    pub v13_0: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMacOsofficeSuiteApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.macOSOfficeSuiteApp".to_string())]
    pub odata_type: String,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMailAssessmentRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mailAssessmentRequest".to_string())]
    pub odata_type: String,
    pub category: Option<MicrosoftGraphThreatCategory>,
    ///The content type of threat assessment. Possible values are: mail, url, file.
    #[serde(rename = "contentType")]
    pub content_type: Option<MicrosoftGraphThreatAssessmentContentType>,
    ///The threat assessment request creator.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The reason for mail routed to its destination. Possible values are: none, mailFlowRule, safeSender, blockedSender, advancedSpamFiltering, domainAllowList, domainBlockList, notInAddressBook, firstTimeSender, autoPurgeToInbox, autoPurgeToJunk, autoPurgeToDeleted, outbound, notJunk, junk.
    #[serde(rename = "destinationRoutingReason")]
    pub destination_routing_reason: Option<MicrosoftGraphMailDestinationRoutingReason>,
    #[serde(rename = "expectedAssessment")]
    pub expected_assessment: Option<MicrosoftGraphThreatExpectedAssessment>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The resource URI of the mail message for assessment.
    #[serde(rename = "messageUri")]
    pub message_uri: Option<String>,
    ///The mail recipient whose policies are used to assess the mail.
    #[serde(rename = "recipientEmail")]
    pub recipient_email: Option<String>,
    ///The source of the threat assessment request. Possible values are: administrator.
    #[serde(rename = "requestSource")]
    pub request_source: Option<MicrosoftGraphThreatAssessmentRequestSource>,
    ///A collection of threat assessment results. Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.
    pub results: Option<Vec<MicrosoftGraphThreatAssessmentResult>>,
    ///The assessment process status. Possible values are: pending, completed.
    pub status: Option<MicrosoftGraphThreatAssessmentStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMailDestinationRoutingReason {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "mailFlowRule")]
    MailFlowRule,
    #[serde(rename = "safeSender")]
    SafeSender,
    #[serde(rename = "blockedSender")]
    BlockedSender,
    #[serde(rename = "advancedSpamFiltering")]
    AdvancedSpamFiltering,
    #[serde(rename = "domainAllowList")]
    DomainAllowList,
    #[serde(rename = "domainBlockList")]
    DomainBlockList,
    #[serde(rename = "notInAddressBook")]
    NotInAddressBook,
    #[serde(rename = "firstTimeSender")]
    FirstTimeSender,
    #[serde(rename = "autoPurgeToInbox")]
    AutoPurgeToInbox,
    #[serde(rename = "autoPurgeToJunk")]
    AutoPurgeToJunk,
    #[serde(rename = "autoPurgeToDeleted")]
    AutoPurgeToDeleted,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "notJunk")]
    NotJunk,
    #[serde(rename = "junk")]
    Junk,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMailFolder {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mailFolder".to_string())]
    pub odata_type: String,
    ///The number of immediate child mailFolders in the current mailFolder.
    #[serde(rename = "childFolderCount")]
    pub child_folder_count: Option<f64>,
    ///The collection of child folders in the mailFolder.
    #[serde(rename = "childFolders")]
    pub child_folders: Option<Vec<MicrosoftGraphMailFolder>>,
    ///The mailFolder's display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the mailFolder is hidden. This property can be set only when creating the folder. Find more information in Hidden mail folders.
    #[serde(rename = "isHidden")]
    pub is_hidden: Option<bool>,
    ///The collection of rules that apply to the user's Inbox folder.
    #[serde(rename = "messageRules")]
    pub message_rules: Option<Vec<MicrosoftGraphMessageRule>>,
    ///The collection of messages in the mailFolder.
    pub messages: Option<Vec<MicrosoftGraphMessage>>,
    ///The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///The unique identifier for the mailFolder's parent mailFolder.
    #[serde(rename = "parentFolderId")]
    pub parent_folder_id: Option<String>,
    ///The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
    ///The number of items in the mailFolder.
    #[serde(rename = "totalItemCount")]
    pub total_item_count: Option<f64>,
    ///The number of items in the mailFolder marked as unread.
    #[serde(rename = "unreadItemCount")]
    pub unread_item_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMailFolderCollectionResponse {
    #[serde(rename = "@odata.count")]
    pub odata_count: Option<i64>,
    #[serde(rename = "@odata.nextLink")]
    pub odata_next_link: Option<String>,
    pub value: Option<Vec<MicrosoftGraphMailFolder>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMailSearchFolder {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mailSearchFolder".to_string())]
    pub odata_type: String,
    ///The number of immediate child mailFolders in the current mailFolder.
    #[serde(rename = "childFolderCount")]
    pub child_folder_count: Option<f64>,
    ///The collection of child folders in the mailFolder.
    #[serde(rename = "childFolders")]
    pub child_folders: Option<Vec<MicrosoftGraphMailFolder>>,
    ///The mailFolder's display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The OData query to filter the messages.
    #[serde(rename = "filterQuery")]
    pub filter_query: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates how the mailbox folder hierarchy should be traversed in the search. true means that a deep search should be done to include child folders in the hierarchy of each folder explicitly specified in sourceFolderIds. false means a shallow search of only each of the folders explicitly specified in sourceFolderIds.
    #[serde(rename = "includeNestedFolders")]
    pub include_nested_folders: Option<bool>,
    ///Indicates whether the mailFolder is hidden. This property can be set only when creating the folder. Find more information in Hidden mail folders.
    #[serde(rename = "isHidden")]
    pub is_hidden: Option<bool>,
    ///Indicates whether a search folder is editable using REST APIs.
    #[serde(rename = "isSupported")]
    pub is_supported: Option<bool>,
    ///The collection of rules that apply to the user's Inbox folder.
    #[serde(rename = "messageRules")]
    pub message_rules: Option<Vec<MicrosoftGraphMessageRule>>,
    ///The collection of messages in the mailFolder.
    pub messages: Option<Vec<MicrosoftGraphMessage>>,
    ///The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///The unique identifier for the mailFolder's parent mailFolder.
    #[serde(rename = "parentFolderId")]
    pub parent_folder_id: Option<String>,
    ///The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
    ///The mailbox folders that should be mined.
    #[serde(rename = "sourceFolderIds")]
    pub source_folder_ids: Option<Vec<Option<String>>>,
    ///The number of items in the mailFolder.
    #[serde(rename = "totalItemCount")]
    pub total_item_count: Option<f64>,
    ///The number of items in the mailFolder marked as unread.
    #[serde(rename = "unreadItemCount")]
    pub unread_item_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMailboxProtectionRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mailboxProtectionRule".to_string())]
    pub odata_type: String,
    ///The identity of person who created the rule.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the rule.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains error details if an operation on a rule fails.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "isAutoApplyEnabled")]
    pub is_auto_apply_enabled: Option<bool>,
    ///The identity of the person who last modified the rule.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification made to the rule.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains a mailbox expression. For examples, see mailboxExpression examples.
    #[serde(rename = "mailboxExpression")]
    pub mailbox_expression: Option<String>,
    ///The status of the protection rule. The possible values are: draft, active, completed, completedWithErrors, unknownFutureValue. The draft member is currently unsupported.
    pub status: Option<MicrosoftGraphProtectionRuleStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMailboxProtectionUnit {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mailboxProtectionUnit".to_string())]
    pub odata_type: String,
    ///The identity of the person who created the protection unit.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the protection unit. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The ID of the directory object.
    #[serde(rename = "directoryObjectId")]
    pub directory_object_id: Option<String>,
    ///Display name of the directory object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Email address associated with the directory object.
    pub email: Option<String>,
    ///Contains error details if an error occurred while creating a protection unit.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of person who last modified the protection unit.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification of this protection unit. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier of the protection policy based on which protection unit was created.
    #[serde(rename = "policyId")]
    pub policy_id: Option<String>,
    ///The status of the protection unit. The possible values are: protectRequested, protected, unprotectRequested, unprotected, removeRequested, unknownFutureValue, offboardRequested, offboarded, cancelOffboardRequested. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: offboardRequested, offboarded, cancelOffboardRequested.
    pub status: Option<MicrosoftGraphProtectionUnitStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMailboxProtectionUnitsBulkAdditionJob {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mailboxProtectionUnitsBulkAdditionJob".to_string())]
    pub odata_type: String,
    ///The identity of person who created the job.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the job.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The list of Exchange directoryObjectIds to add to the Exchange protection policy.
    #[serde(rename = "directoryObjectIds")]
    pub directory_object_ids: Option<Vec<Option<String>>>,
    ///The name of the protection units bulk addition job.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Error details containing resource resolution failures, if any.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the person who last modified the job.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification made to the job.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The list of Exchange email addresses to add to the Exchange protection policy.
    pub mailboxes: Option<Vec<Option<String>>>,
    pub status: Option<MicrosoftGraphProtectionUnitsBulkJobStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMailboxRestoreArtifact {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mailboxRestoreArtifact".to_string())]
    pub odata_type: String,
    ///The time when restoration of restore artifact is completed.
    #[serde(rename = "completionDateTime")]
    pub completion_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the restoration destination. The possible values are: new, inPlace, unknownFutureValue.
    #[serde(rename = "destinationType")]
    pub destination_type: Option<MicrosoftGraphDestinationType>,
    ///Contains error details if the restore session fails or completes with an error.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the date and time when an artifact is protected by a protectionPolicy and can be restored.
    #[serde(rename = "restorePoint")]
    pub restore_point: Option<MicrosoftGraphRestorePoint>,
    ///The new restored folder identifier for the user.
    #[serde(rename = "restoredFolderId")]
    pub restored_folder_id: Option<String>,
    ///The new restored folder name.
    #[serde(rename = "restoredFolderName")]
    pub restored_folder_name: Option<String>,
    ///The number of items that are being restored in the folder.
    #[serde(rename = "restoredItemCount")]
    pub restored_item_count: Option<f64>,
    ///The time when restoration of restore artifact is started.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The individual restoration status of the restore artifact. The possible values are: added, scheduling, scheduled, inProgress, succeeded, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphArtifactRestoreStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMailboxRestoreArtifactsBulkAdditionRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mailboxRestoreArtifactsBulkAdditionRequest".to_string())]
    pub odata_type: String,
    ///The identity of the person who created the bulk request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time when the bulk request was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the restoration destination. The possible values are: new, inPlace, unknownFutureValue.
    #[serde(rename = "destinationType")]
    pub destination_type: Option<MicrosoftGraphDestinationType>,
    ///The list of directory object IDs that are added to the corresponding Exchange restore session in a bulk operation.
    #[serde(rename = "directoryObjectIds")]
    pub directory_object_ids: Option<Vec<Option<String>>>,
    ///Name of the addition request.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Error details are populated for resource resolution failures.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified this entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp when this entity was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The list of email addresses that are added to the corresponding Exchange restore session in a bulk operation.
    pub mailboxes: Option<Vec<Option<String>>>,
    ///The start and end date and time of the protection period.
    #[serde(rename = "protectionTimePeriod")]
    pub protection_time_period: Option<MicrosoftGraphTimePeriod>,
    ///Indicates which protection units to restore. This property isn't implemented yet. Future value; don't use.
    #[serde(rename = "protectionUnitIds")]
    pub protection_unit_ids: Option<Vec<Option<String>>>,
    ///Indicates which restore point to return. The possible values are: oldest, latest, unknownFutureValue.
    #[serde(rename = "restorePointPreference")]
    pub restore_point_preference: Option<MicrosoftGraphRestorePointPreference>,
    pub status: Option<MicrosoftGraphRestoreArtifactsBulkRequestStatus>,
    ///The type of the restore point. The possible values are: none, fastRestore, unknownFutureValue.
    pub tags: Option<MicrosoftGraphRestorePointTags>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMailboxSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Folder ID of an archive folder for the user.
    #[serde(rename = "archiveFolder")]
    pub archive_folder: Option<String>,
    ///Configuration settings to automatically notify the sender of an incoming email with a message from the signed-in user.
    #[serde(rename = "automaticRepliesSetting")]
    pub automatic_replies_setting: Option<MicrosoftGraphAutomaticRepliesSetting>,
    ///The date format for the user's mailbox.
    #[serde(rename = "dateFormat")]
    pub date_format: Option<String>,
    ///If the user has a calendar delegate, this specifies whether the delegate, mailbox owner, or both receive meeting messages and meeting responses. Possible values are: sendToDelegateAndInformationToPrincipal, sendToDelegateAndPrincipal, sendToDelegateOnly.
    #[serde(rename = "delegateMeetingMessageDeliveryOptions")]
    pub delegate_meeting_message_delivery_options: Option<
        MicrosoftGraphDelegateMeetingMessageDeliveryOptions,
    >,
    ///The locale information for the user, including the preferred language and country/region.
    pub language: Option<MicrosoftGraphLocaleInfo>,
    ///The time format for the user's mailbox.
    #[serde(rename = "timeFormat")]
    pub time_format: Option<String>,
    ///The default time zone for the user's mailbox.
    #[serde(rename = "timeZone")]
    pub time_zone: Option<String>,
    ///The purpose of the mailbox. Differentiates a mailbox for a single user from a shared mailbox and equipment mailbox in Exchange Online. Possible values are: user, linked, shared, room, equipment, others, unknownFutureValue. Read-only.
    #[serde(rename = "userPurpose")]
    pub user_purpose: Option<MicrosoftGraphUserPurpose>,
    ///The days of the week and hours in a specific time zone that the user works.
    #[serde(rename = "workingHours")]
    pub working_hours: Option<MicrosoftGraphWorkingHours>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMalware {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Contains the virus details for the malware facet.
    pub description: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMalwareState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Provider-generated malware category (for example, trojan, ransomware, etc.).
    pub category: Option<String>,
    ///Provider-generated malware family (for example, 'wannacry,' 'notpetya,' etc.).
    pub family: Option<String>,
    ///Provider-generated malware variant name (for example, Trojan:Win32/Powessere.H).
    pub name: Option<String>,
    ///Provider-determined severity of this malware.
    pub severity: Option<String>,
    ///Indicates whether the detected file (malware/vulnerability) was running at the time of detection or was detected at rest on the disk.
    #[serde(rename = "wasRunning")]
    pub was_running: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMalwareStateForWindowsDevice {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.malwareStateForWindowsDevice".to_string())]
    pub odata_type: String,
    ///Indicates the number of times the malware is detected
    #[serde(rename = "detectionCount")]
    pub detection_count: Option<f64>,
    ///Indicates the name of the device being evaluated for malware state
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    ///Indicates execution status of the malware. Possible values are: unknown, blocked, allowed, running, notRunning. Defaults to unknown. Possible values are: unknown, blocked, allowed, running, notRunning.
    #[serde(rename = "executionState")]
    pub execution_state: Option<MicrosoftGraphWindowsMalwareExecutionState>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Initial detection datetime of the malware
    #[serde(rename = "initialDetectionDateTime")]
    pub initial_detection_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The last time this particular threat was changed
    #[serde(rename = "lastStateChangeDateTime")]
    pub last_state_change_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates threat status of the malware. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared. defaults to noStatusCleared. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
    #[serde(rename = "threatState")]
    pub threat_state: Option<MicrosoftGraphWindowsMalwareThreatState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedAndroidLobApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedAndroidLobApp".to_string())]
    pub odata_type: String,
    ///A managed (MAM) application's availability.
    #[serde(rename = "appAvailability")]
    pub app_availability: Option<MicrosoftGraphManagedAppAvailability>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The value for the minimum applicable operating system.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphAndroidMinimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The package identifier.
    #[serde(rename = "packageId")]
    pub package_id: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
    ///The Application's version.
    pub version: Option<String>,
    ///The version code of managed Android Line of Business (LoB) app.
    #[serde(rename = "versionCode")]
    pub version_code: Option<String>,
    ///The version name of managed Android Line of Business (LoB) app.
    #[serde(rename = "versionName")]
    pub version_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedAndroidStoreApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedAndroidStoreApp".to_string())]
    pub odata_type: String,
    ///A managed (MAM) application's availability.
    #[serde(rename = "appAvailability")]
    pub app_availability: Option<MicrosoftGraphManagedAppAvailability>,
    ///The Android AppStoreUrl.
    #[serde(rename = "appStoreUrl")]
    pub app_store_url: Option<String>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains properties for the minimum operating system required for an Android mobile app.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphAndroidMinimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The app's package ID.
    #[serde(rename = "packageId")]
    pub package_id: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The Application's version.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedApp".to_string())]
    pub odata_type: String,
    ///A managed (MAM) application's availability.
    #[serde(rename = "appAvailability")]
    pub app_availability: Option<MicrosoftGraphManagedAppAvailability>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The Application's version.
    pub version: Option<String>,
}
///A managed (MAM) application's availability.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphManagedAppAvailability {
    #[serde(rename = "global")]
    #[default]
    Global,
    #[serde(rename = "lineOfBusiness")]
    LineOfBusiness,
}
///Represents the level to which the device's clipboard may be shared between apps
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphManagedAppClipboardSharingLevel {
    #[serde(rename = "allApps")]
    #[default]
    AllApps,
    #[serde(rename = "managedAppsWithPasteIn")]
    ManagedAppsWithPasteIn,
    #[serde(rename = "managedApps")]
    ManagedApps,
    #[serde(rename = "blocked")]
    Blocked,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedAppConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedAppConfiguration".to_string())]
    pub odata_type: String,
    ///The date and time the policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A set of string key and string value pairs to be sent to apps for users to whom the configuration is scoped, unalterned by this service
    #[serde(rename = "customSettings")]
    pub custom_settings: Option<Vec<MicrosoftGraphKeyValuePair>>,
    ///The policy's description.
    pub description: Option<String>,
    ///Policy display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last time the policy was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Version of the entity.
    pub version: Option<String>,
}
///Represents the level to which app data is encrypted for managed apps
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphManagedAppDataEncryptionType {
    #[serde(rename = "useDeviceSettings")]
    #[default]
    UseDeviceSettings,
    #[serde(rename = "afterDeviceRestart")]
    AfterDeviceRestart,
    #[serde(rename = "whenDeviceLockedExceptOpenFiles")]
    WhenDeviceLockedExceptOpenFiles,
    #[serde(rename = "whenDeviceLocked")]
    WhenDeviceLocked,
}
///The storage locations where managed apps can potentially store their data.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphManagedAppDataStorageLocation {
    #[serde(rename = "oneDriveForBusiness")]
    #[default]
    OneDriveForBusiness,
    #[serde(rename = "sharePoint")]
    SharePoint,
    #[serde(rename = "box")]
    Box,
    #[serde(rename = "localStorage")]
    LocalStorage,
}
///Data can be transferred from/to these classes of apps
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphManagedAppDataTransferLevel {
    #[serde(rename = "allApps")]
    #[default]
    AllApps,
    #[serde(rename = "managedApps")]
    ManagedApps,
    #[serde(rename = "none")]
    None,
}
///The reason for which a user has been flagged
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphManagedAppFlaggedReason {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "rootedDevice")]
    RootedDevice,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedAppOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedAppOperation".to_string())]
    pub odata_type: String,
    ///The operation name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The last time the app operation was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The current state of the operation
    pub state: Option<String>,
    ///Version of the entity.
    pub version: Option<String>,
}
///Character set which is to be used for a user's app PIN
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphManagedAppPinCharacterSet {
    #[serde(rename = "numeric")]
    #[default]
    Numeric,
    #[serde(rename = "alphanumericAndSymbol")]
    AlphanumericAndSymbol,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedAppPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedAppPolicy".to_string())]
    pub odata_type: String,
    ///The date and time the policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The policy's description.
    pub description: Option<String>,
    ///Policy display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last time the policy was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Version of the entity.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedAppPolicyDeploymentSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedAppPolicyDeploymentSummary".to_string())]
    pub odata_type: String,
    ///Not yet documented
    #[serde(rename = "configurationDeployedUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub configuration_deployed_user_count: Option<f64>,
    ///Not yet documented
    #[serde(rename = "configurationDeploymentSummaryPerApp")]
    pub configuration_deployment_summary_per_app: Option<
        Vec<MicrosoftGraphManagedAppPolicyDeploymentSummaryPerApp>,
    >,
    ///Not yet documented
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Not yet documented
    #[serde(rename = "lastRefreshTime")]
    pub last_refresh_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Version of the entity.
    pub version: Option<String>,
}
///Represents policy deployment summary per app.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedAppPolicyDeploymentSummaryPerApp {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Number of users the policy is applied.
    #[serde(rename = "configurationAppliedUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub configuration_applied_user_count: Option<f64>,
    ///Deployment of an app.
    #[serde(rename = "mobileAppIdentifier")]
    pub mobile_app_identifier: Option<MicrosoftGraphMobileAppIdentifier>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedAppProtection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedAppProtection".to_string())]
    pub odata_type: String,
    ///Data storage locations where a user may store managed data.
    #[serde(rename = "allowedDataStorageLocations")]
    pub allowed_data_storage_locations: Option<
        Vec<MicrosoftGraphManagedAppDataStorageLocation>,
    >,
    ///Data can be transferred from/to these classes of apps
    #[serde(rename = "allowedInboundDataTransferSources")]
    pub allowed_inbound_data_transfer_sources: Option<
        MicrosoftGraphManagedAppDataTransferLevel,
    >,
    ///Represents the level to which the device's clipboard may be shared between apps
    #[serde(rename = "allowedOutboundClipboardSharingLevel")]
    pub allowed_outbound_clipboard_sharing_level: Option<
        MicrosoftGraphManagedAppClipboardSharingLevel,
    >,
    ///Data can be transferred from/to these classes of apps
    #[serde(rename = "allowedOutboundDataTransferDestinations")]
    pub allowed_outbound_data_transfer_destinations: Option<
        MicrosoftGraphManagedAppDataTransferLevel,
    >,
    ///Indicates whether contacts can be synced to the user's device.
    #[serde(rename = "contactSyncBlocked")]
    pub contact_sync_blocked: Option<bool>,
    ///The date and time the policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether the backup of a managed app's data is blocked.
    #[serde(rename = "dataBackupBlocked")]
    pub data_backup_blocked: Option<bool>,
    ///The policy's description.
    pub description: Option<String>,
    ///Indicates whether device compliance is required.
    #[serde(rename = "deviceComplianceRequired")]
    pub device_compliance_required: Option<bool>,
    ///Indicates whether use of the app pin is required if the device pin is set.
    #[serde(rename = "disableAppPinIfDevicePinIsSet")]
    pub disable_app_pin_if_device_pin_is_set: Option<bool>,
    ///Policy display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Indicates whether use of the fingerprint reader is allowed in place of a pin if PinRequired is set to True.
    #[serde(rename = "fingerprintBlocked")]
    pub fingerprint_blocked: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last time the policy was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Type of managed browser
    #[serde(rename = "managedBrowser")]
    pub managed_browser: Option<MicrosoftGraphManagedBrowserType>,
    ///Indicates whether internet links should be opened in the managed browser app, or any custom browser specified by CustomBrowserProtocol (for iOS) or CustomBrowserPackageId/CustomBrowserDisplayName (for Android)
    #[serde(rename = "managedBrowserToOpenLinksRequired")]
    pub managed_browser_to_open_links_required: Option<bool>,
    ///Maximum number of incorrect pin retry attempts before the managed app is either blocked or wiped.
    #[serde(rename = "maximumPinRetries")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub maximum_pin_retries: Option<f64>,
    ///Minimum pin length required for an app-level pin if PinRequired is set to True
    #[serde(rename = "minimumPinLength")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub minimum_pin_length: Option<f64>,
    ///Versions less than the specified version will block the managed app from accessing company data.
    #[serde(rename = "minimumRequiredAppVersion")]
    pub minimum_required_app_version: Option<String>,
    ///Versions less than the specified version will block the managed app from accessing company data.
    #[serde(rename = "minimumRequiredOsVersion")]
    pub minimum_required_os_version: Option<String>,
    ///Versions less than the specified version will result in warning message on the managed app.
    #[serde(rename = "minimumWarningAppVersion")]
    pub minimum_warning_app_version: Option<String>,
    ///Versions less than the specified version will result in warning message on the managed app from accessing company data.
    #[serde(rename = "minimumWarningOsVersion")]
    pub minimum_warning_os_version: Option<String>,
    ///Indicates whether organizational credentials are required for app use.
    #[serde(rename = "organizationalCredentialsRequired")]
    pub organizational_credentials_required: Option<bool>,
    ///TimePeriod before the all-level pin must be reset if PinRequired is set to True.
    #[serde(rename = "periodBeforePinReset")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_before_pin_reset: Option<String>,
    ///The period after which access is checked when the device is not connected to the internet.
    #[serde(rename = "periodOfflineBeforeAccessCheck")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_offline_before_access_check: Option<String>,
    ///The amount of time an app is allowed to remain disconnected from the internet before all managed data it is wiped.
    #[serde(rename = "periodOfflineBeforeWipeIsEnforced")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_offline_before_wipe_is_enforced: Option<String>,
    ///The period after which access is checked when the device is connected to the internet.
    #[serde(rename = "periodOnlineBeforeAccessCheck")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_online_before_access_check: Option<String>,
    ///Character set which is to be used for a user's app PIN
    #[serde(rename = "pinCharacterSet")]
    pub pin_character_set: Option<MicrosoftGraphManagedAppPinCharacterSet>,
    ///Indicates whether an app-level pin is required.
    #[serde(rename = "pinRequired")]
    pub pin_required: Option<bool>,
    ///Indicates whether printing is allowed from managed apps.
    #[serde(rename = "printBlocked")]
    pub print_blocked: Option<bool>,
    ///Indicates whether users may use the 'Save As' menu item to save a copy of protected files.
    #[serde(rename = "saveAsBlocked")]
    pub save_as_blocked: Option<bool>,
    ///Indicates whether simplePin is blocked.
    #[serde(rename = "simplePinBlocked")]
    pub simple_pin_blocked: Option<bool>,
    ///Version of the entity.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedAppRegistration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedAppRegistration".to_string())]
    pub odata_type: String,
    ///The app package Identifier
    #[serde(rename = "appIdentifier")]
    pub app_identifier: Option<MicrosoftGraphMobileAppIdentifier>,
    ///App version
    #[serde(rename = "applicationVersion")]
    pub application_version: Option<String>,
    ///Zero or more policys already applied on the registered app when it last synchronized with managment service.
    #[serde(rename = "appliedPolicies")]
    pub applied_policies: Option<Vec<MicrosoftGraphManagedAppPolicy>>,
    ///Date and time of creation
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Host device name
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    ///App management SDK generated tag, which helps relate apps hosted on the same device. Not guaranteed to relate apps in all conditions.
    #[serde(rename = "deviceTag")]
    pub device_tag: Option<String>,
    ///Host device type
    #[serde(rename = "deviceType")]
    pub device_type: Option<String>,
    ///Zero or more reasons an app registration is flagged. E.g. app running on rooted device
    #[serde(rename = "flaggedReasons")]
    pub flagged_reasons: Option<Vec<MicrosoftGraphManagedAppFlaggedReason>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Zero or more policies admin intended for the app as of now.
    #[serde(rename = "intendedPolicies")]
    pub intended_policies: Option<Vec<MicrosoftGraphManagedAppPolicy>>,
    ///Date and time of last the app synced with management service.
    #[serde(rename = "lastSyncDateTime")]
    pub last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///App management SDK version
    #[serde(rename = "managementSdkVersion")]
    pub management_sdk_version: Option<String>,
    ///Zero or more long running operations triggered on the app registration.
    pub operations: Option<Vec<MicrosoftGraphManagedAppOperation>>,
    ///Operating System version
    #[serde(rename = "platformVersion")]
    pub platform_version: Option<String>,
    ///The user Id to who this app registration belongs.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///Version of the entity.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedAppStatus {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedAppStatus".to_string())]
    pub odata_type: String,
    ///Friendly name of the status report.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Version of the entity.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedAppStatusRaw {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedAppStatusRaw".to_string())]
    pub odata_type: String,
    ///Status report content.
    pub content: Option<serde_json::Value>,
    ///Friendly name of the status report.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Version of the entity.
    pub version: Option<String>,
}
///Type of managed browser
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphManagedBrowserType {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "microsoftEdge")]
    MicrosoftEdge,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedDevice {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedDevice".to_string())]
    pub odata_type: String,
    ///The code that allows the Activation Lock on managed device to be bypassed. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity in LIST call. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.
    #[serde(rename = "activationLockBypassCode")]
    pub activation_lock_bypass_code: Option<String>,
    ///Android security patch level. This property is read-only.
    #[serde(rename = "androidSecurityPatchLevel")]
    pub android_security_patch_level: Option<String>,
    ///The unique identifier for the Azure Active Directory device. Read only. This property is read-only.
    #[serde(rename = "azureADDeviceId")]
    pub azure_addevice_id: Option<String>,
    ///Whether the device is Azure Active Directory registered. This property is read-only.
    #[serde(rename = "azureADRegistered")]
    pub azure_adregistered: Option<bool>,
    ///The DateTime when device compliance grace period expires. This property is read-only.
    #[serde(rename = "complianceGracePeriodExpirationDateTime")]
    pub compliance_grace_period_expiration_date_time: Option<
        chrono::DateTime<chrono::Utc>,
    >,
    ///Compliance state.
    #[serde(rename = "complianceState")]
    pub compliance_state: Option<MicrosoftGraphComplianceState>,
    ///ConfigrMgr client enabled features. This property is read-only.
    #[serde(rename = "configurationManagerClientEnabledFeatures")]
    pub configuration_manager_client_enabled_features: Option<
        MicrosoftGraphConfigurationManagerClientEnabledFeatures,
    >,
    ///List of ComplexType deviceActionResult objects. This property is read-only.
    #[serde(rename = "deviceActionResults")]
    pub device_action_results: Option<Vec<MicrosoftGraphDeviceActionResult>>,
    ///Device category
    #[serde(rename = "deviceCategory")]
    pub device_category: Option<MicrosoftGraphDeviceCategory>,
    ///Device category display name. Default is an empty string. Supports $filter operator 'eq' and 'or'. This property is read-only.
    #[serde(rename = "deviceCategoryDisplayName")]
    pub device_category_display_name: Option<String>,
    ///Device compliance policy states for this device.
    #[serde(rename = "deviceCompliancePolicyStates")]
    pub device_compliance_policy_states: Option<
        Vec<MicrosoftGraphDeviceCompliancePolicyState>,
    >,
    ///Device configuration states for this device.
    #[serde(rename = "deviceConfigurationStates")]
    pub device_configuration_states: Option<Vec<MicrosoftGraphDeviceConfigurationState>>,
    ///Possible ways of adding a mobile device to management.
    #[serde(rename = "deviceEnrollmentType")]
    pub device_enrollment_type: Option<MicrosoftGraphDeviceEnrollmentType>,
    ///The device health attestation state. This property is read-only.
    #[serde(rename = "deviceHealthAttestationState")]
    pub device_health_attestation_state: Option<
        MicrosoftGraphDeviceHealthAttestationState,
    >,
    ///Name of the device. This property is read-only.
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    ///Device registration status.
    #[serde(rename = "deviceRegistrationState")]
    pub device_registration_state: Option<MicrosoftGraphDeviceRegistrationState>,
    ///Whether the device is Exchange ActiveSync activated. This property is read-only.
    #[serde(rename = "easActivated")]
    pub eas_activated: Option<bool>,
    ///Exchange ActivationSync activation time of the device. This property is read-only.
    #[serde(rename = "easActivationDateTime")]
    pub eas_activation_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Exchange ActiveSync Id of the device. This property is read-only.
    #[serde(rename = "easDeviceId")]
    pub eas_device_id: Option<String>,
    ///Email(s) for the user associated with the device. This property is read-only.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<String>,
    ///Enrollment time of the device. Supports $filter operator 'lt' and 'gt'. This property is read-only.
    #[serde(rename = "enrolledDateTime")]
    pub enrolled_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Name of the enrollment profile assigned to the device. Default value is empty string, indicating no enrollment profile was assgined. This property is read-only.
    #[serde(rename = "enrollmentProfileName")]
    pub enrollment_profile_name: Option<String>,
    ///Indicates Ethernet MAC Address of the device. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity. Individual get call with select query options is needed to retrieve actual values. Example: deviceManagement/managedDevices({managedDeviceId})?$select=ethernetMacAddress Supports: $select. $Search is not supported. Read-only. This property is read-only.
    #[serde(rename = "ethernetMacAddress")]
    pub ethernet_mac_address: Option<String>,
    ///Device Exchange Access State.
    #[serde(rename = "exchangeAccessState")]
    pub exchange_access_state: Option<MicrosoftGraphDeviceManagementExchangeAccessState>,
    ///Device Exchange Access State Reason.
    #[serde(rename = "exchangeAccessStateReason")]
    pub exchange_access_state_reason: Option<
        MicrosoftGraphDeviceManagementExchangeAccessStateReason,
    >,
    ///Last time the device contacted Exchange. This property is read-only.
    #[serde(rename = "exchangeLastSuccessfulSyncDateTime")]
    pub exchange_last_successful_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Free Storage in Bytes. Default value is 0. Read-only. This property is read-only.
    #[serde(rename = "freeStorageSpaceInBytes")]
    pub free_storage_space_in_bytes: Option<f64>,
    ///Integrated Circuit Card Identifier, it is A SIM card's unique identification number. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.
    pub iccid: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///IMEI. This property is read-only.
    pub imei: Option<String>,
    ///Device encryption status. This property is read-only.
    #[serde(rename = "isEncrypted")]
    pub is_encrypted: Option<bool>,
    ///Device supervised status. This property is read-only.
    #[serde(rename = "isSupervised")]
    pub is_supervised: Option<bool>,
    ///Whether the device is jail broken or rooted. Default is an empty string. Supports $filter operator 'eq' and 'or'. This property is read-only.
    #[serde(rename = "jailBroken")]
    pub jail_broken: Option<String>,
    ///The date and time that the device last completed a successful sync with Intune. Supports $filter operator 'lt' and 'gt'. This property is read-only.
    #[serde(rename = "lastSyncDateTime")]
    pub last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///List of log collection requests
    #[serde(rename = "logCollectionRequests")]
    pub log_collection_requests: Option<Vec<MicrosoftGraphDeviceLogCollectionResponse>>,
    ///Automatically generated name to identify a device. Can be overwritten to a user friendly name.
    #[serde(rename = "managedDeviceName")]
    pub managed_device_name: Option<String>,
    ///Owner type of device.
    #[serde(rename = "managedDeviceOwnerType")]
    pub managed_device_owner_type: Option<MicrosoftGraphManagedDeviceOwnerType>,
    #[serde(rename = "managementAgent")]
    pub management_agent: Option<MicrosoftGraphManagementAgentType>,
    ///Reports device management certificate expiration date. This property is read-only.
    #[serde(rename = "managementCertificateExpirationDate")]
    pub management_certificate_expiration_date: Option<chrono::DateTime<chrono::Utc>>,
    ///Manufacturer of the device. This property is read-only.
    pub manufacturer: Option<String>,
    ///MEID. This property is read-only.
    pub meid: Option<String>,
    ///Model of the device. This property is read-only.
    pub model: Option<String>,
    ///Notes on the device created by IT Admin. Default is null. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported.
    pub notes: Option<String>,
    ///Operating system of the device. Windows, iOS, etc. This property is read-only.
    #[serde(rename = "operatingSystem")]
    pub operating_system: Option<String>,
    ///Operating system version of the device. This property is read-only.
    #[serde(rename = "osVersion")]
    pub os_version: Option<String>,
    ///Available health states for the Device Health API
    #[serde(rename = "partnerReportedThreatState")]
    pub partner_reported_threat_state: Option<
        MicrosoftGraphManagedDevicePartnerReportedHealthState,
    >,
    ///Phone number of the device. This property is read-only.
    #[serde(rename = "phoneNumber")]
    pub phone_number: Option<String>,
    ///Total Memory in Bytes. Default is 0. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. Read-only. This property is read-only.
    #[serde(rename = "physicalMemoryInBytes")]
    pub physical_memory_in_bytes: Option<f64>,
    ///An error string that identifies issues when creating Remote Assistance session objects. This property is read-only.
    #[serde(rename = "remoteAssistanceSessionErrorDetails")]
    pub remote_assistance_session_error_details: Option<String>,
    ///Url that allows a Remote Assistance session to be established with the device. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. This property is read-only.
    #[serde(rename = "remoteAssistanceSessionUrl")]
    pub remote_assistance_session_url: Option<String>,
    ///Reports if the managed iOS device is user approval enrollment. This property is read-only.
    #[serde(rename = "requireUserEnrollmentApproval")]
    pub require_user_enrollment_approval: Option<bool>,
    ///SerialNumber. This property is read-only.
    #[serde(rename = "serialNumber")]
    pub serial_number: Option<String>,
    ///Subscriber Carrier. This property is read-only.
    #[serde(rename = "subscriberCarrier")]
    pub subscriber_carrier: Option<String>,
    ///Total Storage in Bytes. This property is read-only.
    #[serde(rename = "totalStorageSpaceInBytes")]
    pub total_storage_space_in_bytes: Option<f64>,
    ///Unique Device Identifier for iOS and macOS devices. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.
    pub udid: Option<String>,
    ///User display name. This property is read-only.
    #[serde(rename = "userDisplayName")]
    pub user_display_name: Option<String>,
    ///Unique Identifier for the user associated with the device. This property is read-only.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///Device user principal name. This property is read-only.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
    ///The primary users associated with the managed device.
    pub users: Option<Vec<MicrosoftGraphUser>>,
    ///Wi-Fi MAC. This property is read-only.
    #[serde(rename = "wiFiMacAddress")]
    pub wi_fi_mac_address: Option<String>,
    ///The device protection status. This property is read-only.
    #[serde(rename = "windowsProtectionState")]
    pub windows_protection_state: Option<MicrosoftGraphWindowsProtectionState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedDeviceMobileAppConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedDeviceMobileAppConfiguration".to_string())]
    pub odata_type: String,
    ///The list of group assignemenets for app configration.
    pub assignments: Option<
        Vec<MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment>,
    >,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///App configuration device status summary.
    #[serde(rename = "deviceStatusSummary")]
    pub device_status_summary: Option<
        MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary,
    >,
    ///List of ManagedDeviceMobileAppConfigurationDeviceStatus.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<
        Vec<MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus>,
    >,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///the associated app.
    #[serde(rename = "targetedMobileApps")]
    pub targeted_mobile_apps: Option<Vec<Option<String>>>,
    ///App configuration user status summary.
    #[serde(rename = "userStatusSummary")]
    pub user_status_summary: Option<
        MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary,
    >,
    ///List of ManagedDeviceMobileAppConfigurationUserStatus.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<
        Vec<MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus>,
    >,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.managedDeviceMobileAppConfigurationAssignment".to_string()
    )]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Assignment target that the T&C policy is assigned to.
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.managedDeviceMobileAppConfigurationDeviceStatus".to_string()
    )]
    pub odata_type: String,
    ///The DateTime when device compliance grace period expires
    #[serde(rename = "complianceGracePeriodExpirationDateTime")]
    pub compliance_grace_period_expiration_date_time: Option<
        chrono::DateTime<chrono::Utc>,
    >,
    ///Device name of the DevicePolicyStatus.
    #[serde(rename = "deviceDisplayName")]
    pub device_display_name: Option<String>,
    ///The device model that is being reported
    #[serde(rename = "deviceModel")]
    pub device_model: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date time of the policy report.
    #[serde(rename = "lastReportedDateTime")]
    pub last_reported_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub status: Option<MicrosoftGraphComplianceStatus>,
    ///The User Name that is being reported
    #[serde(rename = "userName")]
    pub user_name: Option<String>,
    ///UserPrincipalName.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.managedDeviceMobileAppConfigurationDeviceSummary".to_string()
    )]
    pub odata_type: String,
    ///Version of the policy for that overview
    #[serde(rename = "configurationVersion")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub configuration_version: Option<f64>,
    ///Number of error devices
    #[serde(rename = "errorCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_count: Option<f64>,
    ///Number of failed devices
    #[serde(rename = "failedCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last update time
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Number of not applicable devices
    #[serde(rename = "notApplicableCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_count: Option<f64>,
    ///Number of pending devices
    #[serde(rename = "pendingCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_count: Option<f64>,
    ///Number of succeeded devices
    #[serde(rename = "successCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub success_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.managedDeviceMobileAppConfigurationUserStatus".to_string()
    )]
    pub odata_type: String,
    ///Devices count for that user.
    #[serde(rename = "devicesCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub devices_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date time of the policy report.
    #[serde(rename = "lastReportedDateTime")]
    pub last_reported_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub status: Option<MicrosoftGraphComplianceStatus>,
    ///User name of the DevicePolicyStatus.
    #[serde(rename = "userDisplayName")]
    pub user_display_name: Option<String>,
    ///UserPrincipalName.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.managedDeviceMobileAppConfigurationUserSummary".to_string()
    )]
    pub odata_type: String,
    ///Version of the policy for that overview
    #[serde(rename = "configurationVersion")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub configuration_version: Option<f64>,
    ///Number of error Users
    #[serde(rename = "errorCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_count: Option<f64>,
    ///Number of failed Users
    #[serde(rename = "failedCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last update time
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Number of not applicable users
    #[serde(rename = "notApplicableCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_count: Option<f64>,
    ///Number of pending Users
    #[serde(rename = "pendingCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pending_count: Option<f64>,
    ///Number of succeeded Users
    #[serde(rename = "successCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub success_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedDeviceOverview {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedDeviceOverview".to_string())]
    pub odata_type: String,
    ///Distribution of Exchange Access State in Intune
    #[serde(rename = "deviceExchangeAccessStateSummary")]
    pub device_exchange_access_state_summary: Option<
        MicrosoftGraphDeviceExchangeAccessStateSummary,
    >,
    ///Device operating system summary.
    #[serde(rename = "deviceOperatingSystemSummary")]
    pub device_operating_system_summary: Option<
        MicrosoftGraphDeviceOperatingSystemSummary,
    >,
    ///The number of devices enrolled in both MDM and EAS
    #[serde(rename = "dualEnrolledDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub dual_enrolled_device_count: Option<f64>,
    ///Total enrolled device count. Does not include PC devices managed via Intune PC Agent
    #[serde(rename = "enrolledDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub enrolled_device_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The number of devices enrolled in MDM
    #[serde(rename = "mdmEnrolledCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub mdm_enrolled_count: Option<f64>,
}
///Owner type of device.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphManagedDeviceOwnerType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "company")]
    Company,
    #[serde(rename = "personal")]
    Personal,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///Available health states for the Device Health API
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphManagedDevicePartnerReportedHealthState {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "activated")]
    Activated,
    #[serde(rename = "deactivated")]
    Deactivated,
    #[serde(rename = "secured")]
    Secured,
    #[serde(rename = "lowSeverity")]
    LowSeverity,
    #[serde(rename = "mediumSeverity")]
    MediumSeverity,
    #[serde(rename = "highSeverity")]
    HighSeverity,
    #[serde(rename = "unresponsive")]
    Unresponsive,
    #[serde(rename = "compromised")]
    Compromised,
    #[serde(rename = "misconfigured")]
    Misconfigured,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedEbook {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedEBook".to_string())]
    pub odata_type: String,
    ///The list of assignments for this eBook.
    pub assignments: Option<Vec<MicrosoftGraphManagedEbookAssignment>>,
    ///The date and time when the eBook file was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description.
    pub description: Option<String>,
    ///The list of installation states for this eBook.
    #[serde(rename = "deviceStates")]
    pub device_states: Option<Vec<MicrosoftGraphDeviceInstallState>>,
    ///Name of the eBook.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///Mobile App Install Summary.
    #[serde(rename = "installSummary")]
    pub install_summary: Option<MicrosoftGraphEBookInstallSummary>,
    ///Book cover.
    #[serde(rename = "largeCover")]
    pub large_cover: Option<MicrosoftGraphMimeContent>,
    ///The date and time when the eBook was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The date and time when the eBook was published.
    #[serde(rename = "publishedDateTime")]
    pub published_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Publisher.
    pub publisher: Option<String>,
    ///The list of installation states for this eBook.
    #[serde(rename = "userStateSummary")]
    pub user_state_summary: Option<Vec<MicrosoftGraphUserInstallStateSummary>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedEbookAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedEBookAssignment".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Possible values for the install intent chosen by the admin.
    #[serde(rename = "installIntent")]
    pub install_intent: Option<MicrosoftGraphInstallIntent>,
    ///The assignment target for eBook.
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedIoslobApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedIOSLobApp".to_string())]
    pub odata_type: String,
    ///A managed (MAM) application's availability.
    #[serde(rename = "appAvailability")]
    pub app_availability: Option<MicrosoftGraphManagedAppAvailability>,
    ///Contains properties of the possible iOS device types the mobile app can run on.
    #[serde(rename = "applicableDeviceType")]
    pub applicable_device_type: Option<MicrosoftGraphIosDeviceType>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The build number of managed iOS Line of Business (LoB) app.
    #[serde(rename = "buildNumber")]
    pub build_number: Option<String>,
    ///The Identity Name.
    #[serde(rename = "bundleId")]
    pub bundle_id: Option<String>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The expiration time.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The value for the minimum applicable operating system.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphIosMinimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
    ///The Application's version.
    pub version: Option<String>,
    ///The version number of managed iOS Line of Business (LoB) app.
    #[serde(rename = "versionNumber")]
    pub version_number: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedIosstoreApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedIOSStoreApp".to_string())]
    pub odata_type: String,
    ///A managed (MAM) application's availability.
    #[serde(rename = "appAvailability")]
    pub app_availability: Option<MicrosoftGraphManagedAppAvailability>,
    ///The Apple AppStoreUrl.
    #[serde(rename = "appStoreUrl")]
    pub app_store_url: Option<String>,
    ///Contains properties of the possible iOS device types the mobile app can run on.
    #[serde(rename = "applicableDeviceType")]
    pub applicable_device_type: Option<MicrosoftGraphIosDeviceType>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The app's Bundle ID.
    #[serde(rename = "bundleId")]
    pub bundle_id: Option<String>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains properties of the minimum operating system required for an iOS mobile app.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphIosMinimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The Application's version.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedMobileApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedMobileApp".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identifier for an app with it's operating system type.
    #[serde(rename = "mobileAppIdentifier")]
    pub mobile_app_identifier: Option<MicrosoftGraphMobileAppIdentifier>,
    ///Version of the entity.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphManagedMobileLobApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.managedMobileLobApp".to_string())]
    pub odata_type: String,
    ///A managed (MAM) application's availability.
    #[serde(rename = "appAvailability")]
    pub app_availability: Option<MicrosoftGraphManagedAppAvailability>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
    ///The Application's version.
    pub version: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphManagementAgentType {
    #[serde(rename = "eas")]
    #[default]
    Eas,
    #[serde(rename = "mdm")]
    Mdm,
    #[serde(rename = "easMdm")]
    EasMdm,
    #[serde(rename = "intuneClient")]
    IntuneClient,
    #[serde(rename = "easIntuneClient")]
    EasIntuneClient,
    #[serde(rename = "configurationManagerClient")]
    ConfigurationManagerClient,
    #[serde(rename = "configurationManagerClientMdm")]
    ConfigurationManagerClientMdm,
    #[serde(rename = "configurationManagerClientMdmEas")]
    ConfigurationManagerClientMdmEas,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "jamf")]
    Jamf,
    #[serde(rename = "googleCloudDevicePolicyController")]
    GoogleCloudDevicePolicyController,
    #[serde(rename = "microsoft365ManagedMdm")]
    Microsoft365ManagedMdm,
    #[serde(rename = "msSense")]
    MsSense,
}
///App configuration key types.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMdmAppConfigKeyType {
    #[serde(rename = "stringType")]
    #[default]
    StringType,
    #[serde(rename = "integerType")]
    IntegerType,
    #[serde(rename = "realType")]
    RealType,
    #[serde(rename = "booleanType")]
    BooleanType,
    #[serde(rename = "tokenType")]
    TokenType,
}
///Mobile device management authority.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMdmAuthority {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "intune")]
    Intune,
    #[serde(rename = "sccm")]
    Sccm,
    #[serde(rename = "office365")]
    Office365,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMdmWindowsInformationProtectionPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mdmWindowsInformationProtectionPolicy".to_string())]
    pub odata_type: String,
    ///Navigation property to list of security groups targeted for policy.
    pub assignments: Option<Vec<MicrosoftGraphTargetedManagedAppPolicyAssignment>>,
    ///Specifies whether to allow Azure RMS encryption for WIP
    #[serde(rename = "azureRightsManagementServicesAllowed")]
    pub azure_rights_management_services_allowed: Option<bool>,
    ///The date and time the policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies a recovery certificate that can be used for data recovery of encrypted files. This is the same as the data recovery agent(DRA) certificate for encrypting file system(EFS)
    #[serde(rename = "dataRecoveryCertificate")]
    pub data_recovery_certificate: Option<
        MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate,
    >,
    ///The policy's description.
    pub description: Option<String>,
    ///Policy display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Possible values for WIP Protection enforcement levels
    #[serde(rename = "enforcementLevel")]
    pub enforcement_level: Option<
        MicrosoftGraphWindowsInformationProtectionEnforcementLevel,
    >,
    ///Primary enterprise domain
    #[serde(rename = "enterpriseDomain")]
    pub enterprise_domain: Option<String>,
    ///Sets the enterprise IP ranges that define the computers in the enterprise network. Data that comes from those computers will be considered part of the enterprise and protected. These locations will be considered a safe destination for enterprise data to be shared to
    #[serde(rename = "enterpriseIPRanges")]
    pub enterprise_ipranges: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionIprangeCollection>,
    >,
    ///Boolean value that tells the client to accept the configured list and not to use heuristics to attempt to find other subnets. Default is false
    #[serde(rename = "enterpriseIPRangesAreAuthoritative")]
    pub enterprise_ipranges_are_authoritative: Option<bool>,
    ///This is the comma-separated list of internal proxy servers. For example, '157.54.14.28, 157.54.11.118, 10.202.14.167, 157.53.14.163, 157.69.210.59'. These proxies have been configured by the admin to connect to specific resources on the Internet. They are considered to be enterprise network locations. The proxies are only leveraged in configuring the EnterpriseProxiedDomains policy to force traffic to the matched domains through these proxies
    #[serde(rename = "enterpriseInternalProxyServers")]
    pub enterprise_internal_proxy_servers: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///This is the list of domains that comprise the boundaries of the enterprise. Data from one of these domains that is sent to a device will be considered enterprise data and protected These locations will be considered a safe destination for enterprise data to be shared to
    #[serde(rename = "enterpriseNetworkDomainNames")]
    pub enterprise_network_domain_names: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///List of enterprise domains to be protected
    #[serde(rename = "enterpriseProtectedDomainNames")]
    pub enterprise_protected_domain_names: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Contains a list of Enterprise resource domains hosted in the cloud that need to be protected. Connections to these resources are considered enterprise data. If a proxy is paired with a cloud resource, traffic to the cloud resource will be routed through the enterprise network via the denoted proxy server (on Port 80). A proxy server used for this purpose must also be configured using the EnterpriseInternalProxyServers policy
    #[serde(rename = "enterpriseProxiedDomains")]
    pub enterprise_proxied_domains: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection>,
    >,
    ///This is a list of proxy servers. Any server not on this list is considered non-enterprise
    #[serde(rename = "enterpriseProxyServers")]
    pub enterprise_proxy_servers: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Boolean value that tells the client to accept the configured list of proxies and not try to detect other work proxies. Default is false
    #[serde(rename = "enterpriseProxyServersAreAuthoritative")]
    pub enterprise_proxy_servers_are_authoritative: Option<bool>,
    ///Another way to input exempt apps through xml files
    #[serde(rename = "exemptAppLockerFiles")]
    pub exempt_app_locker_files: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionAppLockerFile>,
    >,
    ///Exempt applications can also access enterprise data, but the data handled by those applications are not protected. This is because some critical enterprise applications may have compatibility problems with encrypted data.
    #[serde(rename = "exemptApps")]
    pub exempt_apps: Option<Vec<MicrosoftGraphWindowsInformationProtectionApp>>,
    ///Determines whether overlays are added to icons for WIP protected files in Explorer and enterprise only app tiles in the Start menu. Starting in Windows 10, version 1703 this setting also configures the visibility of the WIP icon in the title bar of a WIP-protected app
    #[serde(rename = "iconsVisible")]
    pub icons_visible: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///This switch is for the Windows Search Indexer, to allow or disallow indexing of items
    #[serde(rename = "indexingEncryptedStoresOrItemsBlocked")]
    pub indexing_encrypted_stores_or_items_blocked: Option<bool>,
    ///Indicates if the policy is deployed to any inclusion groups or not.
    #[serde(rename = "isAssigned")]
    pub is_assigned: Option<bool>,
    ///Last time the policy was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///List of domain names that can used for work or personal resource
    #[serde(rename = "neutralDomainResources")]
    pub neutral_domain_resources: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Another way to input protected apps through xml files
    #[serde(rename = "protectedAppLockerFiles")]
    pub protected_app_locker_files: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionAppLockerFile>,
    >,
    ///Protected applications can access enterprise data and the data handled by those applications are protected with encryption
    #[serde(rename = "protectedApps")]
    pub protected_apps: Option<Vec<MicrosoftGraphWindowsInformationProtectionApp>>,
    ///Specifies whether the protection under lock feature (also known as encrypt under pin) should be configured
    #[serde(rename = "protectionUnderLockConfigRequired")]
    pub protection_under_lock_config_required: Option<bool>,
    ///This policy controls whether to revoke the WIP keys when a device unenrolls from the management service. If set to 1 (Don't revoke keys), the keys will not be revoked and the user will continue to have access to protected files after unenrollment. If the keys are not revoked, there will be no revoked file cleanup subsequently.
    #[serde(rename = "revokeOnUnenrollDisabled")]
    pub revoke_on_unenroll_disabled: Option<bool>,
    ///TemplateID GUID to use for RMS encryption. The RMS template allows the IT admin to configure the details about who has access to RMS-protected file and how long they have access
    #[serde(rename = "rightsManagementServicesTemplateId")]
    pub rights_management_services_template_id: Option<uuid::Uuid>,
    ///Specifies a list of file extensions, so that files with these extensions are encrypted when copying from an SMB share within the corporate boundary
    #[serde(rename = "smbAutoEncryptedFileExtensions")]
    pub smb_auto_encrypted_file_extensions: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Version of the entity.
    pub version: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphMediaConfig { discriminator : "@odata.type", variants :
    [("#microsoft.graph.appHostedMediaConfig", MicrosoftGraphAppHostedMediaConfig(Box <
    MicrosoftGraphAppHostedMediaConfig >)), ("#microsoft.graph.serviceHostedMediaConfig",
    MicrosoftGraphServiceHostedMediaConfig(Box < MicrosoftGraphServiceHostedMediaConfig
    >))], fallback : MediaConfig(Box < MicrosoftGraphMediaConfigBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaConfigBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaContentRatingAustralia {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Movies rating labels in Australia
    #[serde(rename = "movieRating")]
    pub movie_rating: Option<MicrosoftGraphRatingAustraliaMoviesType>,
    ///TV content rating labels in Australia
    #[serde(rename = "tvRating")]
    pub tv_rating: Option<MicrosoftGraphRatingAustraliaTelevisionType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaContentRatingCanada {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Movies rating labels in Canada
    #[serde(rename = "movieRating")]
    pub movie_rating: Option<MicrosoftGraphRatingCanadaMoviesType>,
    ///TV content rating labels in Canada
    #[serde(rename = "tvRating")]
    pub tv_rating: Option<MicrosoftGraphRatingCanadaTelevisionType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaContentRatingFrance {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Movies rating labels in France
    #[serde(rename = "movieRating")]
    pub movie_rating: Option<MicrosoftGraphRatingFranceMoviesType>,
    ///TV content rating labels in France
    #[serde(rename = "tvRating")]
    pub tv_rating: Option<MicrosoftGraphRatingFranceTelevisionType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaContentRatingGermany {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Movies rating labels in Germany
    #[serde(rename = "movieRating")]
    pub movie_rating: Option<MicrosoftGraphRatingGermanyMoviesType>,
    ///TV content rating labels in Germany
    #[serde(rename = "tvRating")]
    pub tv_rating: Option<MicrosoftGraphRatingGermanyTelevisionType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaContentRatingIreland {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Movies rating labels in Ireland
    #[serde(rename = "movieRating")]
    pub movie_rating: Option<MicrosoftGraphRatingIrelandMoviesType>,
    ///TV content rating labels in Ireland
    #[serde(rename = "tvRating")]
    pub tv_rating: Option<MicrosoftGraphRatingIrelandTelevisionType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaContentRatingJapan {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Movies rating labels in Japan
    #[serde(rename = "movieRating")]
    pub movie_rating: Option<MicrosoftGraphRatingJapanMoviesType>,
    ///TV content rating labels in Japan
    #[serde(rename = "tvRating")]
    pub tv_rating: Option<MicrosoftGraphRatingJapanTelevisionType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaContentRatingNewZealand {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Movies rating labels in New Zealand
    #[serde(rename = "movieRating")]
    pub movie_rating: Option<MicrosoftGraphRatingNewZealandMoviesType>,
    ///TV content rating labels in New Zealand
    #[serde(rename = "tvRating")]
    pub tv_rating: Option<MicrosoftGraphRatingNewZealandTelevisionType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaContentRatingUnitedKingdom {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Movies rating labels in United Kingdom
    #[serde(rename = "movieRating")]
    pub movie_rating: Option<MicrosoftGraphRatingUnitedKingdomMoviesType>,
    ///TV content rating labels in United Kingdom
    #[serde(rename = "tvRating")]
    pub tv_rating: Option<MicrosoftGraphRatingUnitedKingdomTelevisionType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaContentRatingUnitedStates {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Movies rating labels in United States
    #[serde(rename = "movieRating")]
    pub movie_rating: Option<MicrosoftGraphRatingUnitedStatesMoviesType>,
    ///TV content rating labels in United States
    #[serde(rename = "tvRating")]
    pub tv_rating: Option<MicrosoftGraphRatingUnitedStatesTelevisionType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMediaDirection {
    #[serde(rename = "inactive")]
    #[default]
    Inactive,
    #[serde(rename = "sendOnly")]
    SendOnly,
    #[serde(rename = "receiveOnly")]
    ReceiveOnly,
    #[serde(rename = "sendReceive")]
    SendReceive,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Optional. Used to uniquely identity the resource. If passed in, the prompt uri is against this resourceId as a key.
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
    ///Path to the prompt that will be played. Currently supports only Wave file (.wav) format, single-channel, 16-bit samples with a 16,000 (16 KHz) sampling rate.
    pub uri: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMediaState {
    #[serde(rename = "active")]
    #[default]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMediaStream {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub direction: Option<MicrosoftGraphMediaDirection>,
    ///The media stream label.
    pub label: Option<String>,
    #[serde(rename = "mediaType")]
    pub media_type: Option<MicrosoftGraphModality>,
    ///If the media is muted by the server.
    #[serde(rename = "serverMuted")]
    pub server_muted: Option<bool>,
    ///The source ID.
    #[serde(rename = "sourceId")]
    pub source_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMeetingAttendanceReport {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.meetingAttendanceReport".to_string())]
    pub odata_type: String,
    ///List of attendance records of an attendance report. Read-only.
    #[serde(rename = "attendanceRecords")]
    pub attendance_records: Option<Vec<MicrosoftGraphAttendanceRecord>>,
    ///The external information of a virtual event. Returned only for event organizers or coorganizers. Read-only.
    #[serde(rename = "externalEventInformation")]
    pub external_event_information: Option<
        Vec<MicrosoftGraphVirtualEventExternalInformation>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///UTC time when the meeting ended. Read-only.
    #[serde(rename = "meetingEndDateTime")]
    pub meeting_end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///UTC time when the meeting started. Read-only.
    #[serde(rename = "meetingStartDateTime")]
    pub meeting_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Total number of participants. Read-only.
    #[serde(rename = "totalParticipantCount")]
    pub total_participant_count: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMeetingAudience {
    #[serde(rename = "everyone")]
    #[default]
    Everyone,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMeetingChatHistoryDefaultMode {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMeetingChatMode {
    #[serde(rename = "enabled")]
    #[default]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "limited")]
    Limited,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
discriminated_enum! {
    pub enum MicrosoftGraphMeetingInfo { discriminator : "@odata.type", variants :
    [("#microsoft.graph.joinMeetingIdMeetingInfo",
    MicrosoftGraphJoinMeetingIdMeetingInfo(Box < MicrosoftGraphJoinMeetingIdMeetingInfo
    >)), ("#microsoft.graph.organizerMeetingInfo", MicrosoftGraphOrganizerMeetingInfo(Box
    < MicrosoftGraphOrganizerMeetingInfo >)), ("#microsoft.graph.tokenMeetingInfo",
    MicrosoftGraphTokenMeetingInfo(Box < MicrosoftGraphTokenMeetingInfo >))], fallback :
    MeetingInfo(Box < MicrosoftGraphMeetingInfoBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMeetingInfoBase {}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMeetingLiveShareOptions {
    #[serde(rename = "enabled")]
    #[default]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMeetingMessageType {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "meetingRequest")]
    MeetingRequest,
    #[serde(rename = "meetingCancelled")]
    MeetingCancelled,
    #[serde(rename = "meetingAccepted")]
    MeetingAccepted,
    #[serde(rename = "meetingTenativelyAccepted")]
    MeetingTenativelyAccepted,
    #[serde(rename = "meetingDeclined")]
    MeetingDeclined,
}
discriminated_enum! {
    pub enum MicrosoftGraphMeetingParticipantInfo { discriminator : "@odata.type",
    variants : [("#microsoft.graph.virtualEventPresenterInfo",
    MicrosoftGraphVirtualEventPresenterInfo(Box < MicrosoftGraphVirtualEventPresenterInfo
    >))], fallback : MeetingParticipantInfo(Box <
    MicrosoftGraphMeetingParticipantInfoBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMeetingParticipantInfoBase {
    ///Identity information of the participant.
    pub identity: Option<MicrosoftGraphIdentitySet>,
    ///Specifies the participant's role in the meeting.
    pub role: Option<MicrosoftGraphOnlineMeetingRole>,
    ///User principal name of the participant.
    pub upn: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMeetingParticipants {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Information about the meeting attendees.
    pub attendees: Option<Vec<MicrosoftGraphMeetingParticipantInfo>>,
    ///Information about the meeting organizer.
    pub organizer: Option<MicrosoftGraphMeetingParticipantInfo>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMeetingPolicyUpdatedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.meetingPolicyUpdatedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///Represents whether the meeting chat is enabled or not.
    #[serde(rename = "meetingChatEnabled")]
    pub meeting_chat_enabled: Option<bool>,
    ///Unique identifier of the meeting chat.
    #[serde(rename = "meetingChatId")]
    pub meeting_chat_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMeetingRequestType {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "newMeetingRequest")]
    NewMeetingRequest,
    #[serde(rename = "fullUpdate")]
    FullUpdate,
    #[serde(rename = "informationalUpdate")]
    InformationalUpdate,
    #[serde(rename = "silentUpdate")]
    SilentUpdate,
    #[serde(rename = "outdated")]
    Outdated,
    #[serde(rename = "principalWantsCopy")]
    PrincipalWantsCopy,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMembersAddedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.membersAddedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///List of members added.
    pub members: Option<Vec<MicrosoftGraphTeamworkUserIdentity>>,
    ///The timestamp that denotes how far back a conversation's history is shared with the conversation members.
    #[serde(rename = "visibleHistoryStartDateTime")]
    pub visible_history_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMembersDeletedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.membersDeletedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///List of members deleted.
    pub members: Option<Vec<MicrosoftGraphTeamworkUserIdentity>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMembersJoinedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.membersJoinedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///List of members who joined the chat.
    pub members: Option<Vec<MicrosoftGraphTeamworkUserIdentity>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMembersLeftEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.membersLeftEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///List of members who left the chat.
    pub members: Option<Vec<MicrosoftGraphTeamworkUserIdentity>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMembershipOutlierInsight {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.membershipOutlierInsight".to_string())]
    pub odata_type: String,
    ///Navigation link to the container directory object. For example, to a group.
    pub container: Option<MicrosoftGraphDirectoryObject>,
    ///Indicates the identifier of the container, for example, a group ID.
    #[serde(rename = "containerId")]
    pub container_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates when the insight was created.
    #[serde(rename = "insightCreatedDateTime")]
    pub insight_created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Navigation link to a member object who modified the record. For example, to a user.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<Box<MicrosoftGraphUser>>,
    ///Navigation link to a member object. For example, to a user.
    pub member: Option<MicrosoftGraphDirectoryObject>,
    ///Indicates the identifier of the user.
    #[serde(rename = "memberId")]
    pub member_id: Option<String>,
    #[serde(rename = "outlierContainerType")]
    pub outlier_container_type: Option<MicrosoftGraphOutlierContainerType>,
    #[serde(rename = "outlierMemberType")]
    pub outlier_member_type: Option<MicrosoftGraphOutlierMemberType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMessage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.message".to_string())]
    pub odata_type: String,
    ///The fileAttachment and itemAttachment attachments for the message.
    pub attachments: Option<Vec<MicrosoftGraphAttachment>>,
    ///The Bcc: recipients for the message.
    #[serde(rename = "bccRecipients")]
    pub bcc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body.
    pub body: Option<MicrosoftGraphItemBody>,
    ///The first 255 characters of the message body. It is in text format.
    #[serde(rename = "bodyPreview")]
    pub body_preview: Option<String>,
    ///The categories associated with the item
    pub categories: Option<Vec<Option<String>>>,
    ///The Cc: recipients for the message.
    #[serde(rename = "ccRecipients")]
    pub cc_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
    #[serde(rename = "changeKey")]
    pub change_key: Option<String>,
    ///The ID of the conversation the email belongs to.
    #[serde(rename = "conversationId")]
    pub conversation_id: Option<String>,
    ///Indicates the position of the message within the conversation.
    #[serde(rename = "conversationIndex")]
    pub conversation_index: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of open extensions defined for the message. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///Indicates the status, start date, due date, or completion date for the message.
    pub flag: Option<MicrosoftGraphFollowupFlag>,
    ///The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender property, except for sharing or delegation scenarios. The value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
    pub from: Option<MicrosoftGraphRecipient>,
    ///Indicates whether the message has attachments. This property doesn't include inline attachments, so if a message contains only inline attachments, this property is false. To verify the existence of inline attachments, parse the body property to look for a src attribute, such as <IMG src='cid:image001.jpg@01D26CD8.6C05F070'>.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The importance of the message. The possible values are: low, normal, and high.
    pub importance: Option<MicrosoftGraphImportance>,
    ///The classification of the message for the user, based on inferred relevance or importance, or on an explicit override. The possible values are: focused or other.
    #[serde(rename = "inferenceClassification")]
    pub inference_classification: Option<MicrosoftGraphInferenceClassificationType>,
    ///A collection of message headers defined by RFC5322. The set includes message headers indicating the network path taken by a message from the sender to the recipient. It can also contain custom message headers that hold app data for the message.  Returned only on applying a $select query option. Read-only.
    #[serde(rename = "internetMessageHeaders")]
    pub internet_message_headers: Option<Vec<MicrosoftGraphInternetMessageHeader>>,
    ///The message ID in the format specified by RFC2822.
    #[serde(rename = "internetMessageId")]
    pub internet_message_id: Option<String>,
    ///Indicates whether a read receipt is requested for the message.
    #[serde(rename = "isDeliveryReceiptRequested")]
    pub is_delivery_receipt_requested: Option<bool>,
    ///Indicates whether the message is a draft. A message is a draft if it hasn't been sent yet.
    #[serde(rename = "isDraft")]
    pub is_draft: Option<bool>,
    ///Indicates whether the message has been read.
    #[serde(rename = "isRead")]
    pub is_read: Option<bool>,
    ///Indicates whether a read receipt is requested for the message.
    #[serde(rename = "isReadReceiptRequested")]
    pub is_read_receipt_requested: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of multi-value extended properties defined for the message. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///The unique identifier for the message's parent mailFolder.
    #[serde(rename = "parentFolderId")]
    pub parent_folder_id: Option<String>,
    ///The date and time the message was received.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "receivedDateTime")]
    pub received_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The email addresses to use when replying.
    #[serde(rename = "replyTo")]
    pub reply_to: Option<Vec<MicrosoftGraphRecipient>>,
    ///The account that is used to generate the message. In most cases, this value is the same as the from property. You can set this property to a different value when sending a message from a shared mailbox, for a shared calendar, or as a delegate. In any case, the value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
    pub sender: Option<MicrosoftGraphRecipient>,
    ///The date and time the message was sent.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "sentDateTime")]
    pub sent_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of single-value extended properties defined for the message. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
    ///The subject of the message.
    pub subject: Option<String>,
    ///The To: recipients for the message.
    #[serde(rename = "toRecipients")]
    pub to_recipients: Option<Vec<MicrosoftGraphRecipient>>,
    ///The part of the body of the message that is unique to the current message. uniqueBody is not returned by default but can be retrieved for a given message by use of the ?$select=uniqueBody query. It can be in HTML or text format.
    #[serde(rename = "uniqueBody")]
    pub unique_body: Option<MicrosoftGraphItemBody>,
    ///The URL to open the message in Outlook on the web.You can append an ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to 0, the browser shows the message in the Outlook on the web review pane.The message opens in the browser if you are signed in to your mailbox via Outlook on the web. You are prompted to sign in if you are not already signed in with the browser.This URL cannot be accessed from within an iFrame.
    #[serde(rename = "webLink")]
    pub web_link: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMessageActionFlag {
    #[serde(rename = "any")]
    #[default]
    Any,
    #[serde(rename = "call")]
    Call,
    #[serde(rename = "doNotForward")]
    DoNotForward,
    #[serde(rename = "followUp")]
    FollowUp,
    #[serde(rename = "fyi")]
    Fyi,
    #[serde(rename = "forward")]
    Forward,
    #[serde(rename = "noResponseNecessary")]
    NoResponseNecessary,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "reply")]
    Reply,
    #[serde(rename = "replyToAll")]
    ReplyToAll,
    #[serde(rename = "review")]
    Review,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMessageCollectionResponse {
    #[serde(rename = "@odata.count")]
    pub odata_count: Option<i64>,
    #[serde(rename = "@odata.nextLink")]
    pub odata_next_link: Option<String>,
    pub value: Option<Vec<MicrosoftGraphMessage>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMessagePinnedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.messagePinnedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Date and time when the event occurred.
    #[serde(rename = "eventDateTime")]
    pub event_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMessageRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.messageRule".to_string())]
    pub odata_type: String,
    ///Actions to be taken on a message when the corresponding conditions are fulfilled.
    pub actions: Option<MicrosoftGraphMessageRuleActions>,
    ///Conditions that when fulfilled trigger the corresponding actions for that rule.
    pub conditions: Option<MicrosoftGraphMessageRulePredicates>,
    ///The display name of the rule.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Exception conditions for the rule.
    pub exceptions: Option<MicrosoftGraphMessageRulePredicates>,
    ///Indicates whether the rule is in an error condition. Read-only.
    #[serde(rename = "hasError")]
    pub has_error: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the rule is enabled to be applied to messages.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Indicates if the rule is read-only and cannot be modified or deleted by the rules REST API.
    #[serde(rename = "isReadOnly")]
    pub is_read_only: Option<bool>,
    ///Indicates the order in which the rule is executed, among other rules.
    pub sequence: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMessageRuleActions {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A list of categories to be assigned to a message.
    #[serde(rename = "assignCategories")]
    pub assign_categories: Option<Vec<Option<String>>>,
    ///The ID of a folder that a message is to be copied to.
    #[serde(rename = "copyToFolder")]
    pub copy_to_folder: Option<String>,
    ///Indicates whether a message should be moved to the Deleted Items folder.
    pub delete: Option<bool>,
    ///The email addresses of the recipients to which a message should be forwarded as an attachment.
    #[serde(rename = "forwardAsAttachmentTo")]
    pub forward_as_attachment_to: Option<Vec<MicrosoftGraphRecipient>>,
    ///The email addresses of the recipients to which a message should be forwarded.
    #[serde(rename = "forwardTo")]
    pub forward_to: Option<Vec<MicrosoftGraphRecipient>>,
    ///Indicates whether a message should be marked as read.
    #[serde(rename = "markAsRead")]
    pub mark_as_read: Option<bool>,
    ///Sets the importance of the message, which can be: low, normal, high.
    #[serde(rename = "markImportance")]
    pub mark_importance: Option<MicrosoftGraphImportance>,
    ///The ID of the folder that a message will be moved to.
    #[serde(rename = "moveToFolder")]
    pub move_to_folder: Option<String>,
    ///Indicates whether a message should be permanently deleted and not saved to the Deleted Items folder.
    #[serde(rename = "permanentDelete")]
    pub permanent_delete: Option<bool>,
    ///The email addresses to which a message should be redirected.
    #[serde(rename = "redirectTo")]
    pub redirect_to: Option<Vec<MicrosoftGraphRecipient>>,
    ///Indicates whether subsequent rules should be evaluated.
    #[serde(rename = "stopProcessingRules")]
    pub stop_processing_rules: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMessageRuleCollectionResponse {
    #[serde(rename = "@odata.count")]
    pub odata_count: Option<i64>,
    #[serde(rename = "@odata.nextLink")]
    pub odata_next_link: Option<String>,
    pub value: Option<Vec<MicrosoftGraphMessageRule>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMessageRulePredicates {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents the strings that should appear in the body of an incoming message in order for the condition or exception to apply.
    #[serde(rename = "bodyContains")]
    pub body_contains: Option<Vec<Option<String>>>,
    ///Represents the strings that should appear in the body or subject of an incoming message in order for the condition or exception to apply.
    #[serde(rename = "bodyOrSubjectContains")]
    pub body_or_subject_contains: Option<Vec<Option<String>>>,
    ///Represents the categories that an incoming message should be labeled with in order for the condition or exception to apply.
    pub categories: Option<Vec<Option<String>>>,
    ///Represents the specific sender email addresses of an incoming message in order for the condition or exception to apply.
    #[serde(rename = "fromAddresses")]
    pub from_addresses: Option<Vec<MicrosoftGraphRecipient>>,
    ///Indicates whether an incoming message must have attachments in order for the condition or exception to apply.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///Represents the strings that appear in the headers of an incoming message in order for the condition or exception to apply.
    #[serde(rename = "headerContains")]
    pub header_contains: Option<Vec<Option<String>>>,
    ///The importance that is stamped on an incoming message in order for the condition or exception to apply: low, normal, high.
    pub importance: Option<MicrosoftGraphImportance>,
    ///Indicates whether an incoming message must be an approval request in order for the condition or exception to apply.
    #[serde(rename = "isApprovalRequest")]
    pub is_approval_request: Option<bool>,
    ///Indicates whether an incoming message must be automatically forwarded in order for the condition or exception to apply.
    #[serde(rename = "isAutomaticForward")]
    pub is_automatic_forward: Option<bool>,
    ///Indicates whether an incoming message must be an auto reply in order for the condition or exception to apply.
    #[serde(rename = "isAutomaticReply")]
    pub is_automatic_reply: Option<bool>,
    ///Indicates whether an incoming message must be encrypted in order for the condition or exception to apply.
    #[serde(rename = "isEncrypted")]
    pub is_encrypted: Option<bool>,
    ///Indicates whether an incoming message must be a meeting request in order for the condition or exception to apply.
    #[serde(rename = "isMeetingRequest")]
    pub is_meeting_request: Option<bool>,
    ///Indicates whether an incoming message must be a meeting response in order for the condition or exception to apply.
    #[serde(rename = "isMeetingResponse")]
    pub is_meeting_response: Option<bool>,
    ///Indicates whether an incoming message must be a non-delivery report in order for the condition or exception to apply.
    #[serde(rename = "isNonDeliveryReport")]
    pub is_non_delivery_report: Option<bool>,
    ///Indicates whether an incoming message must be permission controlled (RMS-protected) in order for the condition or exception to apply.
    #[serde(rename = "isPermissionControlled")]
    pub is_permission_controlled: Option<bool>,
    ///Indicates whether an incoming message must be a read receipt in order for the condition or exception to apply.
    #[serde(rename = "isReadReceipt")]
    pub is_read_receipt: Option<bool>,
    ///Indicates whether an incoming message must be S/MIME-signed in order for the condition or exception to apply.
    #[serde(rename = "isSigned")]
    pub is_signed: Option<bool>,
    ///Indicates whether an incoming message must be a voice mail in order for the condition or exception to apply.
    #[serde(rename = "isVoicemail")]
    pub is_voicemail: Option<bool>,
    ///Represents the flag-for-action value that appears on an incoming message in order for the condition or exception to apply. The possible values are: any, call, doNotForward, followUp, fyi, forward, noResponseNecessary, read, reply, replyToAll, review.
    #[serde(rename = "messageActionFlag")]
    pub message_action_flag: Option<MicrosoftGraphMessageActionFlag>,
    ///Indicates whether the owner of the mailbox must not be a recipient of an incoming message in order for the condition or exception to apply.
    #[serde(rename = "notSentToMe")]
    pub not_sent_to_me: Option<bool>,
    ///Represents the strings that appear in either the toRecipients or ccRecipients properties of an incoming message in order for the condition or exception to apply.
    #[serde(rename = "recipientContains")]
    pub recipient_contains: Option<Vec<Option<String>>>,
    ///Represents the strings that appear in the from property of an incoming message in order for the condition or exception to apply.
    #[serde(rename = "senderContains")]
    pub sender_contains: Option<Vec<Option<String>>>,
    ///Represents the sensitivity level that must be stamped on an incoming message in order for the condition or exception to apply. The possible values are: normal, personal, private, confidential.
    pub sensitivity: Option<MicrosoftGraphSensitivity>,
    ///Indicates whether the owner of the mailbox must be in the ccRecipients property of an incoming message in order for the condition or exception to apply.
    #[serde(rename = "sentCcMe")]
    pub sent_cc_me: Option<bool>,
    ///Indicates whether the owner of the mailbox must be the only recipient in an incoming message in order for the condition or exception to apply.
    #[serde(rename = "sentOnlyToMe")]
    pub sent_only_to_me: Option<bool>,
    ///Represents the email addresses that an incoming message must have been sent to in order for the condition or exception to apply.
    #[serde(rename = "sentToAddresses")]
    pub sent_to_addresses: Option<Vec<MicrosoftGraphRecipient>>,
    ///Indicates whether the owner of the mailbox must be in the toRecipients property of an incoming message in order for the condition or exception to apply.
    #[serde(rename = "sentToMe")]
    pub sent_to_me: Option<bool>,
    ///Indicates whether the owner of the mailbox must be in either a toRecipients or ccRecipients property of an incoming message in order for the condition or exception to apply.
    #[serde(rename = "sentToOrCcMe")]
    pub sent_to_or_cc_me: Option<bool>,
    ///Represents the strings that appear in the subject of an incoming message in order for the condition or exception to apply.
    #[serde(rename = "subjectContains")]
    pub subject_contains: Option<Vec<Option<String>>>,
    ///Represents the minimum and maximum sizes (in kilobytes) that an incoming message must fall in between in order for the condition or exception to apply.
    #[serde(rename = "withinSizeRange")]
    pub within_size_range: Option<MicrosoftGraphSizeRange>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMessageSecurityState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "connectingIP")]
    pub connecting_ip: Option<String>,
    #[serde(rename = "deliveryAction")]
    pub delivery_action: Option<String>,
    #[serde(rename = "deliveryLocation")]
    pub delivery_location: Option<String>,
    pub directionality: Option<String>,
    #[serde(rename = "internetMessageId")]
    pub internet_message_id: Option<String>,
    #[serde(rename = "messageFingerprint")]
    pub message_fingerprint: Option<String>,
    #[serde(rename = "messageReceivedDateTime")]
    pub message_received_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "messageSubject")]
    pub message_subject: Option<String>,
    #[serde(rename = "networkMessageId")]
    pub network_message_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMessageUnpinnedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.messageUnpinnedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Date and time when the event occurred.
    #[serde(rename = "eventDateTime")]
    pub event_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMetaDataKeyStringPair {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Key of the meta data.
    pub key: Option<String>,
    ///Value of the meta data.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMicrosoftAccountUserConversationMember {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.microsoftAccountUserConversationMember".to_string())]
    pub odata_type: String,
    ///The display name of the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The roles for that user. This property contains more qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member shouldn't have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role.
    pub roles: Option<Vec<Option<String>>>,
    ///Microsoft Account ID of the user.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.
    #[serde(rename = "visibleHistoryStartDateTime")]
    pub visible_history_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.microsoftAuthenticatorAuthenticationMethod".to_string())]
    pub odata_type: String,
    ///The date and time that this app was registered. This property is null if the device isn't registered for passwordless Phone Sign-In.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The registered device on which Microsoft Authenticator resides. This property is null if the device isn't registered for passwordless Phone Sign-In.
    pub device: Option<MicrosoftGraphDevice>,
    ///Tags containing app metadata.
    #[serde(rename = "deviceTag")]
    pub device_tag: Option<String>,
    ///The name of the device on which this app is registered.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Numerical version of this instance of the Authenticator app.
    #[serde(rename = "phoneAppVersion")]
    pub phone_app_version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.microsoftAuthenticatorAuthenticationMethodConfiguration".to_string(

        )
    )]
    pub odata_type: String,
    ///Groups of users that are excluded from a policy.
    #[serde(rename = "excludeTargets")]
    pub exclude_targets: Option<Vec<MicrosoftGraphExcludeTarget>>,
    ///A collection of Microsoft Authenticator settings such as application context and location context, and whether they are enabled for all users or specific users only.
    #[serde(rename = "featureSettings")]
    pub feature_settings: Option<MicrosoftGraphMicrosoftAuthenticatorFeatureSettings>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of groups that are enabled to use the authentication method. Expanded by default.
    #[serde(rename = "includeTargets")]
    pub include_targets: Option<
        Vec<MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodTarget>,
    >,
    #[serde(rename = "isSoftwareOathEnabled")]
    pub is_software_oath_enabled: Option<bool>,
    ///The state of the policy. Possible values are: enabled, disabled.
    pub state: Option<MicrosoftGraphAuthenticationMethodState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodTarget {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.microsoftAuthenticatorAuthenticationMethodTarget".to_string()
    )]
    pub odata_type: String,
    #[serde(rename = "authenticationMode")]
    pub authentication_mode: Option<
        MicrosoftGraphMicrosoftAuthenticatorAuthenticationMode,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines if the user is enforced to register the authentication method.
    #[serde(rename = "isRegistrationRequired")]
    pub is_registration_required: Option<bool>,
    #[serde(rename = "targetType")]
    pub target_type: Option<MicrosoftGraphAuthenticationMethodTargetType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMicrosoftAuthenticatorAuthenticationMode {
    #[serde(rename = "deviceBasedPush")]
    #[default]
    DeviceBasedPush,
    #[serde(rename = "push")]
    Push,
    #[serde(rename = "any")]
    Any,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMicrosoftAuthenticatorFeatureSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Determines whether the user's Authenticator app shows them the client app they're signing into.
    #[serde(rename = "displayAppInformationRequiredState")]
    pub display_app_information_required_state: Option<
        MicrosoftGraphAuthenticationMethodFeatureConfiguration,
    >,
    ///Determines whether the user's Authenticator app shows them the geographic location of where the authentication request originated from.
    #[serde(rename = "displayLocationInformationRequiredState")]
    pub display_location_information_required_state: Option<
        MicrosoftGraphAuthenticationMethodFeatureConfiguration,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMicrosoftCustomTrainingSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.microsoftCustomTrainingSetting".to_string())]
    pub odata_type: String,
    ///The completion date and time of the training. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "completionDateTime")]
    pub completion_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Type of setting. Possible values are: microsoftCustom, microsoftManaged, noTraining, custom, unknownFutureValue.
    #[serde(rename = "settingType")]
    pub setting_type: Option<MicrosoftGraphTrainingSettingType>,
    ///The mapping details of the associated training.
    #[serde(rename = "trainingAssignmentMappings")]
    pub training_assignment_mappings: Option<
        Vec<MicrosoftGraphMicrosoftTrainingAssignmentMapping>,
    >,
    ///The training completion duration that needs to be provided before scheduling the training. Possible values are: week, fortnite, month, unknownFutureValue.
    #[serde(rename = "trainingCompletionDuration")]
    pub training_completion_duration: Option<MicrosoftGraphTrainingCompletionDuration>,
}
///The enum to specify the channels for Microsoft Edge apps.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMicrosoftEdgeChannel {
    #[serde(rename = "dev")]
    #[default]
    Dev,
    #[serde(rename = "beta")]
    Beta,
    #[serde(rename = "stable")]
    Stable,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMicrosoftManagedDesktop {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates the provisioning policy associated with Microsoft Managed Desktop settings. Possible values are: notManaged, premiumManaged, standardManaged, starterManaged, unknownFutureValue. The default is notManaged.
    #[serde(rename = "managedType")]
    pub managed_type: Option<MicrosoftGraphMicrosoftManagedDesktopType>,
    ///The name of the Microsoft Managed Desktop profile that the Windows 365 Cloud PC is associated with.
    pub profile: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMicrosoftManagedDesktopType {
    #[serde(rename = "notManaged")]
    #[default]
    NotManaged,
    #[serde(rename = "premiumManaged")]
    PremiumManaged,
    #[serde(rename = "standardManaged")]
    StandardManaged,
    #[serde(rename = "starterManaged")]
    StarterManaged,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMicrosoftManagedTrainingSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.microsoftManagedTrainingSetting".to_string())]
    pub odata_type: String,
    ///The completion date for the training. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "completionDateTime")]
    pub completion_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Type of setting. Possible values are: microsoftCustom, microsoftManaged, noTraining, custom, unknownFutureValue.
    #[serde(rename = "settingType")]
    pub setting_type: Option<MicrosoftGraphTrainingSettingType>,
    ///The training completion duration that needs to be provided before scheduling the training. The possible values are: week, fortnite, month, unknownFutureValue.
    #[serde(rename = "trainingCompletionDuration")]
    pub training_completion_duration: Option<MicrosoftGraphTrainingCompletionDuration>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMicrosoftStoreForBusinessApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.microsoftStoreForBusinessApp".to_string())]
    pub odata_type: String,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "licenseType")]
    pub license_type: Option<MicrosoftGraphMicrosoftStoreForBusinessLicenseType>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The app package identifier
    #[serde(rename = "packageIdentityName")]
    pub package_identity_name: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The app product key
    #[serde(rename = "productKey")]
    pub product_key: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total number of Microsoft Store for Business licenses.
    #[serde(rename = "totalLicenseCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_license_count: Option<f64>,
    ///The number of Microsoft Store for Business licenses in use.
    #[serde(rename = "usedLicenseCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub used_license_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMicrosoftStoreForBusinessAppAssignmentSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.microsoftStoreForBusinessAppAssignmentSettings".to_string()
    )]
    pub odata_type: String,
    ///Whether or not to use device execution context for Microsoft Store for Business mobile app.
    #[serde(rename = "useDeviceContext")]
    pub use_device_context: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMicrosoftStoreForBusinessLicenseType {
    #[serde(rename = "offline")]
    #[default]
    Offline,
    #[serde(rename = "online")]
    Online,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMicrosoftTrainingAssignmentMapping {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.microsoftTrainingAssignmentMapping".to_string())]
    pub odata_type: String,
    ///A user collection that specifies to whom the training should be assigned. Possible values are: none, allUsers, clickedPayload, compromised, reportedPhish, readButNotClicked, didNothing, unknownFutureValue.
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<Vec<MicrosoftGraphTrainingAssignedTo>>,
    ///Type of setting. Possible values are: microsoftCustom, microsoftManaged, noTraining, custom, unknownFutureValue.
    #[serde(rename = "settingType")]
    pub setting_type: Option<MicrosoftGraphTrainingSettingType>,
    pub training: Option<MicrosoftGraphTraining>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMigrationStatus {
    #[serde(rename = "ready")]
    #[default]
    Ready,
    #[serde(rename = "needsReview")]
    NeedsReview,
    #[serde(rename = "additionalStepsRequired")]
    AdditionalStepsRequired,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///Contains properties for a generic mime content.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMimeContent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates the content mime type.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
    ///The byte array that contains the actual content.
    pub value: Option<String>,
}
///Possible values for Miracast channel.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMiracastChannel {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "one")]
    One,
    #[serde(rename = "two")]
    Two,
    #[serde(rename = "three")]
    Three,
    #[serde(rename = "four")]
    Four,
    #[serde(rename = "five")]
    Five,
    #[serde(rename = "six")]
    Six,
    #[serde(rename = "seven")]
    Seven,
    #[serde(rename = "eight")]
    Eight,
    #[serde(rename = "nine")]
    Nine,
    #[serde(rename = "ten")]
    Ten,
    #[serde(rename = "eleven")]
    Eleven,
    #[serde(rename = "thirtySix")]
    ThirtySix,
    #[serde(rename = "forty")]
    Forty,
    #[serde(rename = "fortyFour")]
    FortyFour,
    #[serde(rename = "fortyEight")]
    FortyEight,
    #[serde(rename = "oneHundredFortyNine")]
    OneHundredFortyNine,
    #[serde(rename = "oneHundredFiftyThree")]
    OneHundredFiftyThree,
    #[serde(rename = "oneHundredFiftySeven")]
    OneHundredFiftySeven,
    #[serde(rename = "oneHundredSixtyOne")]
    OneHundredSixtyOne,
    #[serde(rename = "oneHundredSixtyFive")]
    OneHundredSixtyFive,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mobileApp".to_string())]
    pub odata_type: String,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileAppAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mobileAppAssignment".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Possible values for the install intent chosen by the admin.
    pub intent: Option<MicrosoftGraphInstallIntent>,
    ///The settings for target assignment defined by the admin.
    pub settings: Option<MicrosoftGraphMobileAppAssignmentSettings>,
    ///The target group assignment defined by the admin.
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
///Abstract class to contain properties used to assign a mobile app to a group.
discriminated_enum! {
    pub enum MicrosoftGraphMobileAppAssignmentSettings { discriminator : "@odata.type",
    variants : [("#microsoft.graph.iosDdmLobAppAssignmentSettings",
    MicrosoftGraphIosDdmLobAppAssignmentSettings(Box <
    MicrosoftGraphIosDdmLobAppAssignmentSettings >)),
    ("#microsoft.graph.iosLobAppAssignmentSettings",
    MicrosoftGraphIosLobAppAssignmentSettings(Box <
    MicrosoftGraphIosLobAppAssignmentSettings >)),
    ("#microsoft.graph.iosStoreAppAssignmentSettings",
    MicrosoftGraphIosStoreAppAssignmentSettings(Box <
    MicrosoftGraphIosStoreAppAssignmentSettings >)),
    ("#microsoft.graph.iosVppAppAssignmentSettings",
    MicrosoftGraphIosVppAppAssignmentSettings(Box <
    MicrosoftGraphIosVppAppAssignmentSettings >)),
    ("#microsoft.graph.macOsLobAppAssignmentSettings",
    MicrosoftGraphMacOsLobAppAssignmentSettings(Box <
    MicrosoftGraphMacOsLobAppAssignmentSettings >)),
    ("#microsoft.graph.microsoftStoreForBusinessAppAssignmentSettings",
    MicrosoftGraphMicrosoftStoreForBusinessAppAssignmentSettings(Box <
    MicrosoftGraphMicrosoftStoreForBusinessAppAssignmentSettings >)),
    ("#microsoft.graph.win32LobAppAssignmentSettings",
    MicrosoftGraphWin32LobAppAssignmentSettings(Box <
    MicrosoftGraphWin32LobAppAssignmentSettings >)),
    ("#microsoft.graph.windowsAppXAppAssignmentSettings",
    MicrosoftGraphWindowsAppXappAssignmentSettings(Box <
    MicrosoftGraphWindowsAppXappAssignmentSettings >)),
    ("#microsoft.graph.windowsUniversalAppXAppAssignmentSettings",
    MicrosoftGraphWindowsUniversalAppXappAssignmentSettings(Box <
    MicrosoftGraphWindowsUniversalAppXappAssignmentSettings >))], fallback :
    MobileAppAssignmentSettings(Box < MicrosoftGraphMobileAppAssignmentSettingsBase >), }
}
///Abstract class to contain properties used to assign a mobile app to a group.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileAppAssignmentSettingsBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileAppCategory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mobileAppCategory".to_string())]
    pub odata_type: String,
    ///The name of the app category.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time the mobileAppCategory was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileAppContent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mobileAppContent".to_string())]
    pub odata_type: String,
    ///The collection of contained apps in a MobileLobApp acting as a package.
    #[serde(rename = "containedApps")]
    pub contained_apps: Option<Vec<MicrosoftGraphMobileContainedApp>>,
    ///The list of files for this app content version.
    pub files: Option<Vec<MicrosoftGraphMobileAppContentFile>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileAppContentFile {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mobileAppContentFile".to_string())]
    pub odata_type: String,
    ///The Azure Storage URI.
    #[serde(rename = "azureStorageUri")]
    pub azure_storage_uri: Option<String>,
    ///The time the Azure storage Uri expires.
    #[serde(rename = "azureStorageUriExpirationDateTime")]
    pub azure_storage_uri_expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The time the file was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A value indicating whether the file is committed.
    #[serde(rename = "isCommitted")]
    pub is_committed: Option<bool>,
    ///Indicates whether this content file is a dependency for the main content file. TRUE means that the content file is a dependency, FALSE means that the content file is not a dependency and is the main content file. Defaults to FALSE.
    #[serde(rename = "isDependency")]
    pub is_dependency: Option<bool>,
    ///The manifest information.
    pub manifest: Option<String>,
    ///the file name.
    pub name: Option<String>,
    ///The size of the file prior to encryption.
    pub size: Option<f64>,
    ///The size of the file after encryption.
    #[serde(rename = "sizeEncrypted")]
    pub size_encrypted: Option<f64>,
    ///Contains properties for upload request states.
    #[serde(rename = "uploadState")]
    pub upload_state: Option<MicrosoftGraphMobileAppContentFileUploadState>,
}
///Contains properties for upload request states.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMobileAppContentFileUploadState {
    #[serde(rename = "success")]
    #[default]
    Success,
    #[serde(rename = "transientError")]
    TransientError,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "azureStorageUriRequestSuccess")]
    AzureStorageUriRequestSuccess,
    #[serde(rename = "azureStorageUriRequestPending")]
    AzureStorageUriRequestPending,
    #[serde(rename = "azureStorageUriRequestFailed")]
    AzureStorageUriRequestFailed,
    #[serde(rename = "azureStorageUriRequestTimedOut")]
    AzureStorageUriRequestTimedOut,
    #[serde(rename = "azureStorageUriRenewalSuccess")]
    AzureStorageUriRenewalSuccess,
    #[serde(rename = "azureStorageUriRenewalPending")]
    AzureStorageUriRenewalPending,
    #[serde(rename = "azureStorageUriRenewalFailed")]
    AzureStorageUriRenewalFailed,
    #[serde(rename = "azureStorageUriRenewalTimedOut")]
    AzureStorageUriRenewalTimedOut,
    #[serde(rename = "commitFileSuccess")]
    CommitFileSuccess,
    #[serde(rename = "commitFilePending")]
    CommitFilePending,
    #[serde(rename = "commitFileFailed")]
    CommitFileFailed,
    #[serde(rename = "commitFileTimedOut")]
    CommitFileTimedOut,
}
///The identifier for a mobile app.
discriminated_enum! {
    pub enum MicrosoftGraphMobileAppIdentifier { discriminator : "@odata.type", variants
    : [("#microsoft.graph.androidMobileAppIdentifier",
    MicrosoftGraphAndroidMobileAppIdentifier(Box <
    MicrosoftGraphAndroidMobileAppIdentifier >)),
    ("#microsoft.graph.iosMobileAppIdentifier", MicrosoftGraphIosMobileAppIdentifier(Box
    < MicrosoftGraphIosMobileAppIdentifier >))], fallback : MobileAppIdentifier(Box <
    MicrosoftGraphMobileAppIdentifierBase >), }
}
///The identifier for a mobile app.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileAppIdentifierBase {}
///Contains properties used to determine when to offer an app to devices and when to install the app on devices.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileAppInstallTimeSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The time at which the app should be installed.
    #[serde(rename = "deadlineDateTime")]
    pub deadline_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The time at which the app should be available for installation.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Whether the local device time or UTC time should be used when determining the available and deadline times.
    #[serde(rename = "useLocalTime")]
    pub use_local_time: Option<bool>,
}
///Indicates the publishing state of an app.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMobileAppPublishingState {
    #[serde(rename = "notPublished")]
    #[default]
    NotPublished,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "published")]
    Published,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileAppRelationship {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mobileAppRelationship".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The display name of the app that is the source of the mobile app relationship entity. For example: Orca. Maximum length is 500 characters. Read-Only. Supports: $select. Does not support $search, $filter, $orderBy. This property is read-only.
    #[serde(rename = "sourceDisplayName")]
    pub source_display_name: Option<String>,
    ///The display version of the app that is the source of the mobile app relationship entity. For example 1.0.12 or 1.2203.156 or 3. Read-Only. Supports: $select. Does not support $search, $filter, $orderBy. This property is read-only.
    #[serde(rename = "sourceDisplayVersion")]
    pub source_display_version: Option<String>,
    ///The unique app identifier of the source of the mobile app relationship entity. For example: 2dbc75b9-e993-4e4d-a071-91ac5a218672. If null during relationship creation, then it will be populated with parent Id. Read-Only. Supports: $select. Does not support $search, $filter, $orderBy. This property is read-only.
    #[serde(rename = "sourceId")]
    pub source_id: Option<String>,
    ///The publisher display name of the app that is the source of the mobile app relationship entity. For example: Fabrikam. Maximum length is 500 characters. Read-Only. Supports: $select. Does not support $search, $filter, $orderBy. This property is read-only.
    #[serde(rename = "sourcePublisherDisplayName")]
    pub source_publisher_display_name: Option<String>,
    ///The display name of the app that is the target of the mobile app relationship entity. For example: Firefox Setup 52.0.2 32bit.intunewin. Maximum length is 500 characters. Read-Only. Returned by default. Supports: $select. Does not support $search, $filter, $orderBy. This property is read-only.
    #[serde(rename = "targetDisplayName")]
    pub target_display_name: Option<String>,
    ///The display version of the app that is the target of the mobile app relationship entity. For example 1.0 or 1.2203.156. Read-Only. Returned by default. Supports: $select. Does not support $search, $filter, $orderBy. This property is read-only.
    #[serde(rename = "targetDisplayVersion")]
    pub target_display_version: Option<String>,
    ///The unique app identifier of the target of the mobile app relationship entity. For example: 2dbc75b9-e993-4e4d-a071-91ac5a218672. Read-Only. Returned by default. Supports: $select. Does not support $search, $filter, $orderBy.
    #[serde(rename = "targetId")]
    pub target_id: Option<String>,
    ///The publisher display name of the app that is the target of the mobile app relationship entity. For example: Fabrikam. Maximum length is 500 characters. Read-Only. Supports: $select. Does not support $search, $filter, $orderBy. This property is read-only.
    #[serde(rename = "targetPublisherDisplayName")]
    pub target_publisher_display_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileAppTroubleshootingEvent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mobileAppTroubleshootingEvent".to_string())]
    pub odata_type: String,
    ///Indicates collection of App Log Upload Request.
    #[serde(rename = "appLogCollectionRequests")]
    pub app_log_collection_requests: Option<Vec<MicrosoftGraphAppLogCollectionRequest>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileContainedApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mobileContainedApp".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileLobApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mobileLobApp".to_string())]
    pub odata_type: String,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMobileThreatDefenseConnector {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.mobileThreatDefenseConnector".to_string())]
    pub odata_type: String,
    ///When TRUE, indicates the Mobile Threat Defense partner may collect metadata about installed applications from Intune for IOS devices. When FALSE, indicates the Mobile Threat Defense partner may not collect metadata about installed applications from Intune for IOS devices. Default value is FALSE.
    #[serde(rename = "allowPartnerToCollectIOSApplicationMetadata")]
    pub allow_partner_to_collect_iosapplication_metadata: Option<bool>,
    ///When TRUE, indicates the Mobile Threat Defense partner may collect metadata about personally installed applications from Intune for IOS devices. When FALSE, indicates the Mobile Threat Defense partner may not collect metadata about personally installed applications from Intune for IOS devices. Default value is FALSE.
    #[serde(rename = "allowPartnerToCollectIOSPersonalApplicationMetadata")]
    pub allow_partner_to_collect_iospersonal_application_metadata: Option<bool>,
    ///For Android, set whether Intune must receive data from the Mobile Threat Defense partner prior to marking a device compliant
    #[serde(rename = "androidDeviceBlockedOnMissingPartnerData")]
    pub android_device_blocked_on_missing_partner_data: Option<bool>,
    ///For Android, set whether data from the Mobile Threat Defense partner should be used during compliance evaluations
    #[serde(rename = "androidEnabled")]
    pub android_enabled: Option<bool>,
    ///When TRUE, inidicates that data from the Mobile Threat Defense partner can be used during Mobile Application Management (MAM) evaluations for Android devices. When FALSE, inidicates that data from the Mobile Threat Defense partner should not be used during Mobile Application Management (MAM) evaluations for Android devices. Only one partner per platform may be enabled for Mobile Application Management (MAM) evaluation. Default value is FALSE.
    #[serde(rename = "androidMobileApplicationManagementEnabled")]
    pub android_mobile_application_management_enabled: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///For IOS, set whether Intune must receive data from the Mobile Threat Defense partner prior to marking a device compliant
    #[serde(rename = "iosDeviceBlockedOnMissingPartnerData")]
    pub ios_device_blocked_on_missing_partner_data: Option<bool>,
    ///For IOS, get or set whether data from the Mobile Threat Defense partner should be used during compliance evaluations
    #[serde(rename = "iosEnabled")]
    pub ios_enabled: Option<bool>,
    ///When TRUE, inidicates that data from the Mobile Threat Defense partner can be used during Mobile Application Management (MAM) evaluations for IOS devices. When FALSE, inidicates that data from the Mobile Threat Defense partner should not be used during Mobile Application Management (MAM) evaluations for IOS devices. Only one partner per platform may be enabled for Mobile Application Management (MAM) evaluation. Default value is FALSE.
    #[serde(rename = "iosMobileApplicationManagementEnabled")]
    pub ios_mobile_application_management_enabled: Option<bool>,
    ///DateTime of last Heartbeat recieved from the Mobile Threat Defense partner
    #[serde(rename = "lastHeartbeatDateTime")]
    pub last_heartbeat_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///When TRUE, inidicates that configuration profile management via Microsoft Defender for Endpoint is enabled. When FALSE, inidicates that configuration profile management via Microsoft Defender for Endpoint is disabled. Default value is FALSE.
    #[serde(rename = "microsoftDefenderForEndpointAttachEnabled")]
    pub microsoft_defender_for_endpoint_attach_enabled: Option<bool>,
    ///Partner state of this tenant.
    #[serde(rename = "partnerState")]
    pub partner_state: Option<MicrosoftGraphMobileThreatPartnerTenantState>,
    ///Get or Set days the per tenant tolerance to unresponsiveness for this partner integration
    #[serde(rename = "partnerUnresponsivenessThresholdInDays")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub partner_unresponsiveness_threshold_in_days: Option<f64>,
    ///Get or set whether to block devices on the enabled platforms that do not meet the minimum version requirements of the Mobile Threat Defense partner
    #[serde(rename = "partnerUnsupportedOsVersionBlocked")]
    pub partner_unsupported_os_version_blocked: Option<bool>,
    ///When TRUE, inidicates that Intune must receive data from the Mobile Threat Defense partner prior to marking a device compliant for Windows. When FALSE, inidicates that Intune may make a device compliant without receiving data from the Mobile Threat Defense partner for Windows. Default value is FALSE.
    #[serde(rename = "windowsDeviceBlockedOnMissingPartnerData")]
    pub windows_device_blocked_on_missing_partner_data: Option<bool>,
    ///When TRUE, inidicates that data from the Mobile Threat Defense partner can be used during compliance evaluations for Windows. When FALSE, inidicates that data from the Mobile Threat Defense partner should not be used during compliance evaluations for Windows. Default value is FALSE.
    #[serde(rename = "windowsEnabled")]
    pub windows_enabled: Option<bool>,
}
///Partner state of this tenant.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMobileThreatPartnerTenantState {
    #[serde(rename = "unavailable")]
    #[default]
    Unavailable,
    #[serde(rename = "available")]
    Available,
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "unresponsive")]
    Unresponsive,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphModality {
    #[serde(rename = "audio")]
    #[default]
    Audio,
    #[serde(rename = "video")]
    Video,
    #[serde(rename = "videoBasedScreenSharing")]
    VideoBasedScreenSharing,
    #[serde(rename = "data")]
    Data,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphModifiedProperty {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates the property name of the target attribute that was changed.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Indicates the updated value for the propery.
    #[serde(rename = "newValue")]
    pub new_value: Option<String>,
    ///Indicates the previous value (before the update) for the property.
    #[serde(rename = "oldValue")]
    pub old_value: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMultiFactorAuthConfiguration {
    #[serde(rename = "notRequired")]
    #[default]
    NotRequired,
    #[serde(rename = "required")]
    Required,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMultiTenantOrganization {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.multiTenantOrganization".to_string())]
    pub odata_type: String,
    ///Date when multitenant organization was created. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description of the multitenant organization.
    pub description: Option<String>,
    ///Display name of the multitenant organization.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Defines the status of a tenant joining a multitenant organization.
    #[serde(rename = "joinRequest")]
    pub join_request: Option<MicrosoftGraphMultiTenantOrganizationJoinRequestRecord>,
    ///State of the multitenant organization. The possible values are: active, inactive, unknownFutureValue. active indicates the multitenant organization is created. inactive indicates the multitenant organization isn't created. Read-only.
    pub state: Option<MicrosoftGraphMultiTenantOrganizationState>,
    ///Defines tenants added to a multitenant organization.
    pub tenants: Option<Vec<MicrosoftGraphMultiTenantOrganizationMember>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMultiTenantOrganizationIdentitySyncPolicyTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.multiTenantOrganizationIdentitySyncPolicyTemplate".to_string()
    )]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "templateApplicationLevel")]
    pub template_application_level: Option<MicrosoftGraphTemplateApplicationLevel>,
    ///Defines whether users can be synchronized from the partner tenant.
    #[serde(rename = "userSyncInbound")]
    pub user_sync_inbound: Option<MicrosoftGraphCrossTenantUserSyncInbound>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMultiTenantOrganizationJoinRequestRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.multiTenantOrganizationJoinRequestRecord".to_string())]
    pub odata_type: String,
    ///Tenant ID of the Microsoft Entra tenant that added a tenant to the multitenant organization. To reset a failed join request, set addedByTenantId to 00000000-0000-0000-0000-000000000000. Required.
    #[serde(rename = "addedByTenantId")]
    pub added_by_tenant_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///State of the tenant in the multitenant organization. The possible values are: pending, active, removed, unknownFutureValue. Tenants in the pending state must join the multitenant organization to participate in the multitenant organization. Tenants in the active state can participate in the multitenant organization. Tenants in the removed state are in the process of being removed from the multitenant organization. Read-only.
    #[serde(rename = "memberState")]
    pub member_state: Option<MicrosoftGraphMultiTenantOrganizationMemberState>,
    ///Role of the tenant in the multitenant organization. The possible values are: owner, member (default), unknownFutureValue. Tenants with the owner role can manage the multitenant organization. There can be multiple tenants with the owner role in a multitenant organization. Tenants with the member role can participate in a multitenant organization.
    pub role: Option<MicrosoftGraphMultiTenantOrganizationMemberRole>,
    ///Details of the processing status for a tenant joining a multitenant organization. Read-only.
    #[serde(rename = "transitionDetails")]
    pub transition_details: Option<
        MicrosoftGraphMultiTenantOrganizationJoinRequestTransitionDetails,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMultiTenantOrganizationJoinRequestTransitionDetails {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///State of the tenant in the multitenant organization currently being processed. The possible values are: pending, active, removed, unknownFutureValue. Read-only.
    #[serde(rename = "desiredMemberState")]
    pub desired_member_state: Option<MicrosoftGraphMultiTenantOrganizationMemberState>,
    ///Details that explain the processing status if any. Read-only.
    pub details: Option<String>,
    ///Processing state of the asynchronous job. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue. Read-only.
    pub status: Option<MicrosoftGraphMultiTenantOrganizationMemberProcessingStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMultiTenantOrganizationMember {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.multiTenantOrganizationMember".to_string())]
    pub odata_type: String,
    ///Tenant ID of the tenant that added the tenant to the multitenant organization. Read-only.
    #[serde(rename = "addedByTenantId")]
    pub added_by_tenant_id: Option<uuid::Uuid>,
    ///Date and time when the tenant was added to the multitenant organization. Read-only.
    #[serde(rename = "addedDateTime")]
    pub added_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of the tenant added to the multitenant organization.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Date and time when the tenant joined the multitenant organization. Read-only.
    #[serde(rename = "joinedDateTime")]
    pub joined_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Role of the tenant in the multitenant organization. The possible values are: owner, member (default), unknownFutureValue. Tenants with the owner role can manage the multitenant organization but tenants with the member role can only participate in a multitenant organization. There can be multiple tenants with the owner role in a multitenant organization.
    pub role: Option<MicrosoftGraphMultiTenantOrganizationMemberRole>,
    ///State of the tenant in the multitenant organization. The possible values are: pending, active, removed, unknownFutureValue. Tenants in the pending state must join the multitenant organization to participate in the multitenant organization. Tenants in the active state can participate in the multitenant organization. Tenants in the removed state are in the process of being removed from the multitenant organization. Read-only.
    pub state: Option<MicrosoftGraphMultiTenantOrganizationMemberState>,
    ///Tenant ID of the Microsoft Entra tenant added to the multitenant organization. Set at the time tenant is added.Supports $filter. Key.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    ///Details of the processing status for a tenant in a multitenant organization. Read-only. Nullable.
    #[serde(rename = "transitionDetails")]
    pub transition_details: Option<
        MicrosoftGraphMultiTenantOrganizationMemberTransitionDetails,
    >,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMultiTenantOrganizationMemberProcessingStatus {
    #[serde(rename = "notStarted")]
    #[default]
    NotStarted,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMultiTenantOrganizationMemberRole {
    #[serde(rename = "owner")]
    #[default]
    Owner,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMultiTenantOrganizationMemberState {
    #[serde(rename = "pending")]
    #[default]
    Pending,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "removed")]
    Removed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMultiTenantOrganizationMemberTransitionDetails {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Role of the tenant in the multitenant organization. The possible values are: owner, member, unknownFutureValue.
    #[serde(rename = "desiredRole")]
    pub desired_role: Option<MicrosoftGraphMultiTenantOrganizationMemberRole>,
    ///State of the tenant in the multitenant organization currently being processed. The possible values are: pending, active, removed, unknownFutureValue. Read-only.
    #[serde(rename = "desiredState")]
    pub desired_state: Option<MicrosoftGraphMultiTenantOrganizationMemberState>,
    ///Details that explain the processing status if any. Read-only.
    pub details: Option<String>,
    ///Processing state of the asynchronous job. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue. Read-only.
    pub status: Option<MicrosoftGraphMultiTenantOrganizationMemberProcessingStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMultiTenantOrganizationPartnerConfigurationTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.multiTenantOrganizationPartnerConfigurationTemplate".to_string(

        )
    )]
    pub odata_type: String,
    ///Determines the partner-specific configuration for automatic user consent settings. Unless configured, the inboundAllowed and outboundAllowed properties are null and inherit from the default settings, which is always false.
    #[serde(rename = "automaticUserConsentSettings")]
    pub automatic_user_consent_settings: Option<
        MicrosoftGraphInboundOutboundPolicyConfiguration,
    >,
    ///Defines your partner-specific configuration for users from other organizations accessing your resources via Microsoft Entra B2B collaboration.
    #[serde(rename = "b2bCollaborationInbound")]
    pub b2b_collaboration_inbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///Defines your partner-specific configuration for users in your organization going outbound to access resources in another organization via Microsoft Entra B2B collaboration.
    #[serde(rename = "b2bCollaborationOutbound")]
    pub b2b_collaboration_outbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///Defines your partner-specific configuration for users from other organizations accessing your resources via Azure B2B direct connect.
    #[serde(rename = "b2bDirectConnectInbound")]
    pub b2b_direct_connect_inbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///Defines your partner-specific configuration for users in your organization going outbound to access resources in another organization via Microsoft Entra B2B direct connect.
    #[serde(rename = "b2bDirectConnectOutbound")]
    pub b2b_direct_connect_outbound: Option<
        MicrosoftGraphCrossTenantAccessPolicyB2Bsetting,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines the partner-specific configuration for trusting other Conditional Access claims from external Microsoft Entra organizations.
    #[serde(rename = "inboundTrust")]
    pub inbound_trust: Option<MicrosoftGraphCrossTenantAccessPolicyInboundTrust>,
    #[serde(rename = "templateApplicationLevel")]
    pub template_application_level: Option<MicrosoftGraphTemplateApplicationLevel>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMultiTenantOrganizationState {
    #[serde(rename = "active")]
    #[default]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMultiValueLegacyExtendedProperty {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.multiValueLegacyExtendedProperty".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of property values.
    pub value: Option<Vec<Option<String>>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphMutability {
    #[serde(rename = "ReadWrite")]
    #[default]
    ReadWrite,
    #[serde(rename = "ReadOnly")]
    ReadOnly,
    #[serde(rename = "Immutable")]
    Immutable,
    #[serde(rename = "WriteOnly")]
    WriteOnly,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphMuteParticipantOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.muteParticipantOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphNamedLocation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.namedLocation".to_string())]
    pub odata_type: String,
    ///The Timestamp type represents creation date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Human-readable name of the location.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Timestamp type represents last modified date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphNativeAuthenticationApisEnabled {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphNetworkConnection {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Name of the application managing the network connection (for example, Facebook or SMTP).
    #[serde(rename = "applicationName")]
    pub application_name: Option<String>,
    ///Destination IP address (of the network connection).
    #[serde(rename = "destinationAddress")]
    pub destination_address: Option<String>,
    ///Destination domain portion of the destination URL. (for example 'www.contoso.com').
    #[serde(rename = "destinationDomain")]
    pub destination_domain: Option<String>,
    ///Location (by IP address mapping) associated with the destination of a network connection.
    #[serde(rename = "destinationLocation")]
    pub destination_location: Option<String>,
    ///Destination port (of the network connection).
    #[serde(rename = "destinationPort")]
    pub destination_port: Option<String>,
    ///Network connection URL/URI string - excluding parameters. (for example 'www.contoso.com/products/default.html')
    #[serde(rename = "destinationUrl")]
    pub destination_url: Option<String>,
    ///Network connection direction. Possible values are: unknown, inbound, outbound.
    pub direction: Option<MicrosoftGraphConnectionDirection>,
    ///Date when the destination domain was registered. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "domainRegisteredDateTime")]
    pub domain_registered_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The local DNS name resolution as it appears in the host's local DNS cache (for example, in case the 'hosts' file was tampered with).
    #[serde(rename = "localDnsName")]
    pub local_dns_name: Option<String>,
    ///Network Address Translation destination IP address.
    #[serde(rename = "natDestinationAddress")]
    pub nat_destination_address: Option<String>,
    ///Network Address Translation destination port.
    #[serde(rename = "natDestinationPort")]
    pub nat_destination_port: Option<String>,
    ///Network Address Translation source IP address.
    #[serde(rename = "natSourceAddress")]
    pub nat_source_address: Option<String>,
    ///Network Address Translation source port.
    #[serde(rename = "natSourcePort")]
    pub nat_source_port: Option<String>,
    ///Network protocol. Possible values are: unknown, ip, icmp, igmp, ggp, ipv4, tcp, pup, udp, idp, ipv6, ipv6RoutingHeader, ipv6FragmentHeader, ipSecEncapsulatingSecurityPayload, ipSecAuthenticationHeader, icmpV6, ipv6NoNextHeader, ipv6DestinationOptions, nd, raw, ipx, spx, spxII.
    pub protocol: Option<MicrosoftGraphSecurityNetworkProtocol>,
    ///Provider generated/calculated risk score of the network connection. Recommended value range of 0-1, which equates to a percentage.
    #[serde(rename = "riskScore")]
    pub risk_score: Option<String>,
    ///Source (i.e. origin) IP address (of the network connection).
    #[serde(rename = "sourceAddress")]
    pub source_address: Option<String>,
    ///Location (by IP address mapping) associated with the source of a network connection.
    #[serde(rename = "sourceLocation")]
    pub source_location: Option<String>,
    ///Source (i.e. origin) IP port (of the network connection).
    #[serde(rename = "sourcePort")]
    pub source_port: Option<String>,
    ///Network connection status. Possible values are: unknown, attempted, succeeded, blocked, failed.
    pub status: Option<MicrosoftGraphConnectionStatus>,
    ///Parameters (suffix) of the destination URL.
    #[serde(rename = "urlParameters")]
    pub url_parameters: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphNoDeviceRegistrationMembership {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.noDeviceRegistrationMembership".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphNoTrainingNotificationSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.noTrainingNotificationSetting".to_string())]
    pub odata_type: String,
    ///Notification preference. Possible values are: unknown, microsoft, custom, unknownFutureValue.
    #[serde(rename = "notificationPreference")]
    pub notification_preference: Option<MicrosoftGraphEndUserNotificationPreference>,
    ///Positive reinforcement detail.
    #[serde(rename = "positiveReinforcement")]
    pub positive_reinforcement: Option<MicrosoftGraphPositiveReinforcementNotification>,
    ///End user notification type. Possible values are: unknown, noTraining, trainingSelected, noNotification, unknownFutureValue.
    #[serde(rename = "settingType")]
    pub setting_type: Option<MicrosoftGraphEndUserNotificationSettingType>,
    ///The notification for the user who is part of the simulation.
    #[serde(rename = "simulationNotification")]
    pub simulation_notification: Option<MicrosoftGraphSimulationNotification>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphNoTrainingSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.noTrainingSetting".to_string())]
    pub odata_type: String,
    ///Type of setting. Possible values are: microsoftCustom, microsoftManaged, noTraining, custom, unknownFutureValue.
    #[serde(rename = "settingType")]
    pub setting_type: Option<MicrosoftGraphTrainingSettingType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphNotebook {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.notebook".to_string())]
    pub odata_type: String,
    ///Identity of the user, device, and application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the notebook.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether this is the user's default notebook. Read-only.
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    ///Indicates whether the notebook is shared. If true, the contents of the notebook can be seen by people other than the owner. Read-only.
    #[serde(rename = "isShared")]
    pub is_shared: Option<bool>,
    ///Identity of the user, device, and application that created the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Links for opening the notebook. The oneNoteClientURL link opens the notebook in the OneNote native client if it's installed. The oneNoteWebURL link opens the notebook in OneNote on the web.
    pub links: Option<MicrosoftGraphNotebookLinks>,
    ///The section groups in the notebook. Read-only. Nullable.
    #[serde(rename = "sectionGroups")]
    pub section_groups: Option<Vec<MicrosoftGraphSectionGroup>>,
    ///The URL for the sectionGroups navigation property, which returns all the section groups in the notebook. Read-only.
    #[serde(rename = "sectionGroupsUrl")]
    pub section_groups_url: Option<String>,
    ///The sections in the notebook. Read-only. Nullable.
    pub sections: Option<Vec<MicrosoftGraphOnenoteSection>>,
    ///The URL for the sections navigation property, which returns all the sections in the notebook. Read-only.
    #[serde(rename = "sectionsUrl")]
    pub sections_url: Option<String>,
    ///The endpoint where you can get details about the page. Read-only.
    #[serde(rename = "self")]
    pub self_: Option<String>,
    ///Possible values are: Owner, Contributor, Reader, None. Owner represents owner-level access to the notebook. Contributor represents read/write access to the notebook. Reader represents read-only access to the notebook. Read-only.
    #[serde(rename = "userRole")]
    pub user_role: Option<MicrosoftGraphOnenoteUserRole>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphNotebookLinks {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Opens the notebook in the OneNote native client if it's installed.
    #[serde(rename = "oneNoteClientUrl")]
    pub one_note_client_url: Option<MicrosoftGraphExternalLink>,
    ///Opens the notebook in OneNote on the web.
    #[serde(rename = "oneNoteWebUrl")]
    pub one_note_web_url: Option<MicrosoftGraphExternalLink>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphNotificationDeliveryFrequency {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "biWeekly")]
    BiWeekly,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphNotificationDeliveryPreference {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "deliverImmedietly")]
    DeliverImmedietly,
    #[serde(rename = "deliverAfterCampaignEnd")]
    DeliverAfterCampaignEnd,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphNotificationMessageTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.notificationMessageTemplate".to_string())]
    pub odata_type: String,
    ///Branding Options for the Message Template. Branding is defined in the Intune Admin Console.
    #[serde(rename = "brandingOptions")]
    pub branding_options: Option<MicrosoftGraphNotificationTemplateBrandingOptions>,
    ///The default locale to fallback onto when the requested locale is not available.
    #[serde(rename = "defaultLocale")]
    pub default_locale: Option<String>,
    ///Display name for the Notification Message Template.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The list of localized messages for this Notification Message Template.
    #[serde(rename = "localizedNotificationMessages")]
    pub localized_notification_messages: Option<
        Vec<MicrosoftGraphLocalizedNotificationMessage>,
    >,
    ///List of Scope Tags for this Entity instance.
    #[serde(rename = "roleScopeTagIds")]
    pub role_scope_tag_ids: Option<Vec<Option<String>>>,
}
///Branding Options for the Message Template. Branding is defined in the Intune Admin Console.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphNotificationTemplateBrandingOptions {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "includeCompanyLogo")]
    IncludeCompanyLogo,
    #[serde(rename = "includeCompanyName")]
    IncludeCompanyName,
    #[serde(rename = "includeContactInformation")]
    IncludeContactInformation,
    #[serde(rename = "includeCompanyPortalLink")]
    IncludeCompanyPortalLink,
    #[serde(rename = "includeDeviceDetails")]
    IncludeDeviceDetails,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphNumberColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///How many decimal places to display. See below for information about the possible values.
    #[serde(rename = "decimalPlaces")]
    pub decimal_places: Option<String>,
    ///How the value should be presented in the UX. Must be one of number or percentage. If unspecified, treated as number.
    #[serde(rename = "displayAs")]
    pub display_as: Option<String>,
    ///The maximum permitted value.
    pub maximum: Option<MicrosoftGraphNumberColumnMaximum>,
    ///The minimum permitted value.
    pub minimum: Option<MicrosoftGraphNumberColumnMinimum>,
}
///The maximum permitted value.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphNumberColumnMaximum {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The minimum permitted value.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphNumberColumnMinimum {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOAuth2PermissionGrant {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.oAuth2PermissionGrant".to_string())]
    pub odata_type: String,
    ///The object id (not appId) of the client service principal for the application that's authorized to act on behalf of a signed-in user when accessing an API. Required. Supports $filter (eq only).
    #[serde(rename = "clientId")]
    pub client_id: Option<String>,
    ///Indicates if authorization is granted for the client application to impersonate all users or only a specific user. AllPrincipals indicates authorization to impersonate all users. Principal indicates authorization to impersonate a specific user. Consent on behalf of all users can be granted by an administrator. Nonadmin users might be authorized to consent on behalf of themselves in some cases, for some delegated permissions. Required. Supports $filter (eq only).
    #[serde(rename = "consentType")]
    pub consent_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The id of the user on behalf of whom the client is authorized to access the resource, when consentType is Principal. If consentType is AllPrincipals this value is null. Required when consentType is Principal. Supports $filter (eq only).
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///The id of the resource service principal to which access is authorized. This identifies the API that the client is authorized to attempt to call on behalf of a signed-in user. Supports $filter (eq only).
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
    ///A space-separated list of the claim values for delegated permissions that should be included in access tokens for the resource application (the API). For example, openid User.Read GroupMember.Read.All. Each claim value should match the value field of one of the delegated permissions defined by the API, listed in the oauth2PermissionScopes property of the resource service principal. Must not exceed 3,850 characters in length.
    pub scope: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOAuthAppScope {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "readCalendar")]
    ReadCalendar,
    #[serde(rename = "readContact")]
    ReadContact,
    #[serde(rename = "readMail")]
    ReadMail,
    #[serde(rename = "readAllChat")]
    ReadAllChat,
    #[serde(rename = "readAllFile")]
    ReadAllFile,
    #[serde(rename = "readAndWriteMail")]
    ReadAndWriteMail,
    #[serde(rename = "sendMail")]
    SendMail,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOAuthConsentAppDetail {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///App scope. Possible values are: unknown, readCalendar, readContact, readMail, readAllChat, readAllFile, readAndWriteMail, sendMail, unknownFutureValue.
    #[serde(rename = "appScope")]
    pub app_scope: Option<MicrosoftGraphOAuthAppScope>,
    ///App display logo.
    #[serde(rename = "displayLogo")]
    pub display_logo: Option<String>,
    ///App name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphObjectDefinition {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Defines attributes of the object.
    pub attributes: Option<Vec<MicrosoftGraphAttributeDefinition>>,
    ///Metadata for the given object.
    pub metadata: Option<Vec<MicrosoftGraphObjectDefinitionMetadataEntry>>,
    ///Name of the object. Must be unique within a directory definition. Not nullable.
    pub name: Option<String>,
    ///The API that the provisioning service queries to retrieve data for synchronization.
    #[serde(rename = "supportedApis")]
    pub supported_apis: Option<Vec<Option<String>>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphObjectDefinitionMetadata {
    #[serde(rename = "PropertyNameAccountEnabled")]
    #[default]
    PropertyNameAccountEnabled,
    #[serde(rename = "PropertyNameSoftDeleted")]
    PropertyNameSoftDeleted,
    #[serde(rename = "IsSoftDeletionSupported")]
    IsSoftDeletionSupported,
    #[serde(rename = "IsSynchronizeAllSupported")]
    IsSynchronizeAllSupported,
    #[serde(rename = "ConnectorDataStorageRequired")]
    ConnectorDataStorageRequired,
    #[serde(rename = "Extensions")]
    Extensions,
    #[serde(rename = "BaseObjectName")]
    BaseObjectName,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphObjectDefinitionMetadataEntry {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Possible values are: PropertyNameAccountEnabled, PropertyNameSoftDeleted, IsSoftDeletionSupported, IsSynchronizeAllSupported, ConnectorDataStorageRequired, Extensions, LinkTypeName.
    pub key: Option<MicrosoftGraphObjectDefinitionMetadata>,
    ///Value of the metadata property.
    pub value: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphObjectFlowTypes {
    #[serde(rename = "None")]
    #[default]
    None,
    #[serde(rename = "Add")]
    Add,
    #[serde(rename = "Update")]
    Update,
    #[serde(rename = "Delete")]
    Delete,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphObjectIdentity {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies the issuer of the identity, for example facebook.com. 512 character limit. For local accounts (where signInType isn't federated), this property is the local default domain name for the tenant, for example contoso.com.  For guests from other Microsoft Entra organizations, this is the domain of the federated organization, for example contoso.com. For more information about filtering behavior for this property, see Filtering on the identities property of a user.
    pub issuer: Option<String>,
    ///Specifies the unique identifier assigned to the user by the issuer. 64 character limit. The combination of issuer and issuerAssignedId must be unique within the organization. Represents the sign-in name for the user, when signInType is set to emailAddress or userName (also known as local accounts).When signInType is set to: emailAddress (or a custom string that starts with emailAddress like emailAddress1), issuerAssignedId must be a valid email addressuserName, issuerAssignedId must begin with an alphabetical character or number, and can only contain alphanumeric characters and the following symbols: - or _  For more information about filtering behavior for this property, see Filtering on the identities property of a user.
    #[serde(rename = "issuerAssignedId")]
    pub issuer_assigned_id: Option<String>,
    ///Specifies the user sign-in types in your directory, such as emailAddress, userName, federated, or userPrincipalName. federated represents a unique identifier for a user from an issuer that can be in any format chosen by the issuer. Setting or updating a userPrincipalName identity updates the value of the userPrincipalName property on the user object. The validations performed on the userPrincipalName property on the user object, for example, verified domains and acceptable characters, are performed when setting or updating a userPrincipalName identity. Extra validation is enforced on issuerAssignedId when the sign-in type is set to emailAddress or userName. This property can also be set to any custom string.  For more information about filtering behavior for this property, see Filtering on the identities property of a user.
    #[serde(rename = "signInType")]
    pub sign_in_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphObjectMapping {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Attribute mappings define which attributes to map from the source object into the target object and how they should flow. A number of functions are available to support the transformation of the original source values.
    #[serde(rename = "attributeMappings")]
    pub attribute_mappings: Option<Vec<MicrosoftGraphAttributeMapping>>,
    ///When true, this object mapping will be processed during synchronization. When false, this object mapping will be skipped.
    pub enabled: Option<bool>,
    #[serde(rename = "flowTypes")]
    pub flow_types: Option<MicrosoftGraphObjectFlowTypes>,
    ///Additional extension properties. Unless mentioned explicitly, metadata values should not be changed.
    pub metadata: Option<Vec<MicrosoftGraphObjectMappingMetadataEntry>>,
    ///Human-friendly name of the object mapping.
    pub name: Option<String>,
    ///Defines a filter to be used when deciding whether a given object should be provisioned. For example, you might want to only provision users that are located in the US.
    pub scope: Option<MicrosoftGraphFilter>,
    ///Name of the object in the source directory. Must match the object name from the source directory definition.
    #[serde(rename = "sourceObjectName")]
    pub source_object_name: Option<String>,
    ///Name of the object in target directory. Must match the object name from the target directory definition.
    #[serde(rename = "targetObjectName")]
    pub target_object_name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphObjectMappingMetadata {
    #[serde(rename = "EscrowBehavior")]
    #[default]
    EscrowBehavior,
    #[serde(rename = "DisableMonitoringForChanges")]
    DisableMonitoringForChanges,
    #[serde(rename = "OriginalJoiningProperty")]
    OriginalJoiningProperty,
    #[serde(rename = "Disposition")]
    Disposition,
    #[serde(rename = "IsCustomerDefined")]
    IsCustomerDefined,
    #[serde(rename = "ExcludeFromReporting")]
    ExcludeFromReporting,
    #[serde(rename = "Unsynchronized")]
    Unsynchronized,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphObjectMappingMetadataEntry {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Possible values are: EscrowBehavior, DisableMonitoringForChanges, OriginalJoiningProperty, Disposition, IsCustomerDefined, ExcludeFromReporting, Unsynchronized.
    pub key: Option<MicrosoftGraphObjectMappingMetadata>,
    ///Value of the metadata property.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOdataErrorsErrorDetails {
    #[validate(length(min = 1))]
    pub code: String,
    #[validate(length(min = 1))]
    pub message: String,
    pub target: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOdataErrorsInnerError {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Client request Id as sent by the client application.
    #[serde(rename = "client-request-id")]
    pub client_request_id: Option<String>,
    ///Date when the error occured.
    pub date: Option<chrono::DateTime<chrono::Utc>>,
    ///Request Id as tracked internally by the service
    #[serde(rename = "request-id")]
    pub request_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOdataErrorsMainError {
    #[validate(length(min = 1))]
    pub code: String,
    pub details: Option<Vec<MicrosoftGraphOdataErrorsErrorDetails>>,
    #[serde(rename = "innerError")]
    pub inner_error: Option<MicrosoftGraphOdataErrorsInnerError>,
    #[validate(length(min = 1))]
    pub message: String,
    pub target: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOdataErrorsOdataError {
    pub error: MicrosoftGraphOdataErrorsMainError,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOfferShiftRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.offerShiftRequest".to_string())]
    pub odata_type: String,
    ///Indicates who the request is assigned to. Possible values are: sender, recipient, manager, system, unknownFutureValue.
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<MicrosoftGraphScheduleChangeRequestActor>,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when the manager approved or declined the scheduleChangeRequest. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "managerActionDateTime")]
    pub manager_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the manager regarding the scheduleChangeRequest. Optional.
    #[serde(rename = "managerActionMessage")]
    pub manager_action_message: Option<String>,
    ///The user ID of the manager who approved or declined the scheduleChangeRequest.
    #[serde(rename = "managerUserId")]
    pub manager_user_id: Option<String>,
    ///The date and time when the recipient approved or declined the request.
    #[serde(rename = "recipientActionDateTime")]
    pub recipient_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the recipient regarding the request.
    #[serde(rename = "recipientActionMessage")]
    pub recipient_action_message: Option<String>,
    ///The recipient's user ID.
    #[serde(rename = "recipientUserId")]
    pub recipient_user_id: Option<String>,
    ///The date and time when the sender sent the scheduleChangeRequest. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "senderDateTime")]
    pub sender_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the sender of the scheduleChangeRequest. Optional.
    #[serde(rename = "senderMessage")]
    pub sender_message: Option<String>,
    ///The sender's shift ID.
    #[serde(rename = "senderShiftId")]
    pub sender_shift_id: Option<String>,
    ///The user ID of the sender of the scheduleChangeRequest.
    #[serde(rename = "senderUserId")]
    pub sender_user_id: Option<String>,
    ///The state of the scheduleChangeRequest. Possible values are: pending, approved, declined, unknownFutureValue.
    pub state: Option<MicrosoftGraphScheduleChangeState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOfficeGraphInsights {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.officeGraphInsights".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Calculated relationship that identifies documents shared with or by the user. This includes URLs, file attachments, and reference attachments to OneDrive for work or school and SharePoint files found in Outlook messages and meetings. This also includes URLs and reference attachments to Teams conversations. Ordered by recency of share.
    pub shared: Option<Vec<MicrosoftGraphSharedInsight>>,
    ///Calculated relationship that identifies documents trending around a user. Trending documents are calculated based on activity of the user's closest network of people and include files stored in OneDrive for work or school and SharePoint. Trending insights help the user to discover potentially useful content that the user has access to, but has never viewed before.
    pub trending: Option<Vec<MicrosoftGraphTrending>>,
    ///Calculated relationship that identifies the latest documents viewed or modified by a user, including OneDrive for work or school and SharePoint documents, ranked by recency of use.
    pub used: Option<Vec<MicrosoftGraphUsedInsight>>,
}
///OMA Settings definition.
discriminated_enum! {
    pub enum MicrosoftGraphOmaSetting { discriminator : "@odata.type", variants :
    [("#microsoft.graph.omaSettingBase64", Base64(Box < MicrosoftGraphOmaSettingBase64
    >)), ("#microsoft.graph.omaSettingBoolean", Boolean(Box <
    MicrosoftGraphOmaSettingBoolean >)), ("#microsoft.graph.omaSettingDateTime",
    DateTime(Box < MicrosoftGraphOmaSettingDateTime >)),
    ("#microsoft.graph.omaSettingFloatingPoint", FloatingPoint(Box <
    MicrosoftGraphOmaSettingFloatingPoint >)), ("#microsoft.graph.omaSettingInteger",
    Integer(Box < MicrosoftGraphOmaSettingInteger >)),
    ("#microsoft.graph.omaSettingString", String(Box < MicrosoftGraphOmaSettingString
    >)), ("#microsoft.graph.omaSettingStringXml", StringXml(Box <
    MicrosoftGraphOmaSettingStringXml >))], fallback : OmaSetting(Box <
    MicrosoftGraphOmaSettingBase >), }
}
///OMA Settings definition.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOmaSettingBase {
    ///Description.
    pub description: Option<String>,
    ///Display Name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///OMA.
    #[serde(rename = "omaUri")]
    pub oma_uri: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOmaSettingBase64 {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.omaSettingBase64".to_string())]
    pub odata_type: String,
    ///Description.
    pub description: Option<String>,
    ///Display Name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///File name associated with the Value property (.cer
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///OMA.
    #[serde(rename = "omaUri")]
    pub oma_uri: Option<String>,
    ///Value. (Base64 encoded string)
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOmaSettingBoolean {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.omaSettingBoolean".to_string())]
    pub odata_type: String,
    ///Description.
    pub description: Option<String>,
    ///Display Name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///OMA.
    #[serde(rename = "omaUri")]
    pub oma_uri: Option<String>,
    ///Value.
    pub value: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOmaSettingDateTime {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.omaSettingDateTime".to_string())]
    pub odata_type: String,
    ///Description.
    pub description: Option<String>,
    ///Display Name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///OMA.
    #[serde(rename = "omaUri")]
    pub oma_uri: Option<String>,
    ///Value.
    pub value: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOmaSettingFloatingPoint {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.omaSettingFloatingPoint".to_string())]
    pub odata_type: String,
    ///Description.
    pub description: Option<String>,
    ///Display Name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///OMA.
    #[serde(rename = "omaUri")]
    pub oma_uri: Option<String>,
    ///Value.
    pub value: Option<MicrosoftGraphOmaSettingFloatingPointValue>,
}
///Value.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOmaSettingFloatingPointValue {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOmaSettingInteger {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.omaSettingInteger".to_string())]
    pub odata_type: String,
    ///Description.
    pub description: Option<String>,
    ///Display Name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///OMA.
    #[serde(rename = "omaUri")]
    pub oma_uri: Option<String>,
    ///Value.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub value: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOmaSettingString {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.omaSettingString".to_string())]
    pub odata_type: String,
    ///Description.
    pub description: Option<String>,
    ///Display Name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///OMA.
    #[serde(rename = "omaUri")]
    pub oma_uri: Option<String>,
    ///Value.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOmaSettingStringXml {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.omaSettingStringXml".to_string())]
    pub odata_type: String,
    ///Description.
    pub description: Option<String>,
    ///Display Name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///File name associated with the Value property (.xml).
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///OMA.
    #[serde(rename = "omaUri")]
    pub oma_uri: Option<String>,
    ///Value. (UTF8 encoded byte array)
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAttributeCollectionExternalUsersSelfServiceSignUp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.onAttributeCollectionExternalUsersSelfServiceSignUp".to_string(

        )
    )]
    pub odata_type: String,
    ///Required. The configuration for how attributes are displayed in the sign-up experience defined by a user flow, like the externalUsersSelfServiceSignupEventsFlow, specifically on the attribute collection page.
    #[serde(rename = "attributeCollectionPage")]
    pub attribute_collection_page: Option<
        MicrosoftGraphAuthenticationAttributeCollectionPage,
    >,
    pub attributes: Option<Vec<MicrosoftGraphIdentityUserFlowAttribute>>,
}
discriminated_enum! {
    pub enum MicrosoftGraphOnAttributeCollectionHandler { discriminator : "@odata.type",
    variants : [("#microsoft.graph.onAttributeCollectionExternalUsersSelfServiceSignUp",
    MicrosoftGraphOnAttributeCollectionExternalUsersSelfServiceSignUp(Box <
    MicrosoftGraphOnAttributeCollectionExternalUsersSelfServiceSignUp >))], fallback :
    OnAttributeCollectionHandler(Box < MicrosoftGraphOnAttributeCollectionHandlerBase >),
    }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAttributeCollectionHandlerBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAttributeCollectionListener {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onAttributeCollectionListener".to_string())]
    pub odata_type: String,
    ///The identifier of the authenticationEventsFlow object.
    #[serde(rename = "authenticationEventsFlowId")]
    pub authentication_events_flow_id: Option<String>,
    ///The conditions on which this authenticationEventListener should trigger.
    pub conditions: Option<MicrosoftGraphAuthenticationConditions>,
    ///Required. Configuration for what to invoke if the event resolves to this listener.
    pub handler: Option<MicrosoftGraphOnAttributeCollectionHandler>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAttributeCollectionStartCustomExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onAttributeCollectionStartCustomExtension".to_string())]
    pub odata_type: String,
    ///Configuration for securing the API call to the logic app. For example, using OAuth client credentials flow.
    #[serde(rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<
        MicrosoftGraphCustomExtensionAuthenticationConfiguration,
    >,
    ///The behaviour on error for the custom authentication extension.
    #[serde(rename = "behaviorOnError")]
    pub behavior_on_error: Option<MicrosoftGraphCustomExtensionBehaviorOnError>,
    ///HTTP connection settings that define how long Microsoft Entra ID can wait for a connection to a logic app, how many times you can retry a timed-out connection and the exception scenarios when retries are allowed.
    #[serde(rename = "clientConfiguration")]
    pub client_configuration: Option<MicrosoftGraphCustomExtensionClientConfiguration>,
    ///Description for the customCalloutExtension object.
    pub description: Option<String>,
    ///Display name for the customCalloutExtension object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The type and details for configuring the endpoint to call the logic app's workflow.
    #[serde(rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<
        MicrosoftGraphCustomExtensionEndpointConfiguration,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAttributeCollectionStartCustomExtensionHandler {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.onAttributeCollectionStartCustomExtensionHandler".to_string()
    )]
    pub odata_type: String,
    ///Configuration regarding properties of the custom extension that are can be overwritten per event listener.
    pub configuration: Option<MicrosoftGraphCustomExtensionOverwriteConfiguration>,
    #[serde(rename = "customExtension")]
    pub custom_extension: Option<
        MicrosoftGraphOnAttributeCollectionStartCustomExtension,
    >,
}
discriminated_enum! {
    pub enum MicrosoftGraphOnAttributeCollectionStartHandler { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.onAttributeCollectionStartCustomExtensionHandler",
    MicrosoftGraphOnAttributeCollectionStartCustomExtensionHandler(Box <
    MicrosoftGraphOnAttributeCollectionStartCustomExtensionHandler >))], fallback :
    OnAttributeCollectionStartHandler(Box <
    MicrosoftGraphOnAttributeCollectionStartHandlerBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAttributeCollectionStartHandlerBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAttributeCollectionStartListener {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onAttributeCollectionStartListener".to_string())]
    pub odata_type: String,
    ///The identifier of the authenticationEventsFlow object.
    #[serde(rename = "authenticationEventsFlowId")]
    pub authentication_events_flow_id: Option<String>,
    ///The conditions on which this authenticationEventListener should trigger.
    pub conditions: Option<MicrosoftGraphAuthenticationConditions>,
    ///Configuration for what to invoke if the event resolves to this listener.
    pub handler: Option<MicrosoftGraphOnAttributeCollectionStartHandler>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAttributeCollectionSubmitCustomExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onAttributeCollectionSubmitCustomExtension".to_string())]
    pub odata_type: String,
    ///Configuration for securing the API call to the logic app. For example, using OAuth client credentials flow.
    #[serde(rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<
        MicrosoftGraphCustomExtensionAuthenticationConfiguration,
    >,
    ///The behaviour on error for the custom authentication extension.
    #[serde(rename = "behaviorOnError")]
    pub behavior_on_error: Option<MicrosoftGraphCustomExtensionBehaviorOnError>,
    ///HTTP connection settings that define how long Microsoft Entra ID can wait for a connection to a logic app, how many times you can retry a timed-out connection and the exception scenarios when retries are allowed.
    #[serde(rename = "clientConfiguration")]
    pub client_configuration: Option<MicrosoftGraphCustomExtensionClientConfiguration>,
    ///Description for the customCalloutExtension object.
    pub description: Option<String>,
    ///Display name for the customCalloutExtension object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The type and details for configuring the endpoint to call the logic app's workflow.
    #[serde(rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<
        MicrosoftGraphCustomExtensionEndpointConfiguration,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAttributeCollectionSubmitCustomExtensionHandler {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.onAttributeCollectionSubmitCustomExtensionHandler".to_string()
    )]
    pub odata_type: String,
    ///Configuration regarding properties of the custom extension that can be overwritten per event listener.
    pub configuration: Option<MicrosoftGraphCustomExtensionOverwriteConfiguration>,
    #[serde(rename = "customExtension")]
    pub custom_extension: Option<
        MicrosoftGraphOnAttributeCollectionSubmitCustomExtension,
    >,
}
discriminated_enum! {
    pub enum MicrosoftGraphOnAttributeCollectionSubmitHandler { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.onAttributeCollectionSubmitCustomExtensionHandler",
    MicrosoftGraphOnAttributeCollectionSubmitCustomExtensionHandler(Box <
    MicrosoftGraphOnAttributeCollectionSubmitCustomExtensionHandler >))], fallback :
    OnAttributeCollectionSubmitHandler(Box <
    MicrosoftGraphOnAttributeCollectionSubmitHandlerBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAttributeCollectionSubmitHandlerBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAttributeCollectionSubmitListener {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onAttributeCollectionSubmitListener".to_string())]
    pub odata_type: String,
    ///The identifier of the authenticationEventsFlow object.
    #[serde(rename = "authenticationEventsFlowId")]
    pub authentication_events_flow_id: Option<String>,
    ///The conditions on which this authenticationEventListener should trigger.
    pub conditions: Option<MicrosoftGraphAuthenticationConditions>,
    ///Configuration for what to invoke if the event resolves to this listener.
    pub handler: Option<MicrosoftGraphOnAttributeCollectionSubmitHandler>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAuthenticationMethodLoadStartExternalUsersSelfServiceSignUp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.onAuthenticationMethodLoadStartExternalUsersSelfServiceSignUp".to_string(

        )
    )]
    pub odata_type: String,
    #[serde(rename = "identityProviders")]
    pub identity_providers: Option<Vec<MicrosoftGraphIdentityProviderBase>>,
}
discriminated_enum! {
    pub enum MicrosoftGraphOnAuthenticationMethodLoadStartHandler { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.onAuthenticationMethodLoadStartExternalUsersSelfServiceSignUp",
    MicrosoftGraphOnAuthenticationMethodLoadStartExternalUsersSelfServiceSignUp(Box <
    MicrosoftGraphOnAuthenticationMethodLoadStartExternalUsersSelfServiceSignUp >))],
    fallback : OnAuthenticationMethodLoadStartHandler(Box <
    MicrosoftGraphOnAuthenticationMethodLoadStartHandlerBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAuthenticationMethodLoadStartHandlerBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnAuthenticationMethodLoadStartListener {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onAuthenticationMethodLoadStartListener".to_string())]
    pub odata_type: String,
    ///The identifier of the authenticationEventsFlow object.
    #[serde(rename = "authenticationEventsFlowId")]
    pub authentication_events_flow_id: Option<String>,
    ///The conditions on which this authenticationEventListener should trigger.
    pub conditions: Option<MicrosoftGraphAuthenticationConditions>,
    ///Required. Configuration for what to invoke if the event resolves to this listener. This property lets us define potential handler configurations per-event.
    pub handler: Option<MicrosoftGraphOnAuthenticationMethodLoadStartHandler>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnEmailOtpSendListener {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onEmailOtpSendListener".to_string())]
    pub odata_type: String,
    ///The identifier of the authenticationEventsFlow object.
    #[serde(rename = "authenticationEventsFlowId")]
    pub authentication_events_flow_id: Option<String>,
    ///The conditions on which this authenticationEventListener should trigger.
    pub conditions: Option<MicrosoftGraphAuthenticationConditions>,
    ///Used to configure what to invoke if the onEmailOTPSend event resolves to this listener. This base class serves as a generic OTP event handler used for both email and SMS OTP messages.
    pub handler: Option<MicrosoftGraphOnOtpSendHandler>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnInteractiveAuthFlowStartExternalUsersSelfServiceSignUp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.onInteractiveAuthFlowStartExternalUsersSelfServiceSignUp".to_string(

        )
    )]
    pub odata_type: String,
    ///Optional. Specifies whether the authentication flow includes an option to sign up (create account) and sign in. Default value is false meaning only sign in is enabled.
    #[serde(rename = "isSignUpAllowed")]
    pub is_sign_up_allowed: Option<bool>,
}
discriminated_enum! {
    pub enum MicrosoftGraphOnInteractiveAuthFlowStartHandler { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.onInteractiveAuthFlowStartExternalUsersSelfServiceSignUp",
    MicrosoftGraphOnInteractiveAuthFlowStartExternalUsersSelfServiceSignUp(Box <
    MicrosoftGraphOnInteractiveAuthFlowStartExternalUsersSelfServiceSignUp >))], fallback
    : OnInteractiveAuthFlowStartHandler(Box <
    MicrosoftGraphOnInteractiveAuthFlowStartHandlerBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnInteractiveAuthFlowStartHandlerBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnInteractiveAuthFlowStartListener {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onInteractiveAuthFlowStartListener".to_string())]
    pub odata_type: String,
    ///The identifier of the authenticationEventsFlow object.
    #[serde(rename = "authenticationEventsFlowId")]
    pub authentication_events_flow_id: Option<String>,
    ///The conditions on which this authenticationEventListener should trigger.
    pub conditions: Option<MicrosoftGraphAuthenticationConditions>,
    ///Required. Configuration for what to invoke if the event resolves to this listener. This lets us define potential handler configurations per-event.
    pub handler: Option<MicrosoftGraphOnInteractiveAuthFlowStartHandler>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnOtpSendCustomExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onOtpSendCustomExtension".to_string())]
    pub odata_type: String,
    ///Configuration for securing the API call to the logic app. For example, using OAuth client credentials flow.
    #[serde(rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<
        MicrosoftGraphCustomExtensionAuthenticationConfiguration,
    >,
    ///The behaviour on error for the custom authentication extension.
    #[serde(rename = "behaviorOnError")]
    pub behavior_on_error: Option<MicrosoftGraphCustomExtensionBehaviorOnError>,
    ///HTTP connection settings that define how long Microsoft Entra ID can wait for a connection to a logic app, how many times you can retry a timed-out connection and the exception scenarios when retries are allowed.
    #[serde(rename = "clientConfiguration")]
    pub client_configuration: Option<MicrosoftGraphCustomExtensionClientConfiguration>,
    ///Description for the customCalloutExtension object.
    pub description: Option<String>,
    ///Display name for the customCalloutExtension object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The type and details for configuring the endpoint to call the logic app's workflow.
    #[serde(rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<
        MicrosoftGraphCustomExtensionEndpointConfiguration,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnOtpSendCustomExtensionHandler {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onOtpSendCustomExtensionHandler".to_string())]
    pub odata_type: String,
    ///Configuration regarding properties of the custom extension that are can be overwritten for the onEmailOtpSendListener event listener.
    pub configuration: Option<MicrosoftGraphCustomExtensionOverwriteConfiguration>,
    #[serde(rename = "customExtension")]
    pub custom_extension: Option<MicrosoftGraphOnOtpSendCustomExtension>,
}
discriminated_enum! {
    pub enum MicrosoftGraphOnOtpSendHandler { discriminator : "@odata.type", variants :
    [("#microsoft.graph.onOtpSendCustomExtensionHandler",
    MicrosoftGraphOnOtpSendCustomExtensionHandler(Box <
    MicrosoftGraphOnOtpSendCustomExtensionHandler >))], fallback : OnOtpSendHandler(Box <
    MicrosoftGraphOnOtpSendHandlerBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnOtpSendHandlerBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnPremisesAccidentalDeletionPrevention {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Threshold value which triggers accidental deletion prevention. The threshold is either an absolute number of objects or a percentage number of objects.
    #[serde(rename = "alertThreshold")]
    pub alert_threshold: Option<f64>,
    ///The status of the accidental deletion prevention feature. The possible values are: disabled, enabledForCount, enabledForPercentage, unknownFutureValue.
    #[serde(rename = "synchronizationPreventionType")]
    pub synchronization_prevention_type: Option<
        MicrosoftGraphOnPremisesDirectorySynchronizationDeletionPreventionType,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnPremisesConditionalAccessSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onPremisesConditionalAccessSettings".to_string())]
    pub odata_type: String,
    ///Indicates if on premises conditional access is enabled for this organization
    pub enabled: Option<bool>,
    ///User groups that will be exempt by on premises conditional access. All users in these groups will be exempt from the conditional access policy.
    #[serde(rename = "excludedGroups")]
    pub excluded_groups: Option<Vec<uuid::Uuid>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///User groups that will be targeted by on premises conditional access. All users in these groups will be required to have mobile device managed and compliant for mail access.
    #[serde(rename = "includedGroups")]
    pub included_groups: Option<Vec<uuid::Uuid>>,
    ///Override the default access rule when allowing a device to ensure access is granted.
    #[serde(rename = "overrideDefaultRule")]
    pub override_default_rule: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnPremisesDirectorySynchronization {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onPremisesDirectorySynchronization".to_string())]
    pub odata_type: String,
    ///Consists of configurations that can be fine-tuned and impact the on-premises directory synchronization process for a tenant. Nullable.
    pub configuration: Option<
        MicrosoftGraphOnPremisesDirectorySynchronizationConfiguration,
    >,
    pub features: Option<MicrosoftGraphOnPremisesDirectorySynchronizationFeature>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnPremisesDirectorySynchronizationConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Contains the accidental deletion prevention configuration for a tenant.
    #[serde(rename = "accidentalDeletionPrevention")]
    pub accidental_deletion_prevention: Option<
        MicrosoftGraphOnPremisesAccidentalDeletionPrevention,
    >,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOnPremisesDirectorySynchronizationDeletionPreventionType {
    #[serde(rename = "disabled")]
    #[default]
    Disabled,
    #[serde(rename = "enabledForCount")]
    EnabledForCount,
    #[serde(rename = "enabledForPercentage")]
    EnabledForPercentage,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnPremisesDirectorySynchronizationFeature {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Used to block cloud object takeover via source anchor hard match if enabled.
    #[serde(rename = "blockCloudObjectTakeoverThroughHardMatchEnabled")]
    pub block_cloud_object_takeover_through_hard_match_enabled: Option<bool>,
    ///Use to block soft match for all objects if enabled for the  tenant. Customers are encouraged to enable this feature and keep it enabled until soft matching is required again for their tenancy. This flag should be enabled again after any soft matching has been completed and is no longer needed.
    #[serde(rename = "blockSoftMatchEnabled")]
    pub block_soft_match_enabled: Option<bool>,
    ///When true, persists the values of Mobile and OtherMobile in on-premises AD during sync cycles instead of values of MobilePhone or AlternateMobilePhones in Microsoft Entra ID.
    #[serde(rename = "bypassDirSyncOverridesEnabled")]
    pub bypass_dir_sync_overrides_enabled: Option<bool>,
    ///Used to indicate that cloud password policy applies to users whose passwords are synchronized from on-premises.
    #[serde(rename = "cloudPasswordPolicyForPasswordSyncedUsersEnabled")]
    pub cloud_password_policy_for_password_synced_users_enabled: Option<bool>,
    ///Used to enable concurrent user credentials update in OrgId.
    #[serde(rename = "concurrentCredentialUpdateEnabled")]
    pub concurrent_credential_update_enabled: Option<bool>,
    ///Used to enable concurrent user creation in OrgId.
    #[serde(rename = "concurrentOrgIdProvisioningEnabled")]
    pub concurrent_org_id_provisioning_enabled: Option<bool>,
    ///Used to indicate that device write-back is enabled.
    #[serde(rename = "deviceWritebackEnabled")]
    pub device_writeback_enabled: Option<bool>,
    ///Used to indicate that directory extensions are being synced from on-premises AD to Microsoft Entra ID.
    #[serde(rename = "directoryExtensionsEnabled")]
    pub directory_extensions_enabled: Option<bool>,
    ///Used to indicate that for a Microsoft Forefront Online Protection for Exchange (FOPE) migrated tenant, the conflicting proxy address should be migrated over.
    #[serde(rename = "fopeConflictResolutionEnabled")]
    pub fope_conflict_resolution_enabled: Option<bool>,
    ///Used to enable object-level group writeback feature for additional group types.
    #[serde(rename = "groupWriteBackEnabled")]
    pub group_write_back_enabled: Option<bool>,
    ///Used to indicate on-premise password synchronization is enabled.
    #[serde(rename = "passwordSyncEnabled")]
    pub password_sync_enabled: Option<bool>,
    ///Used to indicate that writeback of password resets from Microsoft Entra ID to on-premises AD is enabled. This property isn't in use and updating it isn't supported.
    #[serde(rename = "passwordWritebackEnabled")]
    pub password_writeback_enabled: Option<bool>,
    ///Used to indicate that we should quarantine objects with conflicting proxy address.
    #[serde(rename = "quarantineUponProxyAddressesConflictEnabled")]
    pub quarantine_upon_proxy_addresses_conflict_enabled: Option<bool>,
    ///Used to indicate that we should quarantine objects conflicting with duplicate userPrincipalName.
    #[serde(rename = "quarantineUponUpnConflictEnabled")]
    pub quarantine_upon_upn_conflict_enabled: Option<bool>,
    ///Used to indicate that we should soft match objects based on userPrincipalName.
    #[serde(rename = "softMatchOnUpnEnabled")]
    pub soft_match_on_upn_enabled: Option<bool>,
    ///Used to indicate that we should synchronize userPrincipalName objects for managed users with licenses.
    #[serde(rename = "synchronizeUpnForManagedUsersEnabled")]
    pub synchronize_upn_for_managed_users_enabled: Option<bool>,
    ///Used to indicate that Microsoft 365 Group write-back is enabled.
    #[serde(rename = "unifiedGroupWritebackEnabled")]
    pub unified_group_writeback_enabled: Option<bool>,
    ///Used to indicate that feature to force password change for a user on logon is enabled while synchronizing on-premise credentials.
    #[serde(rename = "userForcePasswordChangeOnLogonEnabled")]
    pub user_force_password_change_on_logon_enabled: Option<bool>,
    ///Used to indicate that user writeback is enabled.
    #[serde(rename = "userWritebackEnabled")]
    pub user_writeback_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnPremisesExtensionAttributes {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///First customizable extension attribute.
    #[serde(rename = "extensionAttribute1")]
    pub extension_attribute1: Option<String>,
    ///Tenth customizable extension attribute.
    #[serde(rename = "extensionAttribute10")]
    pub extension_attribute10: Option<String>,
    ///Eleventh customizable extension attribute.
    #[serde(rename = "extensionAttribute11")]
    pub extension_attribute11: Option<String>,
    ///Twelfth customizable extension attribute.
    #[serde(rename = "extensionAttribute12")]
    pub extension_attribute12: Option<String>,
    ///Thirteenth customizable extension attribute.
    #[serde(rename = "extensionAttribute13")]
    pub extension_attribute13: Option<String>,
    ///Fourteenth customizable extension attribute.
    #[serde(rename = "extensionAttribute14")]
    pub extension_attribute14: Option<String>,
    ///Fifteenth customizable extension attribute.
    #[serde(rename = "extensionAttribute15")]
    pub extension_attribute15: Option<String>,
    ///Second customizable extension attribute.
    #[serde(rename = "extensionAttribute2")]
    pub extension_attribute2: Option<String>,
    ///Third customizable extension attribute.
    #[serde(rename = "extensionAttribute3")]
    pub extension_attribute3: Option<String>,
    ///Fourth customizable extension attribute.
    #[serde(rename = "extensionAttribute4")]
    pub extension_attribute4: Option<String>,
    ///Fifth customizable extension attribute.
    #[serde(rename = "extensionAttribute5")]
    pub extension_attribute5: Option<String>,
    ///Sixth customizable extension attribute.
    #[serde(rename = "extensionAttribute6")]
    pub extension_attribute6: Option<String>,
    ///Seventh customizable extension attribute.
    #[serde(rename = "extensionAttribute7")]
    pub extension_attribute7: Option<String>,
    ///Eighth customizable extension attribute.
    #[serde(rename = "extensionAttribute8")]
    pub extension_attribute8: Option<String>,
    ///Ninth customizable extension attribute.
    #[serde(rename = "extensionAttribute9")]
    pub extension_attribute9: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnPremisesProvisioningError {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Category of the provisioning error. Note: Currently, there is only one possible value. Possible value: PropertyConflict - indicates a property value is not unique. Other objects contain the same value for the property.
    pub category: Option<String>,
    ///The date and time at which the error occurred.
    #[serde(rename = "occurredDateTime")]
    pub occurred_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Name of the directory property causing the error. Current possible values: UserPrincipalName or ProxyAddress
    #[serde(rename = "propertyCausingError")]
    pub property_causing_error: Option<String>,
    ///Value of the property causing the error.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnTokenIssuanceStartCustomExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onTokenIssuanceStartCustomExtension".to_string())]
    pub odata_type: String,
    ///Configuration for securing the API call to the logic app. For example, using OAuth client credentials flow.
    #[serde(rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<
        MicrosoftGraphCustomExtensionAuthenticationConfiguration,
    >,
    ///The behaviour on error for the custom authentication extension.
    #[serde(rename = "behaviorOnError")]
    pub behavior_on_error: Option<MicrosoftGraphCustomExtensionBehaviorOnError>,
    ///Collection of claims to be returned by the API called by this custom authentication extension. Used to populate claims mapping experience in Microsoft Entra admin center. Optional.
    #[serde(rename = "claimsForTokenConfiguration")]
    pub claims_for_token_configuration: Option<
        Vec<MicrosoftGraphOnTokenIssuanceStartReturnClaim>,
    >,
    ///HTTP connection settings that define how long Microsoft Entra ID can wait for a connection to a logic app, how many times you can retry a timed-out connection and the exception scenarios when retries are allowed.
    #[serde(rename = "clientConfiguration")]
    pub client_configuration: Option<MicrosoftGraphCustomExtensionClientConfiguration>,
    ///Description for the customCalloutExtension object.
    pub description: Option<String>,
    ///Display name for the customCalloutExtension object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The type and details for configuring the endpoint to call the logic app's workflow.
    #[serde(rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<
        MicrosoftGraphCustomExtensionEndpointConfiguration,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnTokenIssuanceStartCustomExtensionHandler {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onTokenIssuanceStartCustomExtensionHandler".to_string())]
    pub odata_type: String,
    pub configuration: Option<MicrosoftGraphCustomExtensionOverwriteConfiguration>,
    #[serde(rename = "customExtension")]
    pub custom_extension: Option<MicrosoftGraphOnTokenIssuanceStartCustomExtension>,
}
discriminated_enum! {
    pub enum MicrosoftGraphOnTokenIssuanceStartHandler { discriminator : "@odata.type",
    variants : [("#microsoft.graph.onTokenIssuanceStartCustomExtensionHandler",
    MicrosoftGraphOnTokenIssuanceStartCustomExtensionHandler(Box <
    MicrosoftGraphOnTokenIssuanceStartCustomExtensionHandler >))], fallback :
    OnTokenIssuanceStartHandler(Box < MicrosoftGraphOnTokenIssuanceStartHandlerBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnTokenIssuanceStartHandlerBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnTokenIssuanceStartListener {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onTokenIssuanceStartListener".to_string())]
    pub odata_type: String,
    ///The identifier of the authenticationEventsFlow object.
    #[serde(rename = "authenticationEventsFlowId")]
    pub authentication_events_flow_id: Option<String>,
    ///The conditions on which this authenticationEventListener should trigger.
    pub conditions: Option<MicrosoftGraphAuthenticationConditions>,
    ///The handler to invoke when conditions are met for this onTokenIssuanceStartListener.
    pub handler: Option<MicrosoftGraphOnTokenIssuanceStartHandler>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnTokenIssuanceStartReturnClaim {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The identifier of the claim returned by an API that is to be add to a token being issued.
    #[serde(rename = "claimIdInApiResponse")]
    pub claim_id_in_api_response: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnUserCreateStartExternalUsersSelfServiceSignUp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.onUserCreateStartExternalUsersSelfServiceSignUp".to_string()
    )]
    pub odata_type: String,
    ///The type of user to create. Maps to userType property of user object. The possible values are: member, guest, unknownFutureValue.
    #[serde(rename = "userTypeToCreate")]
    pub user_type_to_create: Option<MicrosoftGraphUserType>,
}
discriminated_enum! {
    pub enum MicrosoftGraphOnUserCreateStartHandler { discriminator : "@odata.type",
    variants : [("#microsoft.graph.onUserCreateStartExternalUsersSelfServiceSignUp",
    MicrosoftGraphOnUserCreateStartExternalUsersSelfServiceSignUp(Box <
    MicrosoftGraphOnUserCreateStartExternalUsersSelfServiceSignUp >))], fallback :
    OnUserCreateStartHandler(Box < MicrosoftGraphOnUserCreateStartHandlerBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnUserCreateStartHandlerBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnUserCreateStartListener {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onUserCreateStartListener".to_string())]
    pub odata_type: String,
    ///The identifier of the authenticationEventsFlow object.
    #[serde(rename = "authenticationEventsFlowId")]
    pub authentication_events_flow_id: Option<String>,
    ///The conditions on which this authenticationEventListener should trigger.
    pub conditions: Option<MicrosoftGraphAuthenticationConditions>,
    ///Required. Configuration for what to invoke if the event resolves to this listener. This lets us define potential handler configurations per-event.
    pub handler: Option<MicrosoftGraphOnUserCreateStartHandler>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOneDriveForBusinessProtectionPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.oneDriveForBusinessProtectionPolicy".to_string())]
    pub odata_type: String,
    ///The identity of person who created the policy.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the policy.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the policy to be created.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Contains the details of the Onedrive for Business protection rule.
    #[serde(rename = "driveInclusionRules")]
    pub drive_inclusion_rules: Option<Vec<MicrosoftGraphDriveProtectionRule>>,
    ///Contains the protection units associated with a  OneDrive for Business protection policy.
    #[serde(rename = "driveProtectionUnits")]
    pub drive_protection_units: Option<Vec<MicrosoftGraphDriveProtectionUnit>>,
    #[serde(rename = "driveProtectionUnitsBulkAdditionJobs")]
    pub drive_protection_units_bulk_addition_jobs: Option<
        Vec<MicrosoftGraphDriveProtectionUnitsBulkAdditionJob>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the person who last modified the policy.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The timestamp of the last modification of the policy.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains the retention setting details for the policy.
    #[serde(rename = "retentionSettings")]
    pub retention_settings: Option<Vec<MicrosoftGraphRetentionSetting>>,
    ///The aggregated status of the protection units associated with the policy. The possible values are: inactive, activeWithErrors, updating, active, unknownFutureValue.
    pub status: Option<MicrosoftGraphProtectionPolicyStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOneDriveForBusinessRestoreSession {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.oneDriveForBusinessRestoreSession".to_string())]
    pub odata_type: String,
    ///The time of completion of the restore session.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The identity of person who created the restore session.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the restore session.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A collection of restore points and destination details that can be used to restore a OneDrive for work or school drive.
    #[serde(rename = "driveRestoreArtifacts")]
    pub drive_restore_artifacts: Option<Vec<MicrosoftGraphDriveRestoreArtifact>>,
    ///A collection of user mailboxes and destination details that can be used to restore a OneDrive for work or school drive.
    #[serde(rename = "driveRestoreArtifactsBulkAdditionRequests")]
    pub drive_restore_artifacts_bulk_addition_requests: Option<
        Vec<MicrosoftGraphDriveRestoreArtifactsBulkAdditionRequest>,
    >,
    ///Contains error details if the restore session fails or completes with an error.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the restore session.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification of the restore session.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether the restore session was created normally or by a bulk job.
    #[serde(rename = "restoreJobType")]
    pub restore_job_type: Option<MicrosoftGraphRestoreJobType>,
    ///The number of metadata artifacts that belong to this restore session.
    #[serde(rename = "restoreSessionArtifactCount")]
    pub restore_session_artifact_count: Option<
        MicrosoftGraphRestoreSessionArtifactCount,
    >,
    ///Status of the restore session. The value is an aggregated status of the restored artifacts. The possible values are: draft, activating, active, completedWithError, completed, unknownFutureValue, failed. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: failed.
    pub status: Option<MicrosoftGraphRestoreSessionStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnenote {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onenote".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.
    pub notebooks: Option<Vec<MicrosoftGraphNotebook>>,
    ///The status of OneNote operations. Getting an operations collection isn't supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.
    pub operations: Option<Vec<MicrosoftGraphOnenoteOperation>>,
    ///The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.
    pub pages: Option<Vec<MicrosoftGraphOnenotePage>>,
    ///The image and other file resources in OneNote pages. Getting a resources collection isn't supported, but you can get the binary content of a specific resource. Read-only. Nullable.
    pub resources: Option<Vec<MicrosoftGraphOnenoteResource>>,
    ///The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.
    #[serde(rename = "sectionGroups")]
    pub section_groups: Option<Vec<MicrosoftGraphSectionGroup>>,
    ///The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.
    pub sections: Option<Vec<MicrosoftGraphOnenoteSection>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnenoteEntityBaseModel {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onenoteEntityBaseModel".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The endpoint where you can get details about the page. Read-only.
    #[serde(rename = "self")]
    pub self_: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnenoteEntityHierarchyModel {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onenoteEntityHierarchyModel".to_string())]
    pub odata_type: String,
    ///Identity of the user, device, and application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the notebook.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user, device, and application that created the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The endpoint where you can get details about the page. Read-only.
    #[serde(rename = "self")]
    pub self_: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnenoteEntitySchemaObjectModel {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onenoteEntitySchemaObjectModel".to_string())]
    pub odata_type: String,
    ///The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The endpoint where you can get details about the page. Read-only.
    #[serde(rename = "self")]
    pub self_: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnenoteOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onenoteOperation".to_string())]
    pub odata_type: String,
    ///The start time of the operation.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The error returned by the operation.
    pub error: Option<MicrosoftGraphOnenoteOperationError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The time of the last action of the operation.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The operation percent complete if the operation is still in running status.
    #[serde(rename = "percentComplete")]
    pub percent_complete: Option<String>,
    ///The resource id.
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
    ///The resource URI for the object. For example, the resource URI for a copied page or section.
    #[serde(rename = "resourceLocation")]
    pub resource_location: Option<String>,
    ///The current status of the operation: notStarted, running, completed, failed
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnenoteOperationError {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The error code.
    pub code: Option<String>,
    ///The error message.
    pub message: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnenotePage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onenotePage".to_string())]
    pub odata_type: String,
    ///The page's HTML content.
    pub content: Option<String>,
    ///The URL for the page's HTML content.  Read-only.
    #[serde(rename = "contentUrl")]
    pub content_url: Option<String>,
    ///The unique identifier of the application that created the page. Read-only.
    #[serde(rename = "createdByAppId")]
    pub created_by_app_id: Option<String>,
    ///The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time when the page was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The indentation level of the page. Read-only.
    pub level: Option<f64>,
    ///Links for opening the page. The oneNoteClientURL link opens the page in the OneNote native client if it 's installed. The oneNoteWebUrl link opens the page in OneNote on the web. Read-only.
    pub links: Option<MicrosoftGraphPageLinks>,
    ///The order of the page within its parent section. Read-only.
    pub order: Option<f64>,
    ///The notebook that contains the page.  Read-only.
    #[serde(rename = "parentNotebook")]
    pub parent_notebook: Option<Box<MicrosoftGraphNotebook>>,
    ///The section that contains the page. Read-only.
    #[serde(rename = "parentSection")]
    pub parent_section: Option<Box<MicrosoftGraphOnenoteSection>>,
    ///The endpoint where you can get details about the page. Read-only.
    #[serde(rename = "self")]
    pub self_: Option<String>,
    ///The title of the page.
    pub title: Option<String>,
    #[serde(rename = "userTags")]
    pub user_tags: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnenoteResource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onenoteResource".to_string())]
    pub odata_type: String,
    ///The content stream
    pub content: Option<String>,
    ///The URL for downloading the content
    #[serde(rename = "contentUrl")]
    pub content_url: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The endpoint where you can get details about the page. Read-only.
    #[serde(rename = "self")]
    pub self_: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnenoteSection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onenoteSection".to_string())]
    pub odata_type: String,
    ///Identity of the user, device, and application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the notebook.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether this is the user's default section. Read-only.
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    ///Identity of the user, device, and application that created the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Links for opening the section. The oneNoteClientURL link opens the section in the OneNote native client if it's installed. The oneNoteWebURL link opens the section in OneNote on the web.
    pub links: Option<MicrosoftGraphSectionLinks>,
    ///The collection of pages in the section.  Read-only. Nullable.
    pub pages: Option<Vec<MicrosoftGraphOnenotePage>>,
    ///The pages endpoint where you can get details for all the pages in the section. Read-only.
    #[serde(rename = "pagesUrl")]
    pub pages_url: Option<String>,
    ///The notebook that contains the section.  Read-only.
    #[serde(rename = "parentNotebook")]
    pub parent_notebook: Option<Box<MicrosoftGraphNotebook>>,
    ///The section group that contains the section.  Read-only.
    #[serde(rename = "parentSectionGroup")]
    pub parent_section_group: Option<Box<MicrosoftGraphSectionGroup>>,
    ///The endpoint where you can get details about the page. Read-only.
    #[serde(rename = "self")]
    pub self_: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOnenoteUserRole {
    #[serde(rename = "None")]
    #[default]
    None,
    #[serde(rename = "Owner")]
    Owner,
    #[serde(rename = "Contributor")]
    Contributor,
    #[serde(rename = "Reader")]
    Reader,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnlineMeeting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onlineMeeting".to_string())]
    pub odata_type: String,
    ///Indicates whether attendees can turn on their camera.
    #[serde(rename = "allowAttendeeToEnableCamera")]
    pub allow_attendee_to_enable_camera: Option<bool>,
    ///Indicates whether attendees can turn on their microphone.
    #[serde(rename = "allowAttendeeToEnableMic")]
    pub allow_attendee_to_enable_mic: Option<bool>,
    ///Indicates whether breakout rooms are enabled for the meeting.
    #[serde(rename = "allowBreakoutRooms")]
    pub allow_breakout_rooms: Option<bool>,
    ///Indicates whether the ability to copy and share meeting content is enabled for the meeting.
    #[serde(rename = "allowCopyingAndSharingMeetingContent")]
    pub allow_copying_and_sharing_meeting_content: Option<bool>,
    ///Indicates whether live share is enabled for the meeting. Possible values are: enabled, disabled, unknownFutureValue.
    #[serde(rename = "allowLiveShare")]
    pub allow_live_share: Option<MicrosoftGraphMeetingLiveShareOptions>,
    ///Specifies the mode of the meeting chat.
    #[serde(rename = "allowMeetingChat")]
    pub allow_meeting_chat: Option<MicrosoftGraphMeetingChatMode>,
    ///Specifies if participants are allowed to rename themselves in an instance of the meeting.
    #[serde(rename = "allowParticipantsToChangeName")]
    pub allow_participants_to_change_name: Option<bool>,
    ///Indicates whether PowerPoint live is enabled for the meeting.
    #[serde(rename = "allowPowerPointSharing")]
    pub allow_power_point_sharing: Option<bool>,
    ///Indicates whether recording is enabled for the meeting.
    #[serde(rename = "allowRecording")]
    pub allow_recording: Option<bool>,
    ///Indicates if Teams reactions are enabled for the meeting.
    #[serde(rename = "allowTeamworkReactions")]
    pub allow_teamwork_reactions: Option<bool>,
    ///Indicates whether transcription is enabled for the meeting.
    #[serde(rename = "allowTranscription")]
    pub allow_transcription: Option<bool>,
    ///Indicates whether whiteboard is enabled for the meeting.
    #[serde(rename = "allowWhiteboard")]
    pub allow_whiteboard: Option<bool>,
    ///Specifies the users who can admit from the lobby. Possible values are: organizerAndCoOrganizersAndPresenters, organizerAndCoOrganizers, unknownFutureValue.
    #[serde(rename = "allowedLobbyAdmitters")]
    pub allowed_lobby_admitters: Option<MicrosoftGraphAllowedLobbyAdmitterRoles>,
    ///Specifies who can be a presenter in a meeting. Possible values are: everyone, organization, roleIsPresenter, organizer, unknownFutureValue. Inherited from onlineMeetingBase.
    #[serde(rename = "allowedPresenters")]
    pub allowed_presenters: Option<MicrosoftGraphOnlineMeetingPresenters>,
    ///The attendance reports of an online meeting. Read-only.
    #[serde(rename = "attendanceReports")]
    pub attendance_reports: Option<Vec<MicrosoftGraphMeetingAttendanceReport>>,
    ///The content stream of the attendee report of a Microsoft Teams live event. Read-only.
    #[serde(rename = "attendeeReport")]
    pub attendee_report: Option<String>,
    ///The phone access (dial-in) information for an online meeting. Read-only.
    #[serde(rename = "audioConferencing")]
    pub audio_conferencing: Option<MicrosoftGraphAudioConferencing>,
    ///Settings related to a live event.
    #[serde(rename = "broadcastSettings")]
    pub broadcast_settings: Option<MicrosoftGraphBroadcastMeetingSettings>,
    ///The chat information associated with this online meeting.
    #[serde(rename = "chatInfo")]
    pub chat_info: Option<MicrosoftGraphChatInfo>,
    ///Specifies the configuration settings for meeting chat restrictions.
    #[serde(rename = "chatRestrictions")]
    pub chat_restrictions: Option<MicrosoftGraphChatRestrictions>,
    ///The meeting creation time in UTC. Read-only.
    #[serde(rename = "creationDateTime")]
    pub creation_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The meeting end time in UTC. Required when you create an online meeting.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The external ID that is a custom identifier. Optional.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether this meeting is a Teams live event.
    #[serde(rename = "isBroadcast")]
    pub is_broadcast: Option<bool>,
    ///Indicates whether end-to-end encryption (E2EE) is enabled for the online meeting.
    #[serde(rename = "isEndToEndEncryptionEnabled")]
    pub is_end_to_end_encryption_enabled: Option<bool>,
    ///Indicates whether to announce when callers join or leave.
    #[serde(rename = "isEntryExitAnnounced")]
    pub is_entry_exit_announced: Option<bool>,
    ///The join information in the language and locale variant specified in 'Accept-Language' request HTTP header. Read-only.
    #[serde(rename = "joinInformation")]
    pub join_information: Option<MicrosoftGraphItemBody>,
    ///Specifies the joinMeetingId, the meeting passcode, and the requirement for the passcode. Once an onlineMeeting is created, the joinMeetingIdSettings can't be modified. To make any changes to this property, you must cancel this meeting and create a new one.
    #[serde(rename = "joinMeetingIdSettings")]
    pub join_meeting_id_settings: Option<MicrosoftGraphJoinMeetingIdSettings>,
    ///The join URL of the online meeting. Read-only.
    #[serde(rename = "joinWebUrl")]
    pub join_web_url: Option<String>,
    ///Specifies which participants can bypass the meeting lobby.
    #[serde(rename = "lobbyBypassSettings")]
    pub lobby_bypass_settings: Option<MicrosoftGraphLobbyBypassSettings>,
    ///The ID of the meeting template.
    #[serde(rename = "meetingTemplateId")]
    pub meeting_template_id: Option<String>,
    ///The participants associated with the online meeting, including the organizer and the attendees.
    pub participants: Option<MicrosoftGraphMeetingParticipants>,
    ///Indicates whether to record the meeting automatically.
    #[serde(rename = "recordAutomatically")]
    pub record_automatically: Option<bool>,
    ///The recordings of an online meeting. Read-only.
    pub recordings: Option<Vec<MicrosoftGraphCallRecording>>,
    ///Specifies whether meeting chat history is shared with participants.  Possible values are: all, none, unknownFutureValue.
    #[serde(rename = "shareMeetingChatHistoryDefault")]
    pub share_meeting_chat_history_default: Option<
        MicrosoftGraphMeetingChatHistoryDefaultMode,
    >,
    ///The meeting start time in UTC.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The subject of the online meeting.
    pub subject: Option<String>,
    ///The transcripts of an online meeting. Read-only.
    pub transcripts: Option<Vec<MicrosoftGraphCallTranscript>>,
    ///The video teleconferencing ID. Read-only.
    #[serde(rename = "videoTeleconferenceId")]
    pub video_teleconference_id: Option<String>,
    ///Specifies whether the client application should apply a watermark to a content type.
    #[serde(rename = "watermarkProtection")]
    pub watermark_protection: Option<MicrosoftGraphWatermarkProtectionValues>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnlineMeetingBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.onlineMeetingBase".to_string())]
    pub odata_type: String,
    ///Indicates whether attendees can turn on their camera.
    #[serde(rename = "allowAttendeeToEnableCamera")]
    pub allow_attendee_to_enable_camera: Option<bool>,
    ///Indicates whether attendees can turn on their microphone.
    #[serde(rename = "allowAttendeeToEnableMic")]
    pub allow_attendee_to_enable_mic: Option<bool>,
    ///Indicates whether breakout rooms are enabled for the meeting.
    #[serde(rename = "allowBreakoutRooms")]
    pub allow_breakout_rooms: Option<bool>,
    ///Indicates whether the ability to copy and share meeting content is enabled for the meeting.
    #[serde(rename = "allowCopyingAndSharingMeetingContent")]
    pub allow_copying_and_sharing_meeting_content: Option<bool>,
    ///Indicates whether live share is enabled for the meeting. Possible values are: enabled, disabled, unknownFutureValue.
    #[serde(rename = "allowLiveShare")]
    pub allow_live_share: Option<MicrosoftGraphMeetingLiveShareOptions>,
    ///Specifies the mode of the meeting chat.
    #[serde(rename = "allowMeetingChat")]
    pub allow_meeting_chat: Option<MicrosoftGraphMeetingChatMode>,
    ///Specifies if participants are allowed to rename themselves in an instance of the meeting.
    #[serde(rename = "allowParticipantsToChangeName")]
    pub allow_participants_to_change_name: Option<bool>,
    ///Indicates whether PowerPoint live is enabled for the meeting.
    #[serde(rename = "allowPowerPointSharing")]
    pub allow_power_point_sharing: Option<bool>,
    ///Indicates whether recording is enabled for the meeting.
    #[serde(rename = "allowRecording")]
    pub allow_recording: Option<bool>,
    ///Indicates if Teams reactions are enabled for the meeting.
    #[serde(rename = "allowTeamworkReactions")]
    pub allow_teamwork_reactions: Option<bool>,
    ///Indicates whether transcription is enabled for the meeting.
    #[serde(rename = "allowTranscription")]
    pub allow_transcription: Option<bool>,
    ///Indicates whether whiteboard is enabled for the meeting.
    #[serde(rename = "allowWhiteboard")]
    pub allow_whiteboard: Option<bool>,
    ///Specifies the users who can admit from the lobby. Possible values are: organizerAndCoOrganizersAndPresenters, organizerAndCoOrganizers, unknownFutureValue.
    #[serde(rename = "allowedLobbyAdmitters")]
    pub allowed_lobby_admitters: Option<MicrosoftGraphAllowedLobbyAdmitterRoles>,
    ///Specifies who can be a presenter in a meeting. Possible values are: everyone, organization, roleIsPresenter, organizer, unknownFutureValue. Inherited from onlineMeetingBase.
    #[serde(rename = "allowedPresenters")]
    pub allowed_presenters: Option<MicrosoftGraphOnlineMeetingPresenters>,
    ///The attendance reports of an online meeting. Read-only.
    #[serde(rename = "attendanceReports")]
    pub attendance_reports: Option<Vec<MicrosoftGraphMeetingAttendanceReport>>,
    ///The phone access (dial-in) information for an online meeting. Read-only.
    #[serde(rename = "audioConferencing")]
    pub audio_conferencing: Option<MicrosoftGraphAudioConferencing>,
    ///The chat information associated with this online meeting.
    #[serde(rename = "chatInfo")]
    pub chat_info: Option<MicrosoftGraphChatInfo>,
    ///Specifies the configuration settings for meeting chat restrictions.
    #[serde(rename = "chatRestrictions")]
    pub chat_restrictions: Option<MicrosoftGraphChatRestrictions>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether end-to-end encryption (E2EE) is enabled for the online meeting.
    #[serde(rename = "isEndToEndEncryptionEnabled")]
    pub is_end_to_end_encryption_enabled: Option<bool>,
    ///Indicates whether to announce when callers join or leave.
    #[serde(rename = "isEntryExitAnnounced")]
    pub is_entry_exit_announced: Option<bool>,
    ///The join information in the language and locale variant specified in 'Accept-Language' request HTTP header. Read-only.
    #[serde(rename = "joinInformation")]
    pub join_information: Option<MicrosoftGraphItemBody>,
    ///Specifies the joinMeetingId, the meeting passcode, and the requirement for the passcode. Once an onlineMeeting is created, the joinMeetingIdSettings can't be modified. To make any changes to this property, you must cancel this meeting and create a new one.
    #[serde(rename = "joinMeetingIdSettings")]
    pub join_meeting_id_settings: Option<MicrosoftGraphJoinMeetingIdSettings>,
    ///The join URL of the online meeting. Read-only.
    #[serde(rename = "joinWebUrl")]
    pub join_web_url: Option<String>,
    ///Specifies which participants can bypass the meeting lobby.
    #[serde(rename = "lobbyBypassSettings")]
    pub lobby_bypass_settings: Option<MicrosoftGraphLobbyBypassSettings>,
    ///Indicates whether to record the meeting automatically.
    #[serde(rename = "recordAutomatically")]
    pub record_automatically: Option<bool>,
    ///Specifies whether meeting chat history is shared with participants.  Possible values are: all, none, unknownFutureValue.
    #[serde(rename = "shareMeetingChatHistoryDefault")]
    pub share_meeting_chat_history_default: Option<
        MicrosoftGraphMeetingChatHistoryDefaultMode,
    >,
    ///The subject of the online meeting.
    pub subject: Option<String>,
    ///The video teleconferencing ID. Read-only.
    #[serde(rename = "videoTeleconferenceId")]
    pub video_teleconference_id: Option<String>,
    ///Specifies whether the client application should apply a watermark to a content type.
    #[serde(rename = "watermarkProtection")]
    pub watermark_protection: Option<MicrosoftGraphWatermarkProtectionValues>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOnlineMeetingContentSharingDisabledReason {
    #[serde(rename = "watermarkProtection")]
    #[default]
    WatermarkProtection,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnlineMeetingInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The ID of the conference.
    #[serde(rename = "conferenceId")]
    pub conference_id: Option<String>,
    ///The external link that launches the online meeting. This is a URL that clients launch into a browser and will redirect the user to join the meeting.
    #[serde(rename = "joinUrl")]
    pub join_url: Option<String>,
    ///All of the phone numbers associated with this conference.
    pub phones: Option<Vec<MicrosoftGraphPhone>>,
    ///The preformatted quick dial for this call.
    #[serde(rename = "quickDial")]
    pub quick_dial: Option<String>,
    ///The toll free numbers that can be used to join the conference.
    #[serde(rename = "tollFreeNumbers")]
    pub toll_free_numbers: Option<Vec<Option<String>>>,
    ///The toll number that can be used to join the conference.
    #[serde(rename = "tollNumber")]
    pub toll_number: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOnlineMeetingPresenters {
    #[serde(rename = "everyone")]
    #[default]
    Everyone,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "roleIsPresenter")]
    RoleIsPresenter,
    #[serde(rename = "organizer")]
    Organizer,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOnlineMeetingProviderType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "skypeForBusiness")]
    SkypeForBusiness,
    #[serde(rename = "skypeForConsumer")]
    SkypeForConsumer,
    #[serde(rename = "teamsForBusiness")]
    TeamsForBusiness,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOnlineMeetingRestricted {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies the reason shared content from this participant is disabled. Possible values are: watermarkProtection, unknownFutureValue.
    #[serde(rename = "contentSharingDisabled")]
    pub content_sharing_disabled: Option<
        MicrosoftGraphOnlineMeetingContentSharingDisabledReason,
    >,
    ///Specifies the reason video from this participant is disabled. Possible values are: watermarkProtection, unknownFutureValue.
    #[serde(rename = "videoDisabled")]
    pub video_disabled: Option<MicrosoftGraphOnlineMeetingVideoDisabledReason>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOnlineMeetingRole {
    #[serde(rename = "attendee")]
    #[default]
    Attendee,
    #[serde(rename = "presenter")]
    Presenter,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "producer")]
    Producer,
    #[serde(rename = "coorganizer")]
    Coorganizer,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOnlineMeetingVideoDisabledReason {
    #[serde(rename = "watermarkProtection")]
    #[default]
    WatermarkProtection,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOpenShift {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.openShift".to_string())]
    pub odata_type: String,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Draft changes in the openShift are only visible to managers until they're shared.
    #[serde(rename = "draftOpenShift")]
    pub draft_open_shift: Option<MicrosoftGraphOpenShiftItem>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The openShift is marked for deletion, a process that is finalized when the schedule is shared.
    #[serde(rename = "isStagedForDeletion")]
    pub is_staged_for_deletion: Option<bool>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The ID of the schedulingGroup that contains the openShift.
    #[serde(rename = "schedulingGroupId")]
    pub scheduling_group_id: Option<String>,
    ///The shared version of this openShift that is viewable by both employees and managers.
    #[serde(rename = "sharedOpenShift")]
    pub shared_open_shift: Option<MicrosoftGraphOpenShiftItem>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOpenShiftChangeRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.openShiftChangeRequest".to_string())]
    pub odata_type: String,
    ///Indicates who the request is assigned to. Possible values are: sender, recipient, manager, system, unknownFutureValue.
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<MicrosoftGraphScheduleChangeRequestActor>,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when the manager approved or declined the scheduleChangeRequest. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "managerActionDateTime")]
    pub manager_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the manager regarding the scheduleChangeRequest. Optional.
    #[serde(rename = "managerActionMessage")]
    pub manager_action_message: Option<String>,
    ///The user ID of the manager who approved or declined the scheduleChangeRequest.
    #[serde(rename = "managerUserId")]
    pub manager_user_id: Option<String>,
    ///ID for the open shift.
    #[serde(rename = "openShiftId")]
    pub open_shift_id: Option<String>,
    ///The date and time when the sender sent the scheduleChangeRequest. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "senderDateTime")]
    pub sender_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the sender of the scheduleChangeRequest. Optional.
    #[serde(rename = "senderMessage")]
    pub sender_message: Option<String>,
    ///The user ID of the sender of the scheduleChangeRequest.
    #[serde(rename = "senderUserId")]
    pub sender_user_id: Option<String>,
    ///The state of the scheduleChangeRequest. Possible values are: pending, approved, declined, unknownFutureValue.
    pub state: Option<MicrosoftGraphScheduleChangeState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOpenShiftItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.openShiftItem".to_string())]
    pub odata_type: String,
    ///An incremental part of a shift which can cover details of when and where an employee is during their shift. For example, an assignment or a scheduled break or lunch. Required.
    pub activities: Option<Vec<MicrosoftGraphShiftActivity>>,
    ///The shift label of the shiftItem.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The shift notes for the shiftItem.
    pub notes: Option<String>,
    ///Count of the number of slots for the given open shift.
    #[serde(rename = "openSlotCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub open_slot_count: Option<f64>,
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub theme: Option<MicrosoftGraphScheduleEntityTheme>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOpenTypeExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.openTypeExtension".to_string())]
    pub odata_type: String,
    ///A unique text identifier for an open type data extension. Optional.
    #[serde(rename = "extensionName")]
    pub extension_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOperatingSystemSpecifications {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The platform of the operating system (for example, 'Windows').
    #[serde(rename = "operatingSystemPlatform")]
    pub operating_system_platform: Option<String>,
    ///The version string of the operating system.
    #[serde(rename = "operatingSystemVersion")]
    pub operating_system_version: Option<String>,
}
///Work From Anywhere windows device upgrade eligibility status.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOperatingSystemUpgradeEligibility {
    #[serde(rename = "upgraded")]
    #[default]
    Upgraded,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "notCapable")]
    NotCapable,
    #[serde(rename = "capable")]
    Capable,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.operation".to_string())]
    pub odata_type: String,
    ///The start time of the operation.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The time of the last action of the operation.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The current status of the operation: notStarted, running, completed, failed
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOperationError {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Operation error code.
    pub code: Option<String>,
    ///Operation error message.
    pub message: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOperationResult {
    #[serde(rename = "success")]
    #[default]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "timeout")]
    Timeout,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOperationStatus {
    #[serde(rename = "NotStarted")]
    #[default]
    NotStarted,
    #[serde(rename = "Running")]
    Running,
    #[serde(rename = "Completed")]
    Completed,
    #[serde(rename = "Failed")]
    Failed,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOptionalClaim {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Additional properties of the claim. If a property exists in this collection, it modifies the behavior of the optional claim specified in the name property.
    #[serde(rename = "additionalProperties")]
    pub additional_properties: Option<Vec<Option<String>>>,
    ///If the value is true, the claim specified by the client is necessary to ensure a smooth authorization experience for the specific task requested by the end user. The default value is false.
    pub essential: Option<bool>,
    ///The name of the optional claim.
    pub name: Option<String>,
    ///The source (directory object) of the claim. There are predefined claims and user-defined claims from extension properties. If the source value is null, the claim is a predefined optional claim. If the source value is user, the value in the name property is the extension property from the user object.
    pub source: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOptionalClaims {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The optional claims returned in the JWT access token.
    #[serde(rename = "accessToken")]
    pub access_token: Option<Vec<MicrosoftGraphOptionalClaim>>,
    ///The optional claims returned in the JWT ID token.
    #[serde(rename = "idToken")]
    pub id_token: Option<Vec<MicrosoftGraphOptionalClaim>>,
    ///The optional claims returned in the SAML token.
    #[serde(rename = "saml2Token")]
    pub saml2token: Option<Vec<MicrosoftGraphOptionalClaim>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOrgContact {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.orgContact".to_string())]
    pub odata_type: String,
    ///Postal addresses for this organizational contact. For now a contact can only have one physical address.
    pub addresses: Option<Vec<MicrosoftGraphPhysicalOfficeAddress>>,
    ///Name of the company that this organizational contact belongs to.  Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
    #[serde(rename = "companyName")]
    pub company_name: Option<String>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name for the department in which the contact works.  Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
    pub department: Option<String>,
    ///The contact's direct reports. (The users and contacts that have their manager property set to this contact.)  Read-only. Nullable. Supports $expand.
    #[serde(rename = "directReports")]
    pub direct_reports: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Display name for this organizational contact. Maximum length is 256 characters. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values), $search, and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///First name for this organizational contact. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
    #[serde(rename = "givenName")]
    pub given_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Job title for this organizational contact. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
    #[serde(rename = "jobTitle")]
    pub job_title: Option<String>,
    ///The SMTP address for the contact, for example, 'jeff@contoso.com'. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
    pub mail: Option<String>,
    ///Email alias (portion of email address pre-pending the @ symbol) for this organizational contact. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
    #[serde(rename = "mailNickname")]
    pub mail_nickname: Option<String>,
    ///The user or contact that is this contact's manager. Read-only. Supports $expand and $filter (eq) by id.
    pub manager: Option<MicrosoftGraphDirectoryObject>,
    ///Groups that this contact is a member of. Read-only. Nullable. Supports $expand.
    #[serde(rename = "memberOf")]
    pub member_of: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Date and time when this organizational contact was last synchronized from on-premises AD. This date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ne, not, ge, le, in).
    #[serde(rename = "onPremisesLastSyncDateTime")]
    pub on_premises_last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///List of any synchronization provisioning errors for this organizational contact. Supports $filter (eq, not for category and propertyCausingError), /$count eq 0, /$count ne 0.
    #[serde(rename = "onPremisesProvisioningErrors")]
    pub on_premises_provisioning_errors: Option<
        Vec<MicrosoftGraphOnPremisesProvisioningError>,
    >,
    ///true if this object is synced from an on-premises directory; false if this object was originally synced from an on-premises directory but is no longer synced and now mastered in Exchange; null if this object has never been synced from an on-premises directory (default).   Supports $filter (eq, ne, not, in, and eq for null values).
    #[serde(rename = "onPremisesSyncEnabled")]
    pub on_premises_sync_enabled: Option<bool>,
    ///List of phones for this organizational contact. Phone types can be mobile, business, and businessFax. Only one of each type can ever be present in the collection.
    pub phones: Option<Vec<MicrosoftGraphPhone>>,
    ///For example: 'SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com'. The any operator is required for filter expressions on multi-valued properties. Supports $filter (eq, not, ge, le, startsWith, /$count eq 0, /$count ne 0).
    #[serde(rename = "proxyAddresses")]
    pub proxy_addresses: Option<Vec<String>>,
    ///Errors published by a federated service describing a non-transient, service-specific error regarding the properties or link from an organizational contact object .  Supports $filter (eq, not, for isResolved and serviceInstance).
    #[serde(rename = "serviceProvisioningErrors")]
    pub service_provisioning_errors: Option<Vec<MicrosoftGraphServiceProvisioningError>>,
    ///Last name for this organizational contact. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
    pub surname: Option<String>,
    ///Groups that this contact is a member of, including groups that the contact is nested under. Read-only. Nullable.
    #[serde(rename = "transitiveMemberOf")]
    pub transitive_member_of: Option<Vec<MicrosoftGraphDirectoryObject>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOrganization {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.organization".to_string())]
    pub odata_type: String,
    ///The collection of service plans associated with the tenant. Not nullable.
    #[serde(rename = "assignedPlans")]
    pub assigned_plans: Option<Vec<MicrosoftGraphAssignedPlan>>,
    ///Branding for the organization. Nullable.
    pub branding: Option<MicrosoftGraphOrganizationalBranding>,
    ///Telephone number for the organization. Although this property is a string collection, only one number can be set.
    #[serde(rename = "businessPhones")]
    pub business_phones: Option<Vec<String>>,
    ///Navigation property to manage certificate-based authentication configuration. Only a single instance of certificateBasedAuthConfiguration can be created in the collection.
    #[serde(rename = "certificateBasedAuthConfiguration")]
    pub certificate_based_auth_configuration: Option<
        Vec<MicrosoftGraphCertificateBasedAuthConfiguration>,
    >,
    ///City name of the address for the organization.
    pub city: Option<String>,
    ///Country or region name of the address for the organization.
    pub country: Option<String>,
    ///Country or region abbreviation for the organization in ISO 3166-2 format.
    #[serde(rename = "countryLetterCode")]
    pub country_letter_code: Option<String>,
    ///Timestamp of when the organization was created. The value can't be modified and is automatically populated when the organization is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Two-letter ISO 3166 country code indicating the default service usage location of an organization.
    #[serde(rename = "defaultUsageLocation")]
    pub default_usage_location: Option<String>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The display name for the tenant.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The collection of open extensions defined for the organization. Read-only. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Not nullable.
    #[serde(rename = "marketingNotificationEmails")]
    pub marketing_notification_emails: Option<Vec<String>>,
    ///Mobile device management authority.
    #[serde(rename = "mobileDeviceManagementAuthority")]
    pub mobile_device_management_authority: Option<MicrosoftGraphMdmAuthority>,
    ///The time and date at which the tenant was last synced with the on-premises directory. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "onPremisesLastSyncDateTime")]
    pub on_premises_last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///true if this object is synced from an on-premises directory; false if this object was originally synced from an on-premises directory but is no longer synced. Nullable. null if this object isn't synced from on-premises active directory (default).
    #[serde(rename = "onPremisesSyncEnabled")]
    pub on_premises_sync_enabled: Option<bool>,
    ///The type of partnership this tenant has with Microsoft. The possible values are: microsoftSupport, syndicatePartner, breadthPartner, breadthPartnerDelegatedAdmin, resellerPartnerDelegatedAdmin, valueAddedResellerPartnerDelegatedAdmin, unknownFutureValue. Nullable. For more information about the possible types, see partnerTenantType values.
    #[serde(rename = "partnerTenantType")]
    pub partner_tenant_type: Option<MicrosoftGraphPartnerTenantType>,
    ///Postal code of the address for the organization.
    #[serde(rename = "postalCode")]
    pub postal_code: Option<String>,
    ///The preferred language for the organization. Should follow ISO 639-1 Code; for example, en.
    #[serde(rename = "preferredLanguage")]
    pub preferred_language: Option<String>,
    ///The privacy profile of an organization.
    #[serde(rename = "privacyProfile")]
    pub privacy_profile: Option<MicrosoftGraphPrivacyProfile>,
    ///Not nullable.
    #[serde(rename = "provisionedPlans")]
    pub provisioned_plans: Option<Vec<MicrosoftGraphProvisionedPlan>>,
    ///Not nullable.
    #[serde(rename = "securityComplianceNotificationMails")]
    pub security_compliance_notification_mails: Option<Vec<String>>,
    ///Not nullable.
    #[serde(rename = "securityComplianceNotificationPhones")]
    pub security_compliance_notification_phones: Option<Vec<String>>,
    ///State name of the address for the organization.
    pub state: Option<String>,
    ///Street name of the address for organization.
    pub street: Option<String>,
    ///Not nullable.
    #[serde(rename = "technicalNotificationMails")]
    pub technical_notification_mails: Option<Vec<String>>,
    ///Not nullable. Can be one of the following types:  AAD - An enterprise identity access management (IAM) service that serves business-to-employee and business-to-business (B2B) scenarios.  AAD B2C An identity access management (IAM) service that serves business-to-consumer (B2C) scenarios.   CIAM - A customer identity & access management (CIAM) solution that provides an integrated platform to serve consumers, partners, and citizen scenarios.
    #[serde(rename = "tenantType")]
    pub tenant_type: Option<String>,
    ///The collection of domains associated with this tenant. Not nullable.
    #[serde(rename = "verifiedDomains")]
    pub verified_domains: Option<Vec<MicrosoftGraphVerifiedDomain>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOrganizationalBranding {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.organizationalBranding".to_string())]
    pub odata_type: String,
    ///Color that appears in place of the background image in low-bandwidth connections. We recommend that you use the primary color of your banner logo or your organization color. Specify this in hexadecimal format, for example, white is #FFFFFF.
    #[serde(rename = "backgroundColor")]
    pub background_color: Option<String>,
    ///Image that appears as the background of the sign-in page. The allowed types are PNG or JPEG not smaller than 300 KB and not larger than 1920 × 1080 pixels. A smaller image reduces bandwidth requirements and make the page load faster.
    #[serde(rename = "backgroundImage")]
    pub background_image: Option<String>,
    ///A relative URL for the backgroundImage property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "backgroundImageRelativeUrl")]
    pub background_image_relative_url: Option<String>,
    ///A banner version of your company logo that appears on the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "bannerLogo")]
    pub banner_logo: Option<String>,
    ///A relative URL for the bannerLogo property that is combined with a CDN base URL from the cdnList to provide the read-only version served by a CDN. Read-only.
    #[serde(rename = "bannerLogoRelativeUrl")]
    pub banner_logo_relative_url: Option<String>,
    ///A list of base URLs for all available CDN providers that are serving the assets of the current resource. Several CDN providers are used at the same time for high availability of read requests. Read-only.
    #[serde(rename = "cdnList")]
    pub cdn_list: Option<Vec<Option<String>>>,
    ///Represents the content options to be customized throughout the authentication flow for a tenant. NOTE: Supported by Microsoft Entra External ID in external tenants only.
    #[serde(rename = "contentCustomization")]
    pub content_customization: Option<MicrosoftGraphContentCustomization>,
    ///A custom URL for resetting account credentials. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128 characters.
    #[serde(rename = "customAccountResetCredentialsUrl")]
    pub custom_account_reset_credentials_url: Option<String>,
    ///CSS styling that appears on the sign-in page. The allowed format is .css format only and not larger than 25 KB.
    #[serde(rename = "customCSS")]
    pub custom_css: Option<String>,
    ///A relative URL for the customCSS property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "customCSSRelativeUrl")]
    pub custom_cssrelative_url: Option<String>,
    ///A string to replace the default 'Can't access your account?' self-service password reset (SSPR) hyperlink text on the sign-in page. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customCannotAccessYourAccountText")]
    pub custom_cannot_access_your_account_text: Option<String>,
    ///A custom URL to replace the default URL of the self-service password reset (SSPR) 'Can't access your account?' hyperlink on the sign-in page. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128 characters. DO NOT USE. Use customAccountResetCredentialsUrl instead.
    #[serde(rename = "customCannotAccessYourAccountUrl")]
    pub custom_cannot_access_your_account_url: Option<String>,
    ///A string to replace the default 'Forgot my password' hyperlink text on the sign-in form. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customForgotMyPasswordText")]
    pub custom_forgot_my_password_text: Option<String>,
    ///A string to replace the default 'Privacy and Cookies' hyperlink text in the footer. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customPrivacyAndCookiesText")]
    pub custom_privacy_and_cookies_text: Option<String>,
    ///A custom URL to replace the default URL of the 'Privacy and Cookies' hyperlink in the footer. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128 characters.
    #[serde(rename = "customPrivacyAndCookiesUrl")]
    pub custom_privacy_and_cookies_url: Option<String>,
    ///A string to replace the default 'reset it now' hyperlink text on the sign-in form. This text must be in Unicode format and not exceed 256 characters. DO NOT USE: Customization of the 'reset it now' hyperlink text is currently not supported.
    #[serde(rename = "customResetItNowText")]
    pub custom_reset_it_now_text: Option<String>,
    ///A string to replace the the default 'Terms of Use' hyperlink text in the footer. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customTermsOfUseText")]
    pub custom_terms_of_use_text: Option<String>,
    ///A custom URL to replace the default URL of the 'Terms of Use' hyperlink in the footer. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128characters.
    #[serde(rename = "customTermsOfUseUrl")]
    pub custom_terms_of_use_url: Option<String>,
    ///A custom icon (favicon) to replace a default Microsoft product favicon on a Microsoft Entra tenant.
    pub favicon: Option<String>,
    ///A relative url for the favicon above that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "faviconRelativeUrl")]
    pub favicon_relative_url: Option<String>,
    ///The RGB color to apply to customize the color of the header.
    #[serde(rename = "headerBackgroundColor")]
    pub header_background_color: Option<String>,
    ///A company logo that appears in the header of the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "headerLogo")]
    pub header_logo: Option<String>,
    ///A relative URL for the headerLogo property that is combined with a CDN base URL from the cdnList to provide the read-only version served by a CDN. Read-only.
    #[serde(rename = "headerLogoRelativeUrl")]
    pub header_logo_relative_url: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Add different branding based on a locale.
    pub localizations: Option<Vec<MicrosoftGraphOrganizationalBrandingLocalization>>,
    ///Represents the layout configuration to be displayed on the login page for a tenant.
    #[serde(rename = "loginPageLayoutConfiguration")]
    pub login_page_layout_configuration: Option<
        MicrosoftGraphLoginPageLayoutConfiguration,
    >,
    ///Represents the various texts that can be hidden on the login page for a tenant.
    #[serde(rename = "loginPageTextVisibilitySettings")]
    pub login_page_text_visibility_settings: Option<
        MicrosoftGraphLoginPageTextVisibilitySettings,
    >,
    ///Text that appears at the bottom of the sign-in box. Use this to communicate additional information, such as the phone number to your help desk or a legal statement. This text must be in Unicode format and not exceed 1024 characters.
    #[serde(rename = "signInPageText")]
    pub sign_in_page_text: Option<String>,
    ///A square version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "squareLogo")]
    pub square_logo: Option<String>,
    ///A square dark version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "squareLogoDark")]
    pub square_logo_dark: Option<String>,
    ///A relative URL for the squareLogoDark property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "squareLogoDarkRelativeUrl")]
    pub square_logo_dark_relative_url: Option<String>,
    ///A relative URL for the squareLogo property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "squareLogoRelativeUrl")]
    pub square_logo_relative_url: Option<String>,
    ///A string that shows as the hint in the username textbox on the sign-in screen. This text must be a Unicode, without links or code, and can't exceed 64 characters.
    #[serde(rename = "usernameHintText")]
    pub username_hint_text: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOrganizationalBrandingLocalization {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.organizationalBrandingLocalization".to_string())]
    pub odata_type: String,
    ///Color that appears in place of the background image in low-bandwidth connections. We recommend that you use the primary color of your banner logo or your organization color. Specify this in hexadecimal format, for example, white is #FFFFFF.
    #[serde(rename = "backgroundColor")]
    pub background_color: Option<String>,
    ///Image that appears as the background of the sign-in page. The allowed types are PNG or JPEG not smaller than 300 KB and not larger than 1920 × 1080 pixels. A smaller image reduces bandwidth requirements and make the page load faster.
    #[serde(rename = "backgroundImage")]
    pub background_image: Option<String>,
    ///A relative URL for the backgroundImage property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "backgroundImageRelativeUrl")]
    pub background_image_relative_url: Option<String>,
    ///A banner version of your company logo that appears on the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "bannerLogo")]
    pub banner_logo: Option<String>,
    ///A relative URL for the bannerLogo property that is combined with a CDN base URL from the cdnList to provide the read-only version served by a CDN. Read-only.
    #[serde(rename = "bannerLogoRelativeUrl")]
    pub banner_logo_relative_url: Option<String>,
    ///A list of base URLs for all available CDN providers that are serving the assets of the current resource. Several CDN providers are used at the same time for high availability of read requests. Read-only.
    #[serde(rename = "cdnList")]
    pub cdn_list: Option<Vec<Option<String>>>,
    ///Represents the content options to be customized throughout the authentication flow for a tenant. NOTE: Supported by Microsoft Entra External ID in external tenants only.
    #[serde(rename = "contentCustomization")]
    pub content_customization: Option<MicrosoftGraphContentCustomization>,
    ///A custom URL for resetting account credentials. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128 characters.
    #[serde(rename = "customAccountResetCredentialsUrl")]
    pub custom_account_reset_credentials_url: Option<String>,
    ///CSS styling that appears on the sign-in page. The allowed format is .css format only and not larger than 25 KB.
    #[serde(rename = "customCSS")]
    pub custom_css: Option<String>,
    ///A relative URL for the customCSS property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "customCSSRelativeUrl")]
    pub custom_cssrelative_url: Option<String>,
    ///A string to replace the default 'Can't access your account?' self-service password reset (SSPR) hyperlink text on the sign-in page. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customCannotAccessYourAccountText")]
    pub custom_cannot_access_your_account_text: Option<String>,
    ///A custom URL to replace the default URL of the self-service password reset (SSPR) 'Can't access your account?' hyperlink on the sign-in page. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128 characters. DO NOT USE. Use customAccountResetCredentialsUrl instead.
    #[serde(rename = "customCannotAccessYourAccountUrl")]
    pub custom_cannot_access_your_account_url: Option<String>,
    ///A string to replace the default 'Forgot my password' hyperlink text on the sign-in form. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customForgotMyPasswordText")]
    pub custom_forgot_my_password_text: Option<String>,
    ///A string to replace the default 'Privacy and Cookies' hyperlink text in the footer. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customPrivacyAndCookiesText")]
    pub custom_privacy_and_cookies_text: Option<String>,
    ///A custom URL to replace the default URL of the 'Privacy and Cookies' hyperlink in the footer. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128 characters.
    #[serde(rename = "customPrivacyAndCookiesUrl")]
    pub custom_privacy_and_cookies_url: Option<String>,
    ///A string to replace the default 'reset it now' hyperlink text on the sign-in form. This text must be in Unicode format and not exceed 256 characters. DO NOT USE: Customization of the 'reset it now' hyperlink text is currently not supported.
    #[serde(rename = "customResetItNowText")]
    pub custom_reset_it_now_text: Option<String>,
    ///A string to replace the the default 'Terms of Use' hyperlink text in the footer. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customTermsOfUseText")]
    pub custom_terms_of_use_text: Option<String>,
    ///A custom URL to replace the default URL of the 'Terms of Use' hyperlink in the footer. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128characters.
    #[serde(rename = "customTermsOfUseUrl")]
    pub custom_terms_of_use_url: Option<String>,
    ///A custom icon (favicon) to replace a default Microsoft product favicon on a Microsoft Entra tenant.
    pub favicon: Option<String>,
    ///A relative url for the favicon above that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "faviconRelativeUrl")]
    pub favicon_relative_url: Option<String>,
    ///The RGB color to apply to customize the color of the header.
    #[serde(rename = "headerBackgroundColor")]
    pub header_background_color: Option<String>,
    ///A company logo that appears in the header of the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "headerLogo")]
    pub header_logo: Option<String>,
    ///A relative URL for the headerLogo property that is combined with a CDN base URL from the cdnList to provide the read-only version served by a CDN. Read-only.
    #[serde(rename = "headerLogoRelativeUrl")]
    pub header_logo_relative_url: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the layout configuration to be displayed on the login page for a tenant.
    #[serde(rename = "loginPageLayoutConfiguration")]
    pub login_page_layout_configuration: Option<
        MicrosoftGraphLoginPageLayoutConfiguration,
    >,
    ///Represents the various texts that can be hidden on the login page for a tenant.
    #[serde(rename = "loginPageTextVisibilitySettings")]
    pub login_page_text_visibility_settings: Option<
        MicrosoftGraphLoginPageTextVisibilitySettings,
    >,
    ///Text that appears at the bottom of the sign-in box. Use this to communicate additional information, such as the phone number to your help desk or a legal statement. This text must be in Unicode format and not exceed 1024 characters.
    #[serde(rename = "signInPageText")]
    pub sign_in_page_text: Option<String>,
    ///A square version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "squareLogo")]
    pub square_logo: Option<String>,
    ///A square dark version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "squareLogoDark")]
    pub square_logo_dark: Option<String>,
    ///A relative URL for the squareLogoDark property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "squareLogoDarkRelativeUrl")]
    pub square_logo_dark_relative_url: Option<String>,
    ///A relative URL for the squareLogo property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "squareLogoRelativeUrl")]
    pub square_logo_relative_url: Option<String>,
    ///A string that shows as the hint in the username textbox on the sign-in screen. This text must be a Unicode, without links or code, and can't exceed 64 characters.
    #[serde(rename = "usernameHintText")]
    pub username_hint_text: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOrganizationalBrandingProperties {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.organizationalBrandingProperties".to_string())]
    pub odata_type: String,
    ///Color that appears in place of the background image in low-bandwidth connections. We recommend that you use the primary color of your banner logo or your organization color. Specify this in hexadecimal format, for example, white is #FFFFFF.
    #[serde(rename = "backgroundColor")]
    pub background_color: Option<String>,
    ///Image that appears as the background of the sign-in page. The allowed types are PNG or JPEG not smaller than 300 KB and not larger than 1920 × 1080 pixels. A smaller image reduces bandwidth requirements and make the page load faster.
    #[serde(rename = "backgroundImage")]
    pub background_image: Option<String>,
    ///A relative URL for the backgroundImage property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "backgroundImageRelativeUrl")]
    pub background_image_relative_url: Option<String>,
    ///A banner version of your company logo that appears on the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "bannerLogo")]
    pub banner_logo: Option<String>,
    ///A relative URL for the bannerLogo property that is combined with a CDN base URL from the cdnList to provide the read-only version served by a CDN. Read-only.
    #[serde(rename = "bannerLogoRelativeUrl")]
    pub banner_logo_relative_url: Option<String>,
    ///A list of base URLs for all available CDN providers that are serving the assets of the current resource. Several CDN providers are used at the same time for high availability of read requests. Read-only.
    #[serde(rename = "cdnList")]
    pub cdn_list: Option<Vec<Option<String>>>,
    ///Represents the content options to be customized throughout the authentication flow for a tenant. NOTE: Supported by Microsoft Entra External ID in external tenants only.
    #[serde(rename = "contentCustomization")]
    pub content_customization: Option<MicrosoftGraphContentCustomization>,
    ///A custom URL for resetting account credentials. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128 characters.
    #[serde(rename = "customAccountResetCredentialsUrl")]
    pub custom_account_reset_credentials_url: Option<String>,
    ///CSS styling that appears on the sign-in page. The allowed format is .css format only and not larger than 25 KB.
    #[serde(rename = "customCSS")]
    pub custom_css: Option<String>,
    ///A relative URL for the customCSS property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "customCSSRelativeUrl")]
    pub custom_cssrelative_url: Option<String>,
    ///A string to replace the default 'Can't access your account?' self-service password reset (SSPR) hyperlink text on the sign-in page. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customCannotAccessYourAccountText")]
    pub custom_cannot_access_your_account_text: Option<String>,
    ///A custom URL to replace the default URL of the self-service password reset (SSPR) 'Can't access your account?' hyperlink on the sign-in page. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128 characters. DO NOT USE. Use customAccountResetCredentialsUrl instead.
    #[serde(rename = "customCannotAccessYourAccountUrl")]
    pub custom_cannot_access_your_account_url: Option<String>,
    ///A string to replace the default 'Forgot my password' hyperlink text on the sign-in form. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customForgotMyPasswordText")]
    pub custom_forgot_my_password_text: Option<String>,
    ///A string to replace the default 'Privacy and Cookies' hyperlink text in the footer. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customPrivacyAndCookiesText")]
    pub custom_privacy_and_cookies_text: Option<String>,
    ///A custom URL to replace the default URL of the 'Privacy and Cookies' hyperlink in the footer. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128 characters.
    #[serde(rename = "customPrivacyAndCookiesUrl")]
    pub custom_privacy_and_cookies_url: Option<String>,
    ///A string to replace the default 'reset it now' hyperlink text on the sign-in form. This text must be in Unicode format and not exceed 256 characters. DO NOT USE: Customization of the 'reset it now' hyperlink text is currently not supported.
    #[serde(rename = "customResetItNowText")]
    pub custom_reset_it_now_text: Option<String>,
    ///A string to replace the the default 'Terms of Use' hyperlink text in the footer. This text must be in Unicode format and not exceed 256 characters.
    #[serde(rename = "customTermsOfUseText")]
    pub custom_terms_of_use_text: Option<String>,
    ///A custom URL to replace the default URL of the 'Terms of Use' hyperlink in the footer. This URL must be in ASCII format or non-ASCII characters must be URL encoded, and not exceed 128characters.
    #[serde(rename = "customTermsOfUseUrl")]
    pub custom_terms_of_use_url: Option<String>,
    ///A custom icon (favicon) to replace a default Microsoft product favicon on a Microsoft Entra tenant.
    pub favicon: Option<String>,
    ///A relative url for the favicon above that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "faviconRelativeUrl")]
    pub favicon_relative_url: Option<String>,
    ///The RGB color to apply to customize the color of the header.
    #[serde(rename = "headerBackgroundColor")]
    pub header_background_color: Option<String>,
    ///A company logo that appears in the header of the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "headerLogo")]
    pub header_logo: Option<String>,
    ///A relative URL for the headerLogo property that is combined with a CDN base URL from the cdnList to provide the read-only version served by a CDN. Read-only.
    #[serde(rename = "headerLogoRelativeUrl")]
    pub header_logo_relative_url: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the layout configuration to be displayed on the login page for a tenant.
    #[serde(rename = "loginPageLayoutConfiguration")]
    pub login_page_layout_configuration: Option<
        MicrosoftGraphLoginPageLayoutConfiguration,
    >,
    ///Represents the various texts that can be hidden on the login page for a tenant.
    #[serde(rename = "loginPageTextVisibilitySettings")]
    pub login_page_text_visibility_settings: Option<
        MicrosoftGraphLoginPageTextVisibilitySettings,
    >,
    ///Text that appears at the bottom of the sign-in box. Use this to communicate additional information, such as the phone number to your help desk or a legal statement. This text must be in Unicode format and not exceed 1024 characters.
    #[serde(rename = "signInPageText")]
    pub sign_in_page_text: Option<String>,
    ///A square version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "squareLogo")]
    pub square_logo: Option<String>,
    ///A square dark version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.
    #[serde(rename = "squareLogoDark")]
    pub square_logo_dark: Option<String>,
    ///A relative URL for the squareLogoDark property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "squareLogoDarkRelativeUrl")]
    pub square_logo_dark_relative_url: Option<String>,
    ///A relative URL for the squareLogo property that is combined with a CDN base URL from the cdnList to provide the version served by a CDN. Read-only.
    #[serde(rename = "squareLogoRelativeUrl")]
    pub square_logo_relative_url: Option<String>,
    ///A string that shows as the hint in the username textbox on the sign-in screen. This text must be a Unicode, without links or code, and can't exceed 64 characters.
    #[serde(rename = "usernameHintText")]
    pub username_hint_text: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOrganizerMeetingInfo {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.organizerMeetingInfo".to_string())]
    pub odata_type: String,
    pub organizer: Option<MicrosoftGraphIdentitySet>,
}
///Count of devices with malware for each OS version
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOsVersionCount {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Count of devices with malware for the OS version
    #[serde(rename = "deviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_count: Option<f64>,
    ///The Timestamp of the last update for the device count in UTC
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///OS version
    #[serde(rename = "osVersion")]
    pub os_version: Option<String>,
}
///The Windows Autopilot Deployment Profile settings used by the device for the out-of-box experience. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOutOfBoxExperienceSetting {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "deviceUsageType")]
    pub device_usage_type: Option<MicrosoftGraphWindowsDeviceUsageType>,
    ///When TRUE, the link that allows user to start over with a different account on company sign-in is hidden. When false, the link that allows user to start over with a different account on company sign-in is available. Default value is FALSE.
    #[serde(rename = "escapeLinkHidden")]
    pub escape_link_hidden: Option<bool>,
    ///When TRUE, EULA is hidden to the end user during OOBE. When FALSE, EULA is shown to the end user during OOBE. Default value is FALSE.
    #[serde(rename = "eulaHidden")]
    pub eula_hidden: Option<bool>,
    ///When TRUE, the keyboard selection page is hidden to the end user during OOBE if Language and Region are set. When FALSE, the keyboard selection page is skipped during OOBE.
    #[serde(rename = "keyboardSelectionPageSkipped")]
    pub keyboard_selection_page_skipped: Option<bool>,
    ///When TRUE, privacy settings is hidden to the end user during OOBE. When FALSE, privacy settings is shown to the end user during OOBE. Default value is FALSE.
    #[serde(rename = "privacySettingsHidden")]
    pub privacy_settings_hidden: Option<bool>,
    #[serde(rename = "userType")]
    pub user_type: Option<MicrosoftGraphWindowsUserType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOutOfOfficeSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If true, either of the following is met:The current time falls within the out-of-office window configured in Outlook or Teams.An event marked as 'Show as Out of Office' appears on the user's calendar.Otherwise, false.
    #[serde(rename = "isOutOfOffice")]
    pub is_out_of_office: Option<bool>,
    ///The out-of-office message configured by the user in the Outlook client (Automatic replies) or the Teams client (Schedule out of office).
    pub message: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOutgoingCallOptions {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.outgoingCallOptions".to_string())]
    pub odata_type: String,
    ///Indicates whether to hide the app after the call is escalated.
    #[serde(rename = "hideBotAfterEscalation")]
    pub hide_bot_after_escalation: Option<bool>,
    ///Indicates whether content sharing notifications should be enabled for the call.
    #[serde(rename = "isContentSharingNotificationEnabled")]
    pub is_content_sharing_notification_enabled: Option<bool>,
    ///Indicates whether delta roster is enabled for the call.
    #[serde(rename = "isDeltaRosterEnabled")]
    pub is_delta_roster_enabled: Option<bool>,
    ///Indicates whether delta roster filtering by participant interactivity is enabled.
    #[serde(rename = "isInteractiveRosterEnabled")]
    pub is_interactive_roster_enabled: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOutlierContainerType {
    #[serde(rename = "group")]
    #[default]
    Group,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOutlierMemberType {
    #[serde(rename = "user")]
    #[default]
    User,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOutlookCategory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.outlookCategory".to_string())]
    pub odata_type: String,
    ///A pre-set color constant that characterizes a category, and that is mapped to one of 25 predefined colors. For more details, see the following note.
    pub color: Option<MicrosoftGraphCategoryColor>,
    ///A unique name that identifies a category in the user's mailbox. After a category is created, the name cannot be changed. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOutlookGeoCoordinates {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude and longitude are accurate to within 50 meters.
    pub accuracy: Option<MicrosoftGraphOutlookGeoCoordinatesAccuracy>,
    ///The altitude of the location.
    pub altitude: Option<MicrosoftGraphOutlookGeoCoordinatesAltitude>,
    ///The accuracy of the altitude.
    #[serde(rename = "altitudeAccuracy")]
    pub altitude_accuracy: Option<MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy>,
    ///The latitude of the location.
    pub latitude: Option<MicrosoftGraphOutlookGeoCoordinatesLatitude>,
    ///The longitude of the location.
    pub longitude: Option<MicrosoftGraphOutlookGeoCoordinatesLongitude>,
}
///The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude and longitude are accurate to within 50 meters.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOutlookGeoCoordinatesAccuracy {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The altitude of the location.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOutlookGeoCoordinatesAltitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The accuracy of the altitude.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The latitude of the location.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOutlookGeoCoordinatesLatitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The longitude of the location.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphOutlookGeoCoordinatesLongitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOutlookItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.outlookItem".to_string())]
    pub odata_type: String,
    ///The categories associated with the item
    pub categories: Option<Vec<Option<String>>>,
    ///Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
    #[serde(rename = "changeKey")]
    pub change_key: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphOutlookUser {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.outlookUser".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A list of categories defined for the user.
    #[serde(rename = "masterCategories")]
    pub master_categories: Option<Vec<MicrosoftGraphOutlookCategory>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPackage {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A string indicating the type of package. While oneNote is the only currently defined value, you should expect other package types to be returned and handle them accordingly.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPageLayoutType {
    #[serde(rename = "microsoftReserved")]
    #[default]
    MicrosoftReserved,
    #[serde(rename = "article")]
    Article,
    #[serde(rename = "home")]
    Home,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPageLinks {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Opens the page in the OneNote native client if it's installed.
    #[serde(rename = "oneNoteClientUrl")]
    pub one_note_client_url: Option<MicrosoftGraphExternalLink>,
    ///Opens the page in OneNote on the web.
    #[serde(rename = "oneNoteWebUrl")]
    pub one_note_web_url: Option<MicrosoftGraphExternalLink>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPagePromotionType {
    #[serde(rename = "microsoftReserved")]
    #[default]
    MicrosoftReserved,
    #[serde(rename = "page")]
    Page,
    #[serde(rename = "newsPost")]
    NewsPost,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphParentalControlSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies the two-letter ISO country codes. Access to the application will be blocked for minors from the countries specified in this list.
    #[serde(rename = "countriesBlockedForMinors")]
    pub countries_blocked_for_minors: Option<Vec<Option<String>>>,
    ///Specifies the legal age group rule that applies to users of the app. Can be set to one of the following values: ValueDescriptionAllowDefault. Enforces the legal minimum. This means parental consent is required for minors in the European Union and Korea.RequireConsentForPrivacyServicesEnforces the user to specify date of birth to comply with COPPA rules. RequireConsentForMinorsRequires parental consent for ages below 18, regardless of country/region minor rules.RequireConsentForKidsRequires parental consent for ages below 14, regardless of country/region minor rules.BlockMinorsBlocks minors from using the app.
    #[serde(rename = "legalAgeGroupRule")]
    pub legal_age_group_rule: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphParticipant {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.participant".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub info: Option<MicrosoftGraphParticipantInfo>,
    ///true if the participant is in lobby.
    #[serde(rename = "isInLobby")]
    pub is_in_lobby: Option<bool>,
    ///true if the participant is muted (client or server muted).
    #[serde(rename = "isMuted")]
    pub is_muted: Option<bool>,
    ///The list of media streams.
    #[serde(rename = "mediaStreams")]
    pub media_streams: Option<Vec<MicrosoftGraphMediaStream>>,
    ///A blob of data provided by the participant in the roster.
    pub metadata: Option<String>,
    ///Information about whether the participant has recording capability.
    #[serde(rename = "recordingInfo")]
    pub recording_info: Option<MicrosoftGraphRecordingInfo>,
    ///Indicates the reason why the participant was removed from the roster.
    #[serde(rename = "removedState")]
    pub removed_state: Option<MicrosoftGraphRemovedState>,
    ///Indicates the reason or reasons media content from this participant is restricted.
    #[serde(rename = "restrictedExperience")]
    pub restricted_experience: Option<MicrosoftGraphOnlineMeetingRestricted>,
    ///Indicates the roster sequence number in which the participant was last updated.
    #[serde(rename = "rosterSequenceNumber")]
    pub roster_sequence_number: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphParticipantInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The ISO 3166-1 Alpha-2 country code of the participant's best estimated physical location at the start of the call. Read-only.
    #[serde(rename = "countryCode")]
    pub country_code: Option<String>,
    ///The type of endpoint the participant is using. Possible values are: default, skypeForBusiness, or skypeForBusinessVoipPhone. Read-only.
    #[serde(rename = "endpointType")]
    pub endpoint_type: Option<MicrosoftGraphEndpointType>,
    pub identity: Option<MicrosoftGraphIdentitySet>,
    ///The language culture string. Read-only.
    #[serde(rename = "languageId")]
    pub language_id: Option<String>,
    ///The participant ID of the participant. Read-only.
    #[serde(rename = "participantId")]
    pub participant_id: Option<String>,
    ///The home region of the participant. This can be a country, a continent, or a larger geographic region. This doesn't change based on the participant's current physical location. Read-only.
    pub region: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphParticipantJoiningNotification {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.participantJoiningNotification".to_string())]
    pub odata_type: String,
    pub call: Option<MicrosoftGraphCall>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphParticipantLeftNotification {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.participantLeftNotification".to_string())]
    pub odata_type: String,
    pub call: Option<MicrosoftGraphCall>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///ID of the participant under the policy who has left the meeting.
    #[serde(rename = "participantId")]
    pub participant_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPartnerTenantType {
    #[serde(rename = "microsoftSupport")]
    #[default]
    MicrosoftSupport,
    #[serde(rename = "syndicatePartner")]
    SyndicatePartner,
    #[serde(rename = "breadthPartner")]
    BreadthPartner,
    #[serde(rename = "breadthPartnerDelegatedAdmin")]
    BreadthPartnerDelegatedAdmin,
    #[serde(rename = "resellerPartnerDelegatedAdmin")]
    ResellerPartnerDelegatedAdmin,
    #[serde(rename = "valueAddedResellerPartnerDelegatedAdmin")]
    ValueAddedResellerPartnerDelegatedAdmin,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartners {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners".to_string())]
    pub odata_type: String,
    ///Represents billing details for billed and unbilled data.
    pub billing: Option<MicrosoftGraphPartnersBillingBilling>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingAzureUsage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.azureUsage".to_string())]
    pub odata_type: String,
    pub billed: Option<MicrosoftGraphPartnersBillingBilledUsage>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub unbilled: Option<MicrosoftGraphPartnersBillingUnbilledUsage>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingBilledReconciliation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.billedReconciliation".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingBilledUsage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.billedUsage".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingBilling {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.billing".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents metadata for the exported data.
    pub manifests: Option<Vec<MicrosoftGraphPartnersBillingManifest>>,
    ///Represents an operation to export the billing data of a partner.
    pub operations: Option<Vec<MicrosoftGraphPartnersBillingOperation>>,
    pub reconciliation: Option<MicrosoftGraphPartnersBillingBillingReconciliation>,
    pub usage: Option<MicrosoftGraphPartnersBillingAzureUsage>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingBillingReconciliation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.billingReconciliation".to_string())]
    pub odata_type: String,
    pub billed: Option<MicrosoftGraphPartnersBillingBilledReconciliation>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub unbilled: Option<MicrosoftGraphPartnersBillingUnbilledReconciliation>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingBlob {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The blob name.
    pub name: Option<String>,
    ///The partition that contains the file. A large partition is split into multiple files, each with the same partitionValue.
    #[serde(rename = "partitionValue")]
    pub partition_value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingExportSuccessOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.exportSuccessOperation".to_string())]
    pub odata_type: String,
    ///The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The time of the last action of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "resourceLocation")]
    pub resource_location: Option<MicrosoftGraphPartnersBillingManifest>,
    ///The status of the operation. Possible values are: notStarted, running, completed, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphLongRunningOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingFailedOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.failedOperation".to_string())]
    pub odata_type: String,
    ///The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The time of the last action of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The status of the operation. Possible values are: notStarted, running, completed, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphLongRunningOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingManifest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.manifest".to_string())]
    pub odata_type: String,
    ///The total file count for this partner tenant ID.
    #[serde(rename = "blobCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub blob_count: Option<f64>,
    ///A collection of blob objects that contain details of all the files for the partner tenant ID.
    pub blobs: Option<Vec<MicrosoftGraphPartnersBillingBlob>>,
    ///The date and time when a manifest resource was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The billing data file format. The possible value is: compressedJSONLines. Each blob is a compressed file and data in the file is in JSON lines format. Decompress the file to access the data.
    #[serde(rename = "dataFormat")]
    pub data_format: Option<String>,
    ///Version of data represented by the manifest. Any change in eTag indicates a new data version.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates the division of data. If a given partition has more than the supported number, the data is split into multiple files, each file representing a specific partitionValue. By default, the data in the file is partitioned by the number of line items.
    #[serde(rename = "partitionType")]
    pub partition_type: Option<String>,
    ///The Microsoft Entra tenant ID of the partner.
    #[serde(rename = "partnerTenantId")]
    pub partner_tenant_id: Option<String>,
    ///The root directory that contains all the files.
    #[serde(rename = "rootDirectory")]
    pub root_directory: Option<String>,
    ///The SAS token for accessing the directory or an individual file in the directory.
    #[serde(rename = "sasToken")]
    pub sas_token: Option<String>,
    ///The version of the manifest schema.
    #[serde(rename = "schemaVersion")]
    pub schema_version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.operation".to_string())]
    pub odata_type: String,
    ///The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The time of the last action of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The status of the operation. Possible values are: notStarted, running, completed, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphLongRunningOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingRunningOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.runningOperation".to_string())]
    pub odata_type: String,
    ///The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The time of the last action of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The status of the operation. Possible values are: notStarted, running, completed, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphLongRunningOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingUnbilledReconciliation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.unbilledReconciliation".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPartnersBillingUnbilledUsage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.partners.billing.unbilledUsage".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPasswordAuthenticationMethod {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.passwordAuthenticationMethod".to_string())]
    pub odata_type: String,
    ///The date and time when this password was last updated. This property is currently not populated. Read-only. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///For security, the password is always returned as null from a LIST or GET operation.
    pub password: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPasswordCredential {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Do not use.
    #[serde(rename = "customKeyIdentifier")]
    pub custom_key_identifier: Option<String>,
    ///Friendly name for the password. Optional.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The date and time at which the password expires represented using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains the first three characters of the password. Read-only.
    pub hint: Option<String>,
    ///The unique identifier for the password.
    #[serde(rename = "keyId")]
    pub key_id: Option<uuid::Uuid>,
    ///Read-only; Contains the strong passwords generated by Microsoft Entra ID that are 16-64 characters in length. The generated password value is only returned during the initial POST request to addPassword. There is no way to retrieve this password in the future.
    #[serde(rename = "secretText")]
    pub secret_text: Option<String>,
    ///The date and time at which the password becomes valid. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPasswordCredentialConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///String value that indicates the maximum lifetime for password expiration, defined as an ISO 8601 duration. For example, P4DT12H30M5S represents four days, 12 hours, 30 minutes, and five seconds. This property is required when restrictionType is set to passwordLifetime.
    #[serde(rename = "maxLifetime")]
    pub max_lifetime: Option<String>,
    ///Specifies the date from which the policy restriction applies to newly created applications. For existing applications, the enforcement date can be retroactively applied.
    #[serde(rename = "restrictForAppsCreatedAfterDateTime")]
    pub restrict_for_apps_created_after_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The type of restriction being applied. The possible values are: passwordAddition, passwordLifetime, symmetricKeyAddition, symmetricKeyLifetime, customPasswordAddition, and unknownFutureValue. Each value of restrictionType can be used only once per policy.
    #[serde(rename = "restrictionType")]
    pub restriction_type: Option<MicrosoftGraphAppCredentialRestrictionType>,
    pub state: Option<MicrosoftGraphAppManagementRestrictionState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPasswordProfile {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///true if the user must change their password on the next sign-in; otherwise false.
    #[serde(rename = "forceChangePasswordNextSignIn")]
    pub force_change_password_next_sign_in: Option<bool>,
    ///If true, at next sign-in, the user must perform a multifactor authentication (MFA) before being forced to change their password. The behavior is identical to forceChangePasswordNextSignIn except that the user is required to first perform a multifactor authentication before password change. After a password change, this property will be automatically reset to false. If not set, default is false.
    #[serde(rename = "forceChangePasswordNextSignInWithMfa")]
    pub force_change_password_next_sign_in_with_mfa: Option<bool>,
    ///The password for the user. This property is required when a user is created. It can be updated, but the user will be required to change the password on the next sign-in. The password must satisfy minimum requirements as specified by the user's passwordPolicies property. By default, a strong password is required.
    pub password: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPatternedRecurrence {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The frequency of an event.  For access reviews: Do not specify this property for a one-time access review.  Only interval, dayOfMonth, and type (weekly, absoluteMonthly) properties of recurrencePattern are supported.
    pub pattern: Option<MicrosoftGraphRecurrencePattern>,
    ///The duration of an event.
    pub range: Option<MicrosoftGraphRecurrenceRange>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPayload {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.payload".to_string())]
    pub odata_type: String,
    ///The branch of a payload. Possible values are: unknown, other, americanExpress, capitalOne, dhl, docuSign, dropbox, facebook, firstAmerican, microsoft, netflix, scotiabank, sendGrid, stewartTitle, tesco, wellsFargo, syrinxCloud, adobe, teams, zoom, unknownFutureValue.
    pub brand: Option<MicrosoftGraphPayloadBrand>,
    ///The complexity of a payload. Possible values are: unknown, low, medium, high, unknownFutureValue.
    pub complexity: Option<MicrosoftGraphPayloadComplexity>,
    ///Identity of the user who created the attack simulation and training campaign payload.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the attack simulation and training campaign payload. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description of the attack simulation and training campaign payload.
    pub description: Option<String>,
    ///Additional details about the payload.
    pub detail: Option<MicrosoftGraphPayloadDetail>,
    ///Display name of the attack simulation and training campaign payload. Supports $filter and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Industry of a payload. Possible values are: unknown, other, banking, businessServices, consumerServices, education, energy, construction, consulting, financialServices, government, hospitality, insurance, legal, courierServices, IT, healthcare, manufacturing, retail, telecom, realEstate, unknownFutureValue.
    pub industry: Option<MicrosoftGraphPayloadIndustry>,
    ///Indicates whether the attack simulation and training campaign payload was created from an automation flow. Supports $filter and $orderby.
    #[serde(rename = "isAutomated")]
    pub is_automated: Option<bool>,
    ///Indicates whether the payload is controversial.
    #[serde(rename = "isControversial")]
    pub is_controversial: Option<bool>,
    ///Indicates whether the payload is from any recent event.
    #[serde(rename = "isCurrentEvent")]
    pub is_current_event: Option<bool>,
    ///Payload language.
    pub language: Option<String>,
    ///Identity of the user who most recently modified the attack simulation and training campaign payload.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the attack simulation and training campaign payload was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Free text tags for a payload.
    #[serde(rename = "payloadTags")]
    pub payload_tags: Option<Vec<Option<String>>>,
    ///The payload delivery platform for a simulation. Possible values are: unknown, sms, email, teams, unknownFutureValue.
    pub platform: Option<MicrosoftGraphPayloadDeliveryPlatform>,
    ///Predicted probability for a payload to phish a targeted user.
    #[serde(rename = "predictedCompromiseRate")]
    pub predicted_compromise_rate: Option<MicrosoftGraphPayloadPredictedCompromiseRate>,
    ///Attack type of the attack simulation and training campaign. Supports $filter and $orderby. Possible values are: unknown, social, cloud, endpoint, unknownFutureValue.
    #[serde(rename = "simulationAttackType")]
    pub simulation_attack_type: Option<MicrosoftGraphSimulationAttackType>,
    pub source: Option<MicrosoftGraphSimulationContentSource>,
    ///Simulation content status. Supports $filter and $orderby. Possible values are: unknown, draft, ready, archive, delete, unknownFutureValue.
    pub status: Option<MicrosoftGraphSimulationContentStatus>,
    ///The social engineering technique used in the attack simulation and training campaign. Supports $filter and $orderby. Possible values are: unknown, credentialHarvesting, attachmentMalware, driveByUrl, linkInAttachment, linkToMalwareFile, unknownFutureValue, oAuthConsentGrant. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: oAuthConsentGrant. For more information on the types of social engineering attack techniques, see simulations.
    pub technique: Option<MicrosoftGraphSimulationAttackTechnique>,
    ///The theme of a payload. Possible values are: unknown, other, accountActivation, accountVerification, billing, cleanUpMail, controversial, documentReceived, expense, fax, financeReport, incomingMessages, invoice, itemReceived, loginAlert, mailReceived, password, payment, payroll, personalizedOffer, quarantine, remoteWork, reviewMessage, securityUpdate, serviceSuspended, signatureRequired, upgradeMailboxStorage, verifyMailbox, voicemail, advertisement, employeeEngagement, unknownFutureValue.
    pub theme: Option<MicrosoftGraphPayloadTheme>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPayloadBrand {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "americanExpress")]
    AmericanExpress,
    #[serde(rename = "capitalOne")]
    CapitalOne,
    #[serde(rename = "dhl")]
    Dhl,
    #[serde(rename = "docuSign")]
    DocuSign,
    #[serde(rename = "dropbox")]
    Dropbox,
    #[serde(rename = "facebook")]
    Facebook,
    #[serde(rename = "firstAmerican")]
    FirstAmerican,
    #[serde(rename = "microsoft")]
    Microsoft,
    #[serde(rename = "netflix")]
    Netflix,
    #[serde(rename = "scotiabank")]
    Scotiabank,
    #[serde(rename = "sendGrid")]
    SendGrid,
    #[serde(rename = "stewartTitle")]
    StewartTitle,
    #[serde(rename = "tesco")]
    Tesco,
    #[serde(rename = "wellsFargo")]
    WellsFargo,
    #[serde(rename = "syrinxCloud")]
    SyrinxCloud,
    #[serde(rename = "adobe")]
    Adobe,
    #[serde(rename = "teams")]
    Teams,
    #[serde(rename = "zoom")]
    Zoom,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPayloadCoachmark {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The coachmark location.
    #[serde(rename = "coachmarkLocation")]
    pub coachmark_location: Option<MicrosoftGraphCoachmarkLocation>,
    ///The description about the coachmark.
    pub description: Option<String>,
    ///The coachmark indicator.
    pub indicator: Option<String>,
    ///Indicates whether the coachmark is valid or not.
    #[serde(rename = "isValid")]
    pub is_valid: Option<bool>,
    ///The coachmark language.
    pub language: Option<String>,
    ///The coachmark order.
    pub order: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPayloadComplexity {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPayloadDeliveryPlatform {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "teams")]
    Teams,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
discriminated_enum! {
    pub enum MicrosoftGraphPayloadDetail { discriminator : "@odata.type", variants :
    [("#microsoft.graph.emailPayloadDetail", MicrosoftGraphEmailPayloadDetail(Box <
    MicrosoftGraphEmailPayloadDetail >))], fallback : PayloadDetail(Box <
    MicrosoftGraphPayloadDetailBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPayloadDetailBase {
    pub coachmarks: Option<Vec<MicrosoftGraphPayloadCoachmark>>,
    ///Payload content details.
    pub content: Option<String>,
    ///The phishing URL used to target a user.
    #[serde(rename = "phishingUrl")]
    pub phishing_url: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPayloadIndustry {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "banking")]
    Banking,
    #[serde(rename = "businessServices")]
    BusinessServices,
    #[serde(rename = "consumerServices")]
    ConsumerServices,
    #[serde(rename = "education")]
    Education,
    #[serde(rename = "energy")]
    Energy,
    #[serde(rename = "construction")]
    Construction,
    #[serde(rename = "consulting")]
    Consulting,
    #[serde(rename = "financialServices")]
    FinancialServices,
    #[serde(rename = "government")]
    Government,
    #[serde(rename = "hospitality")]
    Hospitality,
    #[serde(rename = "insurance")]
    Insurance,
    #[serde(rename = "legal")]
    Legal,
    #[serde(rename = "courierServices")]
    CourierServices,
    #[serde(rename = "IT")]
    It,
    #[serde(rename = "healthcare")]
    Healthcare,
    #[serde(rename = "manufacturing")]
    Manufacturing,
    #[serde(rename = "retail")]
    Retail,
    #[serde(rename = "telecom")]
    Telecom,
    #[serde(rename = "realEstate")]
    RealEstate,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///Predicted probability for a payload to phish a targeted user.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPayloadPredictedCompromiseRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPayloadTheme {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "accountActivation")]
    AccountActivation,
    #[serde(rename = "accountVerification")]
    AccountVerification,
    #[serde(rename = "billing")]
    Billing,
    #[serde(rename = "cleanUpMail")]
    CleanUpMail,
    #[serde(rename = "controversial")]
    Controversial,
    #[serde(rename = "documentReceived")]
    DocumentReceived,
    #[serde(rename = "expense")]
    Expense,
    #[serde(rename = "fax")]
    Fax,
    #[serde(rename = "financeReport")]
    FinanceReport,
    #[serde(rename = "incomingMessages")]
    IncomingMessages,
    #[serde(rename = "invoice")]
    Invoice,
    #[serde(rename = "itemReceived")]
    ItemReceived,
    #[serde(rename = "loginAlert")]
    LoginAlert,
    #[serde(rename = "mailReceived")]
    MailReceived,
    #[serde(rename = "password")]
    Password,
    #[serde(rename = "payment")]
    Payment,
    #[serde(rename = "payroll")]
    Payroll,
    #[serde(rename = "personalizedOffer")]
    PersonalizedOffer,
    #[serde(rename = "quarantine")]
    Quarantine,
    #[serde(rename = "remoteWork")]
    RemoteWork,
    #[serde(rename = "reviewMessage")]
    ReviewMessage,
    #[serde(rename = "securityUpdate")]
    SecurityUpdate,
    #[serde(rename = "serviceSuspended")]
    ServiceSuspended,
    #[serde(rename = "signatureRequired")]
    SignatureRequired,
    #[serde(rename = "upgradeMailboxStorage")]
    UpgradeMailboxStorage,
    #[serde(rename = "verifyMailbox")]
    VerifyMailbox,
    #[serde(rename = "voicemail")]
    Voicemail,
    #[serde(rename = "advertisement")]
    Advertisement,
    #[serde(rename = "employeeEngagement")]
    EmployeeEngagement,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPendingContentUpdate {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Date and time the pending binary operation was queued in UTC time. Read-only.
    #[serde(rename = "queuedDateTime")]
    pub queued_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPendingOperations {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A property that indicates that an operation that might update the binary content of a file is pending completion.
    #[serde(rename = "pendingContentUpdate")]
    pub pending_content_update: Option<MicrosoftGraphPendingContentUpdate>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPeopleAdminSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.peopleAdminSettings".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents administrator settings that manage the support for item insights in an organization.
    #[serde(rename = "itemInsights")]
    pub item_insights: Option<MicrosoftGraphInsightsSettings>,
    ///Contains a collection of the properties an administrator has defined as visible on the Microsoft 365 profile card.
    #[serde(rename = "profileCardProperties")]
    pub profile_card_properties: Option<Vec<MicrosoftGraphProfileCardProperty>>,
    ///Represents administrator settings that manage the support of pronouns in an organization.
    pub pronouns: Option<MicrosoftGraphPronounsSettings>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPermission {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.permission".to_string())]
    pub odata_type: String,
    ///A format of yyyy-MM-ddTHH:mm:ssZ of DateTimeOffset indicates the expiration time of the permission. DateTime.MinValue indicates there's no expiration set for this permission. Optional.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///For user type permissions, the details of the users and applications for this permission. Read-only.
    #[serde(rename = "grantedTo")]
    pub granted_to: Option<MicrosoftGraphIdentitySet>,
    ///For type permissions, the details of the users to whom permission was granted. Read-only.
    #[serde(rename = "grantedToIdentities")]
    pub granted_to_identities: Option<Vec<MicrosoftGraphIdentitySet>>,
    ///For link type permissions, the details of the users to whom permission was granted. Read-only.
    #[serde(rename = "grantedToIdentitiesV2")]
    pub granted_to_identities_v2: Option<Vec<MicrosoftGraphSharePointIdentitySet>>,
    ///For user type permissions, the details of the users and applications for this permission. Read-only.
    #[serde(rename = "grantedToV2")]
    pub granted_to_v2: Option<MicrosoftGraphSharePointIdentitySet>,
    ///Indicates whether the password is set for this permission. This property only appears in the response. Optional. Read-only. For OneDrive Personal only..
    #[serde(rename = "hasPassword")]
    pub has_password: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Provides a reference to the ancestor of the current permission, if it's inherited from an ancestor. Read-only.
    #[serde(rename = "inheritedFrom")]
    pub inherited_from: Option<MicrosoftGraphItemReference>,
    ///Details of any associated sharing invitation for this permission. Read-only.
    pub invitation: Option<MicrosoftGraphSharingInvitation>,
    ///Provides the link details of the current permission, if it's a link type permission. Read-only.
    pub link: Option<MicrosoftGraphSharingLink>,
    ///The type of permission, for example, read. See below for the full list of roles. Read-only.
    pub roles: Option<Vec<Option<String>>>,
    ///A unique token that can be used to access this shared item via the shares API. Read-only.
    #[serde(rename = "shareId")]
    pub share_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPermissionClassificationType {
    #[serde(rename = "low")]
    #[default]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPermissionGrantConditionSet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.permissionGrantConditionSet".to_string())]
    pub odata_type: String,
    ///A list of appId values for the client applications to match with, or a list with the single value all to match any client application. Default is the single value all.
    #[serde(rename = "clientApplicationIds")]
    pub client_application_ids: Option<Vec<Option<String>>>,
    ///A list of Microsoft Partner Network (MPN) IDs for verified publishers of the client application, or a list with the single value all to match with client apps from any publisher. Default is the single value all.
    #[serde(rename = "clientApplicationPublisherIds")]
    pub client_application_publisher_ids: Option<Vec<Option<String>>>,
    ///A list of Microsoft Entra tenant IDs in which the client application is registered, or a list with the single value all to match with client apps registered in any tenant. Default is the single value all.
    #[serde(rename = "clientApplicationTenantIds")]
    pub client_application_tenant_ids: Option<Vec<Option<String>>>,
    ///Set to true to only match on client applications with a verified publisher. Set to false to match on any client app, even if it doesn't have a verified publisher. Default is false.
    #[serde(rename = "clientApplicationsFromVerifiedPublisherOnly")]
    pub client_applications_from_verified_publisher_only: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The permission classification for the permission being granted, or all to match with any permission classification (including permissions that aren't classified). Default is all.
    #[serde(rename = "permissionClassification")]
    pub permission_classification: Option<String>,
    ///The permission type of the permission being granted. Possible values: application for application permissions (for example app roles), or delegated for delegated permissions. The value delegatedUserConsentable indicates delegated permissions that haven't been configured by the API publisher to require admin consent—this value may be used in built-in permission grant policies, but can't be used in custom permission grant policies. Required.
    #[serde(rename = "permissionType")]
    pub permission_type: Option<MicrosoftGraphPermissionType>,
    ///The list of id values for the specific permissions to match with, or a list with the single value all to match with any permission. The id of delegated permissions can be found in the oauth2PermissionScopes property of the API's servicePrincipal object. The id of application permissions can be found in the appRoles property of the API's servicePrincipal object. The id of resource-specific application permissions can be found in the resourceSpecificApplicationPermissions property of the API's servicePrincipal object. Default is the single value all.
    pub permissions: Option<Vec<Option<String>>>,
    ///The appId of the resource application (for example the API) for which a permission is being granted, or any to match with any resource application or API. Default is any.
    #[serde(rename = "resourceApplication")]
    pub resource_application: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPermissionGrantPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.permissionGrantPolicy".to_string())]
    pub odata_type: String,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Condition sets that are excluded in this permission grant policy. Automatically expanded on GET.
    pub excludes: Option<Vec<MicrosoftGraphPermissionGrantConditionSet>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Condition sets that are included in this permission grant policy. Automatically expanded on GET.
    pub includes: Option<Vec<MicrosoftGraphPermissionGrantConditionSet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPermissionScope {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A description of the delegated permissions, intended to be read by an administrator granting the permission on behalf of all users. This text appears in tenant-wide admin consent experiences.
    #[serde(rename = "adminConsentDescription")]
    pub admin_consent_description: Option<String>,
    ///The permission's title, intended to be read by an administrator granting the permission on behalf of all users.
    #[serde(rename = "adminConsentDisplayName")]
    pub admin_consent_display_name: Option<String>,
    ///Unique delegated permission identifier inside the collection of delegated permissions defined for a resource application.
    pub id: Option<uuid::Uuid>,
    ///When you create or update a permission, this property must be set to true (which is the default). To delete a permission, this property must first be set to false.  At that point, in a subsequent call, the permission may be removed.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    pub origin: Option<String>,
    ///The possible values are: User and Admin. Specifies whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator consent should always be required. While Microsoft Graph defines the default consent requirement for each permission, the tenant administrator may override the behavior in their organization (by allowing, restricting, or limiting user consent to this delegated permission). For more information, see Configure how users consent to applications.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
    ///A description of the delegated permissions, intended to be read by a user granting the permission on their own behalf. This text appears in consent experiences where the user is consenting only on behalf of themselves.
    #[serde(rename = "userConsentDescription")]
    pub user_consent_description: Option<String>,
    ///A title for the permission, intended to be read by a user granting the permission on their own behalf. This text appears in consent experiences where the user is consenting only on behalf of themselves.
    #[serde(rename = "userConsentDisplayName")]
    pub user_consent_display_name: Option<String>,
    ///Specifies the value to include in the scp (scope) claim in access tokens. Must not exceed 120 characters in length. Allowed characters are : ! # $ % & ' ( ) * + , - . / : ;  =  ? @ [ ] ^ + _  {  } ~, and characters in the ranges 0-9, A-Z and a-z. Any other character, including the space character, aren't allowed. May not begin with ..
    pub value: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPermissionType {
    #[serde(rename = "delegatedUserConsentable")]
    #[default]
    DelegatedUserConsentable,
    #[serde(rename = "delegated")]
    Delegated,
    #[serde(rename = "application")]
    Application,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPersistentBrowserSessionControl {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.persistentBrowserSessionControl".to_string())]
    pub odata_type: String,
    ///Specifies whether the session control is enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Possible values are: always, never.
    pub mode: Option<MicrosoftGraphPersistentBrowserSessionMode>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPersistentBrowserSessionMode {
    #[serde(rename = "always")]
    #[default]
    Always,
    #[serde(rename = "never")]
    Never,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPerson {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.person".to_string())]
    pub odata_type: String,
    ///The person's birthday.
    pub birthday: Option<String>,
    ///The name of the person's company.
    #[serde(rename = "companyName")]
    pub company_name: Option<String>,
    ///The person's department.
    pub department: Option<String>,
    ///The person's display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The person's given name.
    #[serde(rename = "givenName")]
    pub given_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The instant message voice over IP (VOIP) session initiation protocol (SIP) address for the user. Read-only.
    #[serde(rename = "imAddress")]
    pub im_address: Option<String>,
    ///True if the user has flagged this person as a favorite.
    #[serde(rename = "isFavorite")]
    pub is_favorite: Option<bool>,
    ///The person's job title.
    #[serde(rename = "jobTitle")]
    pub job_title: Option<String>,
    ///The location of the person's office.
    #[serde(rename = "officeLocation")]
    pub office_location: Option<String>,
    ///Free-form notes that the user has taken about this person.
    #[serde(rename = "personNotes")]
    pub person_notes: Option<String>,
    ///The type of person.
    #[serde(rename = "personType")]
    pub person_type: Option<MicrosoftGraphPersonType>,
    ///The person's phone numbers.
    pub phones: Option<Vec<MicrosoftGraphPhone>>,
    ///The person's addresses.
    #[serde(rename = "postalAddresses")]
    pub postal_addresses: Option<Vec<MicrosoftGraphLocation>>,
    ///The person's profession.
    pub profession: Option<String>,
    ///The person's email addresses.
    #[serde(rename = "scoredEmailAddresses")]
    pub scored_email_addresses: Option<Vec<MicrosoftGraphScoredEmailAddress>>,
    ///The person's surname.
    pub surname: Option<String>,
    ///The user principal name (UPN) of the person. The UPN is an Internet-style login name for the person based on the Internet standard RFC 822. By convention, this should map to the person's email name. The general format is alias@domain.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
    ///The person's websites.
    pub websites: Option<Vec<MicrosoftGraphWebsite>>,
    ///The phonetic Japanese name of the person's company.
    #[serde(rename = "yomiCompany")]
    pub yomi_company: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPersonOrGroupColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether multiple values can be selected from the source.
    #[serde(rename = "allowMultipleSelection")]
    pub allow_multiple_selection: Option<bool>,
    ///Whether to allow selection of people only, or people and groups. Must be one of peopleAndGroups or peopleOnly.
    #[serde(rename = "chooseFromType")]
    pub choose_from_type: Option<String>,
    ///How to display the information about the person or group chosen. See below.
    #[serde(rename = "displayAs")]
    pub display_as: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPersonType {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The type of data source, such as Person.
    pub class: Option<String>,
    ///The secondary type of data source, such as OrganizationUser.
    pub subclass: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPhone {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub language: Option<String>,
    ///The phone number.
    pub number: Option<String>,
    pub region: Option<String>,
    ///The type of phone number. The possible values are: home, business, mobile, other, assistant, homeFax, businessFax, otherFax, pager, radio.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphPhoneType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPhoneAuthenticationMethod {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.phoneAuthenticationMethod".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The phone number to text or call for authentication. Phone numbers use the format +{country code} {number}x{extension}, with extension optional. For example, +1 5555551234 or +1 5555551234x123 are valid. Numbers are rejected when creating or updating if they don't match the required format.
    #[serde(rename = "phoneNumber")]
    pub phone_number: Option<String>,
    ///The type of this phone. Possible values are: mobile, alternateMobile, or office.
    #[serde(rename = "phoneType")]
    pub phone_type: Option<MicrosoftGraphAuthenticationPhoneType>,
    ///Whether a phone is ready to be used for SMS sign-in or not. Possible values are: notSupported, notAllowedByPolicy, notEnabled, phoneNumberNotUnique, ready, or notConfigured, unknownFutureValue.
    #[serde(rename = "smsSignInState")]
    pub sms_sign_in_state: Option<MicrosoftGraphAuthenticationMethodSignInState>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPhoneType {
    #[serde(rename = "home")]
    #[default]
    Home,
    #[serde(rename = "business")]
    Business,
    #[serde(rename = "mobile")]
    Mobile,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "assistant")]
    Assistant,
    #[serde(rename = "homeFax")]
    HomeFax,
    #[serde(rename = "businessFax")]
    BusinessFax,
    #[serde(rename = "otherFax")]
    OtherFax,
    #[serde(rename = "pager")]
    Pager,
    #[serde(rename = "radio")]
    Radio,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPhoneUserConversationMember {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.phoneUserConversationMember".to_string())]
    pub odata_type: String,
    ///The display name of the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "phoneNumber")]
    pub phone_number: Option<String>,
    ///The roles for that user. This property contains more qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member shouldn't have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role.
    pub roles: Option<Vec<Option<String>>>,
    ///The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.
    #[serde(rename = "visibleHistoryStartDateTime")]
    pub visible_history_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPhoto {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Camera manufacturer. Read-only.
    #[serde(rename = "cameraMake")]
    pub camera_make: Option<String>,
    ///Camera model. Read-only.
    #[serde(rename = "cameraModel")]
    pub camera_model: Option<String>,
    ///The denominator for the exposure time fraction from the camera. Read-only.
    #[serde(rename = "exposureDenominator")]
    pub exposure_denominator: Option<MicrosoftGraphPhotoExposureDenominator>,
    ///The numerator for the exposure time fraction from the camera. Read-only.
    #[serde(rename = "exposureNumerator")]
    pub exposure_numerator: Option<MicrosoftGraphPhotoExposureNumerator>,
    ///The F-stop value from the camera. Read-only.
    #[serde(rename = "fNumber")]
    pub f_number: Option<MicrosoftGraphPhotoFNumber>,
    ///The focal length from the camera. Read-only.
    #[serde(rename = "focalLength")]
    pub focal_length: Option<MicrosoftGraphPhotoFocalLength>,
    ///The ISO value from the camera. Read-only.
    pub iso: Option<f64>,
    ///The orientation value from the camera. Writable on OneDrive Personal.
    pub orientation: Option<f64>,
    ///Represents the date and time the photo was taken. Read-only.
    #[serde(rename = "takenDateTime")]
    pub taken_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
///The denominator for the exposure time fraction from the camera. Read-only.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPhotoExposureDenominator {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The numerator for the exposure time fraction from the camera. Read-only.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPhotoExposureNumerator {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The F-stop value from the camera. Read-only.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPhotoFNumber {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The focal length from the camera. Read-only.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPhotoFocalLength {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPhysicalAddress {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The city.
    pub city: Option<String>,
    ///The country or region. It's a free-format string value, for example, 'United States'.
    #[serde(rename = "countryOrRegion")]
    pub country_or_region: Option<String>,
    ///The postal code.
    #[serde(rename = "postalCode")]
    pub postal_code: Option<String>,
    ///The state.
    pub state: Option<String>,
    ///The street.
    pub street: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPhysicalOfficeAddress {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The city.
    pub city: Option<String>,
    ///The country or region. It's a free-format string value, for example, 'United States'.
    #[serde(rename = "countryOrRegion")]
    pub country_or_region: Option<String>,
    ///Office location such as building and office number for an organizational contact.
    #[serde(rename = "officeLocation")]
    pub office_location: Option<String>,
    ///The postal code.
    #[serde(rename = "postalCode")]
    pub postal_code: Option<String>,
    ///The state.
    pub state: Option<String>,
    ///The street.
    pub street: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPinnedChatMessageInfo {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.pinnedChatMessageInfo".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents details about the chat message that is pinned.
    pub message: Option<Box<MicrosoftGraphChatMessage>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPkcs12Certificate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.pkcs12Certificate".to_string())]
    pub odata_type: String,
    ///The password for the pfx file. Required. If no password is used, you must still provide a value of ''.
    pub password: Option<String>,
    ///Represents the pfx content that is sent. The value should be a base-64 encoded version of the actual certificate content. Required.
    #[serde(rename = "pkcs12Value")]
    pub pkcs12value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPkcs12CertificateInformation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents whether the certificate is the active certificate to be used for calling the API connector. The active certificate is the most recently uploaded certificate that isn't yet expired but whose notBefore time is in the past.
    #[serde(rename = "isActive")]
    pub is_active: Option<bool>,
    ///The certificate's expiry. This value is a NumericDate as defined in RFC 7519 (A JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds.)
    #[serde(rename = "notAfter")]
    pub not_after: Option<f64>,
    ///The certificate's issue time (not before). This value is a NumericDate as defined in RFC 7519 (A JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds.)
    #[serde(rename = "notBefore")]
    pub not_before: Option<f64>,
    ///The certificate thumbprint.
    pub thumbprint: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlace {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.place".to_string())]
    pub odata_type: String,
    ///The street address of the place.
    pub address: Option<MicrosoftGraphPhysicalAddress>,
    ///The name associated with the place.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Specifies the place location in latitude, longitude, and (optionally) altitude coordinates.
    #[serde(rename = "geoCoordinates")]
    pub geo_coordinates: Option<MicrosoftGraphOutlookGeoCoordinates>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The phone number of the place.
    pub phone: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlanner {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.planner".to_string())]
    pub odata_type: String,
    ///Read-only. Nullable. Returns a collection of the specified buckets
    pub buckets: Option<Vec<MicrosoftGraphPlannerBucket>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Read-only. Nullable. Returns a collection of the specified plans
    pub plans: Option<Vec<MicrosoftGraphPlannerPlan>>,
    ///Read-only. Nullable. Returns a collection of the specified tasks
    pub tasks: Option<Vec<MicrosoftGraphPlannerTask>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerAppliedCategories {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.plannerAssignedToTaskBoardTaskFormat".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Dictionary of hints used to order tasks on the AssignedTo view of the Task Board. The key of each entry is one of the users the task is assigned to and the value is the order hint. The format of each value is defined as outlined here.
    #[serde(rename = "orderHintsByAssignee")]
    pub order_hints_by_assignee: Option<MicrosoftGraphPlannerOrderHintsByAssignee>,
    ///Hint value used to order the task on the AssignedTo view of the Task Board when the task isn't assigned to anyone, or if the orderHintsByAssignee dictionary doesn't provide an order hint for the user the task is assigned to. The format is defined as outlined here.
    #[serde(rename = "unassignedOrderHint")]
    pub unassigned_order_hint: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerAssignments {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerBucket {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.plannerBucket".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Name of the bucket.
    pub name: Option<String>,
    ///Hint used to order items of this type in a list view. For details about the supported format, see Using order hints in Planner.
    #[serde(rename = "orderHint")]
    pub order_hint: Option<String>,
    ///Plan ID to which the bucket belongs.
    #[serde(rename = "planId")]
    pub plan_id: Option<String>,
    ///Read-only. Nullable. The collection of tasks in the bucket.
    pub tasks: Option<Vec<MicrosoftGraphPlannerTask>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerBucketTaskBoardTaskFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.plannerBucketTaskBoardTaskFormat".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Hint used to order tasks in the bucket view of the task board. For details about the supported format, see Using order hints in Planner.
    #[serde(rename = "orderHint")]
    pub order_hint: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerCategoryDescriptions {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The label associated with Category 1
    pub category1: Option<String>,
    ///The label associated with Category 10
    pub category10: Option<String>,
    ///The label associated with Category 11
    pub category11: Option<String>,
    ///The label associated with Category 12
    pub category12: Option<String>,
    ///The label associated with Category 13
    pub category13: Option<String>,
    ///The label associated with Category 14
    pub category14: Option<String>,
    ///The label associated with Category 15
    pub category15: Option<String>,
    ///The label associated with Category 16
    pub category16: Option<String>,
    ///The label associated with Category 17
    pub category17: Option<String>,
    ///The label associated with Category 18
    pub category18: Option<String>,
    ///The label associated with Category 19
    pub category19: Option<String>,
    ///The label associated with Category 2
    pub category2: Option<String>,
    ///The label associated with Category 20
    pub category20: Option<String>,
    ///The label associated with Category 21
    pub category21: Option<String>,
    ///The label associated with Category 22
    pub category22: Option<String>,
    ///The label associated with Category 23
    pub category23: Option<String>,
    ///The label associated with Category 24
    pub category24: Option<String>,
    ///The label associated with Category 25
    pub category25: Option<String>,
    ///The label associated with Category 3
    pub category3: Option<String>,
    ///The label associated with Category 4
    pub category4: Option<String>,
    ///The label associated with Category 5
    pub category5: Option<String>,
    ///The label associated with Category 6
    pub category6: Option<String>,
    ///The label associated with Category 7
    pub category7: Option<String>,
    ///The label associated with Category 8
    pub category8: Option<String>,
    ///The label associated with Category 9
    pub category9: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerChecklistItems {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPlannerContainerType {
    #[serde(rename = "group")]
    #[default]
    Group,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "roster")]
    Roster,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerExternalReferences {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerGroup {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.plannerGroup".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Read-only. Nullable. Returns the plannerPlans owned by the group.
    pub plans: Option<Vec<MicrosoftGraphPlannerPlan>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerOrderHintsByAssignee {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerPlan {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.plannerPlan".to_string())]
    pub odata_type: String,
    ///Read-only. Nullable. Collection of buckets in the plan.
    pub buckets: Option<Vec<MicrosoftGraphPlannerBucket>>,
    ///Identifies the container of the plan. Specify only the url, the containerId and type, or all properties. After it's set, this property can’t be updated. Required.
    pub container: Option<MicrosoftGraphPlannerPlanContainer>,
    ///Read-only. The user who created the plan.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Read-only. Date and time at which the plan is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Read-only. Nullable. Extra details about the plan.
    pub details: Option<MicrosoftGraphPlannerPlanDetails>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Use the container property instead. ID of the group that owns the plan. After it's set, this property can’t be updated. This property won't return a valid group ID if the container of the plan isn't a group.
    pub owner: Option<String>,
    ///Read-only. Nullable. Collection of tasks in the plan.
    pub tasks: Option<Vec<MicrosoftGraphPlannerTask>>,
    ///Required. Title of the plan.
    pub title: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerPlanContainer {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The identifier of the resource that contains the plan. Optional.
    #[serde(rename = "containerId")]
    pub container_id: Option<String>,
    ///The type of the resource that contains the plan. For supported types, see the previous table. Possible values are: group, unknownFutureValue, roster. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: roster. Optional.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphPlannerContainerType>,
    ///The full canonical URL of the container. Optional.
    pub url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerPlanDetails {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.plannerPlanDetails".to_string())]
    pub odata_type: String,
    ///An object that specifies the descriptions of the 25 categories that can be associated with tasks in the plan.
    #[serde(rename = "categoryDescriptions")]
    pub category_descriptions: Option<MicrosoftGraphPlannerCategoryDescriptions>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Set of user IDs that this plan is shared with. If you're using Microsoft 365 groups, use the Groups API to manage group membership to share the group's plan. You can also add existing members of the group to this collection, although it isn't required for them to access the plan owned by the group.
    #[serde(rename = "sharedWith")]
    pub shared_with: Option<MicrosoftGraphPlannerUserIds>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPlannerPreviewType {
    #[serde(rename = "automatic")]
    #[default]
    Automatic,
    #[serde(rename = "noPreview")]
    NoPreview,
    #[serde(rename = "checklist")]
    Checklist,
    #[serde(rename = "description")]
    Description,
    #[serde(rename = "reference")]
    Reference,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerProgressTaskBoardTaskFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.plannerProgressTaskBoardTaskFormat".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Hint value used to order the task on the progress view of the task board. For details about the supported format, see Using order hints in Planner.
    #[serde(rename = "orderHint")]
    pub order_hint: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerTask {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.plannerTask".to_string())]
    pub odata_type: String,
    ///Number of checklist items with value set to false, representing incomplete items.
    #[serde(rename = "activeChecklistItemCount")]
    pub active_checklist_item_count: Option<f64>,
    ///The categories to which the task has been applied. See applied Categories for possible values.
    #[serde(rename = "appliedCategories")]
    pub applied_categories: Option<MicrosoftGraphPlannerAppliedCategories>,
    ///Read-only. Nullable. Used to render the task correctly in the task board view when grouped by assignedTo.
    #[serde(rename = "assignedToTaskBoardFormat")]
    pub assigned_to_task_board_format: Option<
        MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat,
    >,
    ///Hint used to order items of this type in a list view. The format is defined as outlined here.
    #[serde(rename = "assigneePriority")]
    pub assignee_priority: Option<String>,
    ///The set of assignees the task is assigned to.
    pub assignments: Option<MicrosoftGraphPlannerAssignments>,
    ///Bucket ID to which the task belongs. The bucket needs to be in the plan that the task is in. It's 28 characters long and case-sensitive. Format validation is done on the service.
    #[serde(rename = "bucketId")]
    pub bucket_id: Option<String>,
    ///Read-only. Nullable. Used to render the task correctly in the task board view when grouped by bucket.
    #[serde(rename = "bucketTaskBoardFormat")]
    pub bucket_task_board_format: Option<MicrosoftGraphPlannerBucketTaskBoardTaskFormat>,
    ///Number of checklist items that are present on the task.
    #[serde(rename = "checklistItemCount")]
    pub checklist_item_count: Option<f64>,
    ///Identity of the user that completed the task.
    #[serde(rename = "completedBy")]
    pub completed_by: Option<MicrosoftGraphIdentitySet>,
    ///Read-only. Date and time at which the 'percentComplete' of the task is set to '100'. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Thread ID of the conversation on the task. This is the ID of the conversation thread object created in the group.
    #[serde(rename = "conversationThreadId")]
    pub conversation_thread_id: Option<String>,
    ///Identity of the user that created the task.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Read-only. Date and time at which the task is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Read-only. Nullable. More details about the task.
    pub details: Option<MicrosoftGraphPlannerTaskDetails>,
    ///Date and time at which the task is due. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "dueDateTime")]
    pub due_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Read-only. Value is true if the details object of the task has a nonempty description and false otherwise.
    #[serde(rename = "hasDescription")]
    pub has_description: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Hint used to order items of this type in a list view. The format is defined as outlined here.
    #[serde(rename = "orderHint")]
    pub order_hint: Option<String>,
    ///Percentage of task completion. When set to 100, the task is considered completed.
    #[serde(rename = "percentComplete")]
    pub percent_complete: Option<f64>,
    ///Plan ID to which the task belongs.
    #[serde(rename = "planId")]
    pub plan_id: Option<String>,
    ///This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference.
    #[serde(rename = "previewType")]
    pub preview_type: Option<MicrosoftGraphPlannerPreviewType>,
    ///Priority of the task. The valid range of values is between 0 and 10, with the increasing value being lower priority (0 has the highest priority and 10 has the lowest priority).  Currently, Planner interprets values 0 and 1 as 'urgent', 2, 3 and 4 as 'important', 5, 6, and 7 as 'medium', and 8, 9, and 10 as 'low'.  Additionally, Planner sets the value 1 for 'urgent', 3 for 'important', 5 for 'medium', and 9 for 'low'.
    pub priority: Option<f64>,
    ///Read-only. Nullable. Used to render the task correctly in the task board view when grouped by progress.
    #[serde(rename = "progressTaskBoardFormat")]
    pub progress_task_board_format: Option<
        MicrosoftGraphPlannerProgressTaskBoardTaskFormat,
    >,
    ///Number of external references that exist on the task.
    #[serde(rename = "referenceCount")]
    pub reference_count: Option<f64>,
    ///Date and time at which the task starts. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Title of the task.
    pub title: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerTaskDetails {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.plannerTaskDetails".to_string())]
    pub odata_type: String,
    ///The collection of checklist items on the task.
    pub checklist: Option<MicrosoftGraphPlannerChecklistItems>,
    ///Description of the task.
    pub description: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference. When set to automatic the displayed preview is chosen by the app viewing the task.
    #[serde(rename = "previewType")]
    pub preview_type: Option<MicrosoftGraphPlannerPreviewType>,
    ///The collection of references on the task.
    pub references: Option<MicrosoftGraphPlannerExternalReferences>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerUser {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.plannerUser".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Read-only. Nullable. Returns the plannerTasks assigned to the user.
    pub plans: Option<Vec<MicrosoftGraphPlannerPlan>>,
    ///Read-only. Nullable. Returns the plannerPlans shared with the user.
    pub tasks: Option<Vec<MicrosoftGraphPlannerTask>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlannerUserIds {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlatformCredentialAuthenticationMethod {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.platformCredentialAuthenticationMethod".to_string())]
    pub odata_type: String,
    ///The date and time that this Platform Credential Key was registered.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The registered device on which this Platform Credential resides. Supports $expand. When you get a user's Platform Credential registration information, this property is returned only on a single GET and when you specify ?$expand. For example, GET /users/admin@contoso.com/authentication/platformCredentialAuthenticationMethod/_jpuR-TGZtk6aQCLF3BQjA2?$expand=device.
    pub device: Option<MicrosoftGraphDevice>,
    ///The name of the device on which Platform Credential is registered.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Key strength of this Platform Credential key. Possible values are: normal, weak, unknown.
    #[serde(rename = "keyStrength")]
    pub key_strength: Option<MicrosoftGraphAuthenticationMethodKeyStrength>,
    ///Platform on which this Platform Credential key is present. Possible values are: unknown, windows, macOS,iOS, android, linux.
    pub platform: Option<MicrosoftGraphAuthenticationMethodPlatform>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPlayPromptOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.playPromptOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPolicyBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.policyBase".to_string())]
    pub odata_type: String,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphPolicyLocation { discriminator : "@odata.type", variants :
    [("#microsoft.graph.policyLocationApplication", Application(Box <
    MicrosoftGraphPolicyLocationApplication >)),
    ("#microsoft.graph.policyLocationDomain", Domain(Box <
    MicrosoftGraphPolicyLocationDomain >)), ("#microsoft.graph.policyLocationUrl",
    Url(Box < MicrosoftGraphPolicyLocationUrl >))], fallback : PolicyLocation(Box <
    MicrosoftGraphPolicyLocationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPolicyLocationApplication {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.policyLocationApplication".to_string())]
    pub odata_type: String,
    ///The actual value representing the location. Location value is specific for concretetype of the  policyLocation - policyLocationDomain, policyLocationUrl, or policyLocationApplication (for example, 'contoso.com', 'https://partner.contoso.com/upload', '83ef198a-0396-4893-9d4f-d36efbffcaaa').
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPolicyLocationBase {
    ///The actual value representing the location. Location value is specific for concretetype of the  policyLocation - policyLocationDomain, policyLocationUrl, or policyLocationApplication (for example, 'contoso.com', 'https://partner.contoso.com/upload', '83ef198a-0396-4893-9d4f-d36efbffcaaa').
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPolicyLocationDomain {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.policyLocationDomain".to_string())]
    pub odata_type: String,
    ///The actual value representing the location. Location value is specific for concretetype of the  policyLocation - policyLocationDomain, policyLocationUrl, or policyLocationApplication (for example, 'contoso.com', 'https://partner.contoso.com/upload', '83ef198a-0396-4893-9d4f-d36efbffcaaa').
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPolicyLocationUrl {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.policyLocationUrl".to_string())]
    pub odata_type: String,
    ///The actual value representing the location. Location value is specific for concretetype of the  policyLocation - policyLocationDomain, policyLocationUrl, or policyLocationApplication (for example, 'contoso.com', 'https://partner.contoso.com/upload', '83ef198a-0396-4893-9d4f-d36efbffcaaa').
    pub value: Option<String>,
}
///Supported platform types for policies.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPolicyPlatformType {
    #[serde(rename = "android")]
    #[default]
    Android,
    #[serde(rename = "androidForWork")]
    AndroidForWork,
    #[serde(rename = "iOS")]
    IOs,
    #[serde(rename = "macOS")]
    MacOs,
    #[serde(rename = "windowsPhone81")]
    WindowsPhone81,
    #[serde(rename = "windows81AndLater")]
    Windows81AndLater,
    #[serde(rename = "windows10AndLater")]
    Windows10AndLater,
    #[serde(rename = "all")]
    All,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPolicyRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.policyRoot".to_string())]
    pub odata_type: String,
    ///The policy that controls the idle time out for web sessions for applications.
    #[serde(rename = "activityBasedTimeoutPolicies")]
    pub activity_based_timeout_policies: Option<
        Vec<MicrosoftGraphActivityBasedTimeoutPolicy>,
    >,
    ///The policy by which consent requests are created and managed for the entire tenant.
    #[serde(rename = "adminConsentRequestPolicy")]
    pub admin_consent_request_policy: Option<MicrosoftGraphAdminConsentRequestPolicy>,
    ///The policies that enforce app management restrictions for specific applications and service principals, overriding the defaultAppManagementPolicy.
    #[serde(rename = "appManagementPolicies")]
    pub app_management_policies: Option<Vec<MicrosoftGraphAppManagementPolicy>>,
    ///The policy configuration of the self-service sign-up experience of external users.
    #[serde(rename = "authenticationFlowsPolicy")]
    pub authentication_flows_policy: Option<MicrosoftGraphAuthenticationFlowsPolicy>,
    ///The authentication methods and the users that are allowed to use them to sign in and perform multifactor authentication (MFA) in Microsoft Entra ID.
    #[serde(rename = "authenticationMethodsPolicy")]
    pub authentication_methods_policy: Option<MicrosoftGraphAuthenticationMethodsPolicy>,
    ///The authentication method combinations that are to be used in scenarios defined by Microsoft Entra Conditional Access.
    #[serde(rename = "authenticationStrengthPolicies")]
    pub authentication_strength_policies: Option<
        Vec<MicrosoftGraphAuthenticationStrengthPolicy>,
    >,
    ///The policy that controls Microsoft Entra authorization settings.
    #[serde(rename = "authorizationPolicy")]
    pub authorization_policy: Option<MicrosoftGraphAuthorizationPolicy>,
    ///The claim-mapping policies for WS-Fed, SAML, OAuth 2.0, and OpenID Connect protocols, for tokens issued to a specific application.
    #[serde(rename = "claimsMappingPolicies")]
    pub claims_mapping_policies: Option<Vec<MicrosoftGraphClaimsMappingPolicy>>,
    ///The custom rules that define an access scenario.
    #[serde(rename = "conditionalAccessPolicies")]
    pub conditional_access_policies: Option<Vec<MicrosoftGraphConditionalAccessPolicy>>,
    ///The custom rules that define an access scenario when interacting with external Microsoft Entra tenants.
    #[serde(rename = "crossTenantAccessPolicy")]
    pub cross_tenant_access_policy: Option<MicrosoftGraphCrossTenantAccessPolicy>,
    ///The tenant-wide policy that enforces app management restrictions for all applications and service principals.
    #[serde(rename = "defaultAppManagementPolicy")]
    pub default_app_management_policy: Option<MicrosoftGraphTenantAppManagementPolicy>,
    #[serde(rename = "deviceRegistrationPolicy")]
    pub device_registration_policy: Option<MicrosoftGraphDeviceRegistrationPolicy>,
    ///The feature rollout policy associated with a directory object.
    #[serde(rename = "featureRolloutPolicies")]
    pub feature_rollout_policies: Option<Vec<MicrosoftGraphFeatureRolloutPolicy>>,
    ///The policy to control Microsoft Entra authentication behavior for federated users.
    #[serde(rename = "homeRealmDiscoveryPolicies")]
    pub home_realm_discovery_policies: Option<
        Vec<MicrosoftGraphHomeRealmDiscoveryPolicy>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The policy that represents the security defaults that protect against common attacks.
    #[serde(rename = "identitySecurityDefaultsEnforcementPolicy")]
    pub identity_security_defaults_enforcement_policy: Option<
        MicrosoftGraphIdentitySecurityDefaultsEnforcementPolicy,
    >,
    ///The policy that specifies the conditions under which consent can be granted.
    #[serde(rename = "permissionGrantPolicies")]
    pub permission_grant_policies: Option<Vec<MicrosoftGraphPermissionGrantPolicy>>,
    ///Specifies the various policies associated with scopes and roles.
    #[serde(rename = "roleManagementPolicies")]
    pub role_management_policies: Option<Vec<MicrosoftGraphUnifiedRoleManagementPolicy>>,
    ///The assignment of a role management policy to a role definition object.
    #[serde(rename = "roleManagementPolicyAssignments")]
    pub role_management_policy_assignments: Option<
        Vec<MicrosoftGraphUnifiedRoleManagementPolicyAssignment>,
    >,
    ///The policy that specifies the characteristics of SAML tokens issued by Microsoft Entra ID.
    #[serde(rename = "tokenIssuancePolicies")]
    pub token_issuance_policies: Option<Vec<MicrosoftGraphTokenIssuancePolicy>>,
    ///The policy that controls the lifetime of a JWT access token, an ID token, or a SAML 1.1/2.0 token issued by Microsoft Entra ID.
    #[serde(rename = "tokenLifetimePolicies")]
    pub token_lifetime_policies: Option<Vec<MicrosoftGraphTokenLifetimePolicy>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPolicyTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.policyTemplate".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Defines an optional cross-tenant access policy template with user synchronization settings for a multitenant organization.
    #[serde(rename = "multiTenantOrganizationIdentitySynchronization")]
    pub multi_tenant_organization_identity_synchronization: Option<
        MicrosoftGraphMultiTenantOrganizationIdentitySyncPolicyTemplate,
    >,
    ///Defines an optional cross-tenant access policy template with inbound and outbound partner configuration settings for a multitenant organization.
    #[serde(rename = "multiTenantOrganizationPartnerConfiguration")]
    pub multi_tenant_organization_partner_configuration: Option<
        MicrosoftGraphMultiTenantOrganizationPartnerConfigurationTemplate,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPositiveReinforcementNotification {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.positiveReinforcementNotification".to_string())]
    pub odata_type: String,
    ///The default language for the end user notification.
    #[serde(rename = "defaultLanguage")]
    pub default_language: Option<String>,
    ///Delivery preference. Possible values are: unknown, deliverImmedietly, deliverAfterCampaignEnd, unknownFutureValue.
    #[serde(rename = "deliveryPreference")]
    pub delivery_preference: Option<MicrosoftGraphNotificationDeliveryPreference>,
    #[serde(rename = "endUserNotification")]
    pub end_user_notification: Option<MicrosoftGraphEndUserNotification>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPost {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.post".to_string())]
    pub odata_type: String,
    ///Read-only. Nullable. Supports $expand.
    pub attachments: Option<Vec<MicrosoftGraphAttachment>>,
    ///The contents of the post. This is a default property. This property can be null.
    pub body: Option<MicrosoftGraphItemBody>,
    ///The categories associated with the item
    pub categories: Option<Vec<Option<String>>>,
    ///Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
    #[serde(rename = "changeKey")]
    pub change_key: Option<String>,
    ///Unique ID of the conversation. Read-only.
    #[serde(rename = "conversationId")]
    pub conversation_id: Option<String>,
    ///Unique ID of the conversation thread. Read-only.
    #[serde(rename = "conversationThreadId")]
    pub conversation_thread_id: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of open extensions defined for the post. Read-only. Nullable. Supports $expand.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    pub from: Option<MicrosoftGraphRecipient>,
    ///Indicates whether the post has at least one attachment. This is a default property.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Read-only. Supports $expand.
    #[serde(rename = "inReplyTo")]
    pub in_reply_to: Option<Box<MicrosoftGraphPost>>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of multi-value extended properties defined for the post. Read-only. Nullable.
    #[serde(rename = "multiValueExtendedProperties")]
    pub multi_value_extended_properties: Option<
        Vec<MicrosoftGraphMultiValueLegacyExtendedProperty>,
    >,
    ///Conversation participants that were added to the thread as part of this post.
    #[serde(rename = "newParticipants")]
    pub new_participants: Option<Vec<MicrosoftGraphRecipient>>,
    ///Specifies when the post was received. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "receivedDateTime")]
    pub received_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains the address of the sender. The value of Sender is assumed to be the address of the authenticated user in the case when Sender is not specified. This is a default property.
    pub sender: Option<MicrosoftGraphRecipient>,
    ///The collection of single-value extended properties defined for the post. Read-only. Nullable.
    #[serde(rename = "singleValueExtendedProperties")]
    pub single_value_extended_properties: Option<
        Vec<MicrosoftGraphSingleValueLegacyExtendedProperty>,
    >,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPostType {
    #[serde(rename = "regular")]
    #[default]
    Regular,
    #[serde(rename = "quick")]
    Quick,
    #[serde(rename = "strategic")]
    Strategic,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPreAuthorizedApplication {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The unique identifier for the application.
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///The unique identifier for the oauth2PermissionScopes the application requires.
    #[serde(rename = "delegatedPermissionIds")]
    pub delegated_permission_ids: Option<Vec<String>>,
}
///Possible values for pre-release features.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrereleaseFeatures {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "settingsOnly")]
    SettingsOnly,
    #[serde(rename = "settingsAndExperimentations")]
    SettingsAndExperimentations,
    #[serde(rename = "notAllowed")]
    NotAllowed,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPresence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.presence".to_string())]
    pub odata_type: String,
    ///The supplemental information to a user's availability. Possible values are available, away, beRightBack, busy, doNotDisturb, offline, outOfOffice, presenceUnknown.
    pub activity: Option<String>,
    ///The base presence information for a user. Possible values are available, away, beRightBack, busy, doNotDisturb, focusing, inACall, inAMeeting, offline, presenting, presenceUnknown.
    pub availability: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The out of office settings for a user.
    #[serde(rename = "outOfOfficeSettings")]
    pub out_of_office_settings: Option<MicrosoftGraphOutOfOfficeSettings>,
    ///The lexicographically sortable String stamp that represents the version of a presence object.
    #[serde(rename = "sequenceNumber")]
    pub sequence_number: Option<String>,
    ///The presence status message of a user.
    #[serde(rename = "statusMessage")]
    pub status_message: Option<MicrosoftGraphPresenceStatusMessage>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPresenceStatusMessage {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Time in which the status message expires.If not provided, the status message doesn't expire.expiryDateTime.dateTime shouldn't include time zone.expiryDateTime isn't available when you request the presence of another user.
    #[serde(rename = "expiryDateTime")]
    pub expiry_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///Status message item. The only supported format currently is message.contentType = 'text'.
    pub message: Option<MicrosoftGraphItemBody>,
    ///Time in which the status message was published.Read-only.publishedDateTime isn't available when you request the presence of another user.
    #[serde(rename = "publishedDateTime")]
    pub published_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrincipalResourceMembershipsScope {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.principalResourceMembershipsScope".to_string())]
    pub odata_type: String,
    ///Defines the scopes of the principals whose access to resources are reviewed in the access review.
    #[serde(rename = "principalScopes")]
    pub principal_scopes: Option<Vec<MicrosoftGraphAccessReviewScope>>,
    ///Defines the scopes of the resources for which access is reviewed.
    #[serde(rename = "resourceScopes")]
    pub resource_scopes: Option<Vec<MicrosoftGraphAccessReviewScope>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintColorMode {
    #[serde(rename = "blackAndWhite")]
    #[default]
    BlackAndWhite,
    #[serde(rename = "grayscale")]
    Grayscale,
    #[serde(rename = "color")]
    Color,
    #[serde(rename = "auto")]
    Auto,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintConnector {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printConnector".to_string())]
    pub odata_type: String,
    ///The connector's version.
    #[serde(rename = "appVersion")]
    pub app_version: Option<String>,
    ///The name of the connector.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The connector machine's hostname.
    #[serde(rename = "fullyQualifiedDomainName")]
    pub fully_qualified_domain_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The physical and/or organizational location of the connector.
    pub location: Option<MicrosoftGraphPrinterLocation>,
    ///The connector machine's operating system version.
    #[serde(rename = "operatingSystem")]
    pub operating_system: Option<String>,
    ///The DateTimeOffset when the connector was registered.
    #[serde(rename = "registeredDateTime")]
    pub registered_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintDocument {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printDocument".to_string())]
    pub odata_type: String,
    ///The document's content (MIME) type. Read-only.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The document's name. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The time the document was downloaded. Read-only
    #[serde(rename = "downloadedDateTime")]
    pub downloaded_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The document's size in bytes. Read-only.
    pub size: Option<f64>,
    ///The time the document was uploaded. Read-only
    #[serde(rename = "uploadedDateTime")]
    pub uploaded_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintDuplexMode {
    #[serde(rename = "flipOnLongEdge")]
    #[default]
    FlipOnLongEdge,
    #[serde(rename = "flipOnShortEdge")]
    FlipOnShortEdge,
    #[serde(rename = "oneSided")]
    OneSided,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintEvent {
    #[serde(rename = "jobStarted")]
    #[default]
    JobStarted,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintFinishing {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "staple")]
    Staple,
    #[serde(rename = "punch")]
    Punch,
    #[serde(rename = "cover")]
    Cover,
    #[serde(rename = "bind")]
    Bind,
    #[serde(rename = "saddleStitch")]
    SaddleStitch,
    #[serde(rename = "stitchEdge")]
    StitchEdge,
    #[serde(rename = "stapleTopLeft")]
    StapleTopLeft,
    #[serde(rename = "stapleBottomLeft")]
    StapleBottomLeft,
    #[serde(rename = "stapleTopRight")]
    StapleTopRight,
    #[serde(rename = "stapleBottomRight")]
    StapleBottomRight,
    #[serde(rename = "stitchLeftEdge")]
    StitchLeftEdge,
    #[serde(rename = "stitchTopEdge")]
    StitchTopEdge,
    #[serde(rename = "stitchRightEdge")]
    StitchRightEdge,
    #[serde(rename = "stitchBottomEdge")]
    StitchBottomEdge,
    #[serde(rename = "stapleDualLeft")]
    StapleDualLeft,
    #[serde(rename = "stapleDualTop")]
    StapleDualTop,
    #[serde(rename = "stapleDualRight")]
    StapleDualRight,
    #[serde(rename = "stapleDualBottom")]
    StapleDualBottom,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "stapleTripleLeft")]
    StapleTripleLeft,
    #[serde(rename = "stapleTripleTop")]
    StapleTripleTop,
    #[serde(rename = "stapleTripleRight")]
    StapleTripleRight,
    #[serde(rename = "stapleTripleBottom")]
    StapleTripleBottom,
    #[serde(rename = "bindLeft")]
    BindLeft,
    #[serde(rename = "bindTop")]
    BindTop,
    #[serde(rename = "bindRight")]
    BindRight,
    #[serde(rename = "bindBottom")]
    BindBottom,
    #[serde(rename = "foldAccordion")]
    FoldAccordion,
    #[serde(rename = "foldDoubleGate")]
    FoldDoubleGate,
    #[serde(rename = "foldGate")]
    FoldGate,
    #[serde(rename = "foldHalf")]
    FoldHalf,
    #[serde(rename = "foldHalfZ")]
    FoldHalfZ,
    #[serde(rename = "foldLeftGate")]
    FoldLeftGate,
    #[serde(rename = "foldLetter")]
    FoldLetter,
    #[serde(rename = "foldParallel")]
    FoldParallel,
    #[serde(rename = "foldPoster")]
    FoldPoster,
    #[serde(rename = "foldRightGate")]
    FoldRightGate,
    #[serde(rename = "foldZ")]
    FoldZ,
    #[serde(rename = "foldEngineeringZ")]
    FoldEngineeringZ,
    #[serde(rename = "punchTopLeft")]
    PunchTopLeft,
    #[serde(rename = "punchBottomLeft")]
    PunchBottomLeft,
    #[serde(rename = "punchTopRight")]
    PunchTopRight,
    #[serde(rename = "punchBottomRight")]
    PunchBottomRight,
    #[serde(rename = "punchDualLeft")]
    PunchDualLeft,
    #[serde(rename = "punchDualTop")]
    PunchDualTop,
    #[serde(rename = "punchDualRight")]
    PunchDualRight,
    #[serde(rename = "punchDualBottom")]
    PunchDualBottom,
    #[serde(rename = "punchTripleLeft")]
    PunchTripleLeft,
    #[serde(rename = "punchTripleTop")]
    PunchTripleTop,
    #[serde(rename = "punchTripleRight")]
    PunchTripleRight,
    #[serde(rename = "punchTripleBottom")]
    PunchTripleBottom,
    #[serde(rename = "punchQuadLeft")]
    PunchQuadLeft,
    #[serde(rename = "punchQuadTop")]
    PunchQuadTop,
    #[serde(rename = "punchQuadRight")]
    PunchQuadRight,
    #[serde(rename = "punchQuadBottom")]
    PunchQuadBottom,
    #[serde(rename = "fold")]
    Fold,
    #[serde(rename = "trim")]
    Trim,
    #[serde(rename = "bale")]
    Bale,
    #[serde(rename = "bookletMaker")]
    BookletMaker,
    #[serde(rename = "coat")]
    Coat,
    #[serde(rename = "laminate")]
    Laminate,
    #[serde(rename = "trimAfterPages")]
    TrimAfterPages,
    #[serde(rename = "trimAfterDocuments")]
    TrimAfterDocuments,
    #[serde(rename = "trimAfterCopies")]
    TrimAfterCopies,
    #[serde(rename = "trimAfterJob")]
    TrimAfterJob,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintJob {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printJob".to_string())]
    pub odata_type: String,
    ///The dateTimeOffset when the job was acknowledged. Read-only.
    #[serde(rename = "acknowledgedDateTime")]
    pub acknowledged_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub configuration: Option<MicrosoftGraphPrintJobConfiguration>,
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphUserIdentity>,
    ///The DateTimeOffset when the job was created. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub documents: Option<Vec<MicrosoftGraphPrintDocument>>,
    ///The error code of the print job. Read-only.
    #[serde(rename = "errorCode")]
    pub error_code: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If true, document can be fetched by printer.
    #[serde(rename = "isFetchable")]
    pub is_fetchable: Option<bool>,
    ///Contains the source job URL, if the job has been redirected from another printer.
    #[serde(rename = "redirectedFrom")]
    pub redirected_from: Option<String>,
    ///Contains the destination job URL, if the job has been redirected to another printer.
    #[serde(rename = "redirectedTo")]
    pub redirected_to: Option<String>,
    pub status: Option<MicrosoftGraphPrintJobStatus>,
    ///A list of printTasks that were triggered by this print job.
    pub tasks: Option<Vec<MicrosoftGraphPrintTask>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintJobConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Whether the printer should collate pages wehen printing multiple copies of a multi-page document.
    pub collate: Option<bool>,
    ///The color mode the printer should use to print the job. Valid values are described in the table below. Read-only.
    #[serde(rename = "colorMode")]
    pub color_mode: Option<MicrosoftGraphPrintColorMode>,
    ///The number of copies that should be printed. Read-only.
    pub copies: Option<f64>,
    ///The resolution to use when printing the job, expressed in dots per inch (DPI). Read-only.
    pub dpi: Option<f64>,
    ///The duplex mode the printer should use when printing the job. Valid values are described in the table below. Read-only.
    #[serde(rename = "duplexMode")]
    pub duplex_mode: Option<MicrosoftGraphPrintDuplexMode>,
    ///The orientation to use when feeding media into the printer. Valid values are described in the following table. Read-only.
    #[serde(rename = "feedOrientation")]
    pub feed_orientation: Option<MicrosoftGraphPrinterFeedOrientation>,
    ///Finishing processes to use when printing.
    pub finishings: Option<Vec<MicrosoftGraphPrintFinishing>>,
    ///True to fit each page of a PDF document to a physical sheet of media; false to let the printer decide how to lay out impressions.
    #[serde(rename = "fitPdfToPage")]
    pub fit_pdf_to_page: Option<bool>,
    ///The input bin (tray) to use when printing. See the printer's capabilities for a list of supported input bins.
    #[serde(rename = "inputBin")]
    pub input_bin: Option<String>,
    ///The margin settings to use when printing.
    pub margin: Option<MicrosoftGraphPrintMargin>,
    ///The media size to use when printing. Supports standard size names for ISO and ANSI media sizes. Valid values listed in the printerCapabilities topic.
    #[serde(rename = "mediaSize")]
    pub media_size: Option<String>,
    ///The default media (such as paper) type to print the document on.
    #[serde(rename = "mediaType")]
    pub media_type: Option<String>,
    ///The direction to lay out pages when multiple pages are being printed per sheet. Valid values are described in the following table.
    #[serde(rename = "multipageLayout")]
    pub multipage_layout: Option<MicrosoftGraphPrintMultipageLayout>,
    ///The orientation setting the printer should use when printing the job. Valid values are described in the following table.
    pub orientation: Option<MicrosoftGraphPrintOrientation>,
    ///The output bin to place completed prints into. See the printer's capabilities for a list of supported output bins.
    #[serde(rename = "outputBin")]
    pub output_bin: Option<String>,
    ///The page ranges to print. Read-only.
    #[serde(rename = "pageRanges")]
    pub page_ranges: Option<Vec<MicrosoftGraphIntegerRange>>,
    ///The number of document pages to print on each sheet.
    #[serde(rename = "pagesPerSheet")]
    pub pages_per_sheet: Option<f64>,
    ///The print quality to use when printing the job. Valid values are described in the table below. Read-only.
    pub quality: Option<MicrosoftGraphPrintQuality>,
    ///Specifies how the printer should scale the document data to fit the requested media. Valid values are described in the following table.
    pub scaling: Option<MicrosoftGraphPrintScaling>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintJobProcessingState {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "paused")]
    Paused,
    #[serde(rename = "stopped")]
    Stopped,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "aborted")]
    Aborted,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintJobStateDetail {
    #[serde(rename = "uploadPending")]
    #[default]
    UploadPending,
    #[serde(rename = "transforming")]
    Transforming,
    #[serde(rename = "completedSuccessfully")]
    CompletedSuccessfully,
    #[serde(rename = "completedWithWarnings")]
    CompletedWithWarnings,
    #[serde(rename = "completedWithErrors")]
    CompletedWithErrors,
    #[serde(rename = "releaseWait")]
    ReleaseWait,
    #[serde(rename = "interpreting")]
    Interpreting,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintJobStatus {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A human-readable description of the print job's current processing state. Read-only.
    pub description: Option<String>,
    ///Additional details for print job state. Valid values are described in the following table. Read-only.
    pub details: Option<Vec<MicrosoftGraphPrintJobStateDetail>>,
    ///True if the job was acknowledged by a printer; false otherwise. Read-only.
    #[serde(rename = "isAcquiredByPrinter")]
    pub is_acquired_by_printer: Option<bool>,
    pub state: Option<MicrosoftGraphPrintJobProcessingState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintMargin {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The margin in microns from the bottom edge.
    pub bottom: Option<f64>,
    ///The margin in microns from the left edge.
    pub left: Option<f64>,
    ///The margin in microns from the right edge.
    pub right: Option<f64>,
    ///The margin in microns from the top edge.
    pub top: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintMultipageLayout {
    #[serde(rename = "clockwiseFromTopLeft")]
    #[default]
    ClockwiseFromTopLeft,
    #[serde(rename = "counterclockwiseFromTopLeft")]
    CounterclockwiseFromTopLeft,
    #[serde(rename = "counterclockwiseFromTopRight")]
    CounterclockwiseFromTopRight,
    #[serde(rename = "clockwiseFromTopRight")]
    ClockwiseFromTopRight,
    #[serde(rename = "counterclockwiseFromBottomLeft")]
    CounterclockwiseFromBottomLeft,
    #[serde(rename = "clockwiseFromBottomLeft")]
    ClockwiseFromBottomLeft,
    #[serde(rename = "counterclockwiseFromBottomRight")]
    CounterclockwiseFromBottomRight,
    #[serde(rename = "clockwiseFromBottomRight")]
    ClockwiseFromBottomRight,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printOperation".to_string())]
    pub odata_type: String,
    ///The DateTimeOffset when the operation was created. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub status: Option<MicrosoftGraphPrintOperationStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintOperationProcessingState {
    #[serde(rename = "notStarted")]
    #[default]
    NotStarted,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintOperationStatus {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A human-readable description of the printOperation's current processing state. Read-only.
    pub description: Option<String>,
    pub state: Option<MicrosoftGraphPrintOperationProcessingState>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintOrientation {
    #[serde(rename = "portrait")]
    #[default]
    Portrait,
    #[serde(rename = "landscape")]
    Landscape,
    #[serde(rename = "reverseLandscape")]
    ReverseLandscape,
    #[serde(rename = "reversePortrait")]
    ReversePortrait,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintQuality {
    #[serde(rename = "low")]
    #[default]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintScaling {
    #[serde(rename = "auto")]
    #[default]
    Auto,
    #[serde(rename = "shrinkToFit")]
    ShrinkToFit,
    #[serde(rename = "fill")]
    Fill,
    #[serde(rename = "fit")]
    Fit,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintService {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printService".to_string())]
    pub odata_type: String,
    ///Endpoints that can be used to access the service. Read-only. Nullable.
    pub endpoints: Option<Vec<MicrosoftGraphPrintServiceEndpoint>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintServiceEndpoint {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printServiceEndpoint".to_string())]
    pub odata_type: String,
    ///A human-readable display name for the endpoint.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The URI that can be used to access the service.
    pub uri: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintTask {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printTask".to_string())]
    pub odata_type: String,
    pub definition: Option<Box<MicrosoftGraphPrintTaskDefinition>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The URL for the print entity that triggered this task. For example, https://graph.microsoft.com/v1.0/print/printers/{printerId}/jobs/{jobId}. Read-only.
    #[serde(rename = "parentUrl")]
    pub parent_url: Option<String>,
    pub status: Option<MicrosoftGraphPrintTaskStatus>,
    pub trigger: Option<Box<MicrosoftGraphPrintTaskTrigger>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintTaskDefinition {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printTaskDefinition".to_string())]
    pub odata_type: String,
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphAppIdentity>,
    ///The name of the printTaskDefinition.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A list of tasks that have been created based on this definition. The list includes currently running tasks and recently completed tasks. Read-only.
    pub tasks: Option<Vec<MicrosoftGraphPrintTask>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrintTaskProcessingState {
    #[serde(rename = "pending")]
    #[default]
    Pending,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "aborted")]
    Aborted,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintTaskStatus {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A human-readable description of the current processing state of the printTask.
    pub description: Option<String>,
    pub state: Option<MicrosoftGraphPrintTaskProcessingState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintTaskTrigger {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printTaskTrigger".to_string())]
    pub odata_type: String,
    pub definition: Option<Box<MicrosoftGraphPrintTaskDefinition>>,
    pub event: Option<MicrosoftGraphPrintEvent>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintUsage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printUsage".to_string())]
    pub odata_type: String,
    #[serde(rename = "blackAndWhitePageCount")]
    pub black_and_white_page_count: Option<f64>,
    #[serde(rename = "colorPageCount")]
    pub color_page_count: Option<f64>,
    #[serde(rename = "completedBlackAndWhiteJobCount")]
    pub completed_black_and_white_job_count: Option<f64>,
    #[serde(rename = "completedColorJobCount")]
    pub completed_color_job_count: Option<f64>,
    #[serde(rename = "completedJobCount")]
    pub completed_job_count: Option<f64>,
    #[serde(rename = "doubleSidedSheetCount")]
    pub double_sided_sheet_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "incompleteJobCount")]
    pub incomplete_job_count: Option<f64>,
    #[serde(rename = "mediaSheetCount")]
    pub media_sheet_count: Option<f64>,
    #[serde(rename = "pageCount")]
    pub page_count: Option<f64>,
    #[serde(rename = "singleSidedSheetCount")]
    pub single_sided_sheet_count: Option<f64>,
    #[serde(rename = "usageDate")]
    pub usage_date: Option<chrono::NaiveDate>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintUsageByPrinter {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printUsageByPrinter".to_string())]
    pub odata_type: String,
    #[serde(rename = "blackAndWhitePageCount")]
    pub black_and_white_page_count: Option<f64>,
    #[serde(rename = "colorPageCount")]
    pub color_page_count: Option<f64>,
    #[serde(rename = "completedBlackAndWhiteJobCount")]
    pub completed_black_and_white_job_count: Option<f64>,
    #[serde(rename = "completedColorJobCount")]
    pub completed_color_job_count: Option<f64>,
    #[serde(rename = "completedJobCount")]
    pub completed_job_count: Option<f64>,
    #[serde(rename = "doubleSidedSheetCount")]
    pub double_sided_sheet_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "incompleteJobCount")]
    pub incomplete_job_count: Option<f64>,
    #[serde(rename = "mediaSheetCount")]
    pub media_sheet_count: Option<f64>,
    #[serde(rename = "pageCount")]
    pub page_count: Option<f64>,
    ///The ID of the printer represented by these statistics.
    #[serde(rename = "printerId")]
    pub printer_id: Option<String>,
    ///The name of the printer represented by these statistics.
    #[serde(rename = "printerName")]
    pub printer_name: Option<String>,
    #[serde(rename = "singleSidedSheetCount")]
    pub single_sided_sheet_count: Option<f64>,
    #[serde(rename = "usageDate")]
    pub usage_date: Option<chrono::NaiveDate>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrintUsageByUser {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printUsageByUser".to_string())]
    pub odata_type: String,
    #[serde(rename = "blackAndWhitePageCount")]
    pub black_and_white_page_count: Option<f64>,
    #[serde(rename = "colorPageCount")]
    pub color_page_count: Option<f64>,
    #[serde(rename = "completedBlackAndWhiteJobCount")]
    pub completed_black_and_white_job_count: Option<f64>,
    #[serde(rename = "completedColorJobCount")]
    pub completed_color_job_count: Option<f64>,
    #[serde(rename = "completedJobCount")]
    pub completed_job_count: Option<f64>,
    #[serde(rename = "doubleSidedSheetCount")]
    pub double_sided_sheet_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "incompleteJobCount")]
    pub incomplete_job_count: Option<f64>,
    #[serde(rename = "mediaSheetCount")]
    pub media_sheet_count: Option<f64>,
    #[serde(rename = "pageCount")]
    pub page_count: Option<f64>,
    #[serde(rename = "singleSidedSheetCount")]
    pub single_sided_sheet_count: Option<f64>,
    #[serde(rename = "usageDate")]
    pub usage_date: Option<chrono::NaiveDate>,
    ///The UPN of the user represented by these statistics.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrinter {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printer".to_string())]
    pub odata_type: String,
    ///The capabilities of the printer/printerShare.
    pub capabilities: Option<MicrosoftGraphPrinterCapabilities>,
    ///The connectors that are associated with the printer.
    pub connectors: Option<Vec<MicrosoftGraphPrintConnector>>,
    ///The default print settings of printer/printerShare.
    pub defaults: Option<MicrosoftGraphPrinterDefaults>,
    ///The name of the printer/printerShare.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///True if the printer has a physical device for printing. Read-only.
    #[serde(rename = "hasPhysicalDevice")]
    pub has_physical_device: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the printer/printerShare is currently accepting new print jobs.
    #[serde(rename = "isAcceptingJobs")]
    pub is_accepting_jobs: Option<bool>,
    ///True if the printer is shared; false otherwise. Read-only.
    #[serde(rename = "isShared")]
    pub is_shared: Option<bool>,
    ///The list of jobs that are queued for printing by the printer/printerShare.
    pub jobs: Option<Vec<MicrosoftGraphPrintJob>>,
    ///The most recent dateTimeOffset when a printer interacted with Universal Print. Read-only.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The physical and/or organizational location of the printer/printerShare.
    pub location: Option<MicrosoftGraphPrinterLocation>,
    ///The manufacturer of the printer/printerShare.
    pub manufacturer: Option<String>,
    ///The model name of the printer/printerShare.
    pub model: Option<String>,
    ///The DateTimeOffset when the printer was registered. Read-only.
    #[serde(rename = "registeredDateTime")]
    pub registered_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The list of printerShares that are associated with the printer. Currently, only one printerShare can be associated with the printer. Read-only. Nullable.
    pub shares: Option<Vec<MicrosoftGraphPrinterShare>>,
    pub status: Option<MicrosoftGraphPrinterStatus>,
    ///A list of task triggers that are associated with the printer.
    #[serde(rename = "taskTriggers")]
    pub task_triggers: Option<Vec<MicrosoftGraphPrintTaskTrigger>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrinterBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printerBase".to_string())]
    pub odata_type: String,
    ///The capabilities of the printer/printerShare.
    pub capabilities: Option<MicrosoftGraphPrinterCapabilities>,
    ///The default print settings of printer/printerShare.
    pub defaults: Option<MicrosoftGraphPrinterDefaults>,
    ///The name of the printer/printerShare.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the printer/printerShare is currently accepting new print jobs.
    #[serde(rename = "isAcceptingJobs")]
    pub is_accepting_jobs: Option<bool>,
    ///The list of jobs that are queued for printing by the printer/printerShare.
    pub jobs: Option<Vec<MicrosoftGraphPrintJob>>,
    ///The physical and/or organizational location of the printer/printerShare.
    pub location: Option<MicrosoftGraphPrinterLocation>,
    ///The manufacturer of the printer/printerShare.
    pub manufacturer: Option<String>,
    ///The model name of the printer/printerShare.
    pub model: Option<String>,
    pub status: Option<MicrosoftGraphPrinterStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrinterCapabilities {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A list of supported bottom margins(in microns) for the printer.
    #[serde(rename = "bottomMargins")]
    pub bottom_margins: Option<Vec<Option<f64>>>,
    ///True if the printer supports collating when printing muliple copies of a multi-page document; false otherwise.
    pub collation: Option<bool>,
    ///The color modes supported by the printer. Valid values are described in the following table.
    #[serde(rename = "colorModes")]
    pub color_modes: Option<Vec<MicrosoftGraphPrintColorMode>>,
    ///A list of supported content (MIME) types that the printer supports. It is not guaranteed that the Universal Print service supports printing all of these MIME types.
    #[serde(rename = "contentTypes")]
    pub content_types: Option<Vec<Option<String>>>,
    ///The range of copies per job supported by the printer.
    #[serde(rename = "copiesPerJob")]
    pub copies_per_job: Option<MicrosoftGraphIntegerRange>,
    ///The list of print resolutions in DPI that are supported by the printer.
    pub dpis: Option<Vec<Option<f64>>>,
    ///The list of duplex modes that are supported by the printer. Valid values are described in the following table.
    #[serde(rename = "duplexModes")]
    pub duplex_modes: Option<Vec<MicrosoftGraphPrintDuplexMode>>,
    ///The list of feed orientations that are supported by the printer.
    #[serde(rename = "feedOrientations")]
    pub feed_orientations: Option<Vec<MicrosoftGraphPrinterFeedOrientation>>,
    ///Finishing processes the printer supports for a printed document.
    pub finishings: Option<Vec<MicrosoftGraphPrintFinishing>>,
    ///Supported input bins for the printer.
    #[serde(rename = "inputBins")]
    pub input_bins: Option<Vec<Option<String>>>,
    ///True if color printing is supported by the printer; false otherwise. Read-only.
    #[serde(rename = "isColorPrintingSupported")]
    pub is_color_printing_supported: Option<bool>,
    ///True if the printer supports printing by page ranges; false otherwise.
    #[serde(rename = "isPageRangeSupported")]
    pub is_page_range_supported: Option<bool>,
    ///A list of supported left margins(in microns) for the printer.
    #[serde(rename = "leftMargins")]
    pub left_margins: Option<Vec<Option<f64>>>,
    ///The media (i.e., paper) colors supported by the printer.
    #[serde(rename = "mediaColors")]
    pub media_colors: Option<Vec<Option<String>>>,
    ///The media sizes supported by the printer. Supports standard size names for ISO and ANSI media sizes. Valid values are in the following table.
    #[serde(rename = "mediaSizes")]
    pub media_sizes: Option<Vec<Option<String>>>,
    ///The media types supported by the printer.
    #[serde(rename = "mediaTypes")]
    pub media_types: Option<Vec<Option<String>>>,
    ///The presentation directions supported by the printer. Supported values are described in the following table.
    #[serde(rename = "multipageLayouts")]
    pub multipage_layouts: Option<Vec<MicrosoftGraphPrintMultipageLayout>>,
    ///The print orientations supported by the printer. Valid values are described in the following table.
    pub orientations: Option<Vec<MicrosoftGraphPrintOrientation>>,
    ///The printer's supported output bins (trays).
    #[serde(rename = "outputBins")]
    pub output_bins: Option<Vec<Option<String>>>,
    ///Supported number of Input Pages to impose upon a single Impression.
    #[serde(rename = "pagesPerSheet")]
    pub pages_per_sheet: Option<Vec<Option<f64>>>,
    ///The print qualities supported by the printer.
    pub qualities: Option<Vec<MicrosoftGraphPrintQuality>>,
    ///A list of supported right margins(in microns) for the printer.
    #[serde(rename = "rightMargins")]
    pub right_margins: Option<Vec<Option<f64>>>,
    ///Supported print scalings.
    pub scalings: Option<Vec<MicrosoftGraphPrintScaling>>,
    ///True if the printer supports scaling PDF pages to match the print media size; false otherwise.
    #[serde(rename = "supportsFitPdfToPage")]
    pub supports_fit_pdf_to_page: Option<bool>,
    ///A list of supported top margins(in microns) for the printer.
    #[serde(rename = "topMargins")]
    pub top_margins: Option<Vec<Option<f64>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrinterCreateOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printerCreateOperation".to_string())]
    pub odata_type: String,
    ///The signed certificate created during the registration process. Read-only.
    pub certificate: Option<String>,
    ///The DateTimeOffset when the operation was created. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The created printer entity. Read-only.
    pub printer: Option<Box<MicrosoftGraphPrinter>>,
    pub status: Option<MicrosoftGraphPrintOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrinterDefaults {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The default color mode to use when printing the document. Valid values are described in the following table.
    #[serde(rename = "colorMode")]
    pub color_mode: Option<MicrosoftGraphPrintColorMode>,
    ///The default content (MIME) type to use when processing documents.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The default number of copies printed per job.
    #[serde(rename = "copiesPerJob")]
    pub copies_per_job: Option<f64>,
    ///The default resolution in DPI to use when printing the job.
    pub dpi: Option<f64>,
    ///The default duplex (double-sided) configuration to use when printing a document. Valid values are described in the following table.
    #[serde(rename = "duplexMode")]
    pub duplex_mode: Option<MicrosoftGraphPrintDuplexMode>,
    ///The default set of finishings to apply to print jobs. Valid values are described in the following table.
    pub finishings: Option<Vec<MicrosoftGraphPrintFinishing>>,
    ///The default fitPdfToPage setting. True to fit each page of a PDF document to a physical sheet of media; false to let the printer decide how to lay out impressions.
    #[serde(rename = "fitPdfToPage")]
    pub fit_pdf_to_page: Option<bool>,
    ///The default input bin that serves as the paper source.
    #[serde(rename = "inputBin")]
    pub input_bin: Option<String>,
    ///The default media (such as paper) color to print the document on.
    #[serde(rename = "mediaColor")]
    pub media_color: Option<String>,
    ///The default media size to use. Supports standard size names for ISO and ANSI media sizes. Valid values are listed in the printerCapabilities topic.
    #[serde(rename = "mediaSize")]
    pub media_size: Option<String>,
    ///The default media (such as paper) type to print the document on.
    #[serde(rename = "mediaType")]
    pub media_type: Option<String>,
    ///The default direction to lay out pages when multiple pages are being printed per sheet. Valid values are described in the following table.
    #[serde(rename = "multipageLayout")]
    pub multipage_layout: Option<MicrosoftGraphPrintMultipageLayout>,
    ///The default orientation to use when printing the document. Valid values are described in the following table.
    pub orientation: Option<MicrosoftGraphPrintOrientation>,
    ///The default output bin to place completed prints into. See the printer's capabilities for a list of supported output bins.
    #[serde(rename = "outputBin")]
    pub output_bin: Option<String>,
    ///The default number of document pages to print on each sheet.
    #[serde(rename = "pagesPerSheet")]
    pub pages_per_sheet: Option<f64>,
    ///The default quality to use when printing the document. Valid values are described in the following table.
    pub quality: Option<MicrosoftGraphPrintQuality>,
    ///Specifies how the printer scales the document data to fit the requested media. Valid values are described in the following table.
    pub scaling: Option<MicrosoftGraphPrintScaling>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrinterFeedOrientation {
    #[serde(rename = "longEdgeFirst")]
    #[default]
    LongEdgeFirst,
    #[serde(rename = "shortEdgeFirst")]
    ShortEdgeFirst,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrinterLocation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The altitude, in meters, that the printer is located at.
    #[serde(rename = "altitudeInMeters")]
    pub altitude_in_meters: Option<f64>,
    ///The building that the printer is located in.
    pub building: Option<String>,
    ///The city that the printer is located in.
    pub city: Option<String>,
    ///The country or region that the printer is located in.
    #[serde(rename = "countryOrRegion")]
    pub country_or_region: Option<String>,
    ///The floor that the printer is located on. Only numerical values are supported right now.
    pub floor: Option<String>,
    ///The description of the floor that the printer is located on.
    #[serde(rename = "floorDescription")]
    pub floor_description: Option<String>,
    ///The latitude that the printer is located at.
    pub latitude: Option<MicrosoftGraphPrinterLocationLatitude>,
    ///The longitude that the printer is located at.
    pub longitude: Option<MicrosoftGraphPrinterLocationLongitude>,
    ///The organizational hierarchy that the printer belongs to. The elements should be in hierarchical order.
    pub organization: Option<Vec<Option<String>>>,
    ///The postal code that the printer is located in.
    #[serde(rename = "postalCode")]
    pub postal_code: Option<String>,
    ///The description of the room that the printer is located in.
    #[serde(rename = "roomDescription")]
    pub room_description: Option<String>,
    ///The room that the printer is located in. Only numerical values are supported right now.
    #[serde(rename = "roomName")]
    pub room_name: Option<String>,
    ///The site that the printer is located in.
    pub site: Option<String>,
    ///The state or province that the printer is located in.
    #[serde(rename = "stateOrProvince")]
    pub state_or_province: Option<String>,
    ///The street address where the printer is located.
    #[serde(rename = "streetAddress")]
    pub street_address: Option<String>,
    ///The subdivision that the printer is located in. The elements should be in hierarchical order.
    pub subdivision: Option<Vec<Option<String>>>,
    pub subunit: Option<Vec<Option<String>>>,
}
///The latitude that the printer is located at.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrinterLocationLatitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The longitude that the printer is located at.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrinterLocationLongitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrinterProcessingState {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "idle")]
    Idle,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "stopped")]
    Stopped,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrinterProcessingStateDetail {
    #[serde(rename = "paused")]
    #[default]
    Paused,
    #[serde(rename = "mediaJam")]
    MediaJam,
    #[serde(rename = "mediaNeeded")]
    MediaNeeded,
    #[serde(rename = "mediaLow")]
    MediaLow,
    #[serde(rename = "mediaEmpty")]
    MediaEmpty,
    #[serde(rename = "coverOpen")]
    CoverOpen,
    #[serde(rename = "interlockOpen")]
    InterlockOpen,
    #[serde(rename = "outputTrayMissing")]
    OutputTrayMissing,
    #[serde(rename = "outputAreaFull")]
    OutputAreaFull,
    #[serde(rename = "markerSupplyLow")]
    MarkerSupplyLow,
    #[serde(rename = "markerSupplyEmpty")]
    MarkerSupplyEmpty,
    #[serde(rename = "inputTrayMissing")]
    InputTrayMissing,
    #[serde(rename = "outputAreaAlmostFull")]
    OutputAreaAlmostFull,
    #[serde(rename = "markerWasteAlmostFull")]
    MarkerWasteAlmostFull,
    #[serde(rename = "markerWasteFull")]
    MarkerWasteFull,
    #[serde(rename = "fuserOverTemp")]
    FuserOverTemp,
    #[serde(rename = "fuserUnderTemp")]
    FuserUnderTemp,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "movingToPaused")]
    MovingToPaused,
    #[serde(rename = "shutdown")]
    Shutdown,
    #[serde(rename = "connectingToDevice")]
    ConnectingToDevice,
    #[serde(rename = "timedOut")]
    TimedOut,
    #[serde(rename = "stopping")]
    Stopping,
    #[serde(rename = "stoppedPartially")]
    StoppedPartially,
    #[serde(rename = "tonerLow")]
    TonerLow,
    #[serde(rename = "tonerEmpty")]
    TonerEmpty,
    #[serde(rename = "spoolAreaFull")]
    SpoolAreaFull,
    #[serde(rename = "doorOpen")]
    DoorOpen,
    #[serde(rename = "opticalPhotoConductorNearEndOfLife")]
    OpticalPhotoConductorNearEndOfLife,
    #[serde(rename = "opticalPhotoConductorLifeOver")]
    OpticalPhotoConductorLifeOver,
    #[serde(rename = "developerLow")]
    DeveloperLow,
    #[serde(rename = "developerEmpty")]
    DeveloperEmpty,
    #[serde(rename = "interpreterResourceUnavailable")]
    InterpreterResourceUnavailable,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "alertRemovalOfBinaryChangeEntry")]
    AlertRemovalOfBinaryChangeEntry,
    #[serde(rename = "banderAdded")]
    BanderAdded,
    #[serde(rename = "banderAlmostEmpty")]
    BanderAlmostEmpty,
    #[serde(rename = "banderAlmostFull")]
    BanderAlmostFull,
    #[serde(rename = "banderAtLimit")]
    BanderAtLimit,
    #[serde(rename = "banderClosed")]
    BanderClosed,
    #[serde(rename = "banderConfigurationChange")]
    BanderConfigurationChange,
    #[serde(rename = "banderCoverClosed")]
    BanderCoverClosed,
    #[serde(rename = "banderCoverOpen")]
    BanderCoverOpen,
    #[serde(rename = "banderEmpty")]
    BanderEmpty,
    #[serde(rename = "banderFull")]
    BanderFull,
    #[serde(rename = "banderInterlockClosed")]
    BanderInterlockClosed,
    #[serde(rename = "banderInterlockOpen")]
    BanderInterlockOpen,
    #[serde(rename = "banderJam")]
    BanderJam,
    #[serde(rename = "banderLifeAlmostOver")]
    BanderLifeAlmostOver,
    #[serde(rename = "banderLifeOver")]
    BanderLifeOver,
    #[serde(rename = "banderMemoryExhausted")]
    BanderMemoryExhausted,
    #[serde(rename = "banderMissing")]
    BanderMissing,
    #[serde(rename = "banderMotorFailure")]
    BanderMotorFailure,
    #[serde(rename = "banderNearLimit")]
    BanderNearLimit,
    #[serde(rename = "banderOffline")]
    BanderOffline,
    #[serde(rename = "banderOpened")]
    BanderOpened,
    #[serde(rename = "banderOverTemperature")]
    BanderOverTemperature,
    #[serde(rename = "banderPowerSaver")]
    BanderPowerSaver,
    #[serde(rename = "banderRecoverableFailure")]
    BanderRecoverableFailure,
    #[serde(rename = "banderRecoverableStorage")]
    BanderRecoverableStorage,
    #[serde(rename = "banderRemoved")]
    BanderRemoved,
    #[serde(rename = "banderResourceAdded")]
    BanderResourceAdded,
    #[serde(rename = "banderResourceRemoved")]
    BanderResourceRemoved,
    #[serde(rename = "banderThermistorFailure")]
    BanderThermistorFailure,
    #[serde(rename = "banderTimingFailure")]
    BanderTimingFailure,
    #[serde(rename = "banderTurnedOff")]
    BanderTurnedOff,
    #[serde(rename = "banderTurnedOn")]
    BanderTurnedOn,
    #[serde(rename = "banderUnderTemperature")]
    BanderUnderTemperature,
    #[serde(rename = "banderUnrecoverableFailure")]
    BanderUnrecoverableFailure,
    #[serde(rename = "banderUnrecoverableStorageError")]
    BanderUnrecoverableStorageError,
    #[serde(rename = "banderWarmingUp")]
    BanderWarmingUp,
    #[serde(rename = "binderAdded")]
    BinderAdded,
    #[serde(rename = "binderAlmostEmpty")]
    BinderAlmostEmpty,
    #[serde(rename = "binderAlmostFull")]
    BinderAlmostFull,
    #[serde(rename = "binderAtLimit")]
    BinderAtLimit,
    #[serde(rename = "binderClosed")]
    BinderClosed,
    #[serde(rename = "binderConfigurationChange")]
    BinderConfigurationChange,
    #[serde(rename = "binderCoverClosed")]
    BinderCoverClosed,
    #[serde(rename = "binderCoverOpen")]
    BinderCoverOpen,
    #[serde(rename = "binderEmpty")]
    BinderEmpty,
    #[serde(rename = "binderFull")]
    BinderFull,
    #[serde(rename = "binderInterlockClosed")]
    BinderInterlockClosed,
    #[serde(rename = "binderInterlockOpen")]
    BinderInterlockOpen,
    #[serde(rename = "binderJam")]
    BinderJam,
    #[serde(rename = "binderLifeAlmostOver")]
    BinderLifeAlmostOver,
    #[serde(rename = "binderLifeOver")]
    BinderLifeOver,
    #[serde(rename = "binderMemoryExhausted")]
    BinderMemoryExhausted,
    #[serde(rename = "binderMissing")]
    BinderMissing,
    #[serde(rename = "binderMotorFailure")]
    BinderMotorFailure,
    #[serde(rename = "binderNearLimit")]
    BinderNearLimit,
    #[serde(rename = "binderOffline")]
    BinderOffline,
    #[serde(rename = "binderOpened")]
    BinderOpened,
    #[serde(rename = "binderOverTemperature")]
    BinderOverTemperature,
    #[serde(rename = "binderPowerSaver")]
    BinderPowerSaver,
    #[serde(rename = "binderRecoverableFailure")]
    BinderRecoverableFailure,
    #[serde(rename = "binderRecoverableStorage")]
    BinderRecoverableStorage,
    #[serde(rename = "binderRemoved")]
    BinderRemoved,
    #[serde(rename = "binderResourceAdded")]
    BinderResourceAdded,
    #[serde(rename = "binderResourceRemoved")]
    BinderResourceRemoved,
    #[serde(rename = "binderThermistorFailure")]
    BinderThermistorFailure,
    #[serde(rename = "binderTimingFailure")]
    BinderTimingFailure,
    #[serde(rename = "binderTurnedOff")]
    BinderTurnedOff,
    #[serde(rename = "binderTurnedOn")]
    BinderTurnedOn,
    #[serde(rename = "binderUnderTemperature")]
    BinderUnderTemperature,
    #[serde(rename = "binderUnrecoverableFailure")]
    BinderUnrecoverableFailure,
    #[serde(rename = "binderUnrecoverableStorageError")]
    BinderUnrecoverableStorageError,
    #[serde(rename = "binderWarmingUp")]
    BinderWarmingUp,
    #[serde(rename = "cameraFailure")]
    CameraFailure,
    #[serde(rename = "chamberCooling")]
    ChamberCooling,
    #[serde(rename = "chamberFailure")]
    ChamberFailure,
    #[serde(rename = "chamberHeating")]
    ChamberHeating,
    #[serde(rename = "chamberTemperatureHigh")]
    ChamberTemperatureHigh,
    #[serde(rename = "chamberTemperatureLow")]
    ChamberTemperatureLow,
    #[serde(rename = "cleanerLifeAlmostOver")]
    CleanerLifeAlmostOver,
    #[serde(rename = "cleanerLifeOver")]
    CleanerLifeOver,
    #[serde(rename = "configurationChange")]
    ConfigurationChange,
    #[serde(rename = "deactivated")]
    Deactivated,
    #[serde(rename = "deleted")]
    Deleted,
    #[serde(rename = "dieCutterAdded")]
    DieCutterAdded,
    #[serde(rename = "dieCutterAlmostEmpty")]
    DieCutterAlmostEmpty,
    #[serde(rename = "dieCutterAlmostFull")]
    DieCutterAlmostFull,
    #[serde(rename = "dieCutterAtLimit")]
    DieCutterAtLimit,
    #[serde(rename = "dieCutterClosed")]
    DieCutterClosed,
    #[serde(rename = "dieCutterConfigurationChange")]
    DieCutterConfigurationChange,
    #[serde(rename = "dieCutterCoverClosed")]
    DieCutterCoverClosed,
    #[serde(rename = "dieCutterCoverOpen")]
    DieCutterCoverOpen,
    #[serde(rename = "dieCutterEmpty")]
    DieCutterEmpty,
    #[serde(rename = "dieCutterFull")]
    DieCutterFull,
    #[serde(rename = "dieCutterInterlockClosed")]
    DieCutterInterlockClosed,
    #[serde(rename = "dieCutterInterlockOpen")]
    DieCutterInterlockOpen,
    #[serde(rename = "dieCutterJam")]
    DieCutterJam,
    #[serde(rename = "dieCutterLifeAlmostOver")]
    DieCutterLifeAlmostOver,
    #[serde(rename = "dieCutterLifeOver")]
    DieCutterLifeOver,
    #[serde(rename = "dieCutterMemoryExhausted")]
    DieCutterMemoryExhausted,
    #[serde(rename = "dieCutterMissing")]
    DieCutterMissing,
    #[serde(rename = "dieCutterMotorFailure")]
    DieCutterMotorFailure,
    #[serde(rename = "dieCutterNearLimit")]
    DieCutterNearLimit,
    #[serde(rename = "dieCutterOffline")]
    DieCutterOffline,
    #[serde(rename = "dieCutterOpened")]
    DieCutterOpened,
    #[serde(rename = "dieCutterOverTemperature")]
    DieCutterOverTemperature,
    #[serde(rename = "dieCutterPowerSaver")]
    DieCutterPowerSaver,
    #[serde(rename = "dieCutterRecoverableFailure")]
    DieCutterRecoverableFailure,
    #[serde(rename = "dieCutterRecoverableStorage")]
    DieCutterRecoverableStorage,
    #[serde(rename = "dieCutterRemoved")]
    DieCutterRemoved,
    #[serde(rename = "dieCutterResourceAdded")]
    DieCutterResourceAdded,
    #[serde(rename = "dieCutterResourceRemoved")]
    DieCutterResourceRemoved,
    #[serde(rename = "dieCutterThermistorFailure")]
    DieCutterThermistorFailure,
    #[serde(rename = "dieCutterTimingFailure")]
    DieCutterTimingFailure,
    #[serde(rename = "dieCutterTurnedOff")]
    DieCutterTurnedOff,
    #[serde(rename = "dieCutterTurnedOn")]
    DieCutterTurnedOn,
    #[serde(rename = "dieCutterUnderTemperature")]
    DieCutterUnderTemperature,
    #[serde(rename = "dieCutterUnrecoverableFailure")]
    DieCutterUnrecoverableFailure,
    #[serde(rename = "dieCutterUnrecoverableStorageError")]
    DieCutterUnrecoverableStorageError,
    #[serde(rename = "dieCutterWarmingUp")]
    DieCutterWarmingUp,
    #[serde(rename = "extruderCooling")]
    ExtruderCooling,
    #[serde(rename = "extruderFailure")]
    ExtruderFailure,
    #[serde(rename = "extruderHeating")]
    ExtruderHeating,
    #[serde(rename = "extruderJam")]
    ExtruderJam,
    #[serde(rename = "extruderTemperatureHigh")]
    ExtruderTemperatureHigh,
    #[serde(rename = "extruderTemperatureLow")]
    ExtruderTemperatureLow,
    #[serde(rename = "fanFailure")]
    FanFailure,
    #[serde(rename = "faxModemLifeAlmostOver")]
    FaxModemLifeAlmostOver,
    #[serde(rename = "faxModemLifeOver")]
    FaxModemLifeOver,
    #[serde(rename = "faxModemMissing")]
    FaxModemMissing,
    #[serde(rename = "faxModemTurnedOff")]
    FaxModemTurnedOff,
    #[serde(rename = "faxModemTurnedOn")]
    FaxModemTurnedOn,
    #[serde(rename = "folderAdded")]
    FolderAdded,
    #[serde(rename = "folderAlmostEmpty")]
    FolderAlmostEmpty,
    #[serde(rename = "folderAlmostFull")]
    FolderAlmostFull,
    #[serde(rename = "folderAtLimit")]
    FolderAtLimit,
    #[serde(rename = "folderClosed")]
    FolderClosed,
    #[serde(rename = "folderConfigurationChange")]
    FolderConfigurationChange,
    #[serde(rename = "folderCoverClosed")]
    FolderCoverClosed,
    #[serde(rename = "folderCoverOpen")]
    FolderCoverOpen,
    #[serde(rename = "folderEmpty")]
    FolderEmpty,
    #[serde(rename = "folderFull")]
    FolderFull,
    #[serde(rename = "folderInterlockClosed")]
    FolderInterlockClosed,
    #[serde(rename = "folderInterlockOpen")]
    FolderInterlockOpen,
    #[serde(rename = "folderJam")]
    FolderJam,
    #[serde(rename = "folderLifeAlmostOver")]
    FolderLifeAlmostOver,
    #[serde(rename = "folderLifeOver")]
    FolderLifeOver,
    #[serde(rename = "folderMemoryExhausted")]
    FolderMemoryExhausted,
    #[serde(rename = "folderMissing")]
    FolderMissing,
    #[serde(rename = "folderMotorFailure")]
    FolderMotorFailure,
    #[serde(rename = "folderNearLimit")]
    FolderNearLimit,
    #[serde(rename = "folderOffline")]
    FolderOffline,
    #[serde(rename = "folderOpened")]
    FolderOpened,
    #[serde(rename = "folderOverTemperature")]
    FolderOverTemperature,
    #[serde(rename = "folderPowerSaver")]
    FolderPowerSaver,
    #[serde(rename = "folderRecoverableFailure")]
    FolderRecoverableFailure,
    #[serde(rename = "folderRecoverableStorage")]
    FolderRecoverableStorage,
    #[serde(rename = "folderRemoved")]
    FolderRemoved,
    #[serde(rename = "folderResourceAdded")]
    FolderResourceAdded,
    #[serde(rename = "folderResourceRemoved")]
    FolderResourceRemoved,
    #[serde(rename = "folderThermistorFailure")]
    FolderThermistorFailure,
    #[serde(rename = "folderTimingFailure")]
    FolderTimingFailure,
    #[serde(rename = "folderTurnedOff")]
    FolderTurnedOff,
    #[serde(rename = "folderTurnedOn")]
    FolderTurnedOn,
    #[serde(rename = "folderUnderTemperature")]
    FolderUnderTemperature,
    #[serde(rename = "folderUnrecoverableFailure")]
    FolderUnrecoverableFailure,
    #[serde(rename = "folderUnrecoverableStorageError")]
    FolderUnrecoverableStorageError,
    #[serde(rename = "folderWarmingUp")]
    FolderWarmingUp,
    #[serde(rename = "hibernate")]
    Hibernate,
    #[serde(rename = "holdNewJobs")]
    HoldNewJobs,
    #[serde(rename = "identifyPrinterRequested")]
    IdentifyPrinterRequested,
    #[serde(rename = "imprinterAdded")]
    ImprinterAdded,
    #[serde(rename = "imprinterAlmostEmpty")]
    ImprinterAlmostEmpty,
    #[serde(rename = "imprinterAlmostFull")]
    ImprinterAlmostFull,
    #[serde(rename = "imprinterAtLimit")]
    ImprinterAtLimit,
    #[serde(rename = "imprinterClosed")]
    ImprinterClosed,
    #[serde(rename = "imprinterConfigurationChange")]
    ImprinterConfigurationChange,
    #[serde(rename = "imprinterCoverClosed")]
    ImprinterCoverClosed,
    #[serde(rename = "imprinterCoverOpen")]
    ImprinterCoverOpen,
    #[serde(rename = "imprinterEmpty")]
    ImprinterEmpty,
    #[serde(rename = "imprinterFull")]
    ImprinterFull,
    #[serde(rename = "imprinterInterlockClosed")]
    ImprinterInterlockClosed,
    #[serde(rename = "imprinterInterlockOpen")]
    ImprinterInterlockOpen,
    #[serde(rename = "imprinterJam")]
    ImprinterJam,
    #[serde(rename = "imprinterLifeAlmostOver")]
    ImprinterLifeAlmostOver,
    #[serde(rename = "imprinterLifeOver")]
    ImprinterLifeOver,
    #[serde(rename = "imprinterMemoryExhausted")]
    ImprinterMemoryExhausted,
    #[serde(rename = "imprinterMissing")]
    ImprinterMissing,
    #[serde(rename = "imprinterMotorFailure")]
    ImprinterMotorFailure,
    #[serde(rename = "imprinterNearLimit")]
    ImprinterNearLimit,
    #[serde(rename = "imprinterOffline")]
    ImprinterOffline,
    #[serde(rename = "imprinterOpened")]
    ImprinterOpened,
    #[serde(rename = "imprinterOverTemperature")]
    ImprinterOverTemperature,
    #[serde(rename = "imprinterPowerSaver")]
    ImprinterPowerSaver,
    #[serde(rename = "imprinterRecoverableFailure")]
    ImprinterRecoverableFailure,
    #[serde(rename = "imprinterRecoverableStorage")]
    ImprinterRecoverableStorage,
    #[serde(rename = "imprinterRemoved")]
    ImprinterRemoved,
    #[serde(rename = "imprinterResourceAdded")]
    ImprinterResourceAdded,
    #[serde(rename = "imprinterResourceRemoved")]
    ImprinterResourceRemoved,
    #[serde(rename = "imprinterThermistorFailure")]
    ImprinterThermistorFailure,
    #[serde(rename = "imprinterTimingFailure")]
    ImprinterTimingFailure,
    #[serde(rename = "imprinterTurnedOff")]
    ImprinterTurnedOff,
    #[serde(rename = "imprinterTurnedOn")]
    ImprinterTurnedOn,
    #[serde(rename = "imprinterUnderTemperature")]
    ImprinterUnderTemperature,
    #[serde(rename = "imprinterUnrecoverableFailure")]
    ImprinterUnrecoverableFailure,
    #[serde(rename = "imprinterUnrecoverableStorageError")]
    ImprinterUnrecoverableStorageError,
    #[serde(rename = "imprinterWarmingUp")]
    ImprinterWarmingUp,
    #[serde(rename = "inputCannotFeedSizeSelected")]
    InputCannotFeedSizeSelected,
    #[serde(rename = "inputManualInputRequest")]
    InputManualInputRequest,
    #[serde(rename = "inputMediaColorChange")]
    InputMediaColorChange,
    #[serde(rename = "inputMediaFormPartsChange")]
    InputMediaFormPartsChange,
    #[serde(rename = "inputMediaSizeChange")]
    InputMediaSizeChange,
    #[serde(rename = "inputMediaTrayFailure")]
    InputMediaTrayFailure,
    #[serde(rename = "inputMediaTrayFeedError")]
    InputMediaTrayFeedError,
    #[serde(rename = "inputMediaTrayJam")]
    InputMediaTrayJam,
    #[serde(rename = "inputMediaTypeChange")]
    InputMediaTypeChange,
    #[serde(rename = "inputMediaWeightChange")]
    InputMediaWeightChange,
    #[serde(rename = "inputPickRollerFailure")]
    InputPickRollerFailure,
    #[serde(rename = "inputPickRollerLifeOver")]
    InputPickRollerLifeOver,
    #[serde(rename = "inputPickRollerLifeWarn")]
    InputPickRollerLifeWarn,
    #[serde(rename = "inputPickRollerMissing")]
    InputPickRollerMissing,
    #[serde(rename = "inputTrayElevationFailure")]
    InputTrayElevationFailure,
    #[serde(rename = "inputTrayPositionFailure")]
    InputTrayPositionFailure,
    #[serde(rename = "inserterAdded")]
    InserterAdded,
    #[serde(rename = "inserterAlmostEmpty")]
    InserterAlmostEmpty,
    #[serde(rename = "inserterAlmostFull")]
    InserterAlmostFull,
    #[serde(rename = "inserterAtLimit")]
    InserterAtLimit,
    #[serde(rename = "inserterClosed")]
    InserterClosed,
    #[serde(rename = "inserterConfigurationChange")]
    InserterConfigurationChange,
    #[serde(rename = "inserterCoverClosed")]
    InserterCoverClosed,
    #[serde(rename = "inserterCoverOpen")]
    InserterCoverOpen,
    #[serde(rename = "inserterEmpty")]
    InserterEmpty,
    #[serde(rename = "inserterFull")]
    InserterFull,
    #[serde(rename = "inserterInterlockClosed")]
    InserterInterlockClosed,
    #[serde(rename = "inserterInterlockOpen")]
    InserterInterlockOpen,
    #[serde(rename = "inserterJam")]
    InserterJam,
    #[serde(rename = "inserterLifeAlmostOver")]
    InserterLifeAlmostOver,
    #[serde(rename = "inserterLifeOver")]
    InserterLifeOver,
    #[serde(rename = "inserterMemoryExhausted")]
    InserterMemoryExhausted,
    #[serde(rename = "inserterMissing")]
    InserterMissing,
    #[serde(rename = "inserterMotorFailure")]
    InserterMotorFailure,
    #[serde(rename = "inserterNearLimit")]
    InserterNearLimit,
    #[serde(rename = "inserterOffline")]
    InserterOffline,
    #[serde(rename = "inserterOpened")]
    InserterOpened,
    #[serde(rename = "inserterOverTemperature")]
    InserterOverTemperature,
    #[serde(rename = "inserterPowerSaver")]
    InserterPowerSaver,
    #[serde(rename = "inserterRecoverableFailure")]
    InserterRecoverableFailure,
    #[serde(rename = "inserterRecoverableStorage")]
    InserterRecoverableStorage,
    #[serde(rename = "inserterRemoved")]
    InserterRemoved,
    #[serde(rename = "inserterResourceAdded")]
    InserterResourceAdded,
    #[serde(rename = "inserterResourceRemoved")]
    InserterResourceRemoved,
    #[serde(rename = "inserterThermistorFailure")]
    InserterThermistorFailure,
    #[serde(rename = "inserterTimingFailure")]
    InserterTimingFailure,
    #[serde(rename = "inserterTurnedOff")]
    InserterTurnedOff,
    #[serde(rename = "inserterTurnedOn")]
    InserterTurnedOn,
    #[serde(rename = "inserterUnderTemperature")]
    InserterUnderTemperature,
    #[serde(rename = "inserterUnrecoverableFailure")]
    InserterUnrecoverableFailure,
    #[serde(rename = "inserterUnrecoverableStorageError")]
    InserterUnrecoverableStorageError,
    #[serde(rename = "inserterWarmingUp")]
    InserterWarmingUp,
    #[serde(rename = "interlockClosed")]
    InterlockClosed,
    #[serde(rename = "interpreterCartridgeAdded")]
    InterpreterCartridgeAdded,
    #[serde(rename = "interpreterCartridgeDeleted")]
    InterpreterCartridgeDeleted,
    #[serde(rename = "interpreterComplexPageEncountered")]
    InterpreterComplexPageEncountered,
    #[serde(rename = "interpreterMemoryDecrease")]
    InterpreterMemoryDecrease,
    #[serde(rename = "interpreterMemoryIncrease")]
    InterpreterMemoryIncrease,
    #[serde(rename = "interpreterResourceAdded")]
    InterpreterResourceAdded,
    #[serde(rename = "interpreterResourceDeleted")]
    InterpreterResourceDeleted,
    #[serde(rename = "lampAtEol")]
    LampAtEol,
    #[serde(rename = "lampFailure")]
    LampFailure,
    #[serde(rename = "lampNearEol")]
    LampNearEol,
    #[serde(rename = "laserAtEol")]
    LaserAtEol,
    #[serde(rename = "laserFailure")]
    LaserFailure,
    #[serde(rename = "laserNearEol")]
    LaserNearEol,
    #[serde(rename = "makeEnvelopeAdded")]
    MakeEnvelopeAdded,
    #[serde(rename = "makeEnvelopeAlmostEmpty")]
    MakeEnvelopeAlmostEmpty,
    #[serde(rename = "makeEnvelopeAlmostFull")]
    MakeEnvelopeAlmostFull,
    #[serde(rename = "makeEnvelopeAtLimit")]
    MakeEnvelopeAtLimit,
    #[serde(rename = "makeEnvelopeClosed")]
    MakeEnvelopeClosed,
    #[serde(rename = "makeEnvelopeConfigurationChange")]
    MakeEnvelopeConfigurationChange,
    #[serde(rename = "makeEnvelopeCoverClosed")]
    MakeEnvelopeCoverClosed,
    #[serde(rename = "makeEnvelopeCoverOpen")]
    MakeEnvelopeCoverOpen,
    #[serde(rename = "makeEnvelopeEmpty")]
    MakeEnvelopeEmpty,
    #[serde(rename = "makeEnvelopeFull")]
    MakeEnvelopeFull,
    #[serde(rename = "makeEnvelopeInterlockClosed")]
    MakeEnvelopeInterlockClosed,
    #[serde(rename = "makeEnvelopeInterlockOpen")]
    MakeEnvelopeInterlockOpen,
    #[serde(rename = "makeEnvelopeJam")]
    MakeEnvelopeJam,
    #[serde(rename = "makeEnvelopeLifeAlmostOver")]
    MakeEnvelopeLifeAlmostOver,
    #[serde(rename = "makeEnvelopeLifeOver")]
    MakeEnvelopeLifeOver,
    #[serde(rename = "makeEnvelopeMemoryExhausted")]
    MakeEnvelopeMemoryExhausted,
    #[serde(rename = "makeEnvelopeMissing")]
    MakeEnvelopeMissing,
    #[serde(rename = "makeEnvelopeMotorFailure")]
    MakeEnvelopeMotorFailure,
    #[serde(rename = "makeEnvelopeNearLimit")]
    MakeEnvelopeNearLimit,
    #[serde(rename = "makeEnvelopeOffline")]
    MakeEnvelopeOffline,
    #[serde(rename = "makeEnvelopeOpened")]
    MakeEnvelopeOpened,
    #[serde(rename = "makeEnvelopeOverTemperature")]
    MakeEnvelopeOverTemperature,
    #[serde(rename = "makeEnvelopePowerSaver")]
    MakeEnvelopePowerSaver,
    #[serde(rename = "makeEnvelopeRecoverableFailure")]
    MakeEnvelopeRecoverableFailure,
    #[serde(rename = "makeEnvelopeRecoverableStorage")]
    MakeEnvelopeRecoverableStorage,
    #[serde(rename = "makeEnvelopeRemoved")]
    MakeEnvelopeRemoved,
    #[serde(rename = "makeEnvelopeResourceAdded")]
    MakeEnvelopeResourceAdded,
    #[serde(rename = "makeEnvelopeResourceRemoved")]
    MakeEnvelopeResourceRemoved,
    #[serde(rename = "makeEnvelopeThermistorFailure")]
    MakeEnvelopeThermistorFailure,
    #[serde(rename = "makeEnvelopeTimingFailure")]
    MakeEnvelopeTimingFailure,
    #[serde(rename = "makeEnvelopeTurnedOff")]
    MakeEnvelopeTurnedOff,
    #[serde(rename = "makeEnvelopeTurnedOn")]
    MakeEnvelopeTurnedOn,
    #[serde(rename = "makeEnvelopeUnderTemperature")]
    MakeEnvelopeUnderTemperature,
    #[serde(rename = "makeEnvelopeUnrecoverableFailure")]
    MakeEnvelopeUnrecoverableFailure,
    #[serde(rename = "makeEnvelopeUnrecoverableStorageError")]
    MakeEnvelopeUnrecoverableStorageError,
    #[serde(rename = "makeEnvelopeWarmingUp")]
    MakeEnvelopeWarmingUp,
    #[serde(rename = "markerAdjustingPrintQuality")]
    MarkerAdjustingPrintQuality,
    #[serde(rename = "markerCleanerMissing")]
    MarkerCleanerMissing,
    #[serde(rename = "markerDeveloperAlmostEmpty")]
    MarkerDeveloperAlmostEmpty,
    #[serde(rename = "markerDeveloperEmpty")]
    MarkerDeveloperEmpty,
    #[serde(rename = "markerDeveloperMissing")]
    MarkerDeveloperMissing,
    #[serde(rename = "markerFuserMissing")]
    MarkerFuserMissing,
    #[serde(rename = "markerFuserThermistorFailure")]
    MarkerFuserThermistorFailure,
    #[serde(rename = "markerFuserTimingFailure")]
    MarkerFuserTimingFailure,
    #[serde(rename = "markerInkAlmostEmpty")]
    MarkerInkAlmostEmpty,
    #[serde(rename = "markerInkEmpty")]
    MarkerInkEmpty,
    #[serde(rename = "markerInkMissing")]
    MarkerInkMissing,
    #[serde(rename = "markerOpcMissing")]
    MarkerOpcMissing,
    #[serde(rename = "markerPrintRibbonAlmostEmpty")]
    MarkerPrintRibbonAlmostEmpty,
    #[serde(rename = "markerPrintRibbonEmpty")]
    MarkerPrintRibbonEmpty,
    #[serde(rename = "markerPrintRibbonMissing")]
    MarkerPrintRibbonMissing,
    #[serde(rename = "markerSupplyAlmostEmpty")]
    MarkerSupplyAlmostEmpty,
    #[serde(rename = "markerSupplyMissing")]
    MarkerSupplyMissing,
    #[serde(rename = "markerTonerCartridgeMissing")]
    MarkerTonerCartridgeMissing,
    #[serde(rename = "markerTonerMissing")]
    MarkerTonerMissing,
    #[serde(rename = "markerWasteInkReceptacleAlmostFull")]
    MarkerWasteInkReceptacleAlmostFull,
    #[serde(rename = "markerWasteInkReceptacleFull")]
    MarkerWasteInkReceptacleFull,
    #[serde(rename = "markerWasteInkReceptacleMissing")]
    MarkerWasteInkReceptacleMissing,
    #[serde(rename = "markerWasteMissing")]
    MarkerWasteMissing,
    #[serde(rename = "markerWasteTonerReceptacleAlmostFull")]
    MarkerWasteTonerReceptacleAlmostFull,
    #[serde(rename = "markerWasteTonerReceptacleFull")]
    MarkerWasteTonerReceptacleFull,
    #[serde(rename = "markerWasteTonerReceptacleMissing")]
    MarkerWasteTonerReceptacleMissing,
    #[serde(rename = "materialEmpty")]
    MaterialEmpty,
    #[serde(rename = "materialLow")]
    MaterialLow,
    #[serde(rename = "materialNeeded")]
    MaterialNeeded,
    #[serde(rename = "mediaDrying")]
    MediaDrying,
    #[serde(rename = "mediaPathCannotDuplexMediaSelected")]
    MediaPathCannotDuplexMediaSelected,
    #[serde(rename = "mediaPathFailure")]
    MediaPathFailure,
    #[serde(rename = "mediaPathInputEmpty")]
    MediaPathInputEmpty,
    #[serde(rename = "mediaPathInputFeedError")]
    MediaPathInputFeedError,
    #[serde(rename = "mediaPathInputJam")]
    MediaPathInputJam,
    #[serde(rename = "mediaPathInputRequest")]
    MediaPathInputRequest,
    #[serde(rename = "mediaPathJam")]
    MediaPathJam,
    #[serde(rename = "mediaPathMediaTrayAlmostFull")]
    MediaPathMediaTrayAlmostFull,
    #[serde(rename = "mediaPathMediaTrayFull")]
    MediaPathMediaTrayFull,
    #[serde(rename = "mediaPathMediaTrayMissing")]
    MediaPathMediaTrayMissing,
    #[serde(rename = "mediaPathOutputFeedError")]
    MediaPathOutputFeedError,
    #[serde(rename = "mediaPathOutputFull")]
    MediaPathOutputFull,
    #[serde(rename = "mediaPathOutputJam")]
    MediaPathOutputJam,
    #[serde(rename = "mediaPathPickRollerFailure")]
    MediaPathPickRollerFailure,
    #[serde(rename = "mediaPathPickRollerLifeOver")]
    MediaPathPickRollerLifeOver,
    #[serde(rename = "mediaPathPickRollerLifeWarn")]
    MediaPathPickRollerLifeWarn,
    #[serde(rename = "mediaPathPickRollerMissing")]
    MediaPathPickRollerMissing,
    #[serde(rename = "motorFailure")]
    MotorFailure,
    #[serde(rename = "outputMailboxSelectFailure")]
    OutputMailboxSelectFailure,
    #[serde(rename = "outputMediaTrayFailure")]
    OutputMediaTrayFailure,
    #[serde(rename = "outputMediaTrayFeedError")]
    OutputMediaTrayFeedError,
    #[serde(rename = "outputMediaTrayJam")]
    OutputMediaTrayJam,
    #[serde(rename = "perforaterAdded")]
    PerforaterAdded,
    #[serde(rename = "perforaterAlmostEmpty")]
    PerforaterAlmostEmpty,
    #[serde(rename = "perforaterAlmostFull")]
    PerforaterAlmostFull,
    #[serde(rename = "perforaterAtLimit")]
    PerforaterAtLimit,
    #[serde(rename = "perforaterClosed")]
    PerforaterClosed,
    #[serde(rename = "perforaterConfigurationChange")]
    PerforaterConfigurationChange,
    #[serde(rename = "perforaterCoverClosed")]
    PerforaterCoverClosed,
    #[serde(rename = "perforaterCoverOpen")]
    PerforaterCoverOpen,
    #[serde(rename = "perforaterEmpty")]
    PerforaterEmpty,
    #[serde(rename = "perforaterFull")]
    PerforaterFull,
    #[serde(rename = "perforaterInterlockClosed")]
    PerforaterInterlockClosed,
    #[serde(rename = "perforaterInterlockOpen")]
    PerforaterInterlockOpen,
    #[serde(rename = "perforaterJam")]
    PerforaterJam,
    #[serde(rename = "perforaterLifeAlmostOver")]
    PerforaterLifeAlmostOver,
    #[serde(rename = "perforaterLifeOver")]
    PerforaterLifeOver,
    #[serde(rename = "perforaterMemoryExhausted")]
    PerforaterMemoryExhausted,
    #[serde(rename = "perforaterMissing")]
    PerforaterMissing,
    #[serde(rename = "perforaterMotorFailure")]
    PerforaterMotorFailure,
    #[serde(rename = "perforaterNearLimit")]
    PerforaterNearLimit,
    #[serde(rename = "perforaterOffline")]
    PerforaterOffline,
    #[serde(rename = "perforaterOpened")]
    PerforaterOpened,
    #[serde(rename = "perforaterOverTemperature")]
    PerforaterOverTemperature,
    #[serde(rename = "perforaterPowerSaver")]
    PerforaterPowerSaver,
    #[serde(rename = "perforaterRecoverableFailure")]
    PerforaterRecoverableFailure,
    #[serde(rename = "perforaterRecoverableStorage")]
    PerforaterRecoverableStorage,
    #[serde(rename = "perforaterRemoved")]
    PerforaterRemoved,
    #[serde(rename = "perforaterResourceAdded")]
    PerforaterResourceAdded,
    #[serde(rename = "perforaterResourceRemoved")]
    PerforaterResourceRemoved,
    #[serde(rename = "perforaterThermistorFailure")]
    PerforaterThermistorFailure,
    #[serde(rename = "perforaterTimingFailure")]
    PerforaterTimingFailure,
    #[serde(rename = "perforaterTurnedOff")]
    PerforaterTurnedOff,
    #[serde(rename = "perforaterTurnedOn")]
    PerforaterTurnedOn,
    #[serde(rename = "perforaterUnderTemperature")]
    PerforaterUnderTemperature,
    #[serde(rename = "perforaterUnrecoverableFailure")]
    PerforaterUnrecoverableFailure,
    #[serde(rename = "perforaterUnrecoverableStorageError")]
    PerforaterUnrecoverableStorageError,
    #[serde(rename = "perforaterWarmingUp")]
    PerforaterWarmingUp,
    #[serde(rename = "platformCooling")]
    PlatformCooling,
    #[serde(rename = "platformFailure")]
    PlatformFailure,
    #[serde(rename = "platformHeating")]
    PlatformHeating,
    #[serde(rename = "platformTemperatureHigh")]
    PlatformTemperatureHigh,
    #[serde(rename = "platformTemperatureLow")]
    PlatformTemperatureLow,
    #[serde(rename = "powerDown")]
    PowerDown,
    #[serde(rename = "powerUp")]
    PowerUp,
    #[serde(rename = "printerManualReset")]
    PrinterManualReset,
    #[serde(rename = "printerNmsReset")]
    PrinterNmsReset,
    #[serde(rename = "printerReadyToPrint")]
    PrinterReadyToPrint,
    #[serde(rename = "puncherAdded")]
    PuncherAdded,
    #[serde(rename = "puncherAlmostEmpty")]
    PuncherAlmostEmpty,
    #[serde(rename = "puncherAlmostFull")]
    PuncherAlmostFull,
    #[serde(rename = "puncherAtLimit")]
    PuncherAtLimit,
    #[serde(rename = "puncherClosed")]
    PuncherClosed,
    #[serde(rename = "puncherConfigurationChange")]
    PuncherConfigurationChange,
    #[serde(rename = "puncherCoverClosed")]
    PuncherCoverClosed,
    #[serde(rename = "puncherCoverOpen")]
    PuncherCoverOpen,
    #[serde(rename = "puncherEmpty")]
    PuncherEmpty,
    #[serde(rename = "puncherFull")]
    PuncherFull,
    #[serde(rename = "puncherInterlockClosed")]
    PuncherInterlockClosed,
    #[serde(rename = "puncherInterlockOpen")]
    PuncherInterlockOpen,
    #[serde(rename = "puncherJam")]
    PuncherJam,
    #[serde(rename = "puncherLifeAlmostOver")]
    PuncherLifeAlmostOver,
    #[serde(rename = "puncherLifeOver")]
    PuncherLifeOver,
    #[serde(rename = "puncherMemoryExhausted")]
    PuncherMemoryExhausted,
    #[serde(rename = "puncherMissing")]
    PuncherMissing,
    #[serde(rename = "puncherMotorFailure")]
    PuncherMotorFailure,
    #[serde(rename = "puncherNearLimit")]
    PuncherNearLimit,
    #[serde(rename = "puncherOffline")]
    PuncherOffline,
    #[serde(rename = "puncherOpened")]
    PuncherOpened,
    #[serde(rename = "puncherOverTemperature")]
    PuncherOverTemperature,
    #[serde(rename = "puncherPowerSaver")]
    PuncherPowerSaver,
    #[serde(rename = "puncherRecoverableFailure")]
    PuncherRecoverableFailure,
    #[serde(rename = "puncherRecoverableStorage")]
    PuncherRecoverableStorage,
    #[serde(rename = "puncherRemoved")]
    PuncherRemoved,
    #[serde(rename = "puncherResourceAdded")]
    PuncherResourceAdded,
    #[serde(rename = "puncherResourceRemoved")]
    PuncherResourceRemoved,
    #[serde(rename = "puncherThermistorFailure")]
    PuncherThermistorFailure,
    #[serde(rename = "puncherTimingFailure")]
    PuncherTimingFailure,
    #[serde(rename = "puncherTurnedOff")]
    PuncherTurnedOff,
    #[serde(rename = "puncherTurnedOn")]
    PuncherTurnedOn,
    #[serde(rename = "puncherUnderTemperature")]
    PuncherUnderTemperature,
    #[serde(rename = "puncherUnrecoverableFailure")]
    PuncherUnrecoverableFailure,
    #[serde(rename = "puncherUnrecoverableStorageError")]
    PuncherUnrecoverableStorageError,
    #[serde(rename = "puncherWarmingUp")]
    PuncherWarmingUp,
    #[serde(rename = "resuming")]
    Resuming,
    #[serde(rename = "scanMediaPathFailure")]
    ScanMediaPathFailure,
    #[serde(rename = "scanMediaPathInputEmpty")]
    ScanMediaPathInputEmpty,
    #[serde(rename = "scanMediaPathInputFeedError")]
    ScanMediaPathInputFeedError,
    #[serde(rename = "scanMediaPathInputJam")]
    ScanMediaPathInputJam,
    #[serde(rename = "scanMediaPathInputRequest")]
    ScanMediaPathInputRequest,
    #[serde(rename = "scanMediaPathJam")]
    ScanMediaPathJam,
    #[serde(rename = "scanMediaPathOutputFeedError")]
    ScanMediaPathOutputFeedError,
    #[serde(rename = "scanMediaPathOutputFull")]
    ScanMediaPathOutputFull,
    #[serde(rename = "scanMediaPathOutputJam")]
    ScanMediaPathOutputJam,
    #[serde(rename = "scanMediaPathPickRollerFailure")]
    ScanMediaPathPickRollerFailure,
    #[serde(rename = "scanMediaPathPickRollerLifeOver")]
    ScanMediaPathPickRollerLifeOver,
    #[serde(rename = "scanMediaPathPickRollerLifeWarn")]
    ScanMediaPathPickRollerLifeWarn,
    #[serde(rename = "scanMediaPathPickRollerMissing")]
    ScanMediaPathPickRollerMissing,
    #[serde(rename = "scanMediaPathTrayAlmostFull")]
    ScanMediaPathTrayAlmostFull,
    #[serde(rename = "scanMediaPathTrayFull")]
    ScanMediaPathTrayFull,
    #[serde(rename = "scanMediaPathTrayMissing")]
    ScanMediaPathTrayMissing,
    #[serde(rename = "scannerLightFailure")]
    ScannerLightFailure,
    #[serde(rename = "scannerLightLifeAlmostOver")]
    ScannerLightLifeAlmostOver,
    #[serde(rename = "scannerLightLifeOver")]
    ScannerLightLifeOver,
    #[serde(rename = "scannerLightMissing")]
    ScannerLightMissing,
    #[serde(rename = "scannerSensorFailure")]
    ScannerSensorFailure,
    #[serde(rename = "scannerSensorLifeAlmostOver")]
    ScannerSensorLifeAlmostOver,
    #[serde(rename = "scannerSensorLifeOver")]
    ScannerSensorLifeOver,
    #[serde(rename = "scannerSensorMissing")]
    ScannerSensorMissing,
    #[serde(rename = "separationCutterAdded")]
    SeparationCutterAdded,
    #[serde(rename = "separationCutterAlmostEmpty")]
    SeparationCutterAlmostEmpty,
    #[serde(rename = "separationCutterAlmostFull")]
    SeparationCutterAlmostFull,
    #[serde(rename = "separationCutterAtLimit")]
    SeparationCutterAtLimit,
    #[serde(rename = "separationCutterClosed")]
    SeparationCutterClosed,
    #[serde(rename = "separationCutterConfigurationChange")]
    SeparationCutterConfigurationChange,
    #[serde(rename = "separationCutterCoverClosed")]
    SeparationCutterCoverClosed,
    #[serde(rename = "separationCutterCoverOpen")]
    SeparationCutterCoverOpen,
    #[serde(rename = "separationCutterEmpty")]
    SeparationCutterEmpty,
    #[serde(rename = "separationCutterFull")]
    SeparationCutterFull,
    #[serde(rename = "separationCutterInterlockClosed")]
    SeparationCutterInterlockClosed,
    #[serde(rename = "separationCutterInterlockOpen")]
    SeparationCutterInterlockOpen,
    #[serde(rename = "separationCutterJam")]
    SeparationCutterJam,
    #[serde(rename = "separationCutterLifeAlmostOver")]
    SeparationCutterLifeAlmostOver,
    #[serde(rename = "separationCutterLifeOver")]
    SeparationCutterLifeOver,
    #[serde(rename = "separationCutterMemoryExhausted")]
    SeparationCutterMemoryExhausted,
    #[serde(rename = "separationCutterMissing")]
    SeparationCutterMissing,
    #[serde(rename = "separationCutterMotorFailure")]
    SeparationCutterMotorFailure,
    #[serde(rename = "separationCutterNearLimit")]
    SeparationCutterNearLimit,
    #[serde(rename = "separationCutterOffline")]
    SeparationCutterOffline,
    #[serde(rename = "separationCutterOpened")]
    SeparationCutterOpened,
    #[serde(rename = "separationCutterOverTemperature")]
    SeparationCutterOverTemperature,
    #[serde(rename = "separationCutterPowerSaver")]
    SeparationCutterPowerSaver,
    #[serde(rename = "separationCutterRecoverableFailure")]
    SeparationCutterRecoverableFailure,
    #[serde(rename = "separationCutterRecoverableStorage")]
    SeparationCutterRecoverableStorage,
    #[serde(rename = "separationCutterRemoved")]
    SeparationCutterRemoved,
    #[serde(rename = "separationCutterResourceAdded")]
    SeparationCutterResourceAdded,
    #[serde(rename = "separationCutterResourceRemoved")]
    SeparationCutterResourceRemoved,
    #[serde(rename = "separationCutterThermistorFailure")]
    SeparationCutterThermistorFailure,
    #[serde(rename = "separationCutterTimingFailure")]
    SeparationCutterTimingFailure,
    #[serde(rename = "separationCutterTurnedOff")]
    SeparationCutterTurnedOff,
    #[serde(rename = "separationCutterTurnedOn")]
    SeparationCutterTurnedOn,
    #[serde(rename = "separationCutterUnderTemperature")]
    SeparationCutterUnderTemperature,
    #[serde(rename = "separationCutterUnrecoverableFailure")]
    SeparationCutterUnrecoverableFailure,
    #[serde(rename = "separationCutterUnrecoverableStorageError")]
    SeparationCutterUnrecoverableStorageError,
    #[serde(rename = "separationCutterWarmingUp")]
    SeparationCutterWarmingUp,
    #[serde(rename = "sheetRotatorAdded")]
    SheetRotatorAdded,
    #[serde(rename = "sheetRotatorAlmostEmpty")]
    SheetRotatorAlmostEmpty,
    #[serde(rename = "sheetRotatorAlmostFull")]
    SheetRotatorAlmostFull,
    #[serde(rename = "sheetRotatorAtLimit")]
    SheetRotatorAtLimit,
    #[serde(rename = "sheetRotatorClosed")]
    SheetRotatorClosed,
    #[serde(rename = "sheetRotatorConfigurationChange")]
    SheetRotatorConfigurationChange,
    #[serde(rename = "sheetRotatorCoverClosed")]
    SheetRotatorCoverClosed,
    #[serde(rename = "sheetRotatorCoverOpen")]
    SheetRotatorCoverOpen,
    #[serde(rename = "sheetRotatorEmpty")]
    SheetRotatorEmpty,
    #[serde(rename = "sheetRotatorFull")]
    SheetRotatorFull,
    #[serde(rename = "sheetRotatorInterlockClosed")]
    SheetRotatorInterlockClosed,
    #[serde(rename = "sheetRotatorInterlockOpen")]
    SheetRotatorInterlockOpen,
    #[serde(rename = "sheetRotatorJam")]
    SheetRotatorJam,
    #[serde(rename = "sheetRotatorLifeAlmostOver")]
    SheetRotatorLifeAlmostOver,
    #[serde(rename = "sheetRotatorLifeOver")]
    SheetRotatorLifeOver,
    #[serde(rename = "sheetRotatorMemoryExhausted")]
    SheetRotatorMemoryExhausted,
    #[serde(rename = "sheetRotatorMissing")]
    SheetRotatorMissing,
    #[serde(rename = "sheetRotatorMotorFailure")]
    SheetRotatorMotorFailure,
    #[serde(rename = "sheetRotatorNearLimit")]
    SheetRotatorNearLimit,
    #[serde(rename = "sheetRotatorOffline")]
    SheetRotatorOffline,
    #[serde(rename = "sheetRotatorOpened")]
    SheetRotatorOpened,
    #[serde(rename = "sheetRotatorOverTemperature")]
    SheetRotatorOverTemperature,
    #[serde(rename = "sheetRotatorPowerSaver")]
    SheetRotatorPowerSaver,
    #[serde(rename = "sheetRotatorRecoverableFailure")]
    SheetRotatorRecoverableFailure,
    #[serde(rename = "sheetRotatorRecoverableStorage")]
    SheetRotatorRecoverableStorage,
    #[serde(rename = "sheetRotatorRemoved")]
    SheetRotatorRemoved,
    #[serde(rename = "sheetRotatorResourceAdded")]
    SheetRotatorResourceAdded,
    #[serde(rename = "sheetRotatorResourceRemoved")]
    SheetRotatorResourceRemoved,
    #[serde(rename = "sheetRotatorThermistorFailure")]
    SheetRotatorThermistorFailure,
    #[serde(rename = "sheetRotatorTimingFailure")]
    SheetRotatorTimingFailure,
    #[serde(rename = "sheetRotatorTurnedOff")]
    SheetRotatorTurnedOff,
    #[serde(rename = "sheetRotatorTurnedOn")]
    SheetRotatorTurnedOn,
    #[serde(rename = "sheetRotatorUnderTemperature")]
    SheetRotatorUnderTemperature,
    #[serde(rename = "sheetRotatorUnrecoverableFailure")]
    SheetRotatorUnrecoverableFailure,
    #[serde(rename = "sheetRotatorUnrecoverableStorageError")]
    SheetRotatorUnrecoverableStorageError,
    #[serde(rename = "sheetRotatorWarmingUp")]
    SheetRotatorWarmingUp,
    #[serde(rename = "slitterAdded")]
    SlitterAdded,
    #[serde(rename = "slitterAlmostEmpty")]
    SlitterAlmostEmpty,
    #[serde(rename = "slitterAlmostFull")]
    SlitterAlmostFull,
    #[serde(rename = "slitterAtLimit")]
    SlitterAtLimit,
    #[serde(rename = "slitterClosed")]
    SlitterClosed,
    #[serde(rename = "slitterConfigurationChange")]
    SlitterConfigurationChange,
    #[serde(rename = "slitterCoverClosed")]
    SlitterCoverClosed,
    #[serde(rename = "slitterCoverOpen")]
    SlitterCoverOpen,
    #[serde(rename = "slitterEmpty")]
    SlitterEmpty,
    #[serde(rename = "slitterFull")]
    SlitterFull,
    #[serde(rename = "slitterInterlockClosed")]
    SlitterInterlockClosed,
    #[serde(rename = "slitterInterlockOpen")]
    SlitterInterlockOpen,
    #[serde(rename = "slitterJam")]
    SlitterJam,
    #[serde(rename = "slitterLifeAlmostOver")]
    SlitterLifeAlmostOver,
    #[serde(rename = "slitterLifeOver")]
    SlitterLifeOver,
    #[serde(rename = "slitterMemoryExhausted")]
    SlitterMemoryExhausted,
    #[serde(rename = "slitterMissing")]
    SlitterMissing,
    #[serde(rename = "slitterMotorFailure")]
    SlitterMotorFailure,
    #[serde(rename = "slitterNearLimit")]
    SlitterNearLimit,
    #[serde(rename = "slitterOffline")]
    SlitterOffline,
    #[serde(rename = "slitterOpened")]
    SlitterOpened,
    #[serde(rename = "slitterOverTemperature")]
    SlitterOverTemperature,
    #[serde(rename = "slitterPowerSaver")]
    SlitterPowerSaver,
    #[serde(rename = "slitterRecoverableFailure")]
    SlitterRecoverableFailure,
    #[serde(rename = "slitterRecoverableStorage")]
    SlitterRecoverableStorage,
    #[serde(rename = "slitterRemoved")]
    SlitterRemoved,
    #[serde(rename = "slitterResourceAdded")]
    SlitterResourceAdded,
    #[serde(rename = "slitterResourceRemoved")]
    SlitterResourceRemoved,
    #[serde(rename = "slitterThermistorFailure")]
    SlitterThermistorFailure,
    #[serde(rename = "slitterTimingFailure")]
    SlitterTimingFailure,
    #[serde(rename = "slitterTurnedOff")]
    SlitterTurnedOff,
    #[serde(rename = "slitterTurnedOn")]
    SlitterTurnedOn,
    #[serde(rename = "slitterUnderTemperature")]
    SlitterUnderTemperature,
    #[serde(rename = "slitterUnrecoverableFailure")]
    SlitterUnrecoverableFailure,
    #[serde(rename = "slitterUnrecoverableStorageError")]
    SlitterUnrecoverableStorageError,
    #[serde(rename = "slitterWarmingUp")]
    SlitterWarmingUp,
    #[serde(rename = "stackerAdded")]
    StackerAdded,
    #[serde(rename = "stackerAlmostEmpty")]
    StackerAlmostEmpty,
    #[serde(rename = "stackerAlmostFull")]
    StackerAlmostFull,
    #[serde(rename = "stackerAtLimit")]
    StackerAtLimit,
    #[serde(rename = "stackerClosed")]
    StackerClosed,
    #[serde(rename = "stackerConfigurationChange")]
    StackerConfigurationChange,
    #[serde(rename = "stackerCoverClosed")]
    StackerCoverClosed,
    #[serde(rename = "stackerCoverOpen")]
    StackerCoverOpen,
    #[serde(rename = "stackerEmpty")]
    StackerEmpty,
    #[serde(rename = "stackerFull")]
    StackerFull,
    #[serde(rename = "stackerInterlockClosed")]
    StackerInterlockClosed,
    #[serde(rename = "stackerInterlockOpen")]
    StackerInterlockOpen,
    #[serde(rename = "stackerJam")]
    StackerJam,
    #[serde(rename = "stackerLifeAlmostOver")]
    StackerLifeAlmostOver,
    #[serde(rename = "stackerLifeOver")]
    StackerLifeOver,
    #[serde(rename = "stackerMemoryExhausted")]
    StackerMemoryExhausted,
    #[serde(rename = "stackerMissing")]
    StackerMissing,
    #[serde(rename = "stackerMotorFailure")]
    StackerMotorFailure,
    #[serde(rename = "stackerNearLimit")]
    StackerNearLimit,
    #[serde(rename = "stackerOffline")]
    StackerOffline,
    #[serde(rename = "stackerOpened")]
    StackerOpened,
    #[serde(rename = "stackerOverTemperature")]
    StackerOverTemperature,
    #[serde(rename = "stackerPowerSaver")]
    StackerPowerSaver,
    #[serde(rename = "stackerRecoverableFailure")]
    StackerRecoverableFailure,
    #[serde(rename = "stackerRecoverableStorage")]
    StackerRecoverableStorage,
    #[serde(rename = "stackerRemoved")]
    StackerRemoved,
    #[serde(rename = "stackerResourceAdded")]
    StackerResourceAdded,
    #[serde(rename = "stackerResourceRemoved")]
    StackerResourceRemoved,
    #[serde(rename = "stackerThermistorFailure")]
    StackerThermistorFailure,
    #[serde(rename = "stackerTimingFailure")]
    StackerTimingFailure,
    #[serde(rename = "stackerTurnedOff")]
    StackerTurnedOff,
    #[serde(rename = "stackerTurnedOn")]
    StackerTurnedOn,
    #[serde(rename = "stackerUnderTemperature")]
    StackerUnderTemperature,
    #[serde(rename = "stackerUnrecoverableFailure")]
    StackerUnrecoverableFailure,
    #[serde(rename = "stackerUnrecoverableStorageError")]
    StackerUnrecoverableStorageError,
    #[serde(rename = "stackerWarmingUp")]
    StackerWarmingUp,
    #[serde(rename = "standby")]
    Standby,
    #[serde(rename = "staplerAdded")]
    StaplerAdded,
    #[serde(rename = "staplerAlmostEmpty")]
    StaplerAlmostEmpty,
    #[serde(rename = "staplerAlmostFull")]
    StaplerAlmostFull,
    #[serde(rename = "staplerAtLimit")]
    StaplerAtLimit,
    #[serde(rename = "staplerClosed")]
    StaplerClosed,
    #[serde(rename = "staplerConfigurationChange")]
    StaplerConfigurationChange,
    #[serde(rename = "staplerCoverClosed")]
    StaplerCoverClosed,
    #[serde(rename = "staplerCoverOpen")]
    StaplerCoverOpen,
    #[serde(rename = "staplerEmpty")]
    StaplerEmpty,
    #[serde(rename = "staplerFull")]
    StaplerFull,
    #[serde(rename = "staplerInterlockClosed")]
    StaplerInterlockClosed,
    #[serde(rename = "staplerInterlockOpen")]
    StaplerInterlockOpen,
    #[serde(rename = "staplerJam")]
    StaplerJam,
    #[serde(rename = "staplerLifeAlmostOver")]
    StaplerLifeAlmostOver,
    #[serde(rename = "staplerLifeOver")]
    StaplerLifeOver,
    #[serde(rename = "staplerMemoryExhausted")]
    StaplerMemoryExhausted,
    #[serde(rename = "staplerMissing")]
    StaplerMissing,
    #[serde(rename = "staplerMotorFailure")]
    StaplerMotorFailure,
    #[serde(rename = "staplerNearLimit")]
    StaplerNearLimit,
    #[serde(rename = "staplerOffline")]
    StaplerOffline,
    #[serde(rename = "staplerOpened")]
    StaplerOpened,
    #[serde(rename = "staplerOverTemperature")]
    StaplerOverTemperature,
    #[serde(rename = "staplerPowerSaver")]
    StaplerPowerSaver,
    #[serde(rename = "staplerRecoverableFailure")]
    StaplerRecoverableFailure,
    #[serde(rename = "staplerRecoverableStorage")]
    StaplerRecoverableStorage,
    #[serde(rename = "staplerRemoved")]
    StaplerRemoved,
    #[serde(rename = "staplerResourceAdded")]
    StaplerResourceAdded,
    #[serde(rename = "staplerResourceRemoved")]
    StaplerResourceRemoved,
    #[serde(rename = "staplerThermistorFailure")]
    StaplerThermistorFailure,
    #[serde(rename = "staplerTimingFailure")]
    StaplerTimingFailure,
    #[serde(rename = "staplerTurnedOff")]
    StaplerTurnedOff,
    #[serde(rename = "staplerTurnedOn")]
    StaplerTurnedOn,
    #[serde(rename = "staplerUnderTemperature")]
    StaplerUnderTemperature,
    #[serde(rename = "staplerUnrecoverableFailure")]
    StaplerUnrecoverableFailure,
    #[serde(rename = "staplerUnrecoverableStorageError")]
    StaplerUnrecoverableStorageError,
    #[serde(rename = "staplerWarmingUp")]
    StaplerWarmingUp,
    #[serde(rename = "stitcherAdded")]
    StitcherAdded,
    #[serde(rename = "stitcherAlmostEmpty")]
    StitcherAlmostEmpty,
    #[serde(rename = "stitcherAlmostFull")]
    StitcherAlmostFull,
    #[serde(rename = "stitcherAtLimit")]
    StitcherAtLimit,
    #[serde(rename = "stitcherClosed")]
    StitcherClosed,
    #[serde(rename = "stitcherConfigurationChange")]
    StitcherConfigurationChange,
    #[serde(rename = "stitcherCoverClosed")]
    StitcherCoverClosed,
    #[serde(rename = "stitcherCoverOpen")]
    StitcherCoverOpen,
    #[serde(rename = "stitcherEmpty")]
    StitcherEmpty,
    #[serde(rename = "stitcherFull")]
    StitcherFull,
    #[serde(rename = "stitcherInterlockClosed")]
    StitcherInterlockClosed,
    #[serde(rename = "stitcherInterlockOpen")]
    StitcherInterlockOpen,
    #[serde(rename = "stitcherJam")]
    StitcherJam,
    #[serde(rename = "stitcherLifeAlmostOver")]
    StitcherLifeAlmostOver,
    #[serde(rename = "stitcherLifeOver")]
    StitcherLifeOver,
    #[serde(rename = "stitcherMemoryExhausted")]
    StitcherMemoryExhausted,
    #[serde(rename = "stitcherMissing")]
    StitcherMissing,
    #[serde(rename = "stitcherMotorFailure")]
    StitcherMotorFailure,
    #[serde(rename = "stitcherNearLimit")]
    StitcherNearLimit,
    #[serde(rename = "stitcherOffline")]
    StitcherOffline,
    #[serde(rename = "stitcherOpened")]
    StitcherOpened,
    #[serde(rename = "stitcherOverTemperature")]
    StitcherOverTemperature,
    #[serde(rename = "stitcherPowerSaver")]
    StitcherPowerSaver,
    #[serde(rename = "stitcherRecoverableFailure")]
    StitcherRecoverableFailure,
    #[serde(rename = "stitcherRecoverableStorage")]
    StitcherRecoverableStorage,
    #[serde(rename = "stitcherRemoved")]
    StitcherRemoved,
    #[serde(rename = "stitcherResourceAdded")]
    StitcherResourceAdded,
    #[serde(rename = "stitcherResourceRemoved")]
    StitcherResourceRemoved,
    #[serde(rename = "stitcherThermistorFailure")]
    StitcherThermistorFailure,
    #[serde(rename = "stitcherTimingFailure")]
    StitcherTimingFailure,
    #[serde(rename = "stitcherTurnedOff")]
    StitcherTurnedOff,
    #[serde(rename = "stitcherTurnedOn")]
    StitcherTurnedOn,
    #[serde(rename = "stitcherUnderTemperature")]
    StitcherUnderTemperature,
    #[serde(rename = "stitcherUnrecoverableFailure")]
    StitcherUnrecoverableFailure,
    #[serde(rename = "stitcherUnrecoverableStorageError")]
    StitcherUnrecoverableStorageError,
    #[serde(rename = "stitcherWarmingUp")]
    StitcherWarmingUp,
    #[serde(rename = "subunitAdded")]
    SubunitAdded,
    #[serde(rename = "subunitAlmostEmpty")]
    SubunitAlmostEmpty,
    #[serde(rename = "subunitAlmostFull")]
    SubunitAlmostFull,
    #[serde(rename = "subunitAtLimit")]
    SubunitAtLimit,
    #[serde(rename = "subunitClosed")]
    SubunitClosed,
    #[serde(rename = "subunitCoolingDown")]
    SubunitCoolingDown,
    #[serde(rename = "subunitEmpty")]
    SubunitEmpty,
    #[serde(rename = "subunitFull")]
    SubunitFull,
    #[serde(rename = "subunitLifeAlmostOver")]
    SubunitLifeAlmostOver,
    #[serde(rename = "subunitLifeOver")]
    SubunitLifeOver,
    #[serde(rename = "subunitMemoryExhausted")]
    SubunitMemoryExhausted,
    #[serde(rename = "subunitMissing")]
    SubunitMissing,
    #[serde(rename = "subunitMotorFailure")]
    SubunitMotorFailure,
    #[serde(rename = "subunitNearLimit")]
    SubunitNearLimit,
    #[serde(rename = "subunitOffline")]
    SubunitOffline,
    #[serde(rename = "subunitOpened")]
    SubunitOpened,
    #[serde(rename = "subunitOverTemperature")]
    SubunitOverTemperature,
    #[serde(rename = "subunitPowerSaver")]
    SubunitPowerSaver,
    #[serde(rename = "subunitRecoverableFailure")]
    SubunitRecoverableFailure,
    #[serde(rename = "subunitRecoverableStorage")]
    SubunitRecoverableStorage,
    #[serde(rename = "subunitRemoved")]
    SubunitRemoved,
    #[serde(rename = "subunitResourceAdded")]
    SubunitResourceAdded,
    #[serde(rename = "subunitResourceRemoved")]
    SubunitResourceRemoved,
    #[serde(rename = "subunitThermistorFailure")]
    SubunitThermistorFailure,
    #[serde(rename = "subunitTimingFailure")]
    SubunitTimingFailure,
    #[serde(rename = "subunitTurnedOff")]
    SubunitTurnedOff,
    #[serde(rename = "subunitTurnedOn")]
    SubunitTurnedOn,
    #[serde(rename = "subunitUnderTemperature")]
    SubunitUnderTemperature,
    #[serde(rename = "subunitUnrecoverableFailure")]
    SubunitUnrecoverableFailure,
    #[serde(rename = "subunitUnrecoverableStorage")]
    SubunitUnrecoverableStorage,
    #[serde(rename = "subunitWarmingUp")]
    SubunitWarmingUp,
    #[serde(rename = "suspend")]
    Suspend,
    #[serde(rename = "testing")]
    Testing,
    #[serde(rename = "trimmerAdded")]
    TrimmerAdded,
    #[serde(rename = "trimmerAlmostEmpty")]
    TrimmerAlmostEmpty,
    #[serde(rename = "trimmerAlmostFull")]
    TrimmerAlmostFull,
    #[serde(rename = "trimmerAtLimit")]
    TrimmerAtLimit,
    #[serde(rename = "trimmerClosed")]
    TrimmerClosed,
    #[serde(rename = "trimmerConfigurationChange")]
    TrimmerConfigurationChange,
    #[serde(rename = "trimmerCoverClosed")]
    TrimmerCoverClosed,
    #[serde(rename = "trimmerCoverOpen")]
    TrimmerCoverOpen,
    #[serde(rename = "trimmerEmpty")]
    TrimmerEmpty,
    #[serde(rename = "trimmerFull")]
    TrimmerFull,
    #[serde(rename = "trimmerInterlockClosed")]
    TrimmerInterlockClosed,
    #[serde(rename = "trimmerInterlockOpen")]
    TrimmerInterlockOpen,
    #[serde(rename = "trimmerJam")]
    TrimmerJam,
    #[serde(rename = "trimmerLifeAlmostOver")]
    TrimmerLifeAlmostOver,
    #[serde(rename = "trimmerLifeOver")]
    TrimmerLifeOver,
    #[serde(rename = "trimmerMemoryExhausted")]
    TrimmerMemoryExhausted,
    #[serde(rename = "trimmerMissing")]
    TrimmerMissing,
    #[serde(rename = "trimmerMotorFailure")]
    TrimmerMotorFailure,
    #[serde(rename = "trimmerNearLimit")]
    TrimmerNearLimit,
    #[serde(rename = "trimmerOffline")]
    TrimmerOffline,
    #[serde(rename = "trimmerOpened")]
    TrimmerOpened,
    #[serde(rename = "trimmerOverTemperature")]
    TrimmerOverTemperature,
    #[serde(rename = "trimmerPowerSaver")]
    TrimmerPowerSaver,
    #[serde(rename = "trimmerRecoverableFailure")]
    TrimmerRecoverableFailure,
    #[serde(rename = "trimmerRecoverableStorage")]
    TrimmerRecoverableStorage,
    #[serde(rename = "trimmerRemoved")]
    TrimmerRemoved,
    #[serde(rename = "trimmerResourceAdded")]
    TrimmerResourceAdded,
    #[serde(rename = "trimmerResourceRemoved")]
    TrimmerResourceRemoved,
    #[serde(rename = "trimmerThermistorFailure")]
    TrimmerThermistorFailure,
    #[serde(rename = "trimmerTimingFailure")]
    TrimmerTimingFailure,
    #[serde(rename = "trimmerTurnedOff")]
    TrimmerTurnedOff,
    #[serde(rename = "trimmerTurnedOn")]
    TrimmerTurnedOn,
    #[serde(rename = "trimmerUnderTemperature")]
    TrimmerUnderTemperature,
    #[serde(rename = "trimmerUnrecoverableFailure")]
    TrimmerUnrecoverableFailure,
    #[serde(rename = "trimmerUnrecoverableStorageError")]
    TrimmerUnrecoverableStorageError,
    #[serde(rename = "trimmerWarmingUp")]
    TrimmerWarmingUp,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "wrapperAdded")]
    WrapperAdded,
    #[serde(rename = "wrapperAlmostEmpty")]
    WrapperAlmostEmpty,
    #[serde(rename = "wrapperAlmostFull")]
    WrapperAlmostFull,
    #[serde(rename = "wrapperAtLimit")]
    WrapperAtLimit,
    #[serde(rename = "wrapperClosed")]
    WrapperClosed,
    #[serde(rename = "wrapperConfigurationChange")]
    WrapperConfigurationChange,
    #[serde(rename = "wrapperCoverClosed")]
    WrapperCoverClosed,
    #[serde(rename = "wrapperCoverOpen")]
    WrapperCoverOpen,
    #[serde(rename = "wrapperEmpty")]
    WrapperEmpty,
    #[serde(rename = "wrapperFull")]
    WrapperFull,
    #[serde(rename = "wrapperInterlockClosed")]
    WrapperInterlockClosed,
    #[serde(rename = "wrapperInterlockOpen")]
    WrapperInterlockOpen,
    #[serde(rename = "wrapperJam")]
    WrapperJam,
    #[serde(rename = "wrapperLifeAlmostOver")]
    WrapperLifeAlmostOver,
    #[serde(rename = "wrapperLifeOver")]
    WrapperLifeOver,
    #[serde(rename = "wrapperMemoryExhausted")]
    WrapperMemoryExhausted,
    #[serde(rename = "wrapperMissing")]
    WrapperMissing,
    #[serde(rename = "wrapperMotorFailure")]
    WrapperMotorFailure,
    #[serde(rename = "wrapperNearLimit")]
    WrapperNearLimit,
    #[serde(rename = "wrapperOffline")]
    WrapperOffline,
    #[serde(rename = "wrapperOpened")]
    WrapperOpened,
    #[serde(rename = "wrapperOverTemperature")]
    WrapperOverTemperature,
    #[serde(rename = "wrapperPowerSaver")]
    WrapperPowerSaver,
    #[serde(rename = "wrapperRecoverableFailure")]
    WrapperRecoverableFailure,
    #[serde(rename = "wrapperRecoverableStorage")]
    WrapperRecoverableStorage,
    #[serde(rename = "wrapperRemoved")]
    WrapperRemoved,
    #[serde(rename = "wrapperResourceAdded")]
    WrapperResourceAdded,
    #[serde(rename = "wrapperResourceRemoved")]
    WrapperResourceRemoved,
    #[serde(rename = "wrapperThermistorFailure")]
    WrapperThermistorFailure,
    #[serde(rename = "wrapperTimingFailure")]
    WrapperTimingFailure,
    #[serde(rename = "wrapperTurnedOff")]
    WrapperTurnedOff,
    #[serde(rename = "wrapperTurnedOn")]
    WrapperTurnedOn,
    #[serde(rename = "wrapperUnderTemperature")]
    WrapperUnderTemperature,
    #[serde(rename = "wrapperUnrecoverableFailure")]
    WrapperUnrecoverableFailure,
    #[serde(rename = "wrapperUnrecoverableStorageError")]
    WrapperUnrecoverableStorageError,
    #[serde(rename = "wrapperWarmingUp")]
    WrapperWarmingUp,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrinterShare {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.printerShare".to_string())]
    pub odata_type: String,
    ///If true, all users and groups will be granted access to this printer share. This supersedes the allow lists defined by the allowedUsers and allowedGroups navigation properties.
    #[serde(rename = "allowAllUsers")]
    pub allow_all_users: Option<bool>,
    ///The groups whose users have access to print using the printer.
    #[serde(rename = "allowedGroups")]
    pub allowed_groups: Option<Vec<MicrosoftGraphGroup>>,
    ///The users who have access to print using the printer.
    #[serde(rename = "allowedUsers")]
    pub allowed_users: Option<Vec<MicrosoftGraphUser>>,
    ///The capabilities of the printer/printerShare.
    pub capabilities: Option<MicrosoftGraphPrinterCapabilities>,
    ///The DateTimeOffset when the printer share was created. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The default print settings of printer/printerShare.
    pub defaults: Option<MicrosoftGraphPrinterDefaults>,
    ///The name of the printer/printerShare.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the printer/printerShare is currently accepting new print jobs.
    #[serde(rename = "isAcceptingJobs")]
    pub is_accepting_jobs: Option<bool>,
    ///The list of jobs that are queued for printing by the printer/printerShare.
    pub jobs: Option<Vec<MicrosoftGraphPrintJob>>,
    ///The physical and/or organizational location of the printer/printerShare.
    pub location: Option<MicrosoftGraphPrinterLocation>,
    ///The manufacturer of the printer/printerShare.
    pub manufacturer: Option<String>,
    ///The model name of the printer/printerShare.
    pub model: Option<String>,
    ///The printer that this printer share is related to.
    pub printer: Option<Box<MicrosoftGraphPrinter>>,
    pub status: Option<MicrosoftGraphPrinterStatus>,
    ///Additional data for a printer share as viewed by the signed-in user.
    #[serde(rename = "viewPoint")]
    pub view_point: Option<MicrosoftGraphPrinterShareViewpoint>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrinterShareViewpoint {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Date and time when the printer was last used by the signed-in user. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUsedDateTime")]
    pub last_used_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrinterStatus {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A human-readable description of the printer's current processing state. Read-only.
    pub description: Option<String>,
    ///The list of details describing why the printer is in the current state. Valid values are described in the following table. Read-only.
    pub details: Option<Vec<MicrosoftGraphPrinterProcessingStateDetail>>,
    pub state: Option<MicrosoftGraphPrinterProcessingState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivacyProfile {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A valid smtp email address for the privacy statement contact. Not required.
    #[serde(rename = "contactEmail")]
    pub contact_email: Option<String>,
    ///A valid URL format that begins with http:// or https://. Maximum length is 255 characters. The URL that directs to the company's privacy statement. Not required.
    #[serde(rename = "statementUrl")]
    pub statement_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivilegedAccessGroup {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.privilegedAccessGroup".to_string())]
    pub odata_type: String,
    #[serde(rename = "assignmentApprovals")]
    pub assignment_approvals: Option<Vec<MicrosoftGraphApproval>>,
    ///The instances of assignment schedules to activate a just-in-time access.
    #[serde(rename = "assignmentScheduleInstances")]
    pub assignment_schedule_instances: Option<
        Vec<MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance>,
    >,
    ///The schedule requests for operations to create, update, delete, extend, and renew an assignment.
    #[serde(rename = "assignmentScheduleRequests")]
    pub assignment_schedule_requests: Option<
        Vec<MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest>,
    >,
    ///The assignment schedules to activate a just-in-time access.
    #[serde(rename = "assignmentSchedules")]
    pub assignment_schedules: Option<
        Vec<MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule>,
    >,
    ///The instances of eligibility schedules to activate a just-in-time access.
    #[serde(rename = "eligibilityScheduleInstances")]
    pub eligibility_schedule_instances: Option<
        Vec<MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance>,
    >,
    ///The schedule requests for operations to create, update, delete, extend, and renew an eligibility.
    #[serde(rename = "eligibilityScheduleRequests")]
    pub eligibility_schedule_requests: Option<
        Vec<MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest>,
    >,
    ///The eligibility schedules to activate a just-in-time access.
    #[serde(rename = "eligibilitySchedules")]
    pub eligibility_schedules: Option<
        Vec<MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.privilegedAccessGroupAssignmentSchedule".to_string())]
    pub odata_type: String,
    ///The identifier of the membership or ownership assignment to the group that is governed through PIM. Required. The possible values are: owner, member, unknownFutureValue. Supports $filter (eq).
    #[serde(rename = "accessId")]
    pub access_id: Option<MicrosoftGraphPrivilegedAccessGroupRelationships>,
    ///When the request activates an ownership or membership assignment in PIM for Groups, this object represents the eligibility relationship. Otherwise, it's null. Supports $expand.
    #[serde(rename = "activatedUsing")]
    pub activated_using: Option<MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule>,
    ///Indicates whether the membership or ownership assignment for the principal is granted through activation or direct assignment. Required. The possible values are: assigned, activated, unknownFutureValue. Supports $filter (eq).
    #[serde(rename = "assignmentType")]
    pub assignment_type: Option<MicrosoftGraphPrivilegedAccessGroupAssignmentType>,
    ///When the schedule was created. Optional.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The identifier of the access assignment or eligibility request that created this schedule. Optional.
    #[serde(rename = "createdUsing")]
    pub created_using: Option<String>,
    ///References the group that is the scope of the membership or ownership assignment through PIM for Groups. Supports $expand and $select nested in $expand for select properties like id, displayName, and mail.
    pub group: Option<Box<MicrosoftGraphGroup>>,
    ///The identifier of the group representing the scope of the membership or ownership assignment through PIM for Groups. Required. Supports $filter (eq).
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the assignment is derived from a direct group assignment or through a transitive assignment. The possible values are: direct, group, unknownFutureValue. Supports $filter (eq).
    #[serde(rename = "memberType")]
    pub member_type: Option<MicrosoftGraphPrivilegedAccessGroupMemberType>,
    ///When the schedule was last modified. Optional.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///References the principal that's in the scope of this membership or ownership assignment request to the group that's governed through PIM. Supports $expand and $select nested in $expand for id only.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///The identifier of the principal whose membership or ownership assignment is granted through PIM for Groups. Required. Supports $filter (eq).
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///Represents the period of the access assignment or eligibility. The scheduleInfo can represent a single occurrence or multiple recurring instances. Required.
    #[serde(rename = "scheduleInfo")]
    pub schedule_info: Option<MicrosoftGraphRequestSchedule>,
    ///The status of the access assignment or eligibility request. The possible values are: Canceled, Denied, Failed, Granted, PendingAdminDecision, PendingApproval, PendingProvisioning, PendingScheduleCreation, Provisioned, Revoked, and ScheduleCreated. Not nullable. Optional.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.privilegedAccessGroupAssignmentScheduleInstance".to_string()
    )]
    pub odata_type: String,
    ///The identifier of the membership or ownership assignment relationship to the group. Required. The possible values are: owner, member,  unknownFutureValue. Supports $filter (eq).
    #[serde(rename = "accessId")]
    pub access_id: Option<MicrosoftGraphPrivilegedAccessGroupRelationships>,
    ///When the request activates a membership or ownership in PIM for Groups, this object represents the eligibility request for the group. Otherwise, it is null.
    #[serde(rename = "activatedUsing")]
    pub activated_using: Option<
        MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance,
    >,
    ///The identifier of the privilegedAccessGroupAssignmentSchedule from which this instance was created. Required. Supports $filter (eq, ne).
    #[serde(rename = "assignmentScheduleId")]
    pub assignment_schedule_id: Option<String>,
    ///Indicates whether the membership or ownership assignment is granted through activation of an eligibility or through direct assignment. Required. The possible values are: assigned, activated, unknownFutureValue. Supports $filter (eq).
    #[serde(rename = "assignmentType")]
    pub assignment_type: Option<MicrosoftGraphPrivilegedAccessGroupAssignmentType>,
    ///When the schedule instance ends. Required.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///References the group that is the scope of the membership or ownership assignment through PIM for Groups. Supports $expand.
    pub group: Option<Box<MicrosoftGraphGroup>>,
    ///The identifier of the group representing the scope of the membership or ownership assignment through PIM for Groups. Optional. Supports $filter (eq).
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the assignment is derived from a group assignment. It can further imply whether the caller can manage the assignment schedule. Required. The possible values are: direct, group, unknownFutureValue. Supports $filter (eq).
    #[serde(rename = "memberType")]
    pub member_type: Option<MicrosoftGraphPrivilegedAccessGroupMemberType>,
    ///References the principal that's in the scope of the membership or ownership assignment request through the group that's governed by PIM. Supports $expand.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///The identifier of the principal whose membership or ownership assignment to the group is managed through PIM for Groups. Required. Supports $filter (eq).
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///When this instance starts. Required.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.privilegedAccessGroupAssignmentScheduleRequest".to_string()
    )]
    pub odata_type: String,
    ///The identifier of a membership or ownership assignment relationship to the group. Required. The possible values are: owner, member, unknownFutureValue.
    #[serde(rename = "accessId")]
    pub access_id: Option<MicrosoftGraphPrivilegedAccessGroupRelationships>,
    ///Represents the type of operation on the group membership or ownership assignment request. The possible values are: adminAssign, adminUpdate, adminRemove, selfActivate, selfDeactivate, adminExtend, adminRenew. adminAssign: For administrators to assign group membership or ownership to principals.adminRemove: For administrators to remove principals from group membership or ownership. adminUpdate: For administrators to change existing group membership or ownership assignments.adminExtend: For administrators to extend expiring assignments.adminRenew: For administrators to renew expired assignments.selfActivate: For principals to activate their assignments.selfDeactivate: For principals to deactivate their active assignments.
    pub action: Option<MicrosoftGraphScheduleRequestActions>,
    ///When the request activates a membership or ownership assignment in PIM for Groups, this object represents the eligibility policy for the group. Otherwise, it is null. Supports $expand.
    #[serde(rename = "activatedUsing")]
    pub activated_using: Option<MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule>,
    ///The identifier of the approval of the request.
    #[serde(rename = "approvalId")]
    pub approval_id: Option<String>,
    ///The request completion date time.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The principal that created the request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The request creation date time.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Free text field to define any custom data for the request. Not used.
    #[serde(rename = "customData")]
    pub custom_data: Option<String>,
    ///References the group that is the scope of the membership or ownership assignment request through PIM for Groups. Supports $expand and $select nested in $expand for select properties like id, displayName, and mail.
    pub group: Option<Box<MicrosoftGraphGroup>>,
    ///The identifier of the group representing the scope of the membership or ownership assignment through PIM for Groups. Required.
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines whether the call is a validation or an actual call. Only set this property if you want to check whether an activation is subject to additional rules like MFA before actually submitting the request.
    #[serde(rename = "isValidationOnly")]
    pub is_validation_only: Option<bool>,
    ///A message provided by users and administrators when create they create the privilegedAccessGroupAssignmentScheduleRequest object.
    pub justification: Option<String>,
    ///References the principal that's in the scope of this membership or ownership assignment request through the group that's governed by PIM. Supports $expand and $select nested in $expand for id only.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///The identifier of the principal whose membership or ownership assignment to the group is managed through PIM for Groups. Supports $filter (eq, ne).
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///The period of the group membership or ownership assignment. Recurring schedules are currently unsupported.
    #[serde(rename = "scheduleInfo")]
    pub schedule_info: Option<MicrosoftGraphRequestSchedule>,
    ///The status of the request. Not nullable. The possible values are: Canceled, Denied, Failed, Granted, PendingAdminDecision, PendingApproval, PendingProvisioning, PendingScheduleCreation, Provisioned, Revoked, and ScheduleCreated. Not nullable.
    pub status: Option<String>,
    ///Schedule created by this request. Supports $expand.
    #[serde(rename = "targetSchedule")]
    pub target_schedule: Option<MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule>,
    ///The identifier of the schedule that's created from the membership or ownership assignment request. Supports $filter (eq, ne).
    #[serde(rename = "targetScheduleId")]
    pub target_schedule_id: Option<String>,
    ///Ticket details linked to the group membership or ownership assignment request including details of the ticket number and ticket system.
    #[serde(rename = "ticketInfo")]
    pub ticket_info: Option<MicrosoftGraphTicketInfo>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrivilegedAccessGroupAssignmentType {
    #[serde(rename = "assigned")]
    #[default]
    Assigned,
    #[serde(rename = "activated")]
    Activated,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.privilegedAccessGroupEligibilitySchedule".to_string())]
    pub odata_type: String,
    ///The identifier of the membership or ownership eligibility to the group that is governed by PIM. Required. The possible values are: owner, member. Supports $filter (eq).
    #[serde(rename = "accessId")]
    pub access_id: Option<MicrosoftGraphPrivilegedAccessGroupRelationships>,
    ///When the schedule was created. Optional.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The identifier of the access assignment or eligibility request that created this schedule. Optional.
    #[serde(rename = "createdUsing")]
    pub created_using: Option<String>,
    ///References the group that is the scope of the membership or ownership eligibility through PIM for Groups. Supports $expand.
    pub group: Option<Box<MicrosoftGraphGroup>>,
    ///The identifier of the group representing the scope of the membership or ownership eligibility through PIM for Groups. Required. Supports $filter (eq).
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the assignment is derived from a group assignment. It can further imply whether the caller can manage the schedule. Required. The possible values are: direct, group, unknownFutureValue. Supports $filter (eq).
    #[serde(rename = "memberType")]
    pub member_type: Option<MicrosoftGraphPrivilegedAccessGroupMemberType>,
    ///When the schedule was last modified. Optional.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///References the principal that's in the scope of this membership or ownership eligibility request to the group that's governed by PIM. Supports $expand.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///The identifier of the principal whose membership or ownership eligibility is granted through PIM for Groups. Required. Supports $filter (eq).
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///Represents the period of the access assignment or eligibility. The scheduleInfo can represent a single occurrence or multiple recurring instances. Required.
    #[serde(rename = "scheduleInfo")]
    pub schedule_info: Option<MicrosoftGraphRequestSchedule>,
    ///The status of the access assignment or eligibility request. The possible values are: Canceled, Denied, Failed, Granted, PendingAdminDecision, PendingApproval, PendingProvisioning, PendingScheduleCreation, Provisioned, Revoked, and ScheduleCreated. Not nullable. Optional.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.privilegedAccessGroupEligibilityScheduleInstance".to_string()
    )]
    pub odata_type: String,
    ///The identifier of the membership or ownership eligibility relationship to the group. Required. The possible values are: owner, member. Supports $filter (eq).
    #[serde(rename = "accessId")]
    pub access_id: Option<MicrosoftGraphPrivilegedAccessGroupRelationships>,
    ///The identifier of the privilegedAccessGroupEligibilitySchedule from which this instance was created. Required. Supports $filter (eq, ne).
    #[serde(rename = "eligibilityScheduleId")]
    pub eligibility_schedule_id: Option<String>,
    ///When the schedule instance ends. Required.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///References the group that is the scope of the membership or ownership eligibility through PIM for Groups. Supports $expand.
    pub group: Option<Box<MicrosoftGraphGroup>>,
    ///The identifier of the group representing the scope of the membership or ownership eligibility through PIM for Groups. Required. Supports $filter (eq).
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the assignment is derived from a group assignment. It can further imply whether the calling principal can manage the assignment schedule. Required. The possible values are: direct, group, unknownFutureValue. Supports $filter (eq).
    #[serde(rename = "memberType")]
    pub member_type: Option<MicrosoftGraphPrivilegedAccessGroupMemberType>,
    ///References the principal that's in the scope of the membership or ownership eligibility request through the group that's governed by PIM. Supports $expand.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///The identifier of the principal whose membership or ownership eligibility to the group is managed through PIM for Groups. Required. Supports $filter (eq).
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///When this instance starts. Required.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.privilegedAccessGroupEligibilityScheduleRequest".to_string()
    )]
    pub odata_type: String,
    ///The identifier of membership or ownership eligibility relationship to the group. Required. The possible values are: owner, member, unknownFutureValue.
    #[serde(rename = "accessId")]
    pub access_id: Option<MicrosoftGraphPrivilegedAccessGroupRelationships>,
    ///Represents the type of operation on the group membership or ownership assignment request. The possible values are: adminAssign, adminUpdate, adminRemove, selfActivate, selfDeactivate, adminExtend, adminRenew. adminAssign: For administrators to assign group membership or ownership to principals.adminRemove: For administrators to remove principals from group membership or ownership. adminUpdate: For administrators to change existing group membership or ownership assignments.adminExtend: For administrators to extend expiring assignments.adminRenew: For administrators to renew expired assignments.selfActivate: For principals to activate their assignments.selfDeactivate: For principals to deactivate their active assignments.
    pub action: Option<MicrosoftGraphScheduleRequestActions>,
    ///The identifier of the approval of the request.
    #[serde(rename = "approvalId")]
    pub approval_id: Option<String>,
    ///The request completion date time.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The principal that created the request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The request creation date time.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Free text field to define any custom data for the request. Not used.
    #[serde(rename = "customData")]
    pub custom_data: Option<String>,
    ///References the group that is the scope of the membership or ownership eligibility request through PIM for Groups. Supports $expand and $select nested in $expand for select properties like id, displayName, and mail.
    pub group: Option<Box<MicrosoftGraphGroup>>,
    ///The identifier of the group representing the scope of the membership and ownership eligibility through PIM for Groups. Required.
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines whether the call is a validation or an actual call. Only set this property if you want to check whether an activation is subject to additional rules like MFA before actually submitting the request.
    #[serde(rename = "isValidationOnly")]
    pub is_validation_only: Option<bool>,
    ///A message provided by users and administrators when create they create the privilegedAccessGroupAssignmentScheduleRequest object.
    pub justification: Option<String>,
    ///References the principal that's in the scope of the membership or ownership eligibility request through the group that's governed by PIM. Supports $expand and $select nested in $expand for id only.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///The identifier of the principal whose membership or ownership eligibility to the group is managed through PIM for Groups. Required.
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///The period of the group membership or ownership assignment. Recurring schedules are currently unsupported.
    #[serde(rename = "scheduleInfo")]
    pub schedule_info: Option<MicrosoftGraphRequestSchedule>,
    ///The status of the request. Not nullable. The possible values are: Canceled, Denied, Failed, Granted, PendingAdminDecision, PendingApproval, PendingProvisioning, PendingScheduleCreation, Provisioned, Revoked, and ScheduleCreated. Not nullable.
    pub status: Option<String>,
    ///Schedule created by this request.
    #[serde(rename = "targetSchedule")]
    pub target_schedule: Option<MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule>,
    ///The identifier of the schedule that's created from the eligibility request. Optional.
    #[serde(rename = "targetScheduleId")]
    pub target_schedule_id: Option<String>,
    ///Ticket details linked to the group membership or ownership assignment request including details of the ticket number and ticket system.
    #[serde(rename = "ticketInfo")]
    pub ticket_info: Option<MicrosoftGraphTicketInfo>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrivilegedAccessGroupMemberType {
    #[serde(rename = "direct")]
    #[default]
    Direct,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPrivilegedAccessGroupRelationships {
    #[serde(rename = "owner")]
    #[default]
    Owner,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivilegedAccessRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.privilegedAccessRoot".to_string())]
    pub odata_type: String,
    ///A group that's governed through Privileged Identity Management (PIM).
    pub group: Option<MicrosoftGraphPrivilegedAccessGroup>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivilegedAccessSchedule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.privilegedAccessSchedule".to_string())]
    pub odata_type: String,
    ///When the schedule was created. Optional.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The identifier of the access assignment or eligibility request that created this schedule. Optional.
    #[serde(rename = "createdUsing")]
    pub created_using: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When the schedule was last modified. Optional.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Represents the period of the access assignment or eligibility. The scheduleInfo can represent a single occurrence or multiple recurring instances. Required.
    #[serde(rename = "scheduleInfo")]
    pub schedule_info: Option<MicrosoftGraphRequestSchedule>,
    ///The status of the access assignment or eligibility request. The possible values are: Canceled, Denied, Failed, Granted, PendingAdminDecision, PendingApproval, PendingProvisioning, PendingScheduleCreation, Provisioned, Revoked, and ScheduleCreated. Not nullable. Optional.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivilegedAccessScheduleInstance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.privilegedAccessScheduleInstance".to_string())]
    pub odata_type: String,
    ///When the schedule instance ends. Required.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When this instance starts. Required.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPrivilegedAccessScheduleRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.privilegedAccessScheduleRequest".to_string())]
    pub odata_type: String,
    ///Represents the type of operation on the group membership or ownership assignment request. The possible values are: adminAssign, adminUpdate, adminRemove, selfActivate, selfDeactivate, adminExtend, adminRenew. adminAssign: For administrators to assign group membership or ownership to principals.adminRemove: For administrators to remove principals from group membership or ownership. adminUpdate: For administrators to change existing group membership or ownership assignments.adminExtend: For administrators to extend expiring assignments.adminRenew: For administrators to renew expired assignments.selfActivate: For principals to activate their assignments.selfDeactivate: For principals to deactivate their active assignments.
    pub action: Option<MicrosoftGraphScheduleRequestActions>,
    ///The identifier of the approval of the request.
    #[serde(rename = "approvalId")]
    pub approval_id: Option<String>,
    ///The request completion date time.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The principal that created the request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The request creation date time.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Free text field to define any custom data for the request. Not used.
    #[serde(rename = "customData")]
    pub custom_data: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines whether the call is a validation or an actual call. Only set this property if you want to check whether an activation is subject to additional rules like MFA before actually submitting the request.
    #[serde(rename = "isValidationOnly")]
    pub is_validation_only: Option<bool>,
    ///A message provided by users and administrators when create they create the privilegedAccessGroupAssignmentScheduleRequest object.
    pub justification: Option<String>,
    ///The period of the group membership or ownership assignment. Recurring schedules are currently unsupported.
    #[serde(rename = "scheduleInfo")]
    pub schedule_info: Option<MicrosoftGraphRequestSchedule>,
    ///The status of the request. Not nullable. The possible values are: Canceled, Denied, Failed, Granted, PendingAdminDecision, PendingApproval, PendingProvisioning, PendingScheduleCreation, Provisioned, Revoked, and ScheduleCreated. Not nullable.
    pub status: Option<String>,
    ///Ticket details linked to the group membership or ownership assignment request including details of the ticket number and ticket system.
    #[serde(rename = "ticketInfo")]
    pub ticket_info: Option<MicrosoftGraphTicketInfo>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProcess {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///User account identifier (user account context the process ran under) for example, AccountName, SID, and so on.
    #[serde(rename = "accountName")]
    pub account_name: Option<String>,
    ///The full process invocation commandline including all parameters.
    #[serde(rename = "commandLine")]
    pub command_line: Option<String>,
    ///Time at which the process was started. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Complex type containing file hashes (cryptographic and location-sensitive).
    #[serde(rename = "fileHash")]
    pub file_hash: Option<MicrosoftGraphFileHash>,
    ///The integrity level of the process. Possible values are: unknown, untrusted, low, medium, high, system.
    #[serde(rename = "integrityLevel")]
    pub integrity_level: Option<MicrosoftGraphProcessIntegrityLevel>,
    ///True if the process is elevated.
    #[serde(rename = "isElevated")]
    pub is_elevated: Option<bool>,
    ///The name of the process' Image file.
    pub name: Option<String>,
    ///DateTime at which the parent process was started. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "parentProcessCreatedDateTime")]
    pub parent_process_created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The Process ID (PID) of the parent process.
    #[serde(rename = "parentProcessId")]
    pub parent_process_id: Option<f64>,
    ///The name of the image file of the parent process.
    #[serde(rename = "parentProcessName")]
    pub parent_process_name: Option<String>,
    ///Full path, including filename.
    pub path: Option<String>,
    ///The Process ID (PID) of the process.
    #[serde(rename = "processId")]
    pub process_id: Option<f64>,
}
discriminated_enum! {
    pub enum MicrosoftGraphProcessContentMetadataBase { discriminator : "@odata.type",
    variants : [("#microsoft.graph.processConversationMetadata",
    MicrosoftGraphProcessConversationMetadata(Box <
    MicrosoftGraphProcessConversationMetadata >)),
    ("#microsoft.graph.processFileMetadata", MicrosoftGraphProcessFileMetadata(Box <
    MicrosoftGraphProcessFileMetadata >))], fallback : ProcessContentMetadataBase(Box <
    MicrosoftGraphProcessContentMetadataBaseBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProcessContentMetadataBaseBase {
    ///Represents the actual content, either as text (textContent) or binary data (binaryContent). Optional if metadata alone is sufficient for policy evaluation. Do not use for contentActivities.
    pub content: Option<MicrosoftGraphContentBase>,
    ///An identifier used to group multiple related content entries (for example, different parts of the same file upload, messages in a conversation).
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<String>,
    ///Required. Timestamp indicating when the original content was created (for example, file creation time, message sent time).
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Required. A unique identifier for this specific content entry within the context of the calling application or enforcement plane (for example, message ID, file path/URL).
    pub identifier: Option<String>,
    ///Required. Indicates if the provided content has been truncated from its original form (for example, due to size limits).
    #[serde(rename = "isTruncated")]
    pub is_truncated: Option<bool>,
    ///The length of the original content in bytes.
    pub length: Option<f64>,
    ///Required. Timestamp indicating when the original content was last modified. For ephemeral content like messages, this might be the same as createdDateTime.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Required. A descriptive name for the content (for example, file name, web page title, 'Chat Message').
    pub name: Option<String>,
    ///A sequence number indicating the order in which content was generated or should be processed, required when correlationId is used.
    #[serde(rename = "sequenceNumber")]
    pub sequence_number: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProcessContentRequest {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "activityMetadata")]
    pub activity_metadata: Option<MicrosoftGraphActivityMetadata>,
    ///A collection of content entries to be processed. Each entry contains the content itself and its metadata. Use conversation metadata for content like prompts and responses and file metadata for files. Required.
    #[serde(rename = "contentEntries")]
    pub content_entries: Option<Vec<MicrosoftGraphProcessContentMetadataBase>>,
    #[serde(rename = "deviceMetadata")]
    pub device_metadata: Option<MicrosoftGraphDeviceMetadata>,
    #[serde(rename = "integratedAppMetadata")]
    pub integrated_app_metadata: Option<MicrosoftGraphIntegratedApplicationMetadata>,
    ///Metadata about the protected application making the request. Required.
    #[serde(rename = "protectedAppMetadata")]
    pub protected_app_metadata: Option<MicrosoftGraphProtectedApplicationMetadata>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProcessConversationMetadata {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.processConversationMetadata".to_string())]
    pub odata_type: String,
    ///List of resources (for example, file URLs, web URLs) accessed during the generation of this message (relevant for bot interactions).
    #[serde(rename = "accessedResources")]
    pub accessed_resources: Option<Vec<Option<String>>>,
    ///Represents the actual content, either as text (textContent) or binary data (binaryContent). Optional if metadata alone is sufficient for policy evaluation. Do not use for contentActivities.
    pub content: Option<MicrosoftGraphContentBase>,
    ///An identifier used to group multiple related content entries (for example, different parts of the same file upload, messages in a conversation).
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<String>,
    ///Required. Timestamp indicating when the original content was created (for example, file creation time, message sent time).
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Required. A unique identifier for this specific content entry within the context of the calling application or enforcement plane (for example, message ID, file path/URL).
    pub identifier: Option<String>,
    ///Required. Indicates if the provided content has been truncated from its original form (for example, due to size limits).
    #[serde(rename = "isTruncated")]
    pub is_truncated: Option<bool>,
    ///The length of the original content in bytes.
    pub length: Option<f64>,
    ///Required. Timestamp indicating when the original content was last modified. For ephemeral content like messages, this might be the same as createdDateTime.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Required. A descriptive name for the content (for example, file name, web page title, 'Chat Message').
    pub name: Option<String>,
    ///Identifier of the parent message in a threaded conversation, if applicable.
    #[serde(rename = "parentMessageId")]
    pub parent_message_id: Option<String>,
    ///List of plugins used during the generation of this message (relevant for AI/bot interactions).
    pub plugins: Option<Vec<MicrosoftGraphAiInteractionPlugin>>,
    ///A sequence number indicating the order in which content was generated or should be processed, required when correlationId is used.
    #[serde(rename = "sequenceNumber")]
    pub sequence_number: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProcessFileMetadata {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.processFileMetadata".to_string())]
    pub odata_type: String,
    ///Represents the actual content, either as text (textContent) or binary data (binaryContent). Optional if metadata alone is sufficient for policy evaluation. Do not use for contentActivities.
    pub content: Option<MicrosoftGraphContentBase>,
    ///An identifier used to group multiple related content entries (for example, different parts of the same file upload, messages in a conversation).
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<String>,
    ///Required. Timestamp indicating when the original content was created (for example, file creation time, message sent time).
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A dictionary containing custom metadata associated with the file, potentially extracted by the calling application.
    #[serde(rename = "customProperties")]
    pub custom_properties: Option<MicrosoftGraphCustomMetadataDictionary>,
    ///Required. A unique identifier for this specific content entry within the context of the calling application or enforcement plane (for example, message ID, file path/URL).
    pub identifier: Option<String>,
    ///Required. Indicates if the provided content has been truncated from its original form (for example, due to size limits).
    #[serde(rename = "isTruncated")]
    pub is_truncated: Option<bool>,
    ///The length of the original content in bytes.
    pub length: Option<f64>,
    ///Required. Timestamp indicating when the original content was last modified. For ephemeral content like messages, this might be the same as createdDateTime.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Required. A descriptive name for the content (for example, file name, web page title, 'Chat Message').
    pub name: Option<String>,
    ///The unique identifier (for example, Entra User ID or UPN) of the owner of the file.
    #[serde(rename = "ownerId")]
    pub owner_id: Option<String>,
    ///A sequence number indicating the order in which content was generated or should be processed, required when correlationId is used.
    #[serde(rename = "sequenceNumber")]
    pub sequence_number: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphProcessIntegrityLevel {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "untrusted")]
    Untrusted,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "system")]
    System,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProfileCardAnnotation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If present, the value of this field is used by the profile card as the default property label in the experience (for example, 'Cost Center').
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Each resource in this collection represents the localized value of the attribute name for a given language, used as the default label for that locale. For example, a user with a nb-NO client gets 'Kostnadssenter' as the attribute label, rather than 'Cost Center.'
    pub localizations: Option<Vec<MicrosoftGraphDisplayNameLocalization>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProfileCardProperty {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.profileCardProperty".to_string())]
    pub odata_type: String,
    ///Allows an administrator to set a custom display label for the directory property and localize it for the users in their tenant.
    pub annotations: Option<Vec<MicrosoftGraphProfileCardAnnotation>>,
    ///Identifies a profileCardProperty resource in Get, Update, or Delete operations. Allows an administrator to surface hidden Microsoft Entra ID properties on the Microsoft 365 profile card within their tenant. When present, the Microsoft Entra ID field referenced in this property is visible to all users in your tenant on the contact pane of the profile card. Allowed values for this field are: UserPrincipalName, Fax, StreetAddress, PostalCode, StateOrProvince, Alias, CustomAttribute1,  CustomAttribute2, CustomAttribute3, CustomAttribute4, CustomAttribute5, CustomAttribute6, CustomAttribute7, CustomAttribute8, CustomAttribute9, CustomAttribute10, CustomAttribute11, CustomAttribute12, CustomAttribute13, CustomAttribute14, CustomAttribute15.
    #[serde(rename = "directoryPropertyName")]
    pub directory_property_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProfilePhoto {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.profilePhoto".to_string())]
    pub odata_type: String,
    ///The height of the photo. Read-only.
    pub height: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The width of the photo. Read-only.
    pub width: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphPromptLoginBehavior {
    #[serde(rename = "translateToFreshPasswordAuthentication")]
    #[default]
    TranslateToFreshPasswordAuthentication,
    #[serde(rename = "nativeSupport")]
    NativeSupport,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPronounsSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.pronounsSettings".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///true to enable pronouns in the organization; otherwise, false. The default value is false, and pronouns are disabled.
    #[serde(rename = "isEnabledInOrganization")]
    pub is_enabled_in_organization: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProtectedApplicationMetadata {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.protectedApplicationMetadata".to_string())]
    pub odata_type: String,
    ///The client (application) ID of the Microsoft Entra application. Required.
    #[serde(rename = "applicationLocation")]
    pub application_location: Option<MicrosoftGraphPolicyLocation>,
    ///The name of the integrated application.
    pub name: Option<String>,
    ///The version number of the integrated application.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProtectionPolicyBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.protectionPolicyBase".to_string())]
    pub odata_type: String,
    ///The identity of person who created the policy.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the policy.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the policy to be created.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the person who last modified the policy.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The timestamp of the last modification of the policy.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains the retention setting details for the policy.
    #[serde(rename = "retentionSettings")]
    pub retention_settings: Option<Vec<MicrosoftGraphRetentionSetting>>,
    ///The aggregated status of the protection units associated with the policy. The possible values are: inactive, activeWithErrors, updating, active, unknownFutureValue.
    pub status: Option<MicrosoftGraphProtectionPolicyStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphProtectionPolicyStatus {
    #[serde(rename = "inactive")]
    #[default]
    Inactive,
    #[serde(rename = "activeWithErrors")]
    ActiveWithErrors,
    #[serde(rename = "updating")]
    Updating,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProtectionRuleBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.protectionRuleBase".to_string())]
    pub odata_type: String,
    ///The identity of person who created the rule.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the rule.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains error details if an operation on a rule fails.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "isAutoApplyEnabled")]
    pub is_auto_apply_enabled: Option<bool>,
    ///The identity of the person who last modified the rule.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification made to the rule.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The status of the protection rule. The possible values are: draft, active, completed, completedWithErrors, unknownFutureValue. The draft member is currently unsupported.
    pub status: Option<MicrosoftGraphProtectionRuleStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphProtectionRuleStatus {
    #[serde(rename = "draft")]
    #[default]
    Draft,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "completedWithErrors")]
    CompletedWithErrors,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProtectionUnitBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.protectionUnitBase".to_string())]
    pub odata_type: String,
    ///The identity of the person who created the protection unit.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the protection unit. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains error details if an error occurred while creating a protection unit.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of person who last modified the protection unit.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification of this protection unit. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier of the protection policy based on which protection unit was created.
    #[serde(rename = "policyId")]
    pub policy_id: Option<String>,
    ///The status of the protection unit. The possible values are: protectRequested, protected, unprotectRequested, unprotected, removeRequested, unknownFutureValue, offboardRequested, offboarded, cancelOffboardRequested. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: offboardRequested, offboarded, cancelOffboardRequested.
    pub status: Option<MicrosoftGraphProtectionUnitStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphProtectionUnitStatus {
    #[serde(rename = "protectRequested")]
    #[default]
    ProtectRequested,
    #[serde(rename = "protected")]
    Protected,
    #[serde(rename = "unprotectRequested")]
    UnprotectRequested,
    #[serde(rename = "unprotected")]
    Unprotected,
    #[serde(rename = "removeRequested")]
    RemoveRequested,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProtectionUnitsBulkJobBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.protectionUnitsBulkJobBase".to_string())]
    pub odata_type: String,
    ///The identity of person who created the job.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the job.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the protection units bulk addition job.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Error details containing resource resolution failures, if any.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the person who last modified the job.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification made to the job.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub status: Option<MicrosoftGraphProtectionUnitsBulkJobStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphProtectionUnitsBulkJobStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "completedWithErrors")]
    CompletedWithErrors,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProvisionedIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.provisionedIdentity".to_string())]
    pub odata_type: String,
    ///Details of the identity.
    pub details: Option<MicrosoftGraphDetailsInfo>,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
    ///Type of identity that has been provisioned, such as 'user' or 'group'. Supports $filter (eq, contains).
    #[serde(rename = "identityType")]
    pub identity_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProvisionedPlan {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Condition of the capability assignment. The possible values are Enabled, Warning, Suspended, Deleted, LockedOut. See a detailed description of each value.
    #[serde(rename = "capabilityStatus")]
    pub capability_status: Option<String>,
    ///The possible values are:Success - Service is fully provisioned.Disabled - Service is disabled.Error - The service plan isn't provisioned and is in an error state.PendingInput - The service isn't provisioned and is awaiting service confirmation.PendingActivation - The service is provisioned but requires explicit activation by an administrator (for example, Intune_O365 service plan)PendingProvisioning - Microsoft has added a new service to the product SKU and it isn't activated in the tenant.
    #[serde(rename = "provisioningStatus")]
    pub provisioning_status: Option<String>,
    ///The name of the service; for example, 'AccessControlS2S'.
    pub service: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphProvisioningAction {
    #[serde(rename = "other")]
    #[default]
    Other,
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "disable")]
    Disable,
    #[serde(rename = "update")]
    Update,
    #[serde(rename = "stagedDelete")]
    StagedDelete,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProvisioningErrorInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Additional details if there's error.
    #[serde(rename = "additionalDetails")]
    pub additional_details: Option<String>,
    ///Categorizes the error code. Possible values are failure, nonServiceFailure, success, unknownFutureValue
    #[serde(rename = "errorCategory")]
    pub error_category: Option<MicrosoftGraphProvisioningStatusErrorCategory>,
    ///Unique error code if any occurred. Learn more
    #[serde(rename = "errorCode")]
    pub error_code: Option<String>,
    ///Summarizes the status and describes why the status happened.
    pub reason: Option<String>,
    ///Provides the resolution for the corresponding error.
    #[serde(rename = "recommendedAction")]
    pub recommended_action: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProvisioningObjectSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.provisioningObjectSummary".to_string())]
    pub odata_type: String,
    ///Represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.  SUpports $filter (eq, gt, lt) and orderby.
    #[serde(rename = "activityDateTime")]
    pub activity_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Unique ID of this change in this cycle. Supports $filter (eq, contains).
    #[serde(rename = "changeId")]
    pub change_id: Option<String>,
    ///Unique ID per job iteration. Supports $filter (eq, contains).
    #[serde(rename = "cycleId")]
    pub cycle_id: Option<String>,
    ///Indicates how long this provisioning action took to finish. Measured in milliseconds.
    #[serde(rename = "durationInMilliseconds")]
    pub duration_in_milliseconds: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Details of who initiated this provisioning. Supports $filter (eq, contains).
    #[serde(rename = "initiatedBy")]
    pub initiated_by: Option<MicrosoftGraphInitiator>,
    ///The unique ID for the whole provisioning job. Supports $filter (eq, contains).
    #[serde(rename = "jobId")]
    pub job_id: Option<String>,
    ///Details of each property that was modified in this provisioning action on this object.
    #[serde(rename = "modifiedProperties")]
    pub modified_properties: Option<Vec<MicrosoftGraphModifiedProperty>>,
    ///Indicates the activity name or the operation name. Possible values are: create, update, delete, stageddelete, disable, other and unknownFutureValue. For a list of activities logged, refer to Microsoft Entra activity list. Supports $filter (eq, contains).
    #[serde(rename = "provisioningAction")]
    pub provisioning_action: Option<MicrosoftGraphProvisioningAction>,
    ///Details of provisioning status.
    #[serde(rename = "provisioningStatusInfo")]
    pub provisioning_status_info: Option<MicrosoftGraphProvisioningStatusInfo>,
    ///Details of each step in provisioning.
    #[serde(rename = "provisioningSteps")]
    pub provisioning_steps: Option<Vec<MicrosoftGraphProvisioningStep>>,
    ///Represents the service principal used for provisioning. Supports $filter (eq) for id and name.
    #[serde(rename = "servicePrincipal")]
    pub service_principal: Option<MicrosoftGraphProvisioningServicePrincipal>,
    ///Details of source object being provisioned. Supports $filter (eq, contains) for identityType, id, and displayName.
    #[serde(rename = "sourceIdentity")]
    pub source_identity: Option<MicrosoftGraphProvisionedIdentity>,
    ///Details of source system of the object being provisioned. Supports $filter (eq, contains) for displayName.
    #[serde(rename = "sourceSystem")]
    pub source_system: Option<MicrosoftGraphProvisioningSystem>,
    ///Details of target object being provisioned. Supports $filter (eq, contains) for identityType, id, and displayName.
    #[serde(rename = "targetIdentity")]
    pub target_identity: Option<MicrosoftGraphProvisionedIdentity>,
    ///Details of target system of the object being provisioned. Supports $filter (eq, contains) for displayName.
    #[serde(rename = "targetSystem")]
    pub target_system: Option<MicrosoftGraphProvisioningSystem>,
    ///Unique Microsoft Entra tenant ID. Supports $filter (eq, contains).
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphProvisioningResult {
    #[serde(rename = "success")]
    #[default]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "skipped")]
    Skipped,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProvisioningServicePrincipal {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.provisioningServicePrincipal".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphProvisioningStatusErrorCategory {
    #[serde(rename = "failure")]
    #[default]
    Failure,
    #[serde(rename = "nonServiceFailure")]
    NonServiceFailure,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProvisioningStatusInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If status isn't success/ skipped details for the error are contained in this.
    #[serde(rename = "errorInformation")]
    pub error_information: Option<MicrosoftGraphProvisioningErrorInfo>,
    ///Possible values are: success, warning, failure, skipped, unknownFutureValue.
    pub status: Option<MicrosoftGraphProvisioningResult>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProvisioningStep {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Summary of what occurred during the step.
    pub description: Option<String>,
    ///Details of what occurred during the step.
    pub details: Option<MicrosoftGraphDetailsInfo>,
    ///Name of the step.
    pub name: Option<String>,
    ///Type of step. Possible values are: import, scoping, matching, processing, referenceResolution, export, unknownFutureValue.
    #[serde(rename = "provisioningStepType")]
    pub provisioning_step_type: Option<MicrosoftGraphProvisioningStepType>,
    ///Status of the step. Possible values are: success, warning,  failure, skipped, unknownFutureValue.
    pub status: Option<MicrosoftGraphProvisioningResult>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphProvisioningStepType {
    #[serde(rename = "import")]
    #[default]
    Import,
    #[serde(rename = "scoping")]
    Scoping,
    #[serde(rename = "matching")]
    Matching,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "referenceResolution")]
    ReferenceResolution,
    #[serde(rename = "export")]
    Export,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProvisioningSystem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.provisioningSystem".to_string())]
    pub odata_type: String,
    ///Details of the system.
    pub details: Option<MicrosoftGraphDetailsInfo>,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
///Proxied Domain
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphProxiedDomain {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The IP address or FQDN
    #[serde(rename = "ipAddressOrFQDN")]
    pub ip_address_or_fqdn: Option<String>,
    ///Proxy IP or FQDN
    pub proxy: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPublicClientApplication {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies the URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. For iOS and macOS apps, specify the value following the syntax msauth.{BUNDLEID}://auth, replacing '{BUNDLEID}'. For example, if the bundle ID is com.microsoft.identitysample.MSALiOS, the URI is msauth.com.microsoft.identitysample.MSALiOS://auth.
    #[serde(rename = "redirectUris")]
    pub redirect_uris: Option<Vec<String>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPublicError {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents the error code.
    pub code: Option<String>,
    ///Details of the error.
    pub details: Option<Vec<MicrosoftGraphPublicErrorDetail>>,
    ///Details of the inner error.
    #[serde(rename = "innerError")]
    pub inner_error: Option<MicrosoftGraphPublicInnerError>,
    ///A non-localized message for the developer.
    pub message: Option<String>,
    ///The target of the error.
    pub target: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPublicErrorDetail {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The error code.
    pub code: Option<String>,
    ///The error message.
    pub message: Option<String>,
    ///The target of the error.
    pub target: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPublicInnerError {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The error code.
    pub code: Option<String>,
    ///A collection of error details.
    pub details: Option<Vec<MicrosoftGraphPublicErrorDetail>>,
    ///The error message.
    pub message: Option<String>,
    ///The target of the error.
    pub target: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPublicKeyInfrastructureRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.publicKeyInfrastructureRoot".to_string())]
    pub odata_type: String,
    ///The collection of public key infrastructure instances for the certificate-based authentication feature for users.
    #[serde(rename = "certificateBasedAuthConfigurations")]
    pub certificate_based_auth_configurations: Option<
        Vec<MicrosoftGraphCertificateBasedAuthPki>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphPublicationFacet {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The user who checked out the file.
    #[serde(rename = "checkedOutBy")]
    pub checked_out_by: Option<MicrosoftGraphIdentitySet>,
    ///The state of publication for this document. Either published or checkout. Read-only.
    pub level: Option<String>,
    ///The unique identifier for the version that is visible to the current caller. Read-only.
    #[serde(rename = "versionId")]
    pub version_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphQuarantineReason {
    #[serde(rename = "EncounteredBaseEscrowThreshold")]
    #[default]
    EncounteredBaseEscrowThreshold,
    #[serde(rename = "EncounteredTotalEscrowThreshold")]
    EncounteredTotalEscrowThreshold,
    #[serde(rename = "EncounteredEscrowProportionThreshold")]
    EncounteredEscrowProportionThreshold,
    #[serde(rename = "EncounteredQuarantineException")]
    EncounteredQuarantineException,
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "QuarantinedOnDemand")]
    QuarantinedOnDemand,
    #[serde(rename = "TooManyDeletes")]
    TooManyDeletes,
    #[serde(rename = "IngestionInterrupted")]
    IngestionInterrupted,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphQuota {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Total space consumed by files in the recycle bin, in bytes. Read-only.
    pub deleted: Option<f64>,
    ///Total space remaining before reaching the capacity limit, in bytes. Read-only.
    pub remaining: Option<f64>,
    ///Enumeration value that indicates the state of the storage space. Read-only.
    pub state: Option<String>,
    ///Information about the drive's storage quota plans. Only in Personal OneDrive.
    #[serde(rename = "storagePlanInformation")]
    pub storage_plan_information: Option<MicrosoftGraphStoragePlanInformation>,
    ///Total allowed storage space, in bytes. Read-only.
    pub total: Option<f64>,
    ///Total space used, in bytes. Read-only.
    pub used: Option<f64>,
}
///Apps rating as in media content
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingAppsType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "agesAbove4")]
    AgesAbove4,
    #[serde(rename = "agesAbove9")]
    AgesAbove9,
    #[serde(rename = "agesAbove12")]
    AgesAbove12,
    #[serde(rename = "agesAbove17")]
    AgesAbove17,
}
///Movies rating labels in Australia
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingAustraliaMoviesType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "parentalGuidance")]
    ParentalGuidance,
    #[serde(rename = "mature")]
    Mature,
    #[serde(rename = "agesAbove15")]
    AgesAbove15,
    #[serde(rename = "agesAbove18")]
    AgesAbove18,
}
///TV content rating labels in Australia
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingAustraliaTelevisionType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "preschoolers")]
    Preschoolers,
    #[serde(rename = "children")]
    Children,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "parentalGuidance")]
    ParentalGuidance,
    #[serde(rename = "mature")]
    Mature,
    #[serde(rename = "agesAbove15")]
    AgesAbove15,
    #[serde(rename = "agesAbove15AdultViolence")]
    AgesAbove15AdultViolence,
}
///Movies rating labels in Canada
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingCanadaMoviesType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "parentalGuidance")]
    ParentalGuidance,
    #[serde(rename = "agesAbove14")]
    AgesAbove14,
    #[serde(rename = "agesAbove18")]
    AgesAbove18,
    #[serde(rename = "restricted")]
    Restricted,
}
///TV content rating labels in Canada
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingCanadaTelevisionType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "children")]
    Children,
    #[serde(rename = "childrenAbove8")]
    ChildrenAbove8,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "parentalGuidance")]
    ParentalGuidance,
    #[serde(rename = "agesAbove14")]
    AgesAbove14,
    #[serde(rename = "agesAbove18")]
    AgesAbove18,
}
///Movies rating labels in France
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingFranceMoviesType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "agesAbove10")]
    AgesAbove10,
    #[serde(rename = "agesAbove12")]
    AgesAbove12,
    #[serde(rename = "agesAbove16")]
    AgesAbove16,
    #[serde(rename = "agesAbove18")]
    AgesAbove18,
}
///TV content rating labels in France
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingFranceTelevisionType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "agesAbove10")]
    AgesAbove10,
    #[serde(rename = "agesAbove12")]
    AgesAbove12,
    #[serde(rename = "agesAbove16")]
    AgesAbove16,
    #[serde(rename = "agesAbove18")]
    AgesAbove18,
}
///Movies rating labels in Germany
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingGermanyMoviesType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "agesAbove6")]
    AgesAbove6,
    #[serde(rename = "agesAbove12")]
    AgesAbove12,
    #[serde(rename = "agesAbove16")]
    AgesAbove16,
    #[serde(rename = "adults")]
    Adults,
}
///TV content rating labels in Germany
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingGermanyTelevisionType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "agesAbove6")]
    AgesAbove6,
    #[serde(rename = "agesAbove12")]
    AgesAbove12,
    #[serde(rename = "agesAbove16")]
    AgesAbove16,
    #[serde(rename = "adults")]
    Adults,
}
///Movies rating labels in Ireland
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingIrelandMoviesType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "parentalGuidance")]
    ParentalGuidance,
    #[serde(rename = "agesAbove12")]
    AgesAbove12,
    #[serde(rename = "agesAbove15")]
    AgesAbove15,
    #[serde(rename = "agesAbove16")]
    AgesAbove16,
    #[serde(rename = "adults")]
    Adults,
}
///TV content rating labels in Ireland
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingIrelandTelevisionType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "children")]
    Children,
    #[serde(rename = "youngAdults")]
    YoungAdults,
    #[serde(rename = "parentalSupervision")]
    ParentalSupervision,
    #[serde(rename = "mature")]
    Mature,
}
///Movies rating labels in Japan
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingJapanMoviesType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "parentalGuidance")]
    ParentalGuidance,
    #[serde(rename = "agesAbove15")]
    AgesAbove15,
    #[serde(rename = "agesAbove18")]
    AgesAbove18,
}
///TV content rating labels in Japan
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingJapanTelevisionType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "explicitAllowed")]
    ExplicitAllowed,
}
///Movies rating labels in New Zealand
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingNewZealandMoviesType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "parentalGuidance")]
    ParentalGuidance,
    #[serde(rename = "mature")]
    Mature,
    #[serde(rename = "agesAbove13")]
    AgesAbove13,
    #[serde(rename = "agesAbove15")]
    AgesAbove15,
    #[serde(rename = "agesAbove16")]
    AgesAbove16,
    #[serde(rename = "agesAbove18")]
    AgesAbove18,
    #[serde(rename = "restricted")]
    Restricted,
    #[serde(rename = "agesAbove16Restricted")]
    AgesAbove16Restricted,
}
///TV content rating labels in New Zealand
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingNewZealandTelevisionType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "parentalGuidance")]
    ParentalGuidance,
    #[serde(rename = "adults")]
    Adults,
}
///Movies rating labels in United Kingdom
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingUnitedKingdomMoviesType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "universalChildren")]
    UniversalChildren,
    #[serde(rename = "parentalGuidance")]
    ParentalGuidance,
    #[serde(rename = "agesAbove12Video")]
    AgesAbove12Video,
    #[serde(rename = "agesAbove12Cinema")]
    AgesAbove12Cinema,
    #[serde(rename = "agesAbove15")]
    AgesAbove15,
    #[serde(rename = "adults")]
    Adults,
}
///TV content rating labels in United Kingdom
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingUnitedKingdomTelevisionType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "caution")]
    Caution,
}
///Movies rating labels in United States
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingUnitedStatesMoviesType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "parentalGuidance")]
    ParentalGuidance,
    #[serde(rename = "parentalGuidance13")]
    ParentalGuidance13,
    #[serde(rename = "restricted")]
    Restricted,
    #[serde(rename = "adults")]
    Adults,
}
///TV content rating labels in United States
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRatingUnitedStatesTelevisionType {
    #[serde(rename = "allAllowed")]
    #[default]
    AllAllowed,
    #[serde(rename = "allBlocked")]
    AllBlocked,
    #[serde(rename = "childrenAll")]
    ChildrenAll,
    #[serde(rename = "childrenAbove7")]
    ChildrenAbove7,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "parentalGuidance")]
    ParentalGuidance,
    #[serde(rename = "childrenAbove14")]
    ChildrenAbove14,
    #[serde(rename = "adults")]
    Adults,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRbacApplication {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.rbacApplication".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "resourceNamespaces")]
    pub resource_namespaces: Option<Vec<MicrosoftGraphUnifiedRbacResourceNamespace>>,
    ///Instances for active role assignments.
    #[serde(rename = "roleAssignmentScheduleInstances")]
    pub role_assignment_schedule_instances: Option<
        Vec<MicrosoftGraphUnifiedRoleAssignmentScheduleInstance>,
    >,
    ///Requests for active role assignments to principals through PIM.
    #[serde(rename = "roleAssignmentScheduleRequests")]
    pub role_assignment_schedule_requests: Option<
        Vec<MicrosoftGraphUnifiedRoleAssignmentScheduleRequest>,
    >,
    ///Schedules for active role assignment operations.
    #[serde(rename = "roleAssignmentSchedules")]
    pub role_assignment_schedules: Option<
        Vec<MicrosoftGraphUnifiedRoleAssignmentSchedule>,
    >,
    ///Resource to grant access to users or groups.
    #[serde(rename = "roleAssignments")]
    pub role_assignments: Option<Vec<MicrosoftGraphUnifiedRoleAssignment>>,
    ///Resource representing the roles allowed by RBAC providers and the permissions assigned to the roles.
    #[serde(rename = "roleDefinitions")]
    pub role_definitions: Option<Vec<MicrosoftGraphUnifiedRoleDefinition>>,
    ///Instances for role eligibility requests.
    #[serde(rename = "roleEligibilityScheduleInstances")]
    pub role_eligibility_schedule_instances: Option<
        Vec<MicrosoftGraphUnifiedRoleEligibilityScheduleInstance>,
    >,
    ///Requests for role eligibilities for principals through PIM.
    #[serde(rename = "roleEligibilityScheduleRequests")]
    pub role_eligibility_schedule_requests: Option<
        Vec<MicrosoftGraphUnifiedRoleEligibilityScheduleRequest>,
    >,
    ///Schedules for role eligibility operations.
    #[serde(rename = "roleEligibilitySchedules")]
    pub role_eligibility_schedules: Option<
        Vec<MicrosoftGraphUnifiedRoleEligibilitySchedule>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphReactionsFacet {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Count of comments.
    #[serde(rename = "commentCount")]
    pub comment_count: Option<f64>,
    ///Count of likes.
    #[serde(rename = "likeCount")]
    pub like_count: Option<f64>,
    ///Count of shares.
    #[serde(rename = "shareCount")]
    pub share_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphReadingAssignmentSubmission {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.readingAssignmentSubmission".to_string())]
    pub odata_type: String,
    ///Accuracy score of the reading progress.
    #[serde(rename = "accuracyScore")]
    pub accuracy_score: Option<MicrosoftGraphReadingAssignmentSubmissionAccuracyScore>,
    ///Indicates whether the submission is an attempt by the student or a miscue edit done by the educator. The possible values are Attempt and EditMiscue.
    pub action: Option<String>,
    ///ID of the assignment with which this submission is associated.
    #[serde(rename = "assignmentId")]
    pub assignment_id: Option<String>,
    ///List of words that the student found challenging during the reading session.
    #[serde(rename = "challengingWords")]
    pub challenging_words: Option<Vec<MicrosoftGraphChallengingWord>>,
    ///ID of the class this reading progress is associated with.
    #[serde(rename = "classId")]
    pub class_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Insertions of the reading progress.
    pub insertions: Option<f64>,
    ///Mispronunciations of the reading progress.
    pub mispronunciations: Option<f64>,
    ///Number of exclamation marks missed in the reading passage.
    #[serde(rename = "missedExclamationMarks")]
    pub missed_exclamation_marks: Option<f64>,
    ///Number of periods missed in the reading passage.
    #[serde(rename = "missedPeriods")]
    pub missed_periods: Option<f64>,
    ///Number of question marks missed in the reading passage.
    #[serde(rename = "missedQuestionMarks")]
    pub missed_question_marks: Option<f64>,
    ///Number of short words missed during the reading session.
    #[serde(rename = "missedShorts")]
    pub missed_shorts: Option<f64>,
    ///Score that reflects the student's use of intonation and expression. Lower scores indicate more monotone reading.
    #[serde(rename = "monotoneScore")]
    pub monotone_score: Option<MicrosoftGraphReadingAssignmentSubmissionMonotoneScore>,
    ///Omissions of the reading progress.
    pub omissions: Option<f64>,
    ///Number of times the student repeated words or phrases during the reading session.
    pub repetitions: Option<f64>,
    ///Number of times the student self-corrected their reading errors.
    #[serde(rename = "selfCorrections")]
    pub self_corrections: Option<f64>,
    ///ID of the user this reading progress is associated with.
    #[serde(rename = "studentId")]
    pub student_id: Option<String>,
    ///Date and time of the submission this reading progress is associated with. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "submissionDateTime")]
    pub submission_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///ID of the submission this reading progress is associated with.
    #[serde(rename = "submissionId")]
    pub submission_id: Option<String>,
    ///Number of unexpected pauses made during the reading session.
    #[serde(rename = "unexpectedPauses")]
    pub unexpected_pauses: Option<f64>,
    ///Words count of the reading progress.
    #[serde(rename = "wordCount")]
    pub word_count: Option<f64>,
    ///Words per minute of the reading progress.
    #[serde(rename = "wordsPerMinute")]
    pub words_per_minute: Option<
        MicrosoftGraphReadingAssignmentSubmissionWordsPerMinute,
    >,
}
///Accuracy score of the reading progress.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphReadingAssignmentSubmissionAccuracyScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Score that reflects the student's use of intonation and expression. Lower scores indicate more monotone reading.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphReadingAssignmentSubmissionMonotoneScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Words per minute of the reading progress.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphReadingAssignmentSubmissionWordsPerMinute {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
discriminated_enum! {
    pub enum MicrosoftGraphRecipient { discriminator : "@odata.type", variants :
    [("#microsoft.graph.attendee", MicrosoftGraphAttendee(Box < MicrosoftGraphAttendee
    >)), ("#microsoft.graph.attendeeBase", MicrosoftGraphAttendeeBase(Box <
    MicrosoftGraphAttendeeBase >))], fallback : Recipient(Box <
    MicrosoftGraphRecipientBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRecipientBase {
    ///The recipient's email address.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<MicrosoftGraphEmailAddress>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRecommendedAction {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Web URL to the recommended action.
    #[serde(rename = "actionWebUrl")]
    pub action_web_url: Option<String>,
    ///Potential improvement in the tenant security score from the recommended action.
    #[serde(rename = "potentialScoreImpact")]
    pub potential_score_impact: Option<
        MicrosoftGraphRecommendedActionPotentialScoreImpact,
    >,
    ///Title of the recommended action.
    pub title: Option<String>,
}
///Potential improvement in the tenant security score from the recommended action.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRecommendedActionPotentialScoreImpact {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRecordOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.recordOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The access token required to retrieve the recording.
    #[serde(rename = "recordingAccessToken")]
    pub recording_access_token: Option<String>,
    ///The location where the recording is located.
    #[serde(rename = "recordingLocation")]
    pub recording_location: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRecordingInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The identities of the recording initiator.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "recordingStatus")]
    pub recording_status: Option<MicrosoftGraphRecordingStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRecordingStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "notRecording")]
    NotRecording,
    #[serde(rename = "recording")]
    Recording,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRecurrencePattern {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The day of the month on which the event occurs. Required if type is absoluteMonthly or absoluteYearly.
    #[serde(rename = "dayOfMonth")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub day_of_month: Option<f64>,
    ///A collection of the days of the week on which the event occurs. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. If type is relativeMonthly or relativeYearly, and daysOfWeek specifies more than one day, the event falls on the first day that satisfies the pattern.  Required if type is weekly, relativeMonthly, or relativeYearly.
    #[serde(rename = "daysOfWeek")]
    pub days_of_week: Option<Vec<MicrosoftGraphDayOfWeek>>,
    ///The first day of the week. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. Default is sunday. Required if type is weekly.
    #[serde(rename = "firstDayOfWeek")]
    pub first_day_of_week: Option<MicrosoftGraphDayOfWeek>,
    ///Specifies on which instance of the allowed days specified in daysOfWeek the event occurs, counted from the first instance in the month. The possible values are: first, second, third, fourth, last. Default is first. Optional and used if type is relativeMonthly or relativeYearly.
    pub index: Option<MicrosoftGraphWeekIndex>,
    ///The number of units between occurrences, where units can be in days, weeks, months, or years, depending on the type. Required.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub interval: Option<f64>,
    ///The month in which the event occurs.  This is a number from 1 to 12.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub month: Option<f64>,
    ///The recurrence pattern type: daily, weekly, absoluteMonthly, relativeMonthly, absoluteYearly, relativeYearly. Required. For more information, see values of type property.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphRecurrencePatternType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRecurrencePatternType {
    #[serde(rename = "daily")]
    #[default]
    Daily,
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "absoluteMonthly")]
    AbsoluteMonthly,
    #[serde(rename = "relativeMonthly")]
    RelativeMonthly,
    #[serde(rename = "absoluteYearly")]
    AbsoluteYearly,
    #[serde(rename = "relativeYearly")]
    RelativeYearly,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRecurrenceRange {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The date to stop applying the recurrence pattern. Depending on the recurrence pattern of the event, the last occurrence of the meeting may not be this date. Required if type is endDate.
    #[serde(rename = "endDate")]
    pub end_date: Option<chrono::NaiveDate>,
    ///The number of times to repeat the event. Required and must be positive if type is numbered.
    #[serde(rename = "numberOfOccurrences")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub number_of_occurrences: Option<f64>,
    ///Time zone for the startDate and endDate properties. Optional. If not specified, the time zone of the event is used.
    #[serde(rename = "recurrenceTimeZone")]
    pub recurrence_time_zone: Option<String>,
    ///The date to start applying the recurrence pattern. The first occurrence of the meeting may be this date or later, depending on the recurrence pattern of the event. Must be the same value as the start property of the recurring event. Required.
    #[serde(rename = "startDate")]
    pub start_date: Option<chrono::NaiveDate>,
    ///The recurrence range. The possible values are: endDate, noEnd, numbered. Required.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphRecurrenceRangeType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRecurrenceRangeType {
    #[serde(rename = "endDate")]
    #[default]
    EndDate,
    #[serde(rename = "noEnd")]
    NoEnd,
    #[serde(rename = "numbered")]
    Numbered,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRecycleBin {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.recycleBin".to_string())]
    pub odata_type: String,
    ///Identity of the user, device, or application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who created the item. Read-only.
    #[serde(rename = "createdByUser")]
    pub created_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Provides a user-visible description of the item. Optional.
    pub description: Option<String>,
    ///ETag for the item. Read-only.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///List of the recycleBinItems deleted by a user.
    pub items: Option<Vec<MicrosoftGraphRecycleBinItem>>,
    ///Identity of the user, device, and application that last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who last modified the item. Read-only.
    #[serde(rename = "lastModifiedByUser")]
    pub last_modified_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the item. Read-write.
    pub name: Option<String>,
    ///Parent information, if the item has a parent. Read-write.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    pub settings: Option<MicrosoftGraphRecycleBinSettings>,
    ///URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRecycleBinItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.recycleBinItem".to_string())]
    pub odata_type: String,
    ///Identity of the user, device, or application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who created the item. Read-only.
    #[serde(rename = "createdByUser")]
    pub created_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time when the item was deleted. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Relative URL of the list or folder that originally contained the item.
    #[serde(rename = "deletedFromLocation")]
    pub deleted_from_location: Option<String>,
    ///Provides a user-visible description of the item. Optional.
    pub description: Option<String>,
    ///ETag for the item. Read-only.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user, device, and application that last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who last modified the item. Read-only.
    #[serde(rename = "lastModifiedByUser")]
    pub last_modified_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the item. Read-write.
    pub name: Option<String>,
    ///Parent information, if the item has a parent. Read-write.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    ///Size of the item in bytes.
    pub size: Option<f64>,
    ///URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRecycleBinSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Recycle bin retention period override in days for deleted content. The default value is 93; the value range is 7 to 180. The setting applies to newly deleted content only. Setting this property to null reverts to its default value. Read-write.
    #[serde(rename = "retentionPeriodOverrideDays")]
    pub retention_period_override_days: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRedirectUriSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub index: Option<f64>,
    pub uri: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphReferenceAttachment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.referenceAttachment".to_string())]
    pub odata_type: String,
    ///The MIME type.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///true if the attachment is an inline attachment; otherwise, false.
    #[serde(rename = "isInline")]
    pub is_inline: Option<bool>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The attachment's file name.
    pub name: Option<String>,
    ///The length of the attachment in bytes.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphReferencedObject {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Name of the referenced object. Must match one of the objects in the directory definition.
    #[serde(rename = "referencedObjectName")]
    pub referenced_object_name: Option<String>,
    ///Currently not supported. Name of the property in the referenced object, the value for which is used as the reference.
    #[serde(rename = "referencedProperty")]
    pub referenced_property: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphReflectCheckInResponse {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.reflectCheckInResponse".to_string())]
    pub odata_type: String,
    ///Identifier for the Reflect check-in.
    #[serde(rename = "checkInId")]
    pub check_in_id: Option<String>,
    ///The question or prompt of the Reflect check-in that this response addresses.
    #[serde(rename = "checkInTitle")]
    pub check_in_title: Option<String>,
    ///ID of the class associated with the Reflect check-in.
    #[serde(rename = "classId")]
    pub class_id: Option<String>,
    ///Date and time when the Reflect check-in was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///ID of the user who created the Reflect check-in.
    #[serde(rename = "creatorId")]
    pub creator_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the Reflect check-in is closed (true) or open (false).
    #[serde(rename = "isClosed")]
    pub is_closed: Option<bool>,
    ///ID of the user who responded to the Reflect check-in.
    #[serde(rename = "responderId")]
    pub responder_id: Option<String>,
    #[serde(rename = "responseEmotion")]
    pub response_emotion: Option<MicrosoftGraphResponseEmotionType>,
    #[serde(rename = "responseFeedback")]
    pub response_feedback: Option<MicrosoftGraphResponseFeedbackType>,
    ///Date and time when the response to the Reflect check-in was submitted. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "submitDateTime")]
    pub submit_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRegistrationEnforcement {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Run campaigns to remind users to set up targeted authentication methods.
    #[serde(rename = "authenticationMethodsRegistrationCampaign")]
    pub authentication_methods_registration_campaign: Option<
        MicrosoftGraphAuthenticationMethodsRegistrationCampaign,
    >,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRegistryHive {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "currentConfig")]
    CurrentConfig,
    #[serde(rename = "currentUser")]
    CurrentUser,
    #[serde(rename = "localMachineSam")]
    LocalMachineSam,
    #[serde(rename = "localMachineSecurity")]
    LocalMachineSecurity,
    #[serde(rename = "localMachineSoftware")]
    LocalMachineSoftware,
    #[serde(rename = "localMachineSystem")]
    LocalMachineSystem,
    #[serde(rename = "usersDefault")]
    UsersDefault,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRegistryKeyState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A Windows registry hive : HKEYCURRENTCONFIG HKEYCURRENTUSER HKEYLOCALMACHINE/SAM HKEYLOCALMACHINE/Security HKEYLOCALMACHINE/Software HKEYLOCALMACHINE/System HKEY_USERS/.Default. Possible values are: unknown, currentConfig, currentUser, localMachineSam, localMachineSecurity, localMachineSoftware, localMachineSystem, usersDefault.
    pub hive: Option<MicrosoftGraphRegistryHive>,
    ///Current (i.e. changed) registry key (excludes HIVE).
    pub key: Option<String>,
    ///Previous (i.e. before changed) registry key (excludes HIVE).
    #[serde(rename = "oldKey")]
    pub old_key: Option<String>,
    ///Previous (i.e. before changed) registry key value data (contents).
    #[serde(rename = "oldValueData")]
    pub old_value_data: Option<String>,
    ///Previous (i.e. before changed) registry key value name.
    #[serde(rename = "oldValueName")]
    pub old_value_name: Option<String>,
    ///Operation that changed the registry key name and/or value. Possible values are: unknown, create, modify, delete.
    pub operation: Option<MicrosoftGraphRegistryOperation>,
    ///Process ID (PID) of the process that modified the registry key (process details will appear in the alert 'processes' collection).
    #[serde(rename = "processId")]
    pub process_id: Option<f64>,
    ///Current (i.e. changed) registry key value data (contents).
    #[serde(rename = "valueData")]
    pub value_data: Option<String>,
    ///Current (i.e. changed) registry key value name
    #[serde(rename = "valueName")]
    pub value_name: Option<String>,
    ///Registry key value type REGBINARY REGDWORD REGDWORDLITTLEENDIAN REGDWORDBIGENDIANREGEXPANDSZ REGLINK REGMULTISZ REGNONE REGQWORD REGQWORDLITTLEENDIAN REG_SZ Possible values are: unknown, binary, dword, dwordLittleEndian, dwordBigEndian, expandSz, link, multiSz, none, qword, qwordlittleEndian, sz.
    #[serde(rename = "valueType")]
    pub value_type: Option<MicrosoftGraphRegistryValueType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRegistryOperation {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "modify")]
    Modify,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRegistryValueType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "binary")]
    Binary,
    #[serde(rename = "dword")]
    Dword,
    #[serde(rename = "dwordLittleEndian")]
    DwordLittleEndian,
    #[serde(rename = "dwordBigEndian")]
    DwordBigEndian,
    #[serde(rename = "expandSz")]
    ExpandSz,
    #[serde(rename = "link")]
    Link,
    #[serde(rename = "multiSz")]
    MultiSz,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "qword")]
    Qword,
    #[serde(rename = "qwordlittleEndian")]
    QwordlittleEndian,
    #[serde(rename = "sz")]
    Sz,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRelatedContact {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether the user has been consented to access student data.
    #[serde(rename = "accessConsent")]
    pub access_consent: Option<bool>,
    ///Name of the contact. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Primary email address of the contact. Required.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<String>,
    ///Mobile phone number of the contact.
    #[serde(rename = "mobilePhone")]
    pub mobile_phone: Option<String>,
    pub relationship: Option<MicrosoftGraphContactRelationship>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRelyingPartyDetailedSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.relyingPartyDetailedSummary".to_string())]
    pub odata_type: String,
    ///Number of failed sign ins on AD FS in the period specified. Supports $orderby, $filter (eq).
    #[serde(rename = "failedSignInCount")]
    pub failed_sign_in_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "migrationStatus")]
    pub migration_status: Option<MicrosoftGraphMigrationStatus>,
    ///Specifies all the validations checks done on applications config details.
    #[serde(rename = "migrationValidationDetails")]
    pub migration_validation_details: Option<Vec<MicrosoftGraphKeyValuePair>>,
    ///Identifies the relying party to this federation service. It's used when issuing claims to the relying party. Supports $orderby, $filter (eq).
    #[serde(rename = "relyingPartyId")]
    pub relying_party_id: Option<String>,
    ///Name of the relying party's website or other entity on the Internet that uses an identity provider to authenticate a user who wants to log in. Supports $orderby, $filter (eq).
    #[serde(rename = "relyingPartyName")]
    pub relying_party_name: Option<String>,
    ///Specifies where the relying party expects to receive the token.
    #[serde(rename = "replyUrls")]
    pub reply_urls: Option<Vec<String>>,
    ///Uniquely identifies the Active Directory forest. Supports $orderby, $filter (eq).
    #[serde(rename = "serviceId")]
    pub service_id: Option<String>,
    ///Calculated as Number of successful / (Number of successful + Number of failed sign ins) or successfulSignInCount / totalSignInCount on AD FS in the period specified. Supports $orderby, $filter (eq).
    #[serde(rename = "signInSuccessRate")]
    pub sign_in_success_rate: Option<
        MicrosoftGraphRelyingPartyDetailedSummarySignInSuccessRate,
    >,
    ///Number of successful sign ins on AD FS. Supports $orderby, $filter (eq).
    #[serde(rename = "successfulSignInCount")]
    pub successful_sign_in_count: Option<f64>,
    ///Number of successful + failed sign ins on AD FS in the period specified. Supports $orderby, $filter (eq).
    #[serde(rename = "totalSignInCount")]
    pub total_sign_in_count: Option<f64>,
    ///Number of unique users that signed into the application. Supports $orderby, $filter (eq).
    #[serde(rename = "uniqueUserCount")]
    pub unique_user_count: Option<f64>,
}
///Calculated as Number of successful / (Number of successful + Number of failed sign ins) or successfulSignInCount / totalSignInCount on AD FS in the period specified. Supports $orderby, $filter (eq).
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRelyingPartyDetailedSummarySignInSuccessRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The current TeamViewer connector status
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRemoteAssistanceOnboardingStatus {
    #[serde(rename = "notOnboarded")]
    #[default]
    NotOnboarded,
    #[serde(rename = "onboarding")]
    Onboarding,
    #[serde(rename = "onboarded")]
    Onboarded,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRemoteAssistancePartner {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.remoteAssistancePartner".to_string())]
    pub odata_type: String,
    ///Display name of the partner.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Timestamp of the last request sent to Intune by the TEM partner.
    #[serde(rename = "lastConnectionDateTime")]
    pub last_connection_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The current TeamViewer connector status
    #[serde(rename = "onboardingStatus")]
    pub onboarding_status: Option<MicrosoftGraphRemoteAssistanceOnboardingStatus>,
    ///URL of the partner's onboarding portal, where an administrator can configure their Remote Assistance service.
    #[serde(rename = "onboardingUrl")]
    pub onboarding_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRemoteDesktopSecurityConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.remoteDesktopSecurityConfiguration".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines if Microsoft Entra ID RDS authentication protocol for RDP is enabled.
    #[serde(rename = "isRemoteDesktopProtocolEnabled")]
    pub is_remote_desktop_protocol_enabled: Option<bool>,
    ///The collection of target device groups that are associated with the RDS security configuration that will be enabled for SSO when a client connects to the target device over RDP using the new Microsoft Entra ID RDS authentication protocol.
    #[serde(rename = "targetDeviceGroups")]
    pub target_device_groups: Option<Vec<MicrosoftGraphTargetDeviceGroup>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRemoteItem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Identity of the user, device, and application which created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates that the remote item is a file. Read-only.
    pub file: Option<MicrosoftGraphFile>,
    ///Information about the remote item from the local file system. Read-only.
    #[serde(rename = "fileSystemInfo")]
    pub file_system_info: Option<MicrosoftGraphFileSystemInfo>,
    ///Indicates that the remote item is a folder. Read-only.
    pub folder: Option<MicrosoftGraphFolder>,
    ///Unique identifier for the remote item in its drive. Read-only.
    pub id: Option<String>,
    ///Image metadata, if the item is an image. Read-only.
    pub image: Option<MicrosoftGraphImage>,
    ///Identity of the user, device, and application which last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Optional. Filename of the remote item. Read-only.
    pub name: Option<String>,
    ///If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.
    pub package: Option<MicrosoftGraphPackage>,
    ///Properties of the parent of the remote item. Read-only.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    ///Indicates that the item has been shared with others and provides information about the shared state of the item. Read-only.
    pub shared: Option<MicrosoftGraphShared>,
    ///Provides interop between items in OneDrive for Business and SharePoint with the full set of item identifiers. Read-only.
    #[serde(rename = "sharepointIds")]
    pub sharepoint_ids: Option<MicrosoftGraphSharepointIds>,
    ///Size of the remote item. Read-only.
    pub size: Option<f64>,
    ///If the current item is also available as a special folder, this facet is returned. Read-only.
    #[serde(rename = "specialFolder")]
    pub special_folder: Option<MicrosoftGraphSpecialFolder>,
    ///Video metadata, if the item is a video. Read-only.
    pub video: Option<MicrosoftGraphVideo>,
    ///DAV compatible URL for the item.
    #[serde(rename = "webDavUrl")]
    pub web_dav_url: Option<String>,
    ///URL that displays the resource in the browser. Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRemoteLockActionResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.remoteLockActionResult".to_string())]
    pub odata_type: String,
    ///Action name
    #[serde(rename = "actionName")]
    pub action_name: Option<String>,
    ///State of the action on the device
    #[serde(rename = "actionState")]
    pub action_state: Option<MicrosoftGraphActionState>,
    ///Time the action state was last updated
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Time the action was initiated
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Pin to unlock the client
    #[serde(rename = "unlockPin")]
    pub unlock_pin: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRemoveAccessApplyAction {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.removeAccessApplyAction".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRemovedState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The removal reason for the participant resource.
    pub reason: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphReportsRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.reportsRoot".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Details of submitted reading assignments.
    #[serde(rename = "readingAssignmentSubmissions")]
    pub reading_assignment_submissions: Option<
        Vec<MicrosoftGraphReadingAssignmentSubmission>,
    >,
    ///Details of check-in responses.
    #[serde(rename = "reflectCheckInResponses")]
    pub reflect_check_in_responses: Option<Vec<MicrosoftGraphReflectCheckInResponse>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.request".to_string())]
    pub odata_type: String,
    ///The identifier of the approval of the request.
    #[serde(rename = "approvalId")]
    pub approval_id: Option<String>,
    ///The request completion date time.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The principal that created the request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The request creation date time.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Free text field to define any custom data for the request. Not used.
    #[serde(rename = "customData")]
    pub custom_data: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The status of the request. Not nullable. The possible values are: Canceled, Denied, Failed, Granted, PendingAdminDecision, PendingApproval, PendingProvisioning, PendingScheduleCreation, Provisioned, Revoked, and ScheduleCreated. Not nullable.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRequestSchedule {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///When the eligible or active assignment expires.
    pub expiration: Option<MicrosoftGraphExpirationPattern>,
    ///The frequency of the  eligible or active assignment. This property is currently unsupported in PIM.
    pub recurrence: Option<MicrosoftGraphPatternedRecurrence>,
    ///When the  eligible or active assignment becomes active.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRequestSignatureVerification {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies which weak algorithms are allowed.  The possible values are: rsaSha1, unknownFutureValue.
    #[serde(rename = "allowedWeakAlgorithms")]
    pub allowed_weak_algorithms: Option<MicrosoftGraphWeakAlgorithms>,
    ///Specifies whether signed authentication requests for this application should be required.
    #[serde(rename = "isSignedRequestRequired")]
    pub is_signed_request_required: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRequestorManager {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.requestorManager".to_string())]
    pub odata_type: String,
    ///The hierarchical level of the manager with respect to the requestor. For example, the direct manager of a requestor would have a managerLevel of 1, while the manager of the requestor's manager would have a managerLevel of 2. Default value for managerLevel is 1. Possible values for this property range from 1 to 2.
    #[serde(rename = "managerLevel")]
    pub manager_level: Option<f64>,
}
///Possible values of required passwords.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRequiredPasswordType {
    #[serde(rename = "deviceDefault")]
    #[default]
    DeviceDefault,
    #[serde(rename = "alphanumeric")]
    Alphanumeric,
    #[serde(rename = "numeric")]
    Numeric,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRequiredResourceAccess {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The list of OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
    #[serde(rename = "resourceAccess")]
    pub resource_access: Option<Vec<MicrosoftGraphResourceAccess>>,
    ///The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
    #[serde(rename = "resourceAppId")]
    pub resource_app_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResellerDelegatedAdminRelationship {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.resellerDelegatedAdminRelationship".to_string())]
    pub odata_type: String,
    ///The access assignments associated with the delegated admin relationship.
    #[serde(rename = "accessAssignments")]
    pub access_assignments: Option<Vec<MicrosoftGraphDelegatedAdminAccessAssignment>>,
    #[serde(rename = "accessDetails")]
    pub access_details: Option<MicrosoftGraphDelegatedAdminAccessDetails>,
    ///The date and time in ISO 8601 format and in UTC time when the relationship became active. Read-only.
    #[serde(rename = "activatedDateTime")]
    pub activated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The duration by which the validity of the relationship is automatically extended, denoted in ISO 8601 format. Supported values are: P0D, PT0S, P180D. The default value is PT0S. PT0S indicates that the relationship expires when the endDateTime is reached and it isn't automatically extended.
    #[serde(rename = "autoExtendDuration")]
    pub auto_extend_duration: Option<String>,
    ///The date and time in ISO 8601 format and in UTC time when the relationship was created. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The display name and unique identifier of the customer of the relationship. This is configured either by the partner at the time the relationship is created or by the system after the customer approves the relationship. Can't be changed by the customer.
    pub customer: Option<MicrosoftGraphDelegatedAdminRelationshipCustomerParticipant>,
    ///The display name of the relationship used for ease of identification. Must be unique across all delegated admin relationships of the partner and is set by the partner only when the relationship is in the created status and can't be changed by the customer. Maximum length is 50 characters.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The duration of the relationship in ISO 8601 format. Must be a value between P1D and P2Y inclusive. This is set by the partner only when the relationship is in the created status and can't be changed by the customer.
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub duration: Option<String>,
    ///The date and time in ISO 8601 format and in UTC time when the status of relationship changes to either terminated or expired. Calculated as endDateTime = activatedDateTime + duration. Read-only.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The tenant ID of the indirect provider partner who created the relationship for the indirect reseller partner.
    #[serde(rename = "indirectProviderTenantId")]
    pub indirect_provider_tenant_id: Option<String>,
    ///Indicates the indirect reseller partner consent status. true indicates that the partner has yet to review the relationship; false indicates that the partner has already provided consent by approving or rejecting the relationship.
    #[serde(rename = "isPartnerConsentPending")]
    pub is_partner_consent_pending: Option<bool>,
    ///The date and time in ISO 8601 format and in UTC time when the relationship was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The long running operations associated with the delegated admin relationship.
    pub operations: Option<Vec<MicrosoftGraphDelegatedAdminRelationshipOperation>>,
    ///The requests associated with the delegated admin relationship.
    pub requests: Option<Vec<MicrosoftGraphDelegatedAdminRelationshipRequest>>,
    ///The status of the relationship. Read Only. The possible values are: activating, active, approvalPending, approved, created, expired, expiring, terminated, terminating, terminationRequested, unknownFutureValue. Supports $orderby.
    pub status: Option<MicrosoftGraphDelegatedAdminRelationshipStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResetPasscodeActionResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.resetPasscodeActionResult".to_string())]
    pub odata_type: String,
    ///Action name
    #[serde(rename = "actionName")]
    pub action_name: Option<String>,
    ///State of the action on the device
    #[serde(rename = "actionState")]
    pub action_state: Option<MicrosoftGraphActionState>,
    ///RotateBitLockerKeys action error code. Valid values 0 to 2147483647
    #[serde(rename = "errorCode")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_code: Option<f64>,
    ///Time the action state was last updated
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Newly generated passcode for the device
    pub passcode: Option<String>,
    ///Time the action was initiated
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResourceAccess {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The unique identifier of an app role or delegated permission exposed by the resource application. For delegated permissions, this should match the id property of one of the delegated permissions in the oauth2PermissionScopes collection of the resource application's service principal. For app roles (application permissions), this should match the id property of an app role in the appRoles collection of the resource application's service principal.
    pub id: Option<uuid::Uuid>,
    ///Specifies whether the id property references a delegated permission or an app role (application permission). The possible values are: Scope (for delegated permissions) or Role (for app roles).
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
///Set of allowed and not allowed actions for a resource.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResourceAction {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Allowed Actions
    #[serde(rename = "allowedResourceActions")]
    pub allowed_resource_actions: Option<Vec<Option<String>>>,
    ///Not Allowed Actions.
    #[serde(rename = "notAllowedResourceActions")]
    pub not_allowed_resource_actions: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResourceOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.resourceOperation".to_string())]
    pub odata_type: String,
    ///Type of action this operation is going to perform. The actionName should be concise and limited to as few words as possible.
    #[serde(rename = "actionName")]
    pub action_name: Option<String>,
    ///Description of the resource operation. The description is used in mouse-over text for the operation when shown in the Azure Portal.
    pub description: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Name of the Resource this operation is performed on.
    #[serde(rename = "resourceName")]
    pub resource_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResourceReference {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The item's unique identifier.
    pub id: Option<String>,
    ///A string value that can be used to classify the item, such as 'microsoft.graph.driveItem'
    #[serde(rename = "type")]
    pub r#type: Option<String>,
    ///A URL leading to the referenced item.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResourceSpecificPermission {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Describes the level of access that the resource-specific permission represents.
    pub description: Option<String>,
    ///The display name for the resource-specific permission.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for the resource-specific application permission.
    pub id: Option<uuid::Uuid>,
    ///Indicates whether the permission is enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///The value of the permission.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResourceSpecificPermissionGrant {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.resourceSpecificPermissionGrant".to_string())]
    pub odata_type: String,
    ///ID of the service principal of the Microsoft Entra app that has been granted access. Read-only.
    #[serde(rename = "clientAppId")]
    pub client_app_id: Option<String>,
    ///ID of the Microsoft Entra app that has been granted access. Read-only.
    #[serde(rename = "clientId")]
    pub client_id: Option<String>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The name of the resource-specific permission. Read-only.
    pub permission: Option<String>,
    ///The type of permission. Possible values are: Application, Delegated. Read-only.
    #[serde(rename = "permissionType")]
    pub permission_type: Option<String>,
    ///ID of the Microsoft Entra app that is hosting the resource. Read-only.
    #[serde(rename = "resourceAppId")]
    pub resource_app_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResourceVisualization {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A string describing where the item is stored. For example, the name of a SharePoint site or the user name identifying the owner of the OneDrive storing the item.
    #[serde(rename = "containerDisplayName")]
    pub container_display_name: Option<String>,
    ///Can be used for filtering by the type of container in which the file is stored. Such as Site or OneDriveBusiness.
    #[serde(rename = "containerType")]
    pub container_type: Option<String>,
    ///A path leading to the folder in which the item is stored.
    #[serde(rename = "containerWebUrl")]
    pub container_web_url: Option<String>,
    ///The item's media type. Can be used for filtering for a specific type of file based on supported IANA Media Mime Types. Not all Media Mime Types are supported.
    #[serde(rename = "mediaType")]
    pub media_type: Option<String>,
    ///A URL leading to the preview image for the item.
    #[serde(rename = "previewImageUrl")]
    pub preview_image_url: Option<String>,
    ///A preview text for the item.
    #[serde(rename = "previewText")]
    pub preview_text: Option<String>,
    ///The item's title text.
    pub title: Option<String>,
    ///The item's media type. Can be used for filtering for a specific file based on a specific type. See the section Type property values for supported types.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphResponseEmotionType {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "confident")]
    Confident,
    #[serde(rename = "excited")]
    Excited,
    #[serde(rename = "happy")]
    Happy,
    #[serde(rename = "motivated")]
    Motivated,
    #[serde(rename = "peaceful")]
    Peaceful,
    #[serde(rename = "ambitious")]
    Ambitious,
    #[serde(rename = "cheerful")]
    Cheerful,
    #[serde(rename = "comfortable")]
    Comfortable,
    #[serde(rename = "creative")]
    Creative,
    #[serde(rename = "determined")]
    Determined,
    #[serde(rename = "energized")]
    Energized,
    #[serde(rename = "focused")]
    Focused,
    #[serde(rename = "fulfilled")]
    Fulfilled,
    #[serde(rename = "grateful")]
    Grateful,
    #[serde(rename = "included")]
    Included,
    #[serde(rename = "inspired")]
    Inspired,
    #[serde(rename = "optimistic")]
    Optimistic,
    #[serde(rename = "proud")]
    Proud,
    #[serde(rename = "successful")]
    Successful,
    #[serde(rename = "valuable")]
    Valuable,
    #[serde(rename = "annoyed")]
    Annoyed,
    #[serde(rename = "bored")]
    Bored,
    #[serde(rename = "calm")]
    Calm,
    #[serde(rename = "confused")]
    Confused,
    #[serde(rename = "glad")]
    Glad,
    #[serde(rename = "content")]
    Content,
    #[serde(rename = "pensive")]
    Pensive,
    #[serde(rename = "reserved")]
    Reserved,
    #[serde(rename = "restless")]
    Restless,
    #[serde(rename = "shocked")]
    Shocked,
    #[serde(rename = "tired")]
    Tired,
    #[serde(rename = "angry")]
    Angry,
    #[serde(rename = "depressed")]
    Depressed,
    #[serde(rename = "exhausted")]
    Exhausted,
    #[serde(rename = "lonely")]
    Lonely,
    #[serde(rename = "nervous")]
    Nervous,
    #[serde(rename = "anxious")]
    Anxious,
    #[serde(rename = "apathetic")]
    Apathetic,
    #[serde(rename = "concerned")]
    Concerned,
    #[serde(rename = "disappointed")]
    Disappointed,
    #[serde(rename = "frightened")]
    Frightened,
    #[serde(rename = "frustrated")]
    Frustrated,
    #[serde(rename = "hopeless")]
    Hopeless,
    #[serde(rename = "hurt")]
    Hurt,
    #[serde(rename = "jealous")]
    Jealous,
    #[serde(rename = "miserable")]
    Miserable,
    #[serde(rename = "overwhelmed")]
    Overwhelmed,
    #[serde(rename = "skeptical")]
    Skeptical,
    #[serde(rename = "stressed")]
    Stressed,
    #[serde(rename = "stuck")]
    Stuck,
    #[serde(rename = "worthless")]
    Worthless,
    #[serde(rename = "awed")]
    Awed,
    #[serde(rename = "ashamed")]
    Ashamed,
    #[serde(rename = "curious")]
    Curious,
    #[serde(rename = "sensitive")]
    Sensitive,
    #[serde(rename = "sad")]
    Sad,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphResponseFeedbackType {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "notDetected")]
    NotDetected,
    #[serde(rename = "veryUnpleasant")]
    VeryUnpleasant,
    #[serde(rename = "unpleasant")]
    Unpleasant,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "pleasant")]
    Pleasant,
    #[serde(rename = "veryPleasant")]
    VeryPleasant,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResponseStatus {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The response type. Possible values are: none, organizer, tentativelyAccepted, accepted, declined, notResponded.To differentiate between none and notResponded:  none – from organizer's perspective. This value is used when the status of an attendee/participant is reported to the organizer of a meeting.  notResponded – from attendee's perspective. Indicates the attendee has not responded to the meeting request.  Clients can treat notResponded == none.  As an example, if attendee Alex hasn't responded to a meeting request, getting Alex' response status for that event in Alex' calendar returns notResponded. Getting Alex' response from the calendar of any other attendee or the organizer's returns none. Getting the organizer's response for the event in anybody's calendar also returns none.
    pub response: Option<MicrosoftGraphResponseType>,
    ///The date and time when the response was returned. It uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    pub time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphResponseType {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "organizer")]
    Organizer,
    #[serde(rename = "tentativelyAccepted")]
    TentativelyAccepted,
    #[serde(rename = "accepted")]
    Accepted,
    #[serde(rename = "declined")]
    Declined,
    #[serde(rename = "notResponded")]
    NotResponded,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRestoreArtifactBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.restoreArtifactBase".to_string())]
    pub odata_type: String,
    ///The time when restoration of restore artifact is completed.
    #[serde(rename = "completionDateTime")]
    pub completion_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the restoration destination. The possible values are: new, inPlace, unknownFutureValue.
    #[serde(rename = "destinationType")]
    pub destination_type: Option<MicrosoftGraphDestinationType>,
    ///Contains error details if the restore session fails or completes with an error.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the date and time when an artifact is protected by a protectionPolicy and can be restored.
    #[serde(rename = "restorePoint")]
    pub restore_point: Option<MicrosoftGraphRestorePoint>,
    ///The time when restoration of restore artifact is started.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The individual restoration status of the restore artifact. The possible values are: added, scheduling, scheduled, inProgress, succeeded, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphArtifactRestoreStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRestoreArtifactsBulkRequestBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.restoreArtifactsBulkRequestBase".to_string())]
    pub odata_type: String,
    ///The identity of the person who created the bulk request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time when the bulk request was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the restoration destination. The possible values are: new, inPlace, unknownFutureValue.
    #[serde(rename = "destinationType")]
    pub destination_type: Option<MicrosoftGraphDestinationType>,
    ///Name of the addition request.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Error details are populated for resource resolution failures.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified this entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp when this entity was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The start and end date and time of the protection period.
    #[serde(rename = "protectionTimePeriod")]
    pub protection_time_period: Option<MicrosoftGraphTimePeriod>,
    ///Indicates which protection units to restore. This property isn't implemented yet. Future value; don't use.
    #[serde(rename = "protectionUnitIds")]
    pub protection_unit_ids: Option<Vec<Option<String>>>,
    ///Indicates which restore point to return. The possible values are: oldest, latest, unknownFutureValue.
    #[serde(rename = "restorePointPreference")]
    pub restore_point_preference: Option<MicrosoftGraphRestorePointPreference>,
    pub status: Option<MicrosoftGraphRestoreArtifactsBulkRequestStatus>,
    ///The type of the restore point. The possible values are: none, fastRestore, unknownFutureValue.
    pub tags: Option<MicrosoftGraphRestorePointTags>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRestoreArtifactsBulkRequestStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "completedWithErrors")]
    CompletedWithErrors,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRestoreJobType {
    #[serde(rename = "standard")]
    #[default]
    Standard,
    #[serde(rename = "bulk")]
    Bulk,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRestorePoint {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.restorePoint".to_string())]
    pub odata_type: String,
    ///Expiration date time of the restore point.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Date time when the restore point was created.
    #[serde(rename = "protectionDateTime")]
    pub protection_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The site, drive, or mailbox units that are protected under a protection policy.
    #[serde(rename = "protectionUnit")]
    pub protection_unit: Option<MicrosoftGraphProtectionUnitBase>,
    ///The type of the restore point. The possible values are: none, fastRestore, unknownFutureValue.
    pub tags: Option<MicrosoftGraphRestorePointTags>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRestorePointPreference {
    #[serde(rename = "latest")]
    #[default]
    Latest,
    #[serde(rename = "oldest")]
    Oldest,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRestorePointTags {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "fastRestore")]
    FastRestore,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRestoreSessionArtifactCount {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The number of artifacts whose restoration completed.
    pub completed: Option<f64>,
    ///The number of artifacts whose restoration failed.
    pub failed: Option<f64>,
    ///The number of artifacts whose restoration is in progress.
    #[serde(rename = "inProgress")]
    pub in_progress: Option<f64>,
    ///The number of artifacts present in the restore session.
    pub total: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRestoreSessionBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.restoreSessionBase".to_string())]
    pub odata_type: String,
    ///The time of completion of the restore session.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The identity of person who created the restore session.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the restore session.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains error details if the restore session fails or completes with an error.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the restore session.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification of the restore session.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether the restore session was created normally or by a bulk job.
    #[serde(rename = "restoreJobType")]
    pub restore_job_type: Option<MicrosoftGraphRestoreJobType>,
    ///The number of metadata artifacts that belong to this restore session.
    #[serde(rename = "restoreSessionArtifactCount")]
    pub restore_session_artifact_count: Option<
        MicrosoftGraphRestoreSessionArtifactCount,
    >,
    ///Status of the restore session. The value is an aggregated status of the restored artifacts. The possible values are: draft, activating, active, completedWithError, completed, unknownFutureValue, failed. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: failed.
    pub status: Option<MicrosoftGraphRestoreSessionStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRestoreSessionStatus {
    #[serde(rename = "draft")]
    #[default]
    Draft,
    #[serde(rename = "activating")]
    Activating,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "completedWithError")]
    CompletedWithError,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "failed")]
    Failed,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResultInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The result code.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub code: Option<f64>,
    ///The message.
    pub message: Option<String>,
    ///The result subcode.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub subcode: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphResultTemplateDictionary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.resultTemplateDictionary".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRetentionLabelSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Describes the item behavior during retention period. Possible values are: doNotRetain, retain, retainAsRecord, retainAsRegulatoryRecord, unknownFutureValue. Read-only.
    #[serde(rename = "behaviorDuringRetentionPeriod")]
    pub behavior_during_retention_period: Option<
        MicrosoftGraphSecurityBehaviorDuringRetentionPeriod,
    >,
    ///Specifies whether updates to document content are allowed. Read-only.
    #[serde(rename = "isContentUpdateAllowed")]
    pub is_content_update_allowed: Option<bool>,
    ///Specifies whether the document deletion is allowed. Read-only.
    #[serde(rename = "isDeleteAllowed")]
    pub is_delete_allowed: Option<bool>,
    ///Specifies whether you're allowed to change the retention label on the document. Read-only.
    #[serde(rename = "isLabelUpdateAllowed")]
    pub is_label_update_allowed: Option<bool>,
    ///Specifies whether updates to the item metadata (for example, the Title field) are blocked. Read-only.
    #[serde(rename = "isMetadataUpdateAllowed")]
    pub is_metadata_update_allowed: Option<bool>,
    ///Specifies whether the item is locked. Read-write.
    #[serde(rename = "isRecordLocked")]
    pub is_record_locked: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRetentionSetting {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The frequency of the backup.
    pub interval: Option<String>,
    ///The period of time to retain the protected data for a single Microsoft 365 service.
    pub period: Option<String>,
}
///Color in RGB.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRgbColor {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Blue value
    pub b: Option<f64>,
    ///Green value
    pub g: Option<f64>,
    ///Red value
    pub r: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRichLongRunningOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.richLongRunningOperation".to_string())]
    pub odata_type: String,
    ///The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Error that caused the operation to fail.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The time of the last action in the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A value between 0 and 100 that indicates the progress of the operation.
    #[serde(rename = "percentageComplete")]
    pub percentage_complete: Option<f64>,
    ///The unique identifier for the result.
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
    ///URI of the resource that the operation is performed on.
    #[serde(rename = "resourceLocation")]
    pub resource_location: Option<String>,
    ///The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphLongRunningOperationStatus>,
    ///Details about the status of the operation.
    #[serde(rename = "statusDetail")]
    pub status_detail: Option<String>,
    ///The type of the operation.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRiskDetail {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "adminGeneratedTemporaryPassword")]
    AdminGeneratedTemporaryPassword,
    #[serde(rename = "userPerformedSecuredPasswordChange")]
    UserPerformedSecuredPasswordChange,
    #[serde(rename = "userPerformedSecuredPasswordReset")]
    UserPerformedSecuredPasswordReset,
    #[serde(rename = "adminConfirmedSigninSafe")]
    AdminConfirmedSigninSafe,
    #[serde(rename = "aiConfirmedSigninSafe")]
    AiConfirmedSigninSafe,
    #[serde(rename = "userPassedMFADrivenByRiskBasedPolicy")]
    UserPassedMfadrivenByRiskBasedPolicy,
    #[serde(rename = "adminDismissedAllRiskForUser")]
    AdminDismissedAllRiskForUser,
    #[serde(rename = "adminConfirmedSigninCompromised")]
    AdminConfirmedSigninCompromised,
    #[serde(rename = "hidden")]
    Hidden,
    #[serde(rename = "adminConfirmedUserCompromised")]
    AdminConfirmedUserCompromised,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "m365DAdminDismissedDetection")]
    M365DadminDismissedDetection,
    #[serde(rename = "adminConfirmedServicePrincipalCompromised")]
    AdminConfirmedServicePrincipalCompromised,
    #[serde(rename = "adminDismissedAllRiskForServicePrincipal")]
    AdminDismissedAllRiskForServicePrincipal,
    #[serde(rename = "userChangedPasswordOnPremises")]
    UserChangedPasswordOnPremises,
    #[serde(rename = "adminDismissedRiskForSignIn")]
    AdminDismissedRiskForSignIn,
    #[serde(rename = "adminConfirmedAccountSafe")]
    AdminConfirmedAccountSafe,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRiskDetection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.riskDetection".to_string())]
    pub odata_type: String,
    ///Indicates the activity type the detected risk is linked to. Possible values are: signin, user, unknownFutureValue.
    pub activity: Option<MicrosoftGraphActivityType>,
    ///Date and time that the risky activity occurred. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is look like this: 2014-01-01T00:00:00Z
    #[serde(rename = "activityDateTime")]
    pub activity_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Additional information associated with the risk detection in JSON format. For example, '[{/'Key/':/'userAgent/',/'Value/':/'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36/'}]'. Possible keys in the additionalInfo JSON string are: userAgent, alertUrl, relatedEventTimeInUtc, relatedUserAgent, deviceInformation, relatedLocation, requestId, correlationId, lastActivityTimeInUtc, malwareName, clientLocation, clientIp, riskReasons. For more information about riskReasons and possible values, see riskReasons values.
    #[serde(rename = "additionalInfo")]
    pub additional_info: Option<String>,
    ///Correlation ID of the sign-in associated with the risk detection. This property is null if the risk detection is not associated with a sign-in.
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<String>,
    ///Date and time that the risk was detected. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 looks like this: 2014-01-01T00:00:00Z
    #[serde(rename = "detectedDateTime")]
    pub detected_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Timing of the detected risk (real-time/offline). Possible values are: notDefined, realtime, nearRealtime, offline, unknownFutureValue.
    #[serde(rename = "detectionTimingType")]
    pub detection_timing_type: Option<MicrosoftGraphRiskDetectionTimingType>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Provides the IP address of the client from where the risk occurred.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///Date and time that the risk detection was last updated. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is look like this: 2014-01-01T00:00:00Z
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Location of the sign-in.
    pub location: Option<MicrosoftGraphSignInLocation>,
    ///Request ID of the sign-in associated with the risk detection. This property is null if the risk detection is not associated with a sign-in.
    #[serde(rename = "requestId")]
    pub request_id: Option<String>,
    ///Details of the detected risk. The possible values are: none, adminGeneratedTemporaryPassword, userChangedPasswordOnPremises, userPerformedSecuredPasswordChange, userPerformedSecuredPasswordReset, adminConfirmedSigninSafe, aiConfirmedSigninSafe, userPassedMFADrivenByRiskBasedPolicy, adminDismissedAllRiskForUser, adminConfirmedSigninCompromised, hidden, adminConfirmedUserCompromised, unknownFutureValue, m365DAdminDismissedDetection. Use the Prefer: include - unknown -enum-members request header to get the following value(s) in this evolvable enum: m365DAdminDismissedDetection.
    #[serde(rename = "riskDetail")]
    pub risk_detail: Option<MicrosoftGraphRiskDetail>,
    ///The type of risk event detected. The possible values are adminConfirmedUserCompromised, anomalousToken, anomalousUserActivity, anonymizedIPAddress, generic, impossibleTravel, investigationsThreatIntelligence, suspiciousSendingPatterns, leakedCredentials, maliciousIPAddress,malwareInfectedIPAddress, mcasSuspiciousInboxManipulationRules, newCountry, passwordSpray,riskyIPAddress, suspiciousAPITraffic, suspiciousBrowser,suspiciousInboxForwarding, suspiciousIPAddress, tokenIssuerAnomaly, unfamiliarFeatures, unlikelyTravel. If the risk detection is a premium detection, will show generic. For more information about each value, see Risk types and detection.
    #[serde(rename = "riskEventType")]
    pub risk_event_type: Option<String>,
    ///Level of the detected risk. Possible values are: low, medium, high, hidden, none, unknownFutureValue.
    #[serde(rename = "riskLevel")]
    pub risk_level: Option<MicrosoftGraphRiskLevel>,
    ///The state of a detected risky user or sign-in. Possible values are: none, confirmedSafe, remediated, dismissed, atRisk, confirmedCompromised, unknownFutureValue.
    #[serde(rename = "riskState")]
    pub risk_state: Option<MicrosoftGraphRiskState>,
    ///Source of the risk detection. For example, activeDirectory.
    pub source: Option<String>,
    ///Indicates the type of token issuer for the detected sign-in risk. Possible values are: AzureAD, ADFederationServices, UnknownFutureValue.
    #[serde(rename = "tokenIssuerType")]
    pub token_issuer_type: Option<MicrosoftGraphTokenIssuerType>,
    ///The user principal name (UPN) of the user.
    #[serde(rename = "userDisplayName")]
    pub user_display_name: Option<String>,
    ///Unique ID of the user.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///The user principal name (UPN) of the user.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRiskDetectionTimingType {
    #[serde(rename = "notDefined")]
    #[default]
    NotDefined,
    #[serde(rename = "realtime")]
    Realtime,
    #[serde(rename = "nearRealtime")]
    NearRealtime,
    #[serde(rename = "offline")]
    Offline,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRiskEventType {
    #[serde(rename = "unlikelyTravel")]
    #[default]
    UnlikelyTravel,
    #[serde(rename = "anonymizedIPAddress")]
    AnonymizedIpaddress,
    #[serde(rename = "maliciousIPAddress")]
    MaliciousIpaddress,
    #[serde(rename = "unfamiliarFeatures")]
    UnfamiliarFeatures,
    #[serde(rename = "malwareInfectedIPAddress")]
    MalwareInfectedIpaddress,
    #[serde(rename = "suspiciousIPAddress")]
    SuspiciousIpaddress,
    #[serde(rename = "leakedCredentials")]
    LeakedCredentials,
    #[serde(rename = "investigationsThreatIntelligence")]
    InvestigationsThreatIntelligence,
    #[serde(rename = "generic")]
    Generic,
    #[serde(rename = "adminConfirmedUserCompromised")]
    AdminConfirmedUserCompromised,
    #[serde(rename = "mcasImpossibleTravel")]
    McasImpossibleTravel,
    #[serde(rename = "mcasSuspiciousInboxManipulationRules")]
    McasSuspiciousInboxManipulationRules,
    #[serde(rename = "investigationsThreatIntelligenceSigninLinked")]
    InvestigationsThreatIntelligenceSigninLinked,
    #[serde(rename = "maliciousIPAddressValidCredentialsBlockedIP")]
    MaliciousIpaddressValidCredentialsBlockedIp,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRiskLevel {
    #[serde(rename = "low")]
    #[default]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "hidden")]
    Hidden,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRiskServicePrincipalActivity {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Details of the detected risk. Note: Details for this property are only available for Workload Identities Premium customers. Events in tenants without this license will be returned hidden. The possible values are: none, hidden, adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal. Use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: adminConfirmedServicePrincipalCompromised , adminDismissedAllRiskForServicePrincipal.
    pub detail: Option<MicrosoftGraphRiskDetail>,
    ///The type of risk event detected. The possible values are: investigationsThreatIntelligence, generic, adminConfirmedServicePrincipalCompromised, suspiciousSignins, leakedCredentials, anomalousServicePrincipalActivity, maliciousApplication, suspiciousApplication.
    #[serde(rename = "riskEventTypes")]
    pub risk_event_types: Option<Vec<Option<String>>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRiskState {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "confirmedSafe")]
    ConfirmedSafe,
    #[serde(rename = "remediated")]
    Remediated,
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "atRisk")]
    AtRisk,
    #[serde(rename = "confirmedCompromised")]
    ConfirmedCompromised,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRiskUserActivity {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Details of the detected risk. Possible values are: none, adminGeneratedTemporaryPassword, userPerformedSecuredPasswordChange, userPerformedSecuredPasswordReset, adminConfirmedSigninSafe, aiConfirmedSigninSafe, userPassedMFADrivenByRiskBasedPolicy, adminDismissedAllRiskForUser, adminConfirmedSigninCompromised, hidden, adminConfirmedUserCompromised, unknownFutureValue. For more information about each value, see Risk types and detection.
    pub detail: Option<MicrosoftGraphRiskDetail>,
    ///The type of risk event detected.
    #[serde(rename = "riskEventTypes")]
    pub risk_event_types: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRiskyServicePrincipal {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.riskyServicePrincipal".to_string())]
    pub odata_type: String,
    ///The globally unique identifier for the associated application (its appId property), if any.
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///The display name for the service principal.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Represents the risk history of Microsoft Entra service principals.
    pub history: Option<Vec<MicrosoftGraphRiskyServicePrincipalHistoryItem>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///true if the service principal account is enabled; otherwise, false.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Indicates whether Microsoft Entra ID is currently processing the service principal's risky state.
    #[serde(rename = "isProcessing")]
    pub is_processing: Option<bool>,
    ///Details of the detected risk. Note: Details for this property are only available for Workload Identities Premium customers. Events in tenants without this license will be returned hidden. The possible values are: none, hidden,  unknownFutureValue, adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal. Use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: adminConfirmedServicePrincipalCompromised , adminDismissedAllRiskForServicePrincipal.
    #[serde(rename = "riskDetail")]
    pub risk_detail: Option<MicrosoftGraphRiskDetail>,
    ///The date and time that the risk state was last updated. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2021 is 2021-01-01T00:00:00Z. Supports $filter (eq).
    #[serde(rename = "riskLastUpdatedDateTime")]
    pub risk_last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Level of the detected risky workload identity. The possible values are: low, medium, high, hidden, none, unknownFutureValue. Supports $filter (eq).
    #[serde(rename = "riskLevel")]
    pub risk_level: Option<MicrosoftGraphRiskLevel>,
    ///State of the service principal's risk. The possible values are: none, confirmedSafe, remediated, dismissed, atRisk, confirmedCompromised, unknownFutureValue.
    #[serde(rename = "riskState")]
    pub risk_state: Option<MicrosoftGraphRiskState>,
    ///Identifies whether the service principal represents an Application, a ManagedIdentity, or a legacy application (socialIdp). This is set by Microsoft Entra ID internally and is inherited from servicePrincipal.
    #[serde(rename = "servicePrincipalType")]
    pub service_principal_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRiskyServicePrincipalHistoryItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.riskyServicePrincipalHistoryItem".to_string())]
    pub odata_type: String,
    ///The activity related to service principal risk level change.
    pub activity: Option<MicrosoftGraphRiskServicePrincipalActivity>,
    ///The globally unique identifier for the associated application (its appId property), if any.
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///The display name for the service principal.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Represents the risk history of Microsoft Entra service principals.
    pub history: Option<Vec<MicrosoftGraphRiskyServicePrincipalHistoryItem>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identifier of the actor of the operation.
    #[serde(rename = "initiatedBy")]
    pub initiated_by: Option<String>,
    ///true if the service principal account is enabled; otherwise, false.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Indicates whether Microsoft Entra ID is currently processing the service principal's risky state.
    #[serde(rename = "isProcessing")]
    pub is_processing: Option<bool>,
    ///Details of the detected risk. Note: Details for this property are only available for Workload Identities Premium customers. Events in tenants without this license will be returned hidden. The possible values are: none, hidden,  unknownFutureValue, adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal. Use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: adminConfirmedServicePrincipalCompromised , adminDismissedAllRiskForServicePrincipal.
    #[serde(rename = "riskDetail")]
    pub risk_detail: Option<MicrosoftGraphRiskDetail>,
    ///The date and time that the risk state was last updated. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2021 is 2021-01-01T00:00:00Z. Supports $filter (eq).
    #[serde(rename = "riskLastUpdatedDateTime")]
    pub risk_last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Level of the detected risky workload identity. The possible values are: low, medium, high, hidden, none, unknownFutureValue. Supports $filter (eq).
    #[serde(rename = "riskLevel")]
    pub risk_level: Option<MicrosoftGraphRiskLevel>,
    ///State of the service principal's risk. The possible values are: none, confirmedSafe, remediated, dismissed, atRisk, confirmedCompromised, unknownFutureValue.
    #[serde(rename = "riskState")]
    pub risk_state: Option<MicrosoftGraphRiskState>,
    ///Identifies whether the service principal represents an Application, a ManagedIdentity, or a legacy application (socialIdp). This is set by Microsoft Entra ID internally and is inherited from servicePrincipal.
    #[serde(rename = "servicePrincipalType")]
    pub service_principal_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRiskyUser {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.riskyUser".to_string())]
    pub odata_type: String,
    ///The activity related to user risk level change
    pub history: Option<Vec<MicrosoftGraphRiskyUserHistoryItem>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the user is deleted. Possible values are: true, false.
    #[serde(rename = "isDeleted")]
    pub is_deleted: Option<bool>,
    ///Indicates whether the backend is processing a user's risky state.
    #[serde(rename = "isProcessing")]
    pub is_processing: Option<bool>,
    ///The possible values are none, adminGeneratedTemporaryPassword, userPerformedSecuredPasswordChange, userPerformedSecuredPasswordReset, adminConfirmedSigninSafe, aiConfirmedSigninSafe, userPassedMFADrivenByRiskBasedPolicy, adminDismissedAllRiskForUser, adminConfirmedSigninCompromised, hidden, adminConfirmedUserCompromised, unknownFutureValue, adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal, m365DAdminDismissedDetection, userChangedPasswordOnPremises, adminDismissedRiskForSignIn, adminConfirmedAccountSafe. Use the Prefer: include-unknown-enum-members request header to get the following value or values in this evolvable enum: adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal, m365DAdminDismissedDetection, userChangedPasswordOnPremises, adminDismissedRiskForSignIn, adminConfirmedAccountSafe.
    #[serde(rename = "riskDetail")]
    pub risk_detail: Option<MicrosoftGraphRiskDetail>,
    ///The date and time that the risky user was last updated. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "riskLastUpdatedDateTime")]
    pub risk_last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Level of the detected risky user. Possible values are: low, medium, high, hidden, none, unknownFutureValue.
    #[serde(rename = "riskLevel")]
    pub risk_level: Option<MicrosoftGraphRiskLevel>,
    ///State of the user's risk. Possible values are: none, confirmedSafe, remediated, dismissed, atRisk, confirmedCompromised, unknownFutureValue.
    #[serde(rename = "riskState")]
    pub risk_state: Option<MicrosoftGraphRiskState>,
    ///Risky user display name.
    #[serde(rename = "userDisplayName")]
    pub user_display_name: Option<String>,
    ///Risky user principal name.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRiskyUserHistoryItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.riskyUserHistoryItem".to_string())]
    pub odata_type: String,
    ///The activity related to user risk level change.
    pub activity: Option<MicrosoftGraphRiskUserActivity>,
    ///The activity related to user risk level change
    pub history: Option<Vec<MicrosoftGraphRiskyUserHistoryItem>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The ID of actor that does the operation.
    #[serde(rename = "initiatedBy")]
    pub initiated_by: Option<String>,
    ///Indicates whether the user is deleted. Possible values are: true, false.
    #[serde(rename = "isDeleted")]
    pub is_deleted: Option<bool>,
    ///Indicates whether the backend is processing a user's risky state.
    #[serde(rename = "isProcessing")]
    pub is_processing: Option<bool>,
    ///The possible values are none, adminGeneratedTemporaryPassword, userPerformedSecuredPasswordChange, userPerformedSecuredPasswordReset, adminConfirmedSigninSafe, aiConfirmedSigninSafe, userPassedMFADrivenByRiskBasedPolicy, adminDismissedAllRiskForUser, adminConfirmedSigninCompromised, hidden, adminConfirmedUserCompromised, unknownFutureValue, adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal, m365DAdminDismissedDetection, userChangedPasswordOnPremises, adminDismissedRiskForSignIn, adminConfirmedAccountSafe. Use the Prefer: include-unknown-enum-members request header to get the following value or values in this evolvable enum: adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal, m365DAdminDismissedDetection, userChangedPasswordOnPremises, adminDismissedRiskForSignIn, adminConfirmedAccountSafe.
    #[serde(rename = "riskDetail")]
    pub risk_detail: Option<MicrosoftGraphRiskDetail>,
    ///The date and time that the risky user was last updated. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "riskLastUpdatedDateTime")]
    pub risk_last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Level of the detected risky user. Possible values are: low, medium, high, hidden, none, unknownFutureValue.
    #[serde(rename = "riskLevel")]
    pub risk_level: Option<MicrosoftGraphRiskLevel>,
    ///State of the user's risk. Possible values are: none, confirmedSafe, remediated, dismissed, atRisk, confirmedCompromised, unknownFutureValue.
    #[serde(rename = "riskState")]
    pub risk_state: Option<MicrosoftGraphRiskState>,
    ///Risky user display name.
    #[serde(rename = "userDisplayName")]
    pub user_display_name: Option<String>,
    ///The ID of the user.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///Risky user principal name.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRoleAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.roleAssignment".to_string())]
    pub odata_type: String,
    ///Description of the Role Assignment.
    pub description: Option<String>,
    ///The display or friendly name of the role Assignment.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///List of ids of role scope member security groups.  These are IDs from Azure Active Directory.
    #[serde(rename = "resourceScopes")]
    pub resource_scopes: Option<Vec<Option<String>>>,
    ///Role definition this assignment is part of.
    #[serde(rename = "roleDefinition")]
    pub role_definition: Option<Box<MicrosoftGraphRoleDefinition>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRoleDefinition {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.roleDefinition".to_string())]
    pub odata_type: String,
    ///Description of the Role definition.
    pub description: Option<String>,
    ///Display Name of the Role definition.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Type of Role. Set to True if it is built-in, or set to False if it is a custom role definition.
    #[serde(rename = "isBuiltIn")]
    pub is_built_in: Option<bool>,
    ///List of Role assignments for this role definition.
    #[serde(rename = "roleAssignments")]
    pub role_assignments: Option<Vec<MicrosoftGraphRoleAssignment>>,
    ///List of Role Permissions this role is allowed to perform. These must match the actionName that is defined as part of the rolePermission.
    #[serde(rename = "rolePermissions")]
    pub role_permissions: Option<Vec<MicrosoftGraphRolePermission>>,
}
///Contains the set of ResourceActions determining the allowed and not allowed permissions for each role.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRolePermission {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Resource Actions each containing a set of allowed and not allowed permissions.
    #[serde(rename = "resourceActions")]
    pub resource_actions: Option<Vec<MicrosoftGraphResourceAction>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRoom {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.room".to_string())]
    pub odata_type: String,
    ///The street address of the place.
    pub address: Option<MicrosoftGraphPhysicalAddress>,
    ///Specifies the name of the audio device in the room.
    #[serde(rename = "audioDeviceName")]
    pub audio_device_name: Option<String>,
    ///Type of room. Possible values are standard, and reserved.
    #[serde(rename = "bookingType")]
    pub booking_type: Option<MicrosoftGraphBookingType>,
    ///Specifies the building name or building number that the room is in.
    pub building: Option<String>,
    ///Specifies the capacity of the room.
    pub capacity: Option<f64>,
    ///Specifies the name of the display device in the room.
    #[serde(rename = "displayDeviceName")]
    pub display_device_name: Option<String>,
    ///The name associated with the place.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Email address of the room.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<String>,
    ///Specifies a descriptive label for the floor, for example, P.
    #[serde(rename = "floorLabel")]
    pub floor_label: Option<String>,
    ///Specifies the floor number that the room is on.
    #[serde(rename = "floorNumber")]
    pub floor_number: Option<f64>,
    ///Specifies the place location in latitude, longitude, and (optionally) altitude coordinates.
    #[serde(rename = "geoCoordinates")]
    pub geo_coordinates: Option<MicrosoftGraphOutlookGeoCoordinates>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the room is wheelchair accessible.
    #[serde(rename = "isWheelChairAccessible")]
    pub is_wheel_chair_accessible: Option<bool>,
    ///Specifies a descriptive label for the room, for example, a number or name.
    pub label: Option<String>,
    ///Specifies a nickname for the room, for example, 'conf room'.
    pub nickname: Option<String>,
    ///The phone number of the place.
    pub phone: Option<String>,
    ///Specifies other features of the room, for example, details like the type of view or furniture type.
    pub tags: Option<Vec<Option<String>>>,
    ///Specifies the name of the video device in the room.
    #[serde(rename = "videoDeviceName")]
    pub video_device_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRoomList {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.roomList".to_string())]
    pub odata_type: String,
    ///The street address of the place.
    pub address: Option<MicrosoftGraphPhysicalAddress>,
    ///The name associated with the place.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The email address of the room list.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<String>,
    ///Specifies the place location in latitude, longitude, and (optionally) altitude coordinates.
    #[serde(rename = "geoCoordinates")]
    pub geo_coordinates: Option<MicrosoftGraphOutlookGeoCoordinates>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The phone number of the place.
    pub phone: Option<String>,
    pub rooms: Option<Vec<MicrosoftGraphRoom>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRoot {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRotateBitLockerKeysDeviceActionResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.rotateBitLockerKeysDeviceActionResult".to_string())]
    pub odata_type: String,
    ///Action name
    #[serde(rename = "actionName")]
    pub action_name: Option<String>,
    ///State of the action on the device
    #[serde(rename = "actionState")]
    pub action_state: Option<MicrosoftGraphActionState>,
    ///RotateBitLockerKeys action error code
    #[serde(rename = "errorCode")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_code: Option<f64>,
    ///Time the action state was last updated
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Time the action was initiated
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRoutingMode {
    #[serde(rename = "oneToOne")]
    #[default]
    OneToOne,
    #[serde(rename = "multicast")]
    Multicast,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRoutingType {
    #[serde(rename = "forwarded")]
    #[default]
    Forwarded,
    #[serde(rename = "lookup")]
    Lookup,
    #[serde(rename = "selfFork")]
    SelfFork,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRubricCriterion {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The description of this criterion.
    pub description: Option<MicrosoftGraphEducationItemBody>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRubricLevel {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The description of this rubric level.
    pub description: Option<MicrosoftGraphEducationItemBody>,
    ///The name of this rubric level.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Null if this is a no-points rubric; educationAssignmentPointsGradeType if it's a points rubric.
    pub grading: Option<MicrosoftGraphEducationAssignmentGradeType>,
    ///The ID of this resource.
    #[serde(rename = "levelId")]
    pub level_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRubricQuality {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The collection of criteria for this rubric quality.
    pub criteria: Option<Vec<MicrosoftGraphRubricCriterion>>,
    ///The description of this rubric quality.
    pub description: Option<MicrosoftGraphEducationItemBody>,
    ///The name of this rubric quality.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The ID of this resource.
    #[serde(rename = "qualityId")]
    pub quality_id: Option<String>,
    ///If present, a numerical weight for this quality.  Weights must add up to 100.
    pub weight: Option<MicrosoftGraphRubricQualityWeight>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRubricQualityFeedbackModel {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specific feedback for one quality of this rubric.
    pub feedback: Option<MicrosoftGraphEducationItemBody>,
    ///The ID of the rubricQuality that this feedback is related to.
    #[serde(rename = "qualityId")]
    pub quality_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphRubricQualitySelectedColumnModel {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///ID of the selected level for this quality.
    #[serde(rename = "columnId")]
    pub column_id: Option<String>,
    ///ID of the associated quality.
    #[serde(rename = "qualityId")]
    pub quality_id: Option<String>,
}
///If present, a numerical weight for this quality.  Weights must add up to 100.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRubricQualityWeight {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates the type of execution context the app runs in.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphRunAsAccountType {
    #[serde(rename = "system")]
    #[default]
    System,
    #[serde(rename = "user")]
    User,
}
///Specifies what level of safe search (filtering adult content) is required
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSafeSearchFilterType {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "strict")]
    Strict,
    #[serde(rename = "moderate")]
    Moderate,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSamlOrWsFedExternalDomainFederation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.samlOrWsFedExternalDomainFederation".to_string())]
    pub odata_type: String,
    ///The display name of the identity provider.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Collection of domain names of the external organizations that the tenant is federating with. Supports $filter (eq).
    pub domains: Option<Vec<MicrosoftGraphExternalDomainName>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Issuer URI of the federation server.
    #[serde(rename = "issuerUri")]
    pub issuer_uri: Option<String>,
    ///URI of the metadata exchange endpoint used for authentication from rich client applications.
    #[serde(rename = "metadataExchangeUri")]
    pub metadata_exchange_uri: Option<String>,
    ///URI that web-based clients are directed to when signing in to Microsoft Entra services.
    #[serde(rename = "passiveSignInUri")]
    pub passive_sign_in_uri: Option<String>,
    ///Preferred authentication protocol. The possible values are: wsFed, saml, unknownFutureValue.
    #[serde(rename = "preferredAuthenticationProtocol")]
    pub preferred_authentication_protocol: Option<MicrosoftGraphAuthenticationProtocol>,
    ///Current certificate used to sign tokens passed to the Microsoft identity platform. The certificate is formatted as a Base64 encoded string of the public portion of the federated IdP's token signing certificate and must be compatible with the X509Certificate2 class.   This property is used in the following scenarios:  if a rollover is required outside of the autorollover update a new federation service is being set up  if the new token signing certificate isn't present in the federation properties after the federation service certificate has been updated.   Microsoft Entra ID updates certificates via an autorollover process in which it attempts to retrieve a new certificate from the federation service metadata, 30 days before expiry of the current certificate. If a new certificate isn't available, Microsoft Entra ID monitors the metadata daily and will update the federation settings for the domain when a new certificate is available.
    #[serde(rename = "signingCertificate")]
    pub signing_certificate: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSamlOrWsFedProvider {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.samlOrWsFedProvider".to_string())]
    pub odata_type: String,
    ///The display name of the identity provider.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Issuer URI of the federation server.
    #[serde(rename = "issuerUri")]
    pub issuer_uri: Option<String>,
    ///URI of the metadata exchange endpoint used for authentication from rich client applications.
    #[serde(rename = "metadataExchangeUri")]
    pub metadata_exchange_uri: Option<String>,
    ///URI that web-based clients are directed to when signing in to Microsoft Entra services.
    #[serde(rename = "passiveSignInUri")]
    pub passive_sign_in_uri: Option<String>,
    ///Preferred authentication protocol. The possible values are: wsFed, saml, unknownFutureValue.
    #[serde(rename = "preferredAuthenticationProtocol")]
    pub preferred_authentication_protocol: Option<MicrosoftGraphAuthenticationProtocol>,
    ///Current certificate used to sign tokens passed to the Microsoft identity platform. The certificate is formatted as a Base64 encoded string of the public portion of the federated IdP's token signing certificate and must be compatible with the X509Certificate2 class.   This property is used in the following scenarios:  if a rollover is required outside of the autorollover update a new federation service is being set up  if the new token signing certificate isn't present in the federation properties after the federation service certificate has been updated.   Microsoft Entra ID updates certificates via an autorollover process in which it attempts to retrieve a new certificate from the federation service metadata, 30 days before expiry of the current certificate. If a new certificate isn't available, Microsoft Entra ID monitors the metadata daily and will update the federation settings for the domain when a new certificate is available.
    #[serde(rename = "signingCertificate")]
    pub signing_certificate: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSamlSingleSignOnSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The relative URI the service provider would redirect to after completion of the single sign-on flow.
    #[serde(rename = "relayState")]
    pub relay_state: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSchedule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.schedule".to_string())]
    pub odata_type: String,
    ///The day notes in the schedule.
    #[serde(rename = "dayNotes")]
    pub day_notes: Option<Vec<MicrosoftGraphDayNote>>,
    ///Indicates whether the schedule is enabled for the team. Required.
    pub enabled: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether copied shifts include activities from the original shift.
    #[serde(rename = "isActivitiesIncludedWhenCopyingShiftsEnabled")]
    pub is_activities_included_when_copying_shifts_enabled: Option<bool>,
    ///The offer requests for shifts in the schedule.
    #[serde(rename = "offerShiftRequests")]
    pub offer_shift_requests: Option<Vec<MicrosoftGraphOfferShiftRequest>>,
    ///Indicates whether offer shift requests are enabled for the schedule.
    #[serde(rename = "offerShiftRequestsEnabled")]
    pub offer_shift_requests_enabled: Option<bool>,
    ///The open shift requests in the schedule.
    #[serde(rename = "openShiftChangeRequests")]
    pub open_shift_change_requests: Option<Vec<MicrosoftGraphOpenShiftChangeRequest>>,
    ///The set of open shifts in a scheduling group in the schedule.
    #[serde(rename = "openShifts")]
    pub open_shifts: Option<Vec<MicrosoftGraphOpenShift>>,
    ///Indicates whether open shifts are enabled for the schedule.
    #[serde(rename = "openShiftsEnabled")]
    pub open_shifts_enabled: Option<bool>,
    ///The status of the schedule provisioning. The possible values are notStarted, running, completed, failed.
    #[serde(rename = "provisionStatus")]
    pub provision_status: Option<MicrosoftGraphOperationStatus>,
    ///Additional information about why schedule provisioning failed.
    #[serde(rename = "provisionStatusCode")]
    pub provision_status_code: Option<String>,
    ///The logical grouping of users in the schedule (usually by role).
    #[serde(rename = "schedulingGroups")]
    pub scheduling_groups: Option<Vec<MicrosoftGraphSchedulingGroup>>,
    ///The shifts in the schedule.
    pub shifts: Option<Vec<MicrosoftGraphShift>>,
    ///Indicates the start day of the week. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday.
    #[serde(rename = "startDayOfWeek")]
    pub start_day_of_week: Option<MicrosoftGraphDayOfWeek>,
    ///The swap requests for shifts in the schedule.
    #[serde(rename = "swapShiftsChangeRequests")]
    pub swap_shifts_change_requests: Option<Vec<MicrosoftGraphSwapShiftsChangeRequest>>,
    ///Indicates whether swap shifts requests are enabled for the schedule.
    #[serde(rename = "swapShiftsRequestsEnabled")]
    pub swap_shifts_requests_enabled: Option<bool>,
    ///The time cards in the schedule.
    #[serde(rename = "timeCards")]
    pub time_cards: Option<Vec<MicrosoftGraphTimeCard>>,
    ///Indicates whether time clock is enabled for the schedule.
    #[serde(rename = "timeClockEnabled")]
    pub time_clock_enabled: Option<bool>,
    ///The time clock location settings for this schedule.
    #[serde(rename = "timeClockSettings")]
    pub time_clock_settings: Option<MicrosoftGraphTimeClockSettings>,
    ///The set of reasons for a time off in the schedule.
    #[serde(rename = "timeOffReasons")]
    pub time_off_reasons: Option<Vec<MicrosoftGraphTimeOffReason>>,
    ///The time off requests in the schedule.
    #[serde(rename = "timeOffRequests")]
    pub time_off_requests: Option<Vec<MicrosoftGraphTimeOffRequest>>,
    ///Indicates whether time off requests are enabled for the schedule.
    #[serde(rename = "timeOffRequestsEnabled")]
    pub time_off_requests_enabled: Option<bool>,
    ///Indicates the time zone of the schedule team using tz database format. Required.
    #[serde(rename = "timeZone")]
    pub time_zone: Option<String>,
    ///The instances of times off in the schedule.
    #[serde(rename = "timesOff")]
    pub times_off: Option<Vec<MicrosoftGraphTimeOff>>,
    ///The IDs for the workforce integrations associated with this schedule.
    #[serde(rename = "workforceIntegrationIds")]
    pub workforce_integration_ids: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphScheduleChangeRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.scheduleChangeRequest".to_string())]
    pub odata_type: String,
    ///Indicates who the request is assigned to. Possible values are: sender, recipient, manager, system, unknownFutureValue.
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<MicrosoftGraphScheduleChangeRequestActor>,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when the manager approved or declined the scheduleChangeRequest. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "managerActionDateTime")]
    pub manager_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the manager regarding the scheduleChangeRequest. Optional.
    #[serde(rename = "managerActionMessage")]
    pub manager_action_message: Option<String>,
    ///The user ID of the manager who approved or declined the scheduleChangeRequest.
    #[serde(rename = "managerUserId")]
    pub manager_user_id: Option<String>,
    ///The date and time when the sender sent the scheduleChangeRequest. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "senderDateTime")]
    pub sender_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the sender of the scheduleChangeRequest. Optional.
    #[serde(rename = "senderMessage")]
    pub sender_message: Option<String>,
    ///The user ID of the sender of the scheduleChangeRequest.
    #[serde(rename = "senderUserId")]
    pub sender_user_id: Option<String>,
    ///The state of the scheduleChangeRequest. Possible values are: pending, approved, declined, unknownFutureValue.
    pub state: Option<MicrosoftGraphScheduleChangeState>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphScheduleChangeRequestActor {
    #[serde(rename = "sender")]
    #[default]
    Sender,
    #[serde(rename = "recipient")]
    Recipient,
    #[serde(rename = "manager")]
    Manager,
    #[serde(rename = "system")]
    System,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphScheduleChangeState {
    #[serde(rename = "pending")]
    #[default]
    Pending,
    #[serde(rename = "approved")]
    Approved,
    #[serde(rename = "declined")]
    Declined,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
discriminated_enum! {
    pub enum MicrosoftGraphScheduleEntity { discriminator : "@odata.type", variants :
    [("#microsoft.graph.openShiftItem", MicrosoftGraphOpenShiftItem(Box <
    MicrosoftGraphOpenShiftItem >)), ("#microsoft.graph.shiftItem",
    MicrosoftGraphShiftItem(Box < MicrosoftGraphShiftItem >)),
    ("#microsoft.graph.timeOffItem", MicrosoftGraphTimeOffItem(Box <
    MicrosoftGraphTimeOffItem >))], fallback : ScheduleEntity(Box <
    MicrosoftGraphScheduleEntityBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphScheduleEntityBase {
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub theme: Option<MicrosoftGraphScheduleEntityTheme>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphScheduleEntityTheme {
    #[serde(rename = "white")]
    #[default]
    White,
    #[serde(rename = "blue")]
    Blue,
    #[serde(rename = "green")]
    Green,
    #[serde(rename = "purple")]
    Purple,
    #[serde(rename = "pink")]
    Pink,
    #[serde(rename = "yellow")]
    Yellow,
    #[serde(rename = "gray")]
    Gray,
    #[serde(rename = "darkBlue")]
    DarkBlue,
    #[serde(rename = "darkGreen")]
    DarkGreen,
    #[serde(rename = "darkPurple")]
    DarkPurple,
    #[serde(rename = "darkPink")]
    DarkPink,
    #[serde(rename = "darkYellow")]
    DarkYellow,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphScheduleRequestActions {
    #[serde(rename = "adminAssign")]
    #[default]
    AdminAssign,
    #[serde(rename = "adminUpdate")]
    AdminUpdate,
    #[serde(rename = "adminRemove")]
    AdminRemove,
    #[serde(rename = "selfActivate")]
    SelfActivate,
    #[serde(rename = "selfDeactivate")]
    SelfDeactivate,
    #[serde(rename = "adminExtend")]
    AdminExtend,
    #[serde(rename = "adminRenew")]
    AdminRenew,
    #[serde(rename = "selfExtend")]
    SelfExtend,
    #[serde(rename = "selfRenew")]
    SelfRenew,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSchedulingGroup {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.schedulingGroup".to_string())]
    pub odata_type: String,
    ///The code for the schedulingGroup to represent an external identifier. This field must be unique within the team in Microsoft Teams and uses an alphanumeric format, with a maximum of 100 characters.
    pub code: Option<String>,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The display name for the schedulingGroup. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the schedulingGroup can be used when creating new entities or updating existing ones. Required.
    #[serde(rename = "isActive")]
    pub is_active: Option<bool>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The list of user IDs that are a member of the schedulingGroup. Required.
    #[serde(rename = "userIds")]
    pub user_ids: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSchemaExtension {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.schemaExtension".to_string())]
    pub odata_type: String,
    ///Description for the schema extension.
    pub description: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The appId of the application that is the owner of the schema extension. The owner of the schema definition must be explicitly specified during the Create and Update operations, or it will be implied and auto-assigned by Microsoft Entra ID as follows: In delegated access: The signed-in user must be the owner of the app that calls Microsoft Graph to create the schema extension definition.  If the signed-in user isn't the owner of the calling app, they must explicitly specify the owner property, and assign it the appId of an app that they own. In app-only access:  The owner property isn't required in the request body. Instead, the calling app is assigned ownership of the schema extension. So, for example, if creating a new schema extension definition using Graph Explorer, you must supply the owner property. Once set, this property is read-only and cannot be changed. Supports $filter (eq).
    pub owner: Option<String>,
    ///The collection of property names and types that make up the schema extension definition.
    pub properties: Option<Vec<MicrosoftGraphExtensionSchemaProperty>>,
    ///The lifecycle state of the schema extension. Possible states are InDevelopment, Available, and Deprecated. Automatically set to InDevelopment on creation. For more information about the possible state transitions and behaviors, see Schema extensions lifecycle. Supports $filter (eq).
    pub status: Option<String>,
    ///Set of Microsoft Graph types (that can support extensions) that the schema extension can be applied to. Select from administrativeUnit, contact, device, event, group, message, organization, post, todoTask, todoTaskList, or user.
    #[serde(rename = "targetTypes")]
    pub target_types: Option<Vec<String>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphScopeOperatorMultiValuedComparisonType {
    #[serde(rename = "All")]
    #[default]
    All,
    #[serde(rename = "Any")]
    Any,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphScopeOperatorType {
    #[serde(rename = "Binary")]
    #[default]
    Binary,
    #[serde(rename = "Unary")]
    Unary,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphScopedRoleMembership {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.scopedRoleMembership".to_string())]
    pub odata_type: String,
    ///Unique identifier for the administrative unit that the directory role is scoped to
    #[serde(rename = "administrativeUnitId")]
    pub administrative_unit_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Unique identifier for the directory role that the member is in.
    #[serde(rename = "roleId")]
    pub role_id: Option<String>,
    #[serde(rename = "roleMemberInfo")]
    pub role_member_info: Option<MicrosoftGraphIdentity>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphScoredEmailAddress {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The email address.
    pub address: Option<String>,
    #[serde(rename = "itemId")]
    pub item_id: Option<String>,
    ///The relevance score of the email address. A relevance score is used as a sort key, in relation to the other returned results. A higher relevance score value corresponds to a more relevant result. Relevance is determined by the user’s communication and collaboration patterns and business relationships.
    #[serde(rename = "relevanceScore")]
    pub relevance_score: Option<MicrosoftGraphScoredEmailAddressRelevanceScore>,
    #[serde(rename = "selectionLikelihood")]
    pub selection_likelihood: Option<MicrosoftGraphSelectionLikelihoodInfo>,
}
///The relevance score of the email address. A relevance score is used as a sort key, in relation to the other returned results. A higher relevance score value corresponds to a more relevant result. Relevance is determined by the user’s communication and collaboration patterns and business relationships.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphScoredEmailAddressRelevanceScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSearchAcronym {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.search.acronym".to_string())]
    pub odata_type: String,
    ///The search answer description that is shown on the search results page.
    pub description: Option<String>,
    ///The search answer name that is displayed in search results.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Details of the user who created or last modified the search answer. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphSearchIdentitySet>,
    ///Date and time when the search answer was created or last edited. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///What the acronym stands for.
    #[serde(rename = "standsFor")]
    pub stands_for: Option<String>,
    pub state: Option<MicrosoftGraphSearchAnswerState>,
    ///The URL link for the search answer. When users select this search answer from the search results, they are directed to the specified URL.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSearchAnswerKeyword {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A collection of keywords used to trigger the search answer.
    pub keywords: Option<Vec<Option<String>>>,
    ///If true, indicates that the search term contains similar words to the keywords that should trigger the search answer.
    #[serde(rename = "matchSimilarKeywords")]
    pub match_similar_keywords: Option<bool>,
    ///Unique keywords that guarantee the search answer is triggered.
    #[serde(rename = "reservedKeywords")]
    pub reserved_keywords: Option<Vec<Option<String>>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSearchAnswerState {
    #[serde(rename = "published")]
    #[default]
    Published,
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "excluded")]
    Excluded,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSearchAnswerVariant {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The answer variation description that is shown on the search results page.
    pub description: Option<String>,
    ///The answer variation name that is displayed in search results.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The country or region that can view this answer variation.
    #[serde(rename = "languageTag")]
    pub language_tag: Option<String>,
    ///The device or operating system that can view this answer variation. Possible values are: android, androidForWork, ios, macOS, windowsPhone81, windowsPhone81AndLater, windows10AndLater, androidWorkProfile, unknown, androidASOP, androidMobileApplicationManagement, iOSMobileApplicationManagement, unknownFutureValue.
    pub platform: Option<MicrosoftGraphDevicePlatformType>,
    ///The URL link for the answer variation. When users select this answer variation from the search results, they're directed to the specified URL.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSearchBookmark {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.search.bookmark".to_string())]
    pub odata_type: String,
    ///Date and time when the bookmark stops appearing as a search result. Set as null for always available. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "availabilityEndDateTime")]
    pub availability_end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time when the bookmark starts to appear as a search result. Set as null for always available. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "availabilityStartDateTime")]
    pub availability_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Categories commonly used to describe this bookmark. For example, IT and HR.
    pub categories: Option<Vec<Option<String>>>,
    ///The search answer description that is shown on the search results page.
    pub description: Option<String>,
    ///The search answer name that is displayed in search results.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The list of security groups that are able to view this bookmark.
    #[serde(rename = "groupIds")]
    pub group_ids: Option<Vec<Option<String>>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///True if this bookmark was suggested to the admin, by a user, or was mined and suggested by Microsoft. Read-only.
    #[serde(rename = "isSuggested")]
    pub is_suggested: Option<bool>,
    ///Keywords that trigger this bookmark to appear in search results.
    pub keywords: Option<MicrosoftGraphSearchAnswerKeyword>,
    ///A list of geographically specific language names in which this bookmark can be viewed. Each language tag value follows the pattern {language}-{region}. For example, en-us is English as used in the United States. For the list of possible values, see Supported language tags.
    #[serde(rename = "languageTags")]
    pub language_tags: Option<Vec<Option<String>>>,
    ///Details of the user who created or last modified the search answer. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphSearchIdentitySet>,
    ///Date and time when the search answer was created or last edited. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///List of devices and operating systems that are able to view this bookmark. Possible values are: android, androidForWork, ios, macOS, windowsPhone81, windowsPhone81AndLater, windows10AndLater, androidWorkProfile, unknown, androidASOP, androidMobileApplicationManagement, iOSMobileApplicationManagement, unknownFutureValue.
    pub platforms: Option<Vec<MicrosoftGraphDevicePlatformType>>,
    ///List of Power Apps associated with this bookmark. If users add existing Power Apps to a bookmark, they can complete tasks directly on the search results page, such as entering vacation time or reporting expenses.
    #[serde(rename = "powerAppIds")]
    pub power_app_ids: Option<Vec<Option<String>>>,
    pub state: Option<MicrosoftGraphSearchAnswerState>,
    ///Variations of a bookmark for different countries/regions or devices. Use when you need to show different content to users based on their device, country/region, or both. The date and group settings apply to all variations.
    #[serde(rename = "targetedVariations")]
    pub targeted_variations: Option<Vec<MicrosoftGraphSearchAnswerVariant>>,
    ///The URL link for the search answer. When users select this search answer from the search results, they are directed to the specified URL.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSearchEntity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.searchEntity".to_string())]
    pub odata_type: String,
    ///Administrative answer in Microsoft Search results to define common acronyms in an organization.
    pub acronyms: Option<Vec<MicrosoftGraphSearchAcronym>>,
    ///Administrative answer in Microsoft Search results for common search queries in an organization.
    pub bookmarks: Option<Vec<MicrosoftGraphSearchBookmark>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Administrative answer in Microsoft Search results that provide answers for specific search keywords in an organization.
    pub qnas: Option<Vec<MicrosoftGraphSearchQna>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSearchIdentity {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSearchIdentitySet {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub application: Option<MicrosoftGraphSearchIdentity>,
    pub device: Option<MicrosoftGraphSearchIdentity>,
    pub user: Option<MicrosoftGraphSearchIdentity>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSearchQna {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.search.qna".to_string())]
    pub odata_type: String,
    ///Date and time when the QnA stops appearing as a search result. Set as null for always available. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "availabilityEndDateTime")]
    pub availability_end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time when the QnA starts to appear as a search result. Set as null for always available. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "availabilityStartDateTime")]
    pub availability_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The search answer description that is shown on the search results page.
    pub description: Option<String>,
    ///The search answer name that is displayed in search results.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The list of security groups that are able to view this QnA.
    #[serde(rename = "groupIds")]
    pub group_ids: Option<Vec<Option<String>>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///True if a user or Microsoft suggested this QnA to the admin. Read-only.
    #[serde(rename = "isSuggested")]
    pub is_suggested: Option<bool>,
    ///Keywords that trigger this QnA to appear in search results.
    pub keywords: Option<MicrosoftGraphSearchAnswerKeyword>,
    ///A list of geographically specific language names in which this QnA can be viewed. Each language tag value follows the pattern {language}-{region}. For example, en-us is English as used in the United States. For the list of possible values, see Supported language tags.
    #[serde(rename = "languageTags")]
    pub language_tags: Option<Vec<Option<String>>>,
    ///Details of the user who created or last modified the search answer. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphSearchIdentitySet>,
    ///Date and time when the search answer was created or last edited. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///List of devices and operating systems that are able to view this QnA. Possible values are: android, androidForWork, ios, macOS, windowsPhone81, windowsPhone81AndLater, windows10AndLater, androidWorkProfile, unknown, androidASOP, androidMobileApplicationManagement, iOSMobileApplicationManagement, unknownFutureValue.
    pub platforms: Option<Vec<MicrosoftGraphDevicePlatformType>>,
    pub state: Option<MicrosoftGraphSearchAnswerState>,
    ///Variations of a QnA for different countries/regions or devices. Use when you need to show different content to users based on their device, country/region, or both. The date and group settings apply to all variations.
    #[serde(rename = "targetedVariations")]
    pub targeted_variations: Option<Vec<MicrosoftGraphSearchAnswerVariant>>,
    ///The URL link for the search answer. When users select this search answer from the search results, they are directed to the specified URL.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSearchResult {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A callback URL that can be used to record telemetry information. The application should issue a GET on this URL if the user interacts with this item to improve the quality of results.
    #[serde(rename = "onClickTelemetryUrl")]
    pub on_click_telemetry_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSearchSearchAnswer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.search.searchAnswer".to_string())]
    pub odata_type: String,
    ///The search answer description that is shown on the search results page.
    pub description: Option<String>,
    ///The search answer name that is displayed in search results.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Details of the user who created or last modified the search answer. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphSearchIdentitySet>,
    ///Date and time when the search answer was created or last edited. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The URL link for the search answer. When users select this search answer from the search results, they are directed to the specified URL.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSectionEmphasisType {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "soft")]
    Soft,
    #[serde(rename = "strong")]
    Strong,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSectionGroup {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sectionGroup".to_string())]
    pub odata_type: String,
    ///Identity of the user, device, and application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the notebook.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user, device, and application that created the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The notebook that contains the section group. Read-only.
    #[serde(rename = "parentNotebook")]
    pub parent_notebook: Option<Box<MicrosoftGraphNotebook>>,
    ///The section group that contains the section group. Read-only.
    #[serde(rename = "parentSectionGroup")]
    pub parent_section_group: Option<Box<MicrosoftGraphSectionGroup>>,
    ///The section groups in the section. Read-only. Nullable.
    #[serde(rename = "sectionGroups")]
    pub section_groups: Option<Vec<MicrosoftGraphSectionGroup>>,
    ///The URL for the sectionGroups navigation property, which returns all the section groups in the section group. Read-only.
    #[serde(rename = "sectionGroupsUrl")]
    pub section_groups_url: Option<String>,
    ///The sections in the section group. Read-only. Nullable.
    pub sections: Option<Vec<MicrosoftGraphOnenoteSection>>,
    ///The URL for the sections navigation property, which returns all the sections in the section group. Read-only.
    #[serde(rename = "sectionsUrl")]
    pub sections_url: Option<String>,
    ///The endpoint where you can get details about the page. Read-only.
    #[serde(rename = "self")]
    pub self_: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSectionLinks {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Opens the section in the OneNote native client if it's installed.
    #[serde(rename = "oneNoteClientUrl")]
    pub one_note_client_url: Option<MicrosoftGraphExternalLink>,
    ///Opens the section in OneNote on the web.
    #[serde(rename = "oneNoteWebUrl")]
    pub one_note_web_url: Option<MicrosoftGraphExternalLink>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecureScore {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.secureScore".to_string())]
    pub odata_type: String,
    ///Active user count of the given tenant.
    #[serde(rename = "activeUserCount")]
    pub active_user_count: Option<f64>,
    ///Average score by different scopes (for example, average by industry, average by seating) and control category (Identity, Data, Device, Apps, Infrastructure) within the scope.
    #[serde(rename = "averageComparativeScores")]
    pub average_comparative_scores: Option<Vec<MicrosoftGraphAverageComparativeScore>>,
    ///GUID string for tenant ID.
    #[serde(rename = "azureTenantId")]
    pub azure_tenant_id: Option<String>,
    ///Contains tenant scores for a set of controls.
    #[serde(rename = "controlScores")]
    pub control_scores: Option<Vec<MicrosoftGraphControlScore>>,
    ///When the report was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Tenant current attained score on specified date.
    #[serde(rename = "currentScore")]
    pub current_score: Option<MicrosoftGraphSecureScoreCurrentScore>,
    ///Microsoft-provided services for the tenant (for example, Exchange online, Skype, Sharepoint).
    #[serde(rename = "enabledServices")]
    pub enabled_services: Option<Vec<Option<String>>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Licensed user count of the given tenant.
    #[serde(rename = "licensedUserCount")]
    pub licensed_user_count: Option<f64>,
    ///Tenant maximum possible score on specified date.
    #[serde(rename = "maxScore")]
    pub max_score: Option<MicrosoftGraphSecureScoreMaxScore>,
    ///Complex type containing details about the security product/service vendor, provider, and subprovider (for example, vendor=Microsoft; provider=SecureScore). Required.
    #[serde(rename = "vendorInformation")]
    pub vendor_information: Option<MicrosoftGraphSecurityVendorInformation>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecureScoreControlProfile {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.secureScoreControlProfile".to_string())]
    pub odata_type: String,
    ///Control action type (Config, Review, Behavior).
    #[serde(rename = "actionType")]
    pub action_type: Option<String>,
    ///URL to where the control can be actioned.
    #[serde(rename = "actionUrl")]
    pub action_url: Option<String>,
    ///GUID string for tenant ID.
    #[serde(rename = "azureTenantId")]
    pub azure_tenant_id: Option<String>,
    ///The collection of compliance information associated with secure score control. Not implemented. Currently returns null.
    #[serde(rename = "complianceInformation")]
    pub compliance_information: Option<Vec<MicrosoftGraphComplianceInformation>>,
    ///Control action category (Identity, Data, Device, Apps, Infrastructure).
    #[serde(rename = "controlCategory")]
    pub control_category: Option<String>,
    ///Flag to indicate where the tenant has marked a control (ignored, thirdParty, reviewed) (supports update).
    #[serde(rename = "controlStateUpdates")]
    pub control_state_updates: Option<Vec<MicrosoftGraphSecureScoreControlStateUpdate>>,
    ///Flag to indicate if a control is depreciated.
    pub deprecated: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Resource cost of implemmentating control (low, moderate, high).
    #[serde(rename = "implementationCost")]
    pub implementation_cost: Option<String>,
    ///Time at which the control profile entity was last modified. The Timestamp type represents date and time
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///max attainable score for the control.
    #[serde(rename = "maxScore")]
    pub max_score: Option<MicrosoftGraphSecureScoreControlProfileMaxScore>,
    ///Microsoft's stack ranking of control.
    pub rank: Option<f64>,
    ///Description of what the control will help remediate.
    pub remediation: Option<String>,
    ///Description of the impact on users of the remediation.
    #[serde(rename = "remediationImpact")]
    pub remediation_impact: Option<String>,
    ///Service that owns the control (Exchange, Sharepoint, Microsoft Entra ID).
    pub service: Option<String>,
    ///List of threats the control mitigates (accountBreach, dataDeletion, dataExfiltration, dataSpillage, elevationOfPrivilege, maliciousInsider, passwordCracking, phishingOrWhaling, spoofing).
    pub threats: Option<Vec<Option<String>>>,
    ///Control tier (Core, Defense in Depth, Advanced.)
    pub tier: Option<String>,
    ///Title of the control.
    pub title: Option<String>,
    ///User impact of implementing control (low, moderate, high).
    #[serde(rename = "userImpact")]
    pub user_impact: Option<String>,
    ///Complex type containing details about the security product/service vendor, provider, and subprovider (for example, vendor=Microsoft; provider=SecureScore). Required.
    #[serde(rename = "vendorInformation")]
    pub vendor_information: Option<MicrosoftGraphSecurityVendorInformation>,
}
///max attainable score for the control.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecureScoreControlProfileMaxScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecureScoreControlStateUpdate {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Assigns the control to the user who will take the action.
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<String>,
    ///Provides optional comment about the control.
    pub comment: Option<String>,
    ///State of the control, which can be modified via a PATCH command (for example, ignored, thirdParty).
    pub state: Option<String>,
    ///ID of the user who updated tenant state.
    #[serde(rename = "updatedBy")]
    pub updated_by: Option<String>,
    ///Time at which the control state was updated.
    #[serde(rename = "updatedDateTime")]
    pub updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
///Tenant current attained score on specified date.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecureScoreCurrentScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Tenant maximum possible score on specified date.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecureScoreMaxScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecureSignInSessionControl {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.secureSignInSessionControl".to_string())]
    pub odata_type: String,
    ///Specifies whether the session control is enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security".to_string())]
    pub odata_type: String,
    pub alerts: Option<Vec<MicrosoftGraphAlert>>,
    ///A collection of alerts in Microsoft 365 Defender.
    pub alerts_v2: Option<Vec<MicrosoftGraphSecurityAlert>>,
    #[serde(rename = "attackSimulation")]
    pub attack_simulation: Option<MicrosoftGraphAttackSimulationRoot>,
    pub cases: Option<MicrosoftGraphSecurityCasesRoot>,
    #[serde(rename = "dataSecurityAndGovernance")]
    pub data_security_and_governance: Option<
        MicrosoftGraphTenantDataSecurityAndGovernance,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A container for security identities APIs.
    pub identities: Option<MicrosoftGraphSecurityIdentityContainer>,
    ///A collection of incidents in Microsoft 365 Defender, each of which is a set of correlated alerts and associated metadata that reflects the story of an attack.
    pub incidents: Option<Vec<MicrosoftGraphSecurityIncident>>,
    pub labels: Option<MicrosoftGraphSecurityLabelsRoot>,
    #[serde(rename = "secureScoreControlProfiles")]
    pub secure_score_control_profiles: Option<
        Vec<MicrosoftGraphSecureScoreControlProfile>,
    >,
    #[serde(rename = "secureScores")]
    pub secure_scores: Option<Vec<MicrosoftGraphSecureScore>>,
    #[serde(rename = "subjectRightsRequests")]
    pub subject_rights_requests: Option<Vec<MicrosoftGraphSubjectRightsRequest>>,
    #[serde(rename = "threatIntelligence")]
    pub threat_intelligence: Option<MicrosoftGraphSecurityThreatIntelligence>,
    #[serde(rename = "triggerTypes")]
    pub trigger_types: Option<MicrosoftGraphSecurityTriggerTypesRoot>,
    pub triggers: Option<MicrosoftGraphSecurityTriggersRoot>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityActionAfterRetentionPeriod {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "startDispositionReview")]
    StartDispositionReview,
    #[serde(rename = "relabel")]
    Relabel,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityAdditionalDataOptions {
    #[serde(rename = "allVersions")]
    #[default]
    AllVersions,
    #[serde(rename = "linkedFiles")]
    LinkedFiles,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "advancedIndexing")]
    AdvancedIndexing,
    #[serde(rename = "listAttachments")]
    ListAttachments,
    #[serde(rename = "htmlTranscripts")]
    HtmlTranscripts,
    #[serde(rename = "messageConversationExpansion")]
    MessageConversationExpansion,
    #[serde(rename = "locationsWithoutHits")]
    LocationsWithoutHits,
    #[serde(rename = "allItemsInFolder")]
    AllItemsInFolder,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityAdditionalOptions {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "teamsAndYammerConversations")]
    TeamsAndYammerConversations,
    #[serde(rename = "cloudAttachments")]
    CloudAttachments,
    #[serde(rename = "allDocumentVersions")]
    AllDocumentVersions,
    #[serde(rename = "subfolderContents")]
    SubfolderContents,
    #[serde(rename = "listAttachments")]
    ListAttachments,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "htmlTranscripts")]
    HtmlTranscripts,
    #[serde(rename = "advancedIndexing")]
    AdvancedIndexing,
    #[serde(rename = "allItemsInFolder")]
    AllItemsInFolder,
    #[serde(rename = "includeFolderAndPath")]
    IncludeFolderAndPath,
    #[serde(rename = "condensePaths")]
    CondensePaths,
    #[serde(rename = "friendlyName")]
    FriendlyName,
    #[serde(rename = "splitSource")]
    SplitSource,
    #[serde(rename = "includeReport")]
    IncludeReport,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityAlert {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.alert".to_string())]
    pub odata_type: String,
    ///The adversary or activity group that is associated with this alert.
    #[serde(rename = "actorDisplayName")]
    pub actor_display_name: Option<String>,
    ///A collection of other alert properties, including user-defined properties. Any custom details defined in the alert, and any dynamic content in the alert details, are stored here.
    #[serde(rename = "additionalData")]
    pub additional_data: Option<MicrosoftGraphSecurityDictionary>,
    ///The ID of the policy that generated the alert, and populated when there is a specific policy that generated the alert, whether configured by a customer or a built-in policy.
    #[serde(rename = "alertPolicyId")]
    pub alert_policy_id: Option<String>,
    ///URL for the Microsoft 365 Defender portal alert page.
    #[serde(rename = "alertWebUrl")]
    pub alert_web_url: Option<String>,
    ///Owner of the alert, or null if no owner is assigned.
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<String>,
    ///The attack kill-chain category that the alert belongs to. Aligned with the MITRE ATT&CK framework.
    pub category: Option<String>,
    ///Specifies whether the alert represents a true threat. Possible values are: unknown, falsePositive, truePositive, informationalExpectedActivity, unknownFutureValue.
    pub classification: Option<MicrosoftGraphSecurityAlertClassification>,
    ///Array of comments created by the Security Operations (SecOps) team during the alert management process.
    pub comments: Option<Vec<MicrosoftGraphSecurityAlertComment>>,
    ///Time when Microsoft 365 Defender created the alert.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///User defined custom fields with string values.
    #[serde(rename = "customDetails")]
    pub custom_details: Option<MicrosoftGraphSecurityDictionary>,
    ///String value describing each alert.
    pub description: Option<String>,
    ///Detection technology or sensor that identified the notable component or activity. Possible values are: unknown, microsoftDefenderForEndpoint, antivirus, smartScreen, customTi, microsoftDefenderForOffice365, automatedInvestigation, microsoftThreatExperts, customDetection, microsoftDefenderForIdentity, cloudAppSecurity, microsoft365Defender, azureAdIdentityProtection, manual, microsoftDataLossPrevention, appGovernancePolicy, appGovernanceDetection, unknownFutureValue, microsoftDefenderForCloud, microsoftDefenderForIoT, microsoftDefenderForServers, microsoftDefenderForStorage, microsoftDefenderForDNS, microsoftDefenderForDatabases, microsoftDefenderForContainers, microsoftDefenderForNetwork, microsoftDefenderForAppService, microsoftDefenderForKeyVault, microsoftDefenderForResourceManager, microsoftDefenderForApiManagement, microsoftSentinel, nrtAlerts, scheduledAlerts, microsoftDefenderThreatIntelligenceAnalytics, builtInMl, microsoftThreatIntelligence, microsoftDefenderForAIServices, securityCopilot. Use the Prefer: include-unknown-enum-members request header to get the following values in this evolvable enum: microsoftDefenderForCloud, microsoftDefenderForIoT, microsoftDefenderForServers, microsoftDefenderForStorage, microsoftDefenderForDNS, microsoftDefenderForDatabases, microsoftDefenderForContainers, microsoftDefenderForNetwork, microsoftDefenderForAppService, microsoftDefenderForKeyVault, microsoftDefenderForResourceManager, microsoftDefenderForApiManagement, microsoftSentinel, nrtAlerts, scheduledAlerts, microsoftDefenderThreatIntelligenceAnalytics, builtInMl, microsoftThreatIntelligence, microsoftDefenderForAIServices, securityCopilot.
    #[serde(rename = "detectionSource")]
    pub detection_source: Option<MicrosoftGraphSecurityDetectionSource>,
    ///The ID of the detector that triggered the alert.
    #[serde(rename = "detectorId")]
    pub detector_id: Option<String>,
    ///Specifies the result of the investigation, whether the alert represents a true attack and if so, the nature of the attack. Possible values are: unknown, apt, malware, securityPersonnel, securityTesting, unwantedSoftware, other, multiStagedAttack, compromisedAccount, phishing, maliciousUserActivity, notMalicious, notEnoughDataToValidate, confirmedUserActivity, lineOfBusinessApplication, unknownFutureValue.
    pub determination: Option<MicrosoftGraphSecurityAlertDetermination>,
    ///Collection of evidence related to the alert.
    pub evidence: Option<Vec<MicrosoftGraphSecurityAlertEvidence>>,
    ///The earliest activity associated with the alert.
    #[serde(rename = "firstActivityDateTime")]
    pub first_activity_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Unique identifier to represent the incident this alert resource is associated with.
    #[serde(rename = "incidentId")]
    pub incident_id: Option<String>,
    ///URL for the incident page in the Microsoft 365 Defender portal.
    #[serde(rename = "incidentWebUrl")]
    pub incident_web_url: Option<String>,
    ///The oldest activity associated with the alert.
    #[serde(rename = "lastActivityDateTime")]
    pub last_activity_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Time when the alert was last updated at Microsoft 365 Defender.
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The attack techniques, as aligned with the MITRE ATT&CK framework.
    #[serde(rename = "mitreTechniques")]
    pub mitre_techniques: Option<Vec<Option<String>>>,
    ///The name of the product which published this alert.
    #[serde(rename = "productName")]
    pub product_name: Option<String>,
    ///The ID of the alert as it appears in the security provider product that generated the alert.
    #[serde(rename = "providerAlertId")]
    pub provider_alert_id: Option<String>,
    ///Recommended response and remediation actions to take in the event this alert was generated.
    #[serde(rename = "recommendedActions")]
    pub recommended_actions: Option<String>,
    ///Time when the alert was resolved.
    #[serde(rename = "resolvedDateTime")]
    pub resolved_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "serviceSource")]
    pub service_source: Option<MicrosoftGraphSecurityServiceSource>,
    pub severity: Option<MicrosoftGraphSecurityAlertSeverity>,
    pub status: Option<MicrosoftGraphSecurityAlertStatus>,
    ///The system tags associated with the alert.
    #[serde(rename = "systemTags")]
    pub system_tags: Option<Vec<Option<String>>>,
    ///The Microsoft Entra tenant the alert was created in.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    ///The threat associated with this alert.
    #[serde(rename = "threatDisplayName")]
    pub threat_display_name: Option<String>,
    ///Threat family associated with this alert.
    #[serde(rename = "threatFamilyName")]
    pub threat_family_name: Option<String>,
    ///Brief identifying string value describing the alert.
    pub title: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityAlertClassification {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "falsePositive")]
    FalsePositive,
    #[serde(rename = "truePositive")]
    TruePositive,
    #[serde(rename = "informationalExpectedActivity")]
    InformationalExpectedActivity,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityAlertComment {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The comment text.
    pub comment: Option<String>,
    ///The person or app name that submitted the comment.
    #[serde(rename = "createdByDisplayName")]
    pub created_by_display_name: Option<String>,
    ///The time when the comment was submitted.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityAlertDetermination {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "apt")]
    Apt,
    #[serde(rename = "malware")]
    Malware,
    #[serde(rename = "securityPersonnel")]
    SecurityPersonnel,
    #[serde(rename = "securityTesting")]
    SecurityTesting,
    #[serde(rename = "unwantedSoftware")]
    UnwantedSoftware,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "multiStagedAttack")]
    MultiStagedAttack,
    #[serde(rename = "compromisedAccount")]
    CompromisedAccount,
    #[serde(rename = "phishing")]
    Phishing,
    #[serde(rename = "maliciousUserActivity")]
    MaliciousUserActivity,
    #[serde(rename = "notMalicious")]
    NotMalicious,
    #[serde(rename = "notEnoughDataToValidate")]
    NotEnoughDataToValidate,
    #[serde(rename = "confirmedActivity")]
    ConfirmedActivity,
    #[serde(rename = "lineOfBusinessApplication")]
    LineOfBusinessApplication,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
discriminated_enum! {
    pub enum MicrosoftGraphSecurityAlertEvidence { discriminator : "@odata.type",
    variants : [("#microsoft.graph.security.amazonResourceEvidence",
    MicrosoftGraphSecurityAmazonResourceEvidence(Box <
    MicrosoftGraphSecurityAmazonResourceEvidence >)),
    ("#microsoft.graph.security.analyzedMessageEvidence",
    MicrosoftGraphSecurityAnalyzedMessageEvidence(Box <
    MicrosoftGraphSecurityAnalyzedMessageEvidence >)),
    ("#microsoft.graph.security.azureResourceEvidence",
    MicrosoftGraphSecurityAzureResourceEvidence(Box <
    MicrosoftGraphSecurityAzureResourceEvidence >)),
    ("#microsoft.graph.security.blobContainerEvidence",
    MicrosoftGraphSecurityBlobContainerEvidence(Box <
    MicrosoftGraphSecurityBlobContainerEvidence >)),
    ("#microsoft.graph.security.blobEvidence", MicrosoftGraphSecurityBlobEvidence(Box <
    MicrosoftGraphSecurityBlobEvidence >)),
    ("#microsoft.graph.security.cloudApplicationEvidence",
    MicrosoftGraphSecurityCloudApplicationEvidence(Box <
    MicrosoftGraphSecurityCloudApplicationEvidence >)),
    ("#microsoft.graph.security.cloudLogonRequestEvidence",
    MicrosoftGraphSecurityCloudLogonRequestEvidence(Box <
    MicrosoftGraphSecurityCloudLogonRequestEvidence >)),
    ("#microsoft.graph.security.cloudLogonSessionEvidence",
    MicrosoftGraphSecurityCloudLogonSessionEvidence(Box <
    MicrosoftGraphSecurityCloudLogonSessionEvidence >)),
    ("#microsoft.graph.security.containerEvidence",
    MicrosoftGraphSecurityContainerEvidence(Box < MicrosoftGraphSecurityContainerEvidence
    >)), ("#microsoft.graph.security.containerImageEvidence",
    MicrosoftGraphSecurityContainerImageEvidence(Box <
    MicrosoftGraphSecurityContainerImageEvidence >)),
    ("#microsoft.graph.security.containerRegistryEvidence",
    MicrosoftGraphSecurityContainerRegistryEvidence(Box <
    MicrosoftGraphSecurityContainerRegistryEvidence >)),
    ("#microsoft.graph.security.deviceEvidence", MicrosoftGraphSecurityDeviceEvidence(Box
    < MicrosoftGraphSecurityDeviceEvidence >)), ("#microsoft.graph.security.dnsEvidence",
    MicrosoftGraphSecurityDnsEvidence(Box < MicrosoftGraphSecurityDnsEvidence >)),
    ("#microsoft.graph.security.fileEvidence", MicrosoftGraphSecurityFileEvidence(Box <
    MicrosoftGraphSecurityFileEvidence >)),
    ("#microsoft.graph.security.fileHashEvidence",
    MicrosoftGraphSecurityFileHashEvidence(Box < MicrosoftGraphSecurityFileHashEvidence
    >)), ("#microsoft.graph.security.gitHubOrganizationEvidence",
    MicrosoftGraphSecurityGitHubOrganizationEvidence(Box <
    MicrosoftGraphSecurityGitHubOrganizationEvidence >)),
    ("#microsoft.graph.security.gitHubRepoEvidence",
    MicrosoftGraphSecurityGitHubRepoEvidence(Box <
    MicrosoftGraphSecurityGitHubRepoEvidence >)),
    ("#microsoft.graph.security.gitHubUserEvidence",
    MicrosoftGraphSecurityGitHubUserEvidence(Box <
    MicrosoftGraphSecurityGitHubUserEvidence >)),
    ("#microsoft.graph.security.googleCloudResourceEvidence",
    MicrosoftGraphSecurityGoogleCloudResourceEvidence(Box <
    MicrosoftGraphSecurityGoogleCloudResourceEvidence >)),
    ("#microsoft.graph.security.hostLogonSessionEvidence",
    MicrosoftGraphSecurityHostLogonSessionEvidence(Box <
    MicrosoftGraphSecurityHostLogonSessionEvidence >)),
    ("#microsoft.graph.security.ioTDeviceEvidence",
    MicrosoftGraphSecurityIoTdeviceEvidence(Box < MicrosoftGraphSecurityIoTdeviceEvidence
    >)), ("#microsoft.graph.security.ipEvidence", MicrosoftGraphSecurityIpEvidence(Box <
    MicrosoftGraphSecurityIpEvidence >)),
    ("#microsoft.graph.security.kubernetesClusterEvidence",
    MicrosoftGraphSecurityKubernetesClusterEvidence(Box <
    MicrosoftGraphSecurityKubernetesClusterEvidence >)),
    ("#microsoft.graph.security.kubernetesControllerEvidence",
    MicrosoftGraphSecurityKubernetesControllerEvidence(Box <
    MicrosoftGraphSecurityKubernetesControllerEvidence >)),
    ("#microsoft.graph.security.kubernetesNamespaceEvidence",
    MicrosoftGraphSecurityKubernetesNamespaceEvidence(Box <
    MicrosoftGraphSecurityKubernetesNamespaceEvidence >)),
    ("#microsoft.graph.security.kubernetesPodEvidence",
    MicrosoftGraphSecurityKubernetesPodEvidence(Box <
    MicrosoftGraphSecurityKubernetesPodEvidence >)),
    ("#microsoft.graph.security.kubernetesSecretEvidence",
    MicrosoftGraphSecurityKubernetesSecretEvidence(Box <
    MicrosoftGraphSecurityKubernetesSecretEvidence >)),
    ("#microsoft.graph.security.kubernetesServiceAccountEvidence",
    MicrosoftGraphSecurityKubernetesServiceAccountEvidence(Box <
    MicrosoftGraphSecurityKubernetesServiceAccountEvidence >)),
    ("#microsoft.graph.security.kubernetesServiceEvidence",
    MicrosoftGraphSecurityKubernetesServiceEvidence(Box <
    MicrosoftGraphSecurityKubernetesServiceEvidence >)),
    ("#microsoft.graph.security.mailClusterEvidence",
    MicrosoftGraphSecurityMailClusterEvidence(Box <
    MicrosoftGraphSecurityMailClusterEvidence >)),
    ("#microsoft.graph.security.mailboxConfigurationEvidence",
    MicrosoftGraphSecurityMailboxConfigurationEvidence(Box <
    MicrosoftGraphSecurityMailboxConfigurationEvidence >)),
    ("#microsoft.graph.security.mailboxEvidence",
    MicrosoftGraphSecurityMailboxEvidence(Box < MicrosoftGraphSecurityMailboxEvidence
    >)), ("#microsoft.graph.security.malwareEvidence",
    MicrosoftGraphSecurityMalwareEvidence(Box < MicrosoftGraphSecurityMalwareEvidence
    >)), ("#microsoft.graph.security.networkConnectionEvidence",
    MicrosoftGraphSecurityNetworkConnectionEvidence(Box <
    MicrosoftGraphSecurityNetworkConnectionEvidence >)),
    ("#microsoft.graph.security.nicEvidence", MicrosoftGraphSecurityNicEvidence(Box <
    MicrosoftGraphSecurityNicEvidence >)),
    ("#microsoft.graph.security.oauthApplicationEvidence",
    MicrosoftGraphSecurityOauthApplicationEvidence(Box <
    MicrosoftGraphSecurityOauthApplicationEvidence >)),
    ("#microsoft.graph.security.processEvidence",
    MicrosoftGraphSecurityProcessEvidence(Box < MicrosoftGraphSecurityProcessEvidence
    >)), ("#microsoft.graph.security.registryKeyEvidence",
    MicrosoftGraphSecurityRegistryKeyEvidence(Box <
    MicrosoftGraphSecurityRegistryKeyEvidence >)),
    ("#microsoft.graph.security.registryValueEvidence",
    MicrosoftGraphSecurityRegistryValueEvidence(Box <
    MicrosoftGraphSecurityRegistryValueEvidence >)),
    ("#microsoft.graph.security.sasTokenEvidence",
    MicrosoftGraphSecuritySasTokenEvidence(Box < MicrosoftGraphSecuritySasTokenEvidence
    >)), ("#microsoft.graph.security.securityGroupEvidence",
    MicrosoftGraphSecuritySecurityGroupEvidence(Box <
    MicrosoftGraphSecuritySecurityGroupEvidence >)),
    ("#microsoft.graph.security.servicePrincipalEvidence",
    MicrosoftGraphSecurityServicePrincipalEvidence(Box <
    MicrosoftGraphSecurityServicePrincipalEvidence >)),
    ("#microsoft.graph.security.submissionMailEvidence",
    MicrosoftGraphSecuritySubmissionMailEvidence(Box <
    MicrosoftGraphSecuritySubmissionMailEvidence >)),
    ("#microsoft.graph.security.teamsMessageEvidence",
    MicrosoftGraphSecurityTeamsMessageEvidence(Box <
    MicrosoftGraphSecurityTeamsMessageEvidence >)),
    ("#microsoft.graph.security.urlEvidence", MicrosoftGraphSecurityUrlEvidence(Box <
    MicrosoftGraphSecurityUrlEvidence >)), ("#microsoft.graph.security.userEvidence",
    MicrosoftGraphSecurityUserEvidence(Box < MicrosoftGraphSecurityUserEvidence >))],
    fallback : AlertEvidence(Box < MicrosoftGraphSecurityAlertEvidenceBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityAlertEvidenceBase {
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityAlertSeverity {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "informational")]
    Informational,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityAlertStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "new")]
    New,
    #[serde(rename = "inProgress")]
    InProgress,
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityAmazonResourceEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.amazonResourceEvidence".to_string())]
    pub odata_type: String,
    ///The unique identifier for the Amazon account.
    #[serde(rename = "amazonAccountId")]
    pub amazon_account_id: Option<String>,
    ///The Amazon resource identifier (ARN) for the cloud resource.
    #[serde(rename = "amazonResourceId")]
    pub amazon_resource_id: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The name of the resource.
    #[serde(rename = "resourceName")]
    pub resource_name: Option<String>,
    ///The type of the resource.
    #[serde(rename = "resourceType")]
    pub resource_type: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityAnalyzedMessageEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.analyzedMessageEvidence".to_string())]
    pub odata_type: String,
    ///Direction of the email relative to your network. The possible values are: inbound, outbound or intraorg.
    #[serde(rename = "antiSpamDirection")]
    pub anti_spam_direction: Option<String>,
    ///Number of attachments in the email.
    #[serde(rename = "attachmentsCount")]
    pub attachments_count: Option<f64>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Delivery action of the email. The possible values are: delivered, deliveredAsSpam, junked, blocked, or replaced.
    #[serde(rename = "deliveryAction")]
    pub delivery_action: Option<String>,
    ///Location where the email was delivered. The possible values are: inbox, external, junkFolder, quarantine, failed, dropped, deletedFolder or forwarded.
    #[serde(rename = "deliveryLocation")]
    pub delivery_location: Option<String>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///Public-facing identifier for the email that is set by the sending email system.
    #[serde(rename = "internetMessageId")]
    pub internet_message_id: Option<String>,
    ///Detected language of the email content.
    pub language: Option<String>,
    ///Unique identifier for the email, generated by Microsoft 365.
    #[serde(rename = "networkMessageId")]
    pub network_message_id: Option<String>,
    ///The P1 sender.
    #[serde(rename = "p1Sender")]
    pub p1sender: Option<MicrosoftGraphSecurityEmailSender>,
    ///The P2 sender.
    #[serde(rename = "p2Sender")]
    pub p2sender: Option<MicrosoftGraphSecurityEmailSender>,
    ///Date and time when the email was received.
    #[serde(rename = "receivedDateTime")]
    pub received_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Email address of the recipient, or email address of the recipient after distribution list expansion.
    #[serde(rename = "recipientEmailAddress")]
    pub recipient_email_address: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///IP address of the last detected mail server that relayed the message.
    #[serde(rename = "senderIp")]
    pub sender_ip: Option<String>,
    ///Subject of the email.
    pub subject: Option<String>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    ///Collection of methods used to detect malware, phishing, or other threats found in the email.
    #[serde(rename = "threatDetectionMethods")]
    pub threat_detection_methods: Option<Vec<Option<String>>>,
    ///Collection of detection names for malware or other threats found.
    pub threats: Option<Vec<Option<String>>>,
    ///Number of embedded URLs in the email.
    #[serde(rename = "urlCount")]
    pub url_count: Option<f64>,
    ///Collection of the URLs contained in this email.
    pub urls: Option<Vec<Option<String>>>,
    ///Uniform resource name (URN) of the automated investigation where the cluster was identified.
    pub urn: Option<String>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityAntispamTeamsDirection {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "intraorg")]
    Intraorg,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityArticle {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.article".to_string())]
    pub odata_type: String,
    pub body: Option<MicrosoftGraphSecurityFormattedContent>,
    ///The date and time when this article was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///URL of the header image for this article, used for display purposes.
    #[serde(rename = "imageUrl")]
    pub image_url: Option<String>,
    ///Indicators related to this article.
    pub indicators: Option<Vec<MicrosoftGraphSecurityArticleIndicator>>,
    ///Indicates whether this article is currently featured by Microsoft.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The most recent date and time when this article was updated. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub summary: Option<MicrosoftGraphSecurityFormattedContent>,
    ///Tags for this article, communicating keywords, or key concepts.
    pub tags: Option<Vec<Option<String>>>,
    ///The title of this article.
    pub title: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityArticleIndicator {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.articleIndicator".to_string())]
    pub odata_type: String,
    pub artifact: Option<MicrosoftGraphSecurityArtifact>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub source: Option<MicrosoftGraphSecurityIndicatorSource>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityArtifact {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.artifact".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityAuthorityTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.authorityTemplate".to_string())]
    pub odata_type: String,
    ///Represents the user who created the filePlanDescriptorTemplate column.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Represents the date and time in which the filePlanDescriptorTemplate is created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Unique string that defines a filePlanDescriptorTemplate name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityAutonomousSystem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The name of the autonomous system.
    pub name: Option<String>,
    ///The autonomous system number, assigned by IANA.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub number: Option<f64>,
    ///The name of the autonomous system organization.
    pub organization: Option<String>,
    ///A displayable value for these autonomous system details.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityAzureResourceEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.azureResourceEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The unique identifier for the Azure resource.
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
    ///The name of the resource.
    #[serde(rename = "resourceName")]
    pub resource_name: Option<String>,
    ///The type of the resource.
    #[serde(rename = "resourceType")]
    pub resource_type: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityBehaviorDuringRetentionPeriod {
    #[serde(rename = "doNotRetain")]
    #[default]
    DoNotRetain,
    #[serde(rename = "retain")]
    Retain,
    #[serde(rename = "retainAsRecord")]
    RetainAsRecord,
    #[serde(rename = "retainAsRegulatoryRecord")]
    RetainAsRegulatoryRecord,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityBlobContainerEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.blobContainerEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The name of the blob container.
    pub name: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///The storage which the blob container belongs to.
    #[serde(rename = "storageResource")]
    pub storage_resource: Option<MicrosoftGraphSecurityAzureResourceEvidence>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    ///The full URL representation of the blob container.
    pub url: Option<String>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityBlobEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.blobEvidence".to_string())]
    pub odata_type: String,
    ///The container which the blob belongs to.
    #[serde(rename = "blobContainer")]
    pub blob_container: Option<MicrosoftGraphSecurityBlobContainerEvidence>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The Etag associated with this blob.
    pub etag: Option<String>,
    ///The file hashes associated with this blob.
    #[serde(rename = "fileHashes")]
    pub file_hashes: Option<Vec<MicrosoftGraphSecurityFileHash>>,
    ///The name of the blob.
    pub name: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    ///The full URL representation of the blob.
    pub url: Option<String>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityCase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.case".to_string())]
    pub odata_type: String,
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub description: Option<String>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub status: Option<MicrosoftGraphSecurityCaseStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityCaseAction {
    #[serde(rename = "contentExport")]
    #[default]
    ContentExport,
    #[serde(rename = "applyTags")]
    ApplyTags,
    #[serde(rename = "convertToPdf")]
    ConvertToPdf,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "estimateStatistics")]
    EstimateStatistics,
    #[serde(rename = "addToReviewSet")]
    AddToReviewSet,
    #[serde(rename = "holdUpdate")]
    HoldUpdate,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "purgeData")]
    PurgeData,
    #[serde(rename = "exportReport")]
    ExportReport,
    #[serde(rename = "exportResult")]
    ExportResult,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityCaseOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.caseOperation".to_string())]
    pub odata_type: String,
    ///The type of action the operation represents. Possible values are: contentExport,  applyTags, convertToPdf, index, estimateStatistics, addToReviewSet, holdUpdate, unknownFutureValue, purgeData, exportReport, exportResult. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: purgeData, exportReport, exportResult.
    pub action: Option<MicrosoftGraphSecurityCaseAction>,
    ///The date and time the operation was completed.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user that created the operation.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the operation was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The progress of the operation.
    #[serde(rename = "percentProgress")]
    pub percent_progress: Option<f64>,
    ///Contains success and failure-specific result information.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    ///The status of the case operation. Possible values are: notStarted, submissionFailed, running, succeeded, partiallySucceeded, failed.
    pub status: Option<MicrosoftGraphSecurityCaseOperationStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityCaseOperationStatus {
    #[serde(rename = "notStarted")]
    #[default]
    NotStarted,
    #[serde(rename = "submissionFailed")]
    SubmissionFailed,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "partiallySucceeded")]
    PartiallySucceeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityCaseStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "pendingDelete")]
    PendingDelete,
    #[serde(rename = "closing")]
    Closing,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "closedWithError")]
    ClosedWithError,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityCaseType {
    #[serde(rename = "standard")]
    #[default]
    Standard,
    #[serde(rename = "premium")]
    Premium,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityCasesRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.casesRoot".to_string())]
    pub odata_type: String,
    #[serde(rename = "ediscoveryCases")]
    pub ediscovery_cases: Option<Vec<MicrosoftGraphSecurityEdiscoveryCase>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityCategoryTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.categoryTemplate".to_string())]
    pub odata_type: String,
    ///Represents the user who created the filePlanDescriptorTemplate column.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Represents the date and time in which the filePlanDescriptorTemplate is created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Unique string that defines a filePlanDescriptorTemplate name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents all subcategories under a particular category.
    pub subcategories: Option<Vec<MicrosoftGraphSecuritySubcategoryTemplate>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityChildSelectability {
    #[serde(rename = "One")]
    #[default]
    One,
    #[serde(rename = "Many")]
    Many,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityCitationTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.citationTemplate".to_string())]
    pub odata_type: String,
    ///Represents the jurisdiction or agency that published the citation.
    #[serde(rename = "citationJurisdiction")]
    pub citation_jurisdiction: Option<String>,
    ///Represents the URL to the published citation.
    #[serde(rename = "citationUrl")]
    pub citation_url: Option<String>,
    ///Represents the user who created the filePlanDescriptorTemplate column.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Represents the date and time in which the filePlanDescriptorTemplate is created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Unique string that defines a filePlanDescriptorTemplate name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityCloudApplicationEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.cloudApplicationEvidence".to_string())]
    pub odata_type: String,
    ///Unique identifier of the application.
    #[serde(rename = "appId")]
    pub app_id: Option<f64>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///Name of the application.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Identifier of the instance of the Software as a Service (SaaS) application.
    #[serde(rename = "instanceId")]
    pub instance_id: Option<f64>,
    ///Name of the instance of the SaaS application.
    #[serde(rename = "instanceName")]
    pub instance_name: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///The identifier of the SaaS application.
    #[serde(rename = "saasAppId")]
    pub saas_app_id: Option<f64>,
    pub stream: Option<MicrosoftGraphSecurityStream>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityCloudAttachmentVersion {
    #[serde(rename = "latest")]
    #[default]
    Latest,
    #[serde(rename = "recent10")]
    Recent10,
    #[serde(rename = "recent100")]
    Recent100,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityCloudLogonRequestEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.cloudLogonRequestEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The unique identifier for the sign-in request.
    #[serde(rename = "requestId")]
    pub request_id: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityCloudLogonSessionEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.cloudLogonSessionEvidence".to_string())]
    pub odata_type: String,
    ///The account associated with the sign-in session.
    pub account: Option<MicrosoftGraphSecurityUserEvidence>,
    ///The browser that is used for the sign-in, if known.
    pub browser: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The friendly name of the device, if known.
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    ///The operating system that the device is running, if known.
    #[serde(rename = "operatingSystem")]
    pub operating_system: Option<String>,
    ///The previous sign-in time for this account, if known.
    #[serde(rename = "previousLogonDateTime")]
    pub previous_logon_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The authentication protocol that is used in this session, if known.
    pub protocol: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///The session ID for the account reported in the alert.
    #[serde(rename = "sessionId")]
    pub session_id: Option<String>,
    ///The session start time, if known.
    #[serde(rename = "startUtcDateTime")]
    pub start_utc_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    ///The user agent that is used for the sign-in, if known.
    #[serde(rename = "userAgent")]
    pub user_agent: Option<String>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityContainerEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.containerEvidence".to_string())]
    pub odata_type: String,
    ///The list of arguments.
    pub args: Option<Vec<Option<String>>>,
    ///The list of commands.
    pub command: Option<Vec<Option<String>>>,
    ///The container ID.
    #[serde(rename = "containerId")]
    pub container_id: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The image used to run the container.
    pub image: Option<Box<MicrosoftGraphSecurityContainerImageEvidence>>,
    ///The privileged status.
    #[serde(rename = "isPrivileged")]
    pub is_privileged: Option<bool>,
    ///The container name.
    pub name: Option<String>,
    ///The pod this container belongs to.
    pub pod: Option<Box<MicrosoftGraphSecurityKubernetesPodEvidence>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityContainerImageEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.containerImageEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The digest image entity, in case this is a tag image.
    #[serde(rename = "digestImage")]
    pub digest_image: Option<Box<MicrosoftGraphSecurityContainerImageEvidence>>,
    ///The unique identifier for the container image entity.
    #[serde(rename = "imageId")]
    pub image_id: Option<String>,
    ///The container registry for this image.
    pub registry: Option<MicrosoftGraphSecurityContainerRegistryEvidence>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityContainerPortProtocol {
    #[serde(rename = "udp")]
    #[default]
    Udp,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "sctp")]
    Sctp,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityContainerRegistryEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.containerRegistryEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The registry URI.
    pub registry: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityContentFormat {
    #[serde(rename = "text")]
    #[default]
    Text,
    #[serde(rename = "html")]
    Html,
    #[serde(rename = "markdown")]
    Markdown,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityCvssSummary {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The CVSS score about this vulnerability.
    pub score: Option<MicrosoftGraphSecurityCvssSummaryScore>,
    ///The CVSS severity rating for this vulnerability. The possible values are: none, low, medium, high, critical, unknownFutureValue.
    pub severity: Option<MicrosoftGraphSecurityVulnerabilitySeverity>,
    ///The CVSS vector string for this vulnerability.
    #[serde(rename = "vectorString")]
    pub vector_string: Option<String>,
}
///The CVSS score about this vulnerability.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityCvssSummaryScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityDataSet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.dataSet".to_string())]
    pub odata_type: String,
    ///The user who created the data set. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the review set was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the data set.
    pub description: Option<String>,
    ///The name of the data set. The name is unique with a maximum limit of 64 characters.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityDataSource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.dataSource".to_string())]
    pub odata_type: String,
    ///The user who created the dataSource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the dataSource was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The display name of the dataSource and is the name of the SharePoint site.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The hold status of the dataSource.The possible values are: notApplied, applied, applying, removing, partial
    #[serde(rename = "holdStatus")]
    pub hold_status: Option<MicrosoftGraphSecurityDataSourceHoldStatus>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityDataSourceContainer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.dataSourceContainer".to_string())]
    pub odata_type: String,
    ///Created date and time of the dataSourceContainer entity.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of the dataSourceContainer entity.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The hold status of the dataSourceContainer. The possible values are: notApplied, applied, applying, removing, partial
    #[serde(rename = "holdStatus")]
    pub hold_status: Option<MicrosoftGraphSecurityDataSourceHoldStatus>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date and time of the dataSourceContainer.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time that the dataSourceContainer was released from the case.
    #[serde(rename = "releasedDateTime")]
    pub released_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Latest status of the dataSourceContainer. Possible values are: Active, Released.
    pub status: Option<MicrosoftGraphSecurityDataSourceContainerStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityDataSourceContainerStatus {
    #[serde(rename = "active")]
    #[default]
    Active,
    #[serde(rename = "released")]
    Released,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityDataSourceHoldStatus {
    #[serde(rename = "notApplied")]
    #[default]
    NotApplied,
    #[serde(rename = "applied")]
    Applied,
    #[serde(rename = "applying")]
    Applying,
    #[serde(rename = "removing")]
    Removing,
    #[serde(rename = "partial")]
    Partial,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityDataSourceScopes {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "allTenantMailboxes")]
    AllTenantMailboxes,
    #[serde(rename = "allTenantSites")]
    AllTenantSites,
    #[serde(rename = "allCaseCustodians")]
    AllCaseCustodians,
    #[serde(rename = "allCaseNoncustodialDataSources")]
    AllCaseNoncustodialDataSources,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityDefaultRecordBehavior {
    #[serde(rename = "startLocked")]
    #[default]
    StartLocked,
    #[serde(rename = "startUnlocked")]
    StartUnlocked,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityDefenderAvStatus {
    #[serde(rename = "notReporting")]
    #[default]
    NotReporting,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "notUpdated")]
    NotUpdated,
    #[serde(rename = "updated")]
    Updated,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "notSupported")]
    NotSupported,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityDepartmentTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.departmentTemplate".to_string())]
    pub odata_type: String,
    ///Represents the user who created the filePlanDescriptorTemplate column.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Represents the date and time in which the filePlanDescriptorTemplate is created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Unique string that defines a filePlanDescriptorTemplate name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityDeploymentStatus {
    #[serde(rename = "upToDate")]
    #[default]
    UpToDate,
    #[serde(rename = "outdated")]
    Outdated,
    #[serde(rename = "updating")]
    Updating,
    #[serde(rename = "updateFailed")]
    UpdateFailed,
    #[serde(rename = "notConfigured")]
    NotConfigured,
    #[serde(rename = "unreachable")]
    Unreachable,
    #[serde(rename = "disconnected")]
    Disconnected,
    #[serde(rename = "startFailure")]
    StartFailure,
    #[serde(rename = "syncing")]
    Syncing,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityDetectionSource {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "microsoftDefenderForEndpoint")]
    MicrosoftDefenderForEndpoint,
    #[serde(rename = "antivirus")]
    Antivirus,
    #[serde(rename = "smartScreen")]
    SmartScreen,
    #[serde(rename = "customTi")]
    CustomTi,
    #[serde(rename = "microsoftDefenderForOffice365")]
    MicrosoftDefenderForOffice365,
    #[serde(rename = "automatedInvestigation")]
    AutomatedInvestigation,
    #[serde(rename = "microsoftThreatExperts")]
    MicrosoftThreatExperts,
    #[serde(rename = "customDetection")]
    CustomDetection,
    #[serde(rename = "microsoftDefenderForIdentity")]
    MicrosoftDefenderForIdentity,
    #[serde(rename = "cloudAppSecurity")]
    CloudAppSecurity,
    #[serde(rename = "microsoft365Defender")]
    Microsoft365Defender,
    #[serde(rename = "azureAdIdentityProtection")]
    AzureAdIdentityProtection,
    #[serde(rename = "manual")]
    Manual,
    #[serde(rename = "microsoftDataLossPrevention")]
    MicrosoftDataLossPrevention,
    #[serde(rename = "appGovernancePolicy")]
    AppGovernancePolicy,
    #[serde(rename = "appGovernanceDetection")]
    AppGovernanceDetection,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "microsoftDefenderForCloud")]
    MicrosoftDefenderForCloud,
    #[serde(rename = "microsoftDefenderForIoT")]
    MicrosoftDefenderForIoT,
    #[serde(rename = "microsoftDefenderForServers")]
    MicrosoftDefenderForServers,
    #[serde(rename = "microsoftDefenderForStorage")]
    MicrosoftDefenderForStorage,
    #[serde(rename = "microsoftDefenderForDNS")]
    MicrosoftDefenderForDns,
    #[serde(rename = "microsoftDefenderForDatabases")]
    MicrosoftDefenderForDatabases,
    #[serde(rename = "microsoftDefenderForContainers")]
    MicrosoftDefenderForContainers,
    #[serde(rename = "microsoftDefenderForNetwork")]
    MicrosoftDefenderForNetwork,
    #[serde(rename = "microsoftDefenderForAppService")]
    MicrosoftDefenderForAppService,
    #[serde(rename = "microsoftDefenderForKeyVault")]
    MicrosoftDefenderForKeyVault,
    #[serde(rename = "microsoftDefenderForResourceManager")]
    MicrosoftDefenderForResourceManager,
    #[serde(rename = "microsoftDefenderForApiManagement")]
    MicrosoftDefenderForApiManagement,
    #[serde(rename = "nrtAlerts")]
    NrtAlerts,
    #[serde(rename = "scheduledAlerts")]
    ScheduledAlerts,
    #[serde(rename = "microsoftDefenderThreatIntelligenceAnalytics")]
    MicrosoftDefenderThreatIntelligenceAnalytics,
    #[serde(rename = "builtInMl")]
    BuiltInMl,
    #[serde(rename = "microsoftInsiderRiskManagement")]
    MicrosoftInsiderRiskManagement,
    #[serde(rename = "microsoftThreatIntelligence")]
    MicrosoftThreatIntelligence,
    #[serde(rename = "microsoftSentinel")]
    MicrosoftSentinel,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityDetectionStatus {
    #[serde(rename = "detected")]
    #[default]
    Detected,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "prevented")]
    Prevented,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityDeviceEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.deviceEvidence".to_string())]
    pub odata_type: String,
    ///A unique identifier assigned to a device by Microsoft Entra ID when device is Microsoft Entra joined.
    #[serde(rename = "azureAdDeviceId")]
    pub azure_ad_device_id: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///State of the Defender AntiMalware engine. The possible values are: notReporting, disabled, notUpdated, updated, unknown, notSupported, unknownFutureValue.
    #[serde(rename = "defenderAvStatus")]
    pub defender_av_status: Option<MicrosoftGraphSecurityDefenderAvStatus>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The fully qualified domain name (FQDN) for the device.
    #[serde(rename = "deviceDnsName")]
    pub device_dns_name: Option<String>,
    ///The DNS domain that this computer belongs to. A sequence of labels separated by dots.
    #[serde(rename = "dnsDomain")]
    pub dns_domain: Option<String>,
    ///The date and time when the device was first seen.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The health state of the device. The possible values are: active, inactive, impairedCommunication, noSensorData, noSensorDataImpairedCommunication, unknown, unknownFutureValue.
    #[serde(rename = "healthStatus")]
    pub health_status: Option<MicrosoftGraphSecurityDeviceHealthStatus>,
    ///The hostname without the domain suffix.
    #[serde(rename = "hostName")]
    pub host_name: Option<String>,
    ///Ip interfaces of the device during the time of the alert.
    #[serde(rename = "ipInterfaces")]
    pub ip_interfaces: Option<Vec<Option<String>>>,
    #[serde(rename = "lastExternalIpAddress")]
    pub last_external_ip_address: Option<String>,
    #[serde(rename = "lastIpAddress")]
    pub last_ip_address: Option<String>,
    ///Users that were logged on the machine during the time of the alert.
    #[serde(rename = "loggedOnUsers")]
    pub logged_on_users: Option<Vec<MicrosoftGraphSecurityLoggedOnUser>>,
    ///A unique identifier assigned to a device by Microsoft Defender for Endpoint.
    #[serde(rename = "mdeDeviceId")]
    pub mde_device_id: Option<String>,
    ///A logical grouping of computers within a Microsoft Windows network.
    #[serde(rename = "ntDomain")]
    pub nt_domain: Option<String>,
    ///The status of the machine onboarding to Microsoft Defender for Endpoint. The possible values are: insufficientInfo, onboarded, canBeOnboarded, unsupported, unknownFutureValue.
    #[serde(rename = "onboardingStatus")]
    pub onboarding_status: Option<MicrosoftGraphSecurityOnboardingStatus>,
    ///The build version for the operating system the device is running.
    #[serde(rename = "osBuild")]
    pub os_build: Option<f64>,
    ///The operating system platform the device is running.
    #[serde(rename = "osPlatform")]
    pub os_platform: Option<String>,
    ///The ID of the role-based access control (RBAC) device group.
    #[serde(rename = "rbacGroupId")]
    pub rbac_group_id: Option<f64>,
    ///The name of the RBAC device group.
    #[serde(rename = "rbacGroupName")]
    pub rbac_group_name: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///Risk score as evaluated by Microsoft Defender for Endpoint. The possible values are: none, informational, low, medium, high, unknownFutureValue.
    #[serde(rename = "riskScore")]
    pub risk_score: Option<MicrosoftGraphSecurityDeviceRiskScore>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
    ///The version of the operating system platform.
    pub version: Option<String>,
    ///Metadata of the virtual machine (VM) on which Microsoft Defender for Endpoint is running.
    #[serde(rename = "vmMetadata")]
    pub vm_metadata: Option<MicrosoftGraphSecurityVmMetadata>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityDeviceHealthStatus {
    #[serde(rename = "active")]
    #[default]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "impairedCommunication")]
    ImpairedCommunication,
    #[serde(rename = "noSensorData")]
    NoSensorData,
    #[serde(rename = "noSensorDataImpairedCommunication")]
    NoSensorDataImpairedCommunication,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityDeviceRiskScore {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "informational")]
    Informational,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityDictionary {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityDispositionReviewStage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.dispositionReviewStage".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Name representing each stage within a collection.
    pub name: Option<String>,
    ///A collection of reviewers at each stage.
    #[serde(rename = "reviewersEmailAddresses")]
    pub reviewers_email_addresses: Option<Vec<Option<String>>>,
    ///The unique sequence number for each stage of the disposition review.
    #[serde(rename = "stageNumber")]
    pub stage_number: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityDnsEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.dnsEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "dnsServerIp")]
    pub dns_server_ip: Option<MicrosoftGraphSecurityIpEvidence>,
    #[serde(rename = "domainName")]
    pub domain_name: Option<String>,
    #[serde(rename = "hostIpAddress")]
    pub host_ip_address: Option<MicrosoftGraphSecurityIpEvidence>,
    #[serde(rename = "ipAddresses")]
    pub ip_addresses: Option<Vec<MicrosoftGraphSecurityIpEvidence>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityDocumentVersion {
    #[serde(rename = "latest")]
    #[default]
    Latest,
    #[serde(rename = "recent10")]
    Recent10,
    #[serde(rename = "recent100")]
    Recent100,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryAddToReviewSetOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryAddToReviewSetOperation".to_string())]
    pub odata_type: String,
    ///The type of action the operation represents. Possible values are: contentExport,  applyTags, convertToPdf, index, estimateStatistics, addToReviewSet, holdUpdate, unknownFutureValue, purgeData, exportReport, exportResult. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: purgeData, exportReport, exportResult.
    pub action: Option<MicrosoftGraphSecurityCaseAction>,
    ///The options to add items to the review set. Possible values are: allVersions, linkedFiles, unknownFutureValue, advancedIndexing, listAttachments, htmlTranscripts, messageConversationExpansion, locationsWithoutHits, allItemsInFolder. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: advancedIndexing, listAttachments, htmlTranscripts, messageConversationExpansion, locationsWithoutHits, allItemsInFolder.
    #[serde(rename = "additionalDataOptions")]
    pub additional_data_options: Option<MicrosoftGraphSecurityAdditionalDataOptions>,
    ///Specifies the number of most recent versions of cloud attachments to collect. Possible values are: latest, recent10, recent100, all, unknownFutureValue.
    #[serde(rename = "cloudAttachmentVersion")]
    pub cloud_attachment_version: Option<MicrosoftGraphSecurityCloudAttachmentVersion>,
    ///The date and time the operation was completed.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user that created the operation.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the operation was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies the number of most recent versions of SharePoint documents to collect. Possible values are: latest, recent10, recent100, all, unknownFutureValue.
    #[serde(rename = "documentVersion")]
    pub document_version: Option<MicrosoftGraphSecurityDocumentVersion>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The items to include in the review set. Possible values are: searchHits, partiallyIndexed, unknownFutureValue.
    #[serde(rename = "itemsToInclude")]
    pub items_to_include: Option<MicrosoftGraphSecurityItemsToInclude>,
    ///The progress of the operation.
    #[serde(rename = "percentProgress")]
    pub percent_progress: Option<f64>,
    ///Contains the properties for report file metadata, including downloadUrl, fileName, and size.
    #[serde(rename = "reportFileMetadata")]
    pub report_file_metadata: Option<Vec<MicrosoftGraphSecurityReportFileMetadata>>,
    ///Contains success and failure-specific result information.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    ///eDiscovery review set to which items matching source collection query gets added.
    #[serde(rename = "reviewSet")]
    pub review_set: Option<MicrosoftGraphSecurityEdiscoveryReviewSet>,
    ///eDiscovery search that gets added to review set.
    pub search: Option<Box<MicrosoftGraphSecurityEdiscoverySearch>>,
    ///The status of the case operation. Possible values are: notStarted, submissionFailed, running, succeeded, partiallySucceeded, failed.
    pub status: Option<MicrosoftGraphSecurityCaseOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryCase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryCase".to_string())]
    pub odata_type: String,
    ///The user who closed the case.
    #[serde(rename = "closedBy")]
    pub closed_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the case was closed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "closedDateTime")]
    pub closed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Returns a list of case ediscoveryCustodian objects for this case.
    pub custodians: Option<Vec<MicrosoftGraphSecurityEdiscoveryCustodian>>,
    pub description: Option<String>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The external case number for customer reference.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Returns a list of case ediscoveryNoncustodialDataSource objects for this case.
    #[serde(rename = "noncustodialDataSources")]
    pub noncustodial_data_sources: Option<
        Vec<MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource>,
    >,
    ///Returns a list of case caseOperation objects for this case.
    pub operations: Option<Vec<MicrosoftGraphSecurityCaseOperation>>,
    ///Returns a list of eDiscoveryReviewSet objects in the case.
    #[serde(rename = "reviewSets")]
    pub review_sets: Option<Vec<MicrosoftGraphSecurityEdiscoveryReviewSet>>,
    ///Returns a list of eDiscoverySearch objects associated with this case.
    pub searches: Option<Vec<MicrosoftGraphSecurityEdiscoverySearch>>,
    ///Returns a list of eDIscoverySettings objects in the case.
    pub settings: Option<MicrosoftGraphSecurityEdiscoveryCaseSettings>,
    pub status: Option<MicrosoftGraphSecurityCaseStatus>,
    ///Returns a list of ediscoveryReviewTag objects associated to this case.
    pub tags: Option<Vec<MicrosoftGraphSecurityEdiscoveryReviewTag>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryCaseSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryCaseSettings".to_string())]
    pub odata_type: String,
    #[serde(rename = "caseType")]
    pub case_type: Option<MicrosoftGraphSecurityCaseType>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The OCR (Optical Character Recognition) settings for the case.
    pub ocr: Option<MicrosoftGraphSecurityOcrSettings>,
    ///The redundancy (near duplicate and email threading) detection settings for the case.
    #[serde(rename = "redundancyDetection")]
    pub redundancy_detection: Option<MicrosoftGraphSecurityRedundancyDetectionSettings>,
    ///The settings of the review set for the case. Possible values are: none, disableGrouping, unknownFutureValue.
    #[serde(rename = "reviewSetSettings")]
    pub review_set_settings: Option<MicrosoftGraphSecurityReviewSetSettings>,
    ///The Topic Modeling (Themes) settings for the case.
    #[serde(rename = "topicModeling")]
    pub topic_modeling: Option<MicrosoftGraphSecurityTopicModelingSettings>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryCustodian {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryCustodian".to_string())]
    pub odata_type: String,
    ///Date and time the custodian acknowledged a hold notification.
    #[serde(rename = "acknowledgedDateTime")]
    pub acknowledged_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Created date and time of the dataSourceContainer entity.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Display name of the dataSourceContainer entity.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Email address of the custodian.
    pub email: Option<String>,
    ///The hold status of the dataSourceContainer. The possible values are: notApplied, applied, applying, removing, partial
    #[serde(rename = "holdStatus")]
    pub hold_status: Option<MicrosoftGraphSecurityDataSourceHoldStatus>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Operation entity that represents the latest indexing for the custodian.
    #[serde(rename = "lastIndexOperation")]
    pub last_index_operation: Option<MicrosoftGraphSecurityEdiscoveryIndexOperation>,
    ///Last modified date and time of the dataSourceContainer.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time that the dataSourceContainer was released from the case.
    #[serde(rename = "releasedDateTime")]
    pub released_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Data source entity for SharePoint sites associated with the custodian.
    #[serde(rename = "siteSources")]
    pub site_sources: Option<Vec<MicrosoftGraphSecuritySiteSource>>,
    ///Latest status of the dataSourceContainer. Possible values are: Active, Released.
    pub status: Option<MicrosoftGraphSecurityDataSourceContainerStatus>,
    ///Data source entity for groups associated with the custodian.
    #[serde(rename = "unifiedGroupSources")]
    pub unified_group_sources: Option<Vec<MicrosoftGraphSecurityUnifiedGroupSource>>,
    ///Data source entity for a the custodian. This is the container for a custodian's mailbox and OneDrive for Business site.
    #[serde(rename = "userSources")]
    pub user_sources: Option<Vec<MicrosoftGraphSecurityUserSource>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryEstimateOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryEstimateOperation".to_string())]
    pub odata_type: String,
    ///The type of action the operation represents. Possible values are: contentExport,  applyTags, convertToPdf, index, estimateStatistics, addToReviewSet, holdUpdate, unknownFutureValue, purgeData, exportReport, exportResult. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: purgeData, exportReport, exportResult.
    pub action: Option<MicrosoftGraphSecurityCaseAction>,
    ///The date and time the operation was completed.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user that created the operation.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the operation was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The estimated count of items for the search that matched the content query.
    #[serde(rename = "indexedItemCount")]
    pub indexed_item_count: Option<f64>,
    ///The estimated size of items for the search that matched the content query.
    #[serde(rename = "indexedItemsSize")]
    pub indexed_items_size: Option<f64>,
    ///The number of mailboxes that had search hits.
    #[serde(rename = "mailboxCount")]
    pub mailbox_count: Option<f64>,
    ///The progress of the operation.
    #[serde(rename = "percentProgress")]
    pub percent_progress: Option<f64>,
    ///Contains the properties for report file metadata, including downloadUrl, fileName, and size.
    #[serde(rename = "reportFileMetadata")]
    pub report_file_metadata: Option<Vec<MicrosoftGraphSecurityReportFileMetadata>>,
    ///Contains success and failure-specific result information.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    ///eDiscovery search.
    pub search: Option<Box<MicrosoftGraphSecurityEdiscoverySearch>>,
    ///The number of mailboxes that had search hits.
    #[serde(rename = "siteCount")]
    pub site_count: Option<f64>,
    ///The options to generate statistics. Possible values are: includeRefiners, includeQueryStats, includeUnindexedStats, advancedIndexing, locationsWithoutHits, unknownFutureValue.
    #[serde(rename = "statisticsOptions")]
    pub statistics_options: Option<MicrosoftGraphSecurityStatisticsOptions>,
    ///The status of the case operation. Possible values are: notStarted, submissionFailed, running, succeeded, partiallySucceeded, failed.
    pub status: Option<MicrosoftGraphSecurityCaseOperationStatus>,
    ///The estimated count of unindexed items for the collection.
    #[serde(rename = "unindexedItemCount")]
    pub unindexed_item_count: Option<f64>,
    ///The estimated size of unindexed items for the collection.
    #[serde(rename = "unindexedItemsSize")]
    pub unindexed_items_size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryExportOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryExportOperation".to_string())]
    pub odata_type: String,
    ///The type of action the operation represents. Possible values are: contentExport,  applyTags, convertToPdf, index, estimateStatistics, addToReviewSet, holdUpdate, unknownFutureValue, purgeData, exportReport, exportResult. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: purgeData, exportReport, exportResult.
    pub action: Option<MicrosoftGraphSecurityCaseAction>,
    ///The date and time the operation was completed.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user that created the operation.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the operation was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description provided for the export.
    pub description: Option<String>,
    ///Contains the properties for an export file metadata, including downloadUrl, fileName, and size.
    #[serde(rename = "exportFileMetadata")]
    pub export_file_metadata: Option<Vec<MicrosoftGraphSecurityExportFileMetadata>>,
    ///The options provided for the export. For more information, see reviewSet: export. Possible values are: originalFiles, text, pdfReplacement, tags, unknownFutureValue, splitSource, includeFolderAndPath, friendlyName, condensePaths. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: splitSource, includeFolderAndPath, friendlyName, condensePaths.
    #[serde(rename = "exportOptions")]
    pub export_options: Option<MicrosoftGraphSecurityExportOptions>,
    ///The options that specify the structure of the export. For more information, see reviewSet: export. Possible values are: none, directory (deprecated), pst, unknownFutureValue, msg. Use the Prefer: include-unknown-enum-members request header to get the following value from this evolvable enum: msg. The directory member is deprecated. It remains in v1.0 for backward compatibility. Going forward, use either pst or msg.
    #[serde(rename = "exportStructure")]
    pub export_structure: Option<MicrosoftGraphSecurityExportFileStructure>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The name provided for the export.
    #[serde(rename = "outputName")]
    pub output_name: Option<String>,
    ///The progress of the operation.
    #[serde(rename = "percentProgress")]
    pub percent_progress: Option<f64>,
    ///Contains success and failure-specific result information.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    ///Review set from where documents are exported.
    #[serde(rename = "reviewSet")]
    pub review_set: Option<MicrosoftGraphSecurityEdiscoveryReviewSet>,
    ///The review set query that is used to filter the documents for export.
    #[serde(rename = "reviewSetQuery")]
    pub review_set_query: Option<MicrosoftGraphSecurityEdiscoveryReviewSetQuery>,
    ///The status of the case operation. Possible values are: notStarted, submissionFailed, running, succeeded, partiallySucceeded, failed.
    pub status: Option<MicrosoftGraphSecurityCaseOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryHoldOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryHoldOperation".to_string())]
    pub odata_type: String,
    ///The type of action the operation represents. Possible values are: contentExport,  applyTags, convertToPdf, index, estimateStatistics, addToReviewSet, holdUpdate, unknownFutureValue, purgeData, exportReport, exportResult. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: purgeData, exportReport, exportResult.
    pub action: Option<MicrosoftGraphSecurityCaseAction>,
    ///The date and time the operation was completed.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user that created the operation.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the operation was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The progress of the operation.
    #[serde(rename = "percentProgress")]
    pub percent_progress: Option<f64>,
    ///Contains success and failure-specific result information.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    ///The status of the case operation. Possible values are: notStarted, submissionFailed, running, succeeded, partiallySucceeded, failed.
    pub status: Option<MicrosoftGraphSecurityCaseOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryIndexOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryIndexOperation".to_string())]
    pub odata_type: String,
    ///The type of action the operation represents. Possible values are: contentExport,  applyTags, convertToPdf, index, estimateStatistics, addToReviewSet, holdUpdate, unknownFutureValue, purgeData, exportReport, exportResult. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: purgeData, exportReport, exportResult.
    pub action: Option<MicrosoftGraphSecurityCaseAction>,
    ///The date and time the operation was completed.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user that created the operation.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the operation was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The progress of the operation.
    #[serde(rename = "percentProgress")]
    pub percent_progress: Option<f64>,
    ///Contains success and failure-specific result information.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    ///The status of the case operation. Possible values are: notStarted, submissionFailed, running, succeeded, partiallySucceeded, failed.
    pub status: Option<MicrosoftGraphSecurityCaseOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryNoncustodialDataSource".to_string())]
    pub odata_type: String,
    ///Created date and time of the dataSourceContainer entity.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///User source or SharePoint site data source as noncustodial data source.
    #[serde(rename = "dataSource")]
    pub data_source: Option<MicrosoftGraphSecurityDataSource>,
    ///Display name of the dataSourceContainer entity.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The hold status of the dataSourceContainer. The possible values are: notApplied, applied, applying, removing, partial
    #[serde(rename = "holdStatus")]
    pub hold_status: Option<MicrosoftGraphSecurityDataSourceHoldStatus>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Operation entity that represents the latest indexing for the noncustodial data source.
    #[serde(rename = "lastIndexOperation")]
    pub last_index_operation: Option<MicrosoftGraphSecurityEdiscoveryIndexOperation>,
    ///Last modified date and time of the dataSourceContainer.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time that the dataSourceContainer was released from the case.
    #[serde(rename = "releasedDateTime")]
    pub released_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Latest status of the dataSourceContainer. Possible values are: Active, Released.
    pub status: Option<MicrosoftGraphSecurityDataSourceContainerStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryPurgeDataOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryPurgeDataOperation".to_string())]
    pub odata_type: String,
    ///The type of action the operation represents. Possible values are: contentExport,  applyTags, convertToPdf, index, estimateStatistics, addToReviewSet, holdUpdate, unknownFutureValue, purgeData, exportReport, exportResult. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: purgeData, exportReport, exportResult.
    pub action: Option<MicrosoftGraphSecurityCaseAction>,
    ///The date and time the operation was completed.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user that created the operation.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the operation was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The progress of the operation.
    #[serde(rename = "percentProgress")]
    pub percent_progress: Option<f64>,
    ///Contains success and failure-specific result information.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    ///The status of the case operation. Possible values are: notStarted, submissionFailed, running, succeeded, partiallySucceeded, failed.
    pub status: Option<MicrosoftGraphSecurityCaseOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryReviewSet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryReviewSet".to_string())]
    pub odata_type: String,
    ///The user who created the data set. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the review set was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the data set.
    pub description: Option<String>,
    ///The name of the data set. The name is unique with a maximum limit of 64 characters.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents queries within the review set.
    pub queries: Option<Vec<MicrosoftGraphSecurityEdiscoveryReviewSetQuery>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryReviewSetQuery {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryReviewSetQuery".to_string())]
    pub odata_type: String,
    #[serde(rename = "contentQuery")]
    pub content_query: Option<String>,
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub description: Option<String>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryReviewTag {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryReviewTag".to_string())]
    pub odata_type: String,
    ///Indicates whether a single or multiple child tags can be associated with a document. Possible values are: One, Many.  This value controls whether the UX presents the tags as checkboxes or a radio button group.
    #[serde(rename = "childSelectability")]
    pub child_selectability: Option<MicrosoftGraphSecurityChildSelectability>,
    ///Returns the tags that are a child of a tag.
    #[serde(rename = "childTags")]
    pub child_tags: Option<Vec<MicrosoftGraphSecurityEdiscoveryReviewTag>>,
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    pub description: Option<String>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Returns the parent tag of the specified tag.
    pub parent: Option<Box<MicrosoftGraphSecurityEdiscoveryReviewTag>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoverySearch {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoverySearch".to_string())]
    pub odata_type: String,
    ///Adds the results of the eDiscovery search to the specified reviewSet.
    #[serde(rename = "addToReviewSetOperation")]
    pub add_to_review_set_operation: Option<
        Box<MicrosoftGraphSecurityEdiscoveryAddToReviewSetOperation>,
    >,
    ///Adds an additional source to the eDiscovery search.
    #[serde(rename = "additionalSources")]
    pub additional_sources: Option<Vec<MicrosoftGraphSecurityDataSource>>,
    #[serde(rename = "contentQuery")]
    pub content_query: Option<String>,
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Custodian sources that are included in the eDiscovery search.
    #[serde(rename = "custodianSources")]
    pub custodian_sources: Option<Vec<MicrosoftGraphSecurityDataSource>>,
    ///When specified, the collection spans across a service for an entire workload. Possible values are: none, allTenantMailboxes, allTenantSites, allCaseCustodians, allCaseNoncustodialDataSources.
    #[serde(rename = "dataSourceScopes")]
    pub data_source_scopes: Option<MicrosoftGraphSecurityDataSourceScopes>,
    pub description: Option<String>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The last estimate operation associated with the eDiscovery search.
    #[serde(rename = "lastEstimateStatisticsOperation")]
    pub last_estimate_statistics_operation: Option<
        Box<MicrosoftGraphSecurityEdiscoveryEstimateOperation>,
    >,
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///noncustodialDataSource sources that are included in the eDiscovery search
    #[serde(rename = "noncustodialSources")]
    pub noncustodial_sources: Option<
        Vec<MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoverySearchExportOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoverySearchExportOperation".to_string())]
    pub odata_type: String,
    ///The type of action the operation represents. Possible values are: contentExport,  applyTags, convertToPdf, index, estimateStatistics, addToReviewSet, holdUpdate, unknownFutureValue, purgeData, exportReport, exportResult. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: purgeData, exportReport, exportResult.
    pub action: Option<MicrosoftGraphSecurityCaseAction>,
    ///The additional items to include in the export. The possible values are: none, teamsAndYammerConversations, cloudAttachments, allDocumentVersions, subfolderContents, listAttachments, unknownFutureValue, htmlTranscripts, advancedIndexing, allItemsInFolder, includeFolderAndPath, condensePaths, friendlyName, splitSource, includeReport. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: htmlTranscripts, advancedIndexing, allItemsInFolder, includeFolderAndPath, condensePaths, friendlyName, splitSource, includeReport.
    #[serde(rename = "additionalOptions")]
    pub additional_options: Option<MicrosoftGraphSecurityAdditionalOptions>,
    ///The versions of cloud attachments to include in messages. Possible values are: latest, recent10, recent100, all, unknownFutureValue.
    #[serde(rename = "cloudAttachmentVersion")]
    pub cloud_attachment_version: Option<MicrosoftGraphSecurityCloudAttachmentVersion>,
    ///The date and time the operation was completed.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user that created the operation.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the operation was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the export by the user.
    pub description: Option<String>,
    ///The name of export provided by the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The versions of files in SharePoint to include. Possible values are: latest, recent10, recent100, all, unknownFutureValue.
    #[serde(rename = "documentVersion")]
    pub document_version: Option<MicrosoftGraphSecurityDocumentVersion>,
    ///Items to be included in the export. The possible values are: searchHits, partiallyIndexed, unknownFutureValue.
    #[serde(rename = "exportCriteria")]
    pub export_criteria: Option<MicrosoftGraphSecurityExportCriteria>,
    ///Contains the properties for an export file metadata, including downloadUrl, fileName, and size.
    #[serde(rename = "exportFileMetadata")]
    pub export_file_metadata: Option<Vec<MicrosoftGraphSecurityExportFileMetadata>>,
    ///Format of the emails of the export. The possible values are: pst, msg, eml (deprecated), unknownFutureValue. The eml member is deprecated. It remains in v1.0 for backward compatibility. Going forward, use either pst or msg.
    #[serde(rename = "exportFormat")]
    pub export_format: Option<MicrosoftGraphSecurityExportFormat>,
    ///Location scope for partially indexed items. You can choose to include partially indexed items only in responsive locations with search hits or in all targeted locations. The possible values are: responsiveLocations, nonresponsiveLocations, unknownFutureValue.
    #[serde(rename = "exportLocation")]
    pub export_location: Option<MicrosoftGraphSecurityExportLocation>,
    ///Indicates whether to export single items.
    #[serde(rename = "exportSingleItems")]
    pub export_single_items: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The progress of the operation.
    #[serde(rename = "percentProgress")]
    pub percent_progress: Option<f64>,
    ///Contains success and failure-specific result information.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    ///The eDiscovery searches under each case.
    pub search: Option<Box<MicrosoftGraphSecurityEdiscoverySearch>>,
    ///The status of the case operation. Possible values are: notStarted, submissionFailed, running, succeeded, partiallySucceeded, failed.
    pub status: Option<MicrosoftGraphSecurityCaseOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEdiscoveryTagOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ediscoveryTagOperation".to_string())]
    pub odata_type: String,
    ///The type of action the operation represents. Possible values are: contentExport,  applyTags, convertToPdf, index, estimateStatistics, addToReviewSet, holdUpdate, unknownFutureValue, purgeData, exportReport, exportResult. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: purgeData, exportReport, exportResult.
    pub action: Option<MicrosoftGraphSecurityCaseAction>,
    ///The date and time the operation was completed.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user that created the operation.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the operation was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The progress of the operation.
    #[serde(rename = "percentProgress")]
    pub percent_progress: Option<f64>,
    ///Contains success and failure-specific result information.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    ///The status of the case operation. Possible values are: notStarted, submissionFailed, running, succeeded, partiallySucceeded, failed.
    pub status: Option<MicrosoftGraphSecurityCaseOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEmailSender {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The name of the sender.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Sender domain.
    #[serde(rename = "domainName")]
    pub domain_name: Option<String>,
    ///Sender email address.
    #[serde(rename = "emailAddress")]
    pub email_address: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEventPropagationResult {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The name of the specific location in the workload associated with the event.
    pub location: Option<String>,
    ///The name of the workload associated with the event.
    #[serde(rename = "serviceName")]
    pub service_name: Option<String>,
    ///Indicates the status of the event creation request. The possible values are: none, inProcessing, failed, success, unknownFutureValue.
    pub status: Option<MicrosoftGraphSecurityEventPropagationStatus>,
    ///Additional information about the status of the event creation request.
    #[serde(rename = "statusInformation")]
    pub status_information: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityEventPropagationStatus {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "inProcessing")]
    InProcessing,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityEventQuery {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents unique identification for the  query. 'Asset ID' for SharePoint Online and OneDrive for Business, 'keywords' for Exchange Online.
    pub query: Option<String>,
    ///Represents the type of query associated with an event. 'files' for SPO and ODB and 'messages' for EXO.The possible values are: files, messages, unknownFutureValue.
    #[serde(rename = "queryType")]
    pub query_type: Option<MicrosoftGraphSecurityQueryType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityEventStatusType {
    #[serde(rename = "pending")]
    #[default]
    Pending,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "notAvaliable")]
    NotAvaliable,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityEvidenceRemediationStatus {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "remediated")]
    Remediated,
    #[serde(rename = "prevented")]
    Prevented,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "notFound")]
    NotFound,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "pendingApproval")]
    PendingApproval,
    #[serde(rename = "declined")]
    Declined,
    #[serde(rename = "unremediated")]
    Unremediated,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "partiallyRemediated")]
    PartiallyRemediated,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityEvidenceRole {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "contextual")]
    Contextual,
    #[serde(rename = "scanned")]
    Scanned,
    #[serde(rename = "source")]
    Source,
    #[serde(rename = "destination")]
    Destination,
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "added")]
    Added,
    #[serde(rename = "compromised")]
    Compromised,
    #[serde(rename = "edited")]
    Edited,
    #[serde(rename = "attacked")]
    Attacked,
    #[serde(rename = "attacker")]
    Attacker,
    #[serde(rename = "commandAndControl")]
    CommandAndControl,
    #[serde(rename = "loaded")]
    Loaded,
    #[serde(rename = "suspicious")]
    Suspicious,
    #[serde(rename = "policyViolator")]
    PolicyViolator,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityEvidenceVerdict {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "suspicious")]
    Suspicious,
    #[serde(rename = "malicious")]
    Malicious,
    #[serde(rename = "noThreatsFound")]
    NoThreatsFound,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityExportCriteria {
    #[serde(rename = "searchHits")]
    #[default]
    SearchHits,
    #[serde(rename = "partiallyIndexed")]
    PartiallyIndexed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityExportFileMetadata {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "downloadUrl")]
    pub download_url: Option<String>,
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    pub size: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityExportFileStructure {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "directory")]
    Directory,
    #[serde(rename = "pst")]
    Pst,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "msg")]
    Msg,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityExportFormat {
    #[serde(rename = "pst")]
    #[default]
    Pst,
    #[serde(rename = "msg")]
    Msg,
    #[serde(rename = "eml")]
    Eml,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityExportLocation {
    #[serde(rename = "responsiveLocations")]
    #[default]
    ResponsiveLocations,
    #[serde(rename = "nonresponsiveLocations")]
    NonresponsiveLocations,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityExportOptions {
    #[serde(rename = "originalFiles")]
    #[default]
    OriginalFiles,
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "pdfReplacement")]
    PdfReplacement,
    #[serde(rename = "tags")]
    Tags,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "splitSource")]
    SplitSource,
    #[serde(rename = "includeFolderAndPath")]
    IncludeFolderAndPath,
    #[serde(rename = "friendlyName")]
    FriendlyName,
    #[serde(rename = "condensePaths")]
    CondensePaths,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFileDetails {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The name of the file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The file path (location) of the file instance.
    #[serde(rename = "filePath")]
    pub file_path: Option<String>,
    ///The publisher of the file.
    #[serde(rename = "filePublisher")]
    pub file_publisher: Option<String>,
    ///The size of the file in bytes.
    #[serde(rename = "fileSize")]
    pub file_size: Option<f64>,
    ///The certificate authority (CA) that issued the certificate.
    pub issuer: Option<String>,
    ///The Md5 cryptographic hash of the file content.
    pub md5: Option<String>,
    ///The Sha1 cryptographic hash of the file content.
    pub sha1: Option<String>,
    ///The Sha256 cryptographic hash of the file content.
    pub sha256: Option<String>,
    #[serde(rename = "sha256Ac")]
    pub sha256ac: Option<String>,
    ///The signer of the signed file.
    pub signer: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFileEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.fileEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The status of the detection.The possible values are: detected, blocked, prevented, unknownFutureValue.
    #[serde(rename = "detectionStatus")]
    pub detection_status: Option<MicrosoftGraphSecurityDetectionStatus>,
    ///The file details.
    #[serde(rename = "fileDetails")]
    pub file_details: Option<MicrosoftGraphSecurityFileDetails>,
    ///A unique identifier assigned to a device by Microsoft Defender for Endpoint.
    #[serde(rename = "mdeDeviceId")]
    pub mde_device_id: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFileHash {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub algorithm: Option<MicrosoftGraphSecurityFileHashAlgorithm>,
    ///The hash value.
    pub value: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityFileHashAlgorithm {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "md5")]
    Md5,
    #[serde(rename = "sha1")]
    Sha1,
    #[serde(rename = "sha256")]
    Sha256,
    #[serde(rename = "sha256ac")]
    Sha256ac,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFileHashEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.fileHashEvidence".to_string())]
    pub odata_type: String,
    pub algorithm: Option<MicrosoftGraphSecurityFileHashAlgorithm>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub value: Option<String>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFilePlanAppliedCategory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.filePlanAppliedCategory".to_string())]
    pub odata_type: String,
    ///Unique string that defines the name for the file plan descriptor associated with a particular retention label.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Represents the file plan descriptor for a subcategory under a specific category, which has been assigned to a particular retention label.
    pub subcategory: Option<MicrosoftGraphSecurityFilePlanSubcategory>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFilePlanAuthority {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.filePlanAuthority".to_string())]
    pub odata_type: String,
    ///Unique string that defines the name for the file plan descriptor associated with a particular retention label.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFilePlanCitation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.filePlanCitation".to_string())]
    pub odata_type: String,
    ///Represents the jurisdiction or agency that published the filePlanCitation.
    #[serde(rename = "citationJurisdiction")]
    pub citation_jurisdiction: Option<String>,
    ///Represents the URL to the published filePlanCitation.
    #[serde(rename = "citationUrl")]
    pub citation_url: Option<String>,
    ///Unique string that defines the name for the file plan descriptor associated with a particular retention label.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFilePlanDepartment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.filePlanDepartment".to_string())]
    pub odata_type: String,
    ///Unique string that defines the name for the file plan descriptor associated with a particular retention label.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFilePlanDescriptor {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.filePlanDescriptor".to_string())]
    pub odata_type: String,
    ///Represents the file plan descriptor of type authority applied to a particular retention label.
    pub authority: Option<MicrosoftGraphSecurityFilePlanAuthority>,
    ///Specifies the underlying authority that describes the type of content to be retained and its retention schedule.
    #[serde(rename = "authorityTemplate")]
    pub authority_template: Option<MicrosoftGraphSecurityAuthorityTemplate>,
    pub category: Option<MicrosoftGraphSecurityFilePlanAppliedCategory>,
    ///Specifies a group of similar types of content in a particular department.
    #[serde(rename = "categoryTemplate")]
    pub category_template: Option<MicrosoftGraphSecurityCategoryTemplate>,
    ///Represents the file plan descriptor of type citation applied to a particular retention label.
    pub citation: Option<MicrosoftGraphSecurityFilePlanCitation>,
    ///The specific rule or regulation created by a jurisdiction used to determine whether certain labels and content should be retained or deleted.
    #[serde(rename = "citationTemplate")]
    pub citation_template: Option<MicrosoftGraphSecurityCitationTemplate>,
    ///Represents the file plan descriptor of type department applied to a particular retention label.
    pub department: Option<MicrosoftGraphSecurityFilePlanDepartment>,
    ///Specifies the  department or business unit of an organization to which a label belongs.
    #[serde(rename = "departmentTemplate")]
    pub department_template: Option<MicrosoftGraphSecurityDepartmentTemplate>,
    ///Represents the file plan descriptor of type filePlanReference applied to a particular retention label.
    #[serde(rename = "filePlanReference")]
    pub file_plan_reference: Option<MicrosoftGraphSecurityFilePlanReference>,
    ///Specifies a unique alpha-numeric identifier for an organization’s retention schedule.
    #[serde(rename = "filePlanReferenceTemplate")]
    pub file_plan_reference_template: Option<
        MicrosoftGraphSecurityFilePlanReferenceTemplate,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphSecurityFilePlanDescriptorBase { discriminator :
    "@odata.type", variants : [("#microsoft.graph.security.filePlanAppliedCategory",
    MicrosoftGraphSecurityFilePlanAppliedCategory(Box <
    MicrosoftGraphSecurityFilePlanAppliedCategory >)),
    ("#microsoft.graph.security.filePlanAuthority",
    MicrosoftGraphSecurityFilePlanAuthority(Box < MicrosoftGraphSecurityFilePlanAuthority
    >)), ("#microsoft.graph.security.filePlanCitation",
    MicrosoftGraphSecurityFilePlanCitation(Box < MicrosoftGraphSecurityFilePlanCitation
    >)), ("#microsoft.graph.security.filePlanDepartment",
    MicrosoftGraphSecurityFilePlanDepartment(Box <
    MicrosoftGraphSecurityFilePlanDepartment >)),
    ("#microsoft.graph.security.filePlanReference",
    MicrosoftGraphSecurityFilePlanReference(Box < MicrosoftGraphSecurityFilePlanReference
    >)), ("#microsoft.graph.security.filePlanSubcategory",
    MicrosoftGraphSecurityFilePlanSubcategory(Box <
    MicrosoftGraphSecurityFilePlanSubcategory >))], fallback : FilePlanDescriptorBase(Box
    < MicrosoftGraphSecurityFilePlanDescriptorBaseBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFilePlanDescriptorBaseBase {
    ///Unique string that defines the name for the file plan descriptor associated with a particular retention label.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFilePlanDescriptorTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.filePlanDescriptorTemplate".to_string())]
    pub odata_type: String,
    ///Represents the user who created the filePlanDescriptorTemplate column.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Represents the date and time in which the filePlanDescriptorTemplate is created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Unique string that defines a filePlanDescriptorTemplate name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFilePlanReference {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.filePlanReference".to_string())]
    pub odata_type: String,
    ///Unique string that defines the name for the file plan descriptor associated with a particular retention label.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFilePlanReferenceTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.filePlanReferenceTemplate".to_string())]
    pub odata_type: String,
    ///Represents the user who created the filePlanDescriptorTemplate column.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Represents the date and time in which the filePlanDescriptorTemplate is created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Unique string that defines a filePlanDescriptorTemplate name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFilePlanSubcategory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.filePlanSubcategory".to_string())]
    pub odata_type: String,
    ///Unique string that defines the name for the file plan descriptor associated with a particular retention label.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityFormattedContent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The content of this formattedContent.
    pub content: Option<String>,
    ///The format of the content. The possible values are: text, html, markdown, unknownFutureValue.
    pub format: Option<MicrosoftGraphSecurityContentFormat>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityGeoLocation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub city: Option<String>,
    #[serde(rename = "countryName")]
    pub country_name: Option<String>,
    pub latitude: Option<MicrosoftGraphSecurityGeoLocationLatitude>,
    pub longitude: Option<MicrosoftGraphSecurityGeoLocationLongitude>,
    pub state: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityGeoLocationLatitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityGeoLocationLongitude {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityGitHubOrganizationEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.gitHubOrganizationEvidence".to_string())]
    pub odata_type: String,
    pub company: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    pub email: Option<String>,
    pub login: Option<String>,
    #[serde(rename = "orgId")]
    pub org_id: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityGitHubRepoEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.gitHubRepoEvidence".to_string())]
    pub odata_type: String,
    #[serde(rename = "baseUrl")]
    pub base_url: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    pub login: Option<String>,
    pub owner: Option<String>,
    #[serde(rename = "ownerType")]
    pub owner_type: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    #[serde(rename = "repoId")]
    pub repo_id: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityGitHubUserEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.gitHubUserEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    pub email: Option<String>,
    pub login: Option<String>,
    pub name: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityGoogleCloudLocationType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "regional")]
    Regional,
    #[serde(rename = "zonal")]
    Zonal,
    #[serde(rename = "global")]
    Global,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityGoogleCloudResourceEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.googleCloudResourceEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "fullResourceName")]
    pub full_resource_name: Option<String>,
    ///The zone or region where the resource is located.
    pub location: Option<String>,
    ///The type of location. Possible values are: unknown, regional, zonal, global, unknownFutureValue.
    #[serde(rename = "locationType")]
    pub location_type: Option<MicrosoftGraphSecurityGoogleCloudLocationType>,
    ///The Google project ID as defined by the user.
    #[serde(rename = "projectId")]
    pub project_id: Option<String>,
    ///The project number assigned by Google.
    #[serde(rename = "projectNumber")]
    pub project_number: Option<f64>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The name of the resource.
    #[serde(rename = "resourceName")]
    pub resource_name: Option<String>,
    ///The type of the resource.
    #[serde(rename = "resourceType")]
    pub resource_type: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHealthIssue {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.healthIssue".to_string())]
    pub odata_type: String,
    ///Contains additional information about the issue, such as a list of items to fix.
    #[serde(rename = "additionalInformation")]
    pub additional_information: Option<Vec<String>>,
    ///The date and time when the health issue was generated. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains more detailed information about the health issue.
    pub description: Option<String>,
    ///The display name of the health issue.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///A list of the fully qualified domain names of the domains or the sensors the health issue is related to.
    #[serde(rename = "domainNames")]
    pub domain_names: Option<Vec<Option<String>>>,
    ///The type of the health issue. The possible values are: sensor, global, unknownFutureValue. For a list of all health issues and their identifiers, see Microsoft Defender for Identity health issues.
    #[serde(rename = "healthIssueType")]
    pub health_issue_type: Option<MicrosoftGraphSecurityHealthIssueType>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The type identifier of the health issue. For a list of all health issues and their identifiers, see Microsoft Defender for Identity health issues.
    #[serde(rename = "issueTypeId")]
    pub issue_type_id: Option<String>,
    ///The date and time when the health issue was last updated. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A list of recommended actions that can be taken to resolve the issue effectively and efficiently. These actions might include instructions for further investigation and aren't limited to prewritten responses.
    pub recommendations: Option<Vec<String>>,
    ///A list of commands from the PowerShell module for the product that can be used to resolve the issue, if available. If no commands can be used to solve the issue, this property is empty. The commands, if present, provide a quick and efficient way to address the issue. These commands run in sequence for the single recommended fix.
    #[serde(rename = "recommendedActionCommands")]
    pub recommended_action_commands: Option<Vec<String>>,
    ///A list of the DNS names of the sensors the health issue is related to.
    #[serde(rename = "sensorDNSNames")]
    pub sensor_dnsnames: Option<Vec<Option<String>>>,
    ///The severity of the health issue. The possible values are: low, medium, high, unknownFutureValue.
    pub severity: Option<MicrosoftGraphSecurityHealthIssueSeverity>,
    ///The status of the health issue. The possible values are: open, closed, suppressed, unknownFutureValue.
    pub status: Option<MicrosoftGraphSecurityHealthIssueStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityHealthIssueSeverity {
    #[serde(rename = "low")]
    #[default]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityHealthIssueStatus {
    #[serde(rename = "open")]
    #[default]
    Open,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "suppressed")]
    Suppressed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityHealthIssueType {
    #[serde(rename = "sensor")]
    #[default]
    Sensor,
    #[serde(rename = "global")]
    Global,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHost {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.host".to_string())]
    pub odata_type: String,
    ///The hostPairs that are resources associated with a host, where that host is the parentHost and has an outgoing pairing to a childHost.
    #[serde(rename = "childHostPairs")]
    pub child_host_pairs: Option<Vec<MicrosoftGraphSecurityHostPair>>,
    ///The hostComponents that are associated with this host.
    pub components: Option<Vec<MicrosoftGraphSecurityHostComponent>>,
    ///The hostCookies that are associated with this host.
    pub cookies: Option<Vec<MicrosoftGraphSecurityHostCookie>>,
    ///The first date and time when this host was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The hostPairs that are associated with this host, where this host is either the parentHost or childHost.
    #[serde(rename = "hostPairs")]
    pub host_pairs: Option<Vec<MicrosoftGraphSecurityHostPair>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The most recent date and time when this host was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The hostPairs that are associated with a host, where that host is the childHost and has an incoming pairing with a parentHost.
    #[serde(rename = "parentHostPairs")]
    pub parent_host_pairs: Option<Vec<MicrosoftGraphSecurityHostPair>>,
    ///Passive DNS retrieval about this host.
    #[serde(rename = "passiveDns")]
    pub passive_dns: Option<Vec<MicrosoftGraphSecurityPassiveDnsRecord>>,
    ///Reverse passive DNS retrieval about this host.
    #[serde(rename = "passiveDnsReverse")]
    pub passive_dns_reverse: Option<Vec<MicrosoftGraphSecurityPassiveDnsRecord>>,
    ///The hostPorts associated with a host.
    pub ports: Option<Vec<MicrosoftGraphSecurityHostPort>>,
    ///Represents a calculated reputation of this host.
    pub reputation: Option<MicrosoftGraphSecurityHostReputation>,
    ///The hostSslCertificates that are associated with this host.
    #[serde(rename = "sslCertificates")]
    pub ssl_certificates: Option<Vec<MicrosoftGraphSecurityHostSslCertificate>>,
    ///The subdomains that are associated with this host.
    pub subdomains: Option<Vec<MicrosoftGraphSecuritySubdomain>>,
    ///The hostTrackers that are associated with this host.
    pub trackers: Option<Vec<MicrosoftGraphSecurityHostTracker>>,
    ///The most recent whoisRecord for this host.
    pub whois: Option<Box<MicrosoftGraphSecurityWhoisRecord>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostComponent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.hostComponent".to_string())]
    pub odata_type: String,
    ///The type of component that was detected (for example, Operating System, Framework, Remote Access, or Server).
    pub category: Option<String>,
    ///The first date and time when Microsoft Defender Threat Intelligence observed this web component. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The most recent date and time when Microsoft Defender Threat Intelligence observed this web component. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A name running on the artifact, for example, Microsoft IIS.
    pub name: Option<String>,
    ///The component version running on the artifact, for example, v8.5. This shouldn't be assumed to be strictly numerical.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostCookie {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.hostCookie".to_string())]
    pub odata_type: String,
    ///The URI for which the cookie is valid.
    pub domain: Option<String>,
    ///The first date and time when this hostCookie was observed by Microsoft Defender Threat Intelligence. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The most recent date and time when this hostCookie was observed by Microsoft Defender Threat Intelligence. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the cookie, for example, JSESSIONID or SEARCH_NAMESITE.
    pub name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostLogonSessionEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.hostLogonSessionEvidence".to_string())]
    pub odata_type: String,
    pub account: Option<MicrosoftGraphSecurityUserEvidence>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "endUtcDateTime")]
    pub end_utc_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub host: Option<MicrosoftGraphSecurityDeviceEvidence>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    #[serde(rename = "sessionId")]
    pub session_id: Option<String>,
    #[serde(rename = "startUtcDateTime")]
    pub start_utc_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostPair {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.hostPair".to_string())]
    pub odata_type: String,
    #[serde(rename = "childHost")]
    pub child_host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The date and time when Microsoft Defender Threat Intelligence first observed the hostPair. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time when Microsoft Defender Threat Intelligence last observed the hostPair. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The reason that two hosts are identified as hostPair.
    #[serde(rename = "linkKind")]
    pub link_kind: Option<String>,
    #[serde(rename = "parentHost")]
    pub parent_host: Option<Box<MicrosoftGraphSecurityHost>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostPort {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.hostPort".to_string())]
    pub odata_type: String,
    ///The hostPortBanners retrieved from scanning the port.
    pub banners: Option<Vec<MicrosoftGraphSecurityHostPortBanner>>,
    ///The first date and time when Microsoft Defender Threat Intelligence observed the hostPort. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The last date and time when Microsoft Defender Threat Intelligence scanned the hostPort. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastScanDateTime")]
    pub last_scan_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The last date and time when Microsoft Defender Threat Intelligence observed the hostPort. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The most recent sslCertificate used to communicate on the port.
    #[serde(rename = "mostRecentSslCertificate")]
    pub most_recent_ssl_certificate: Option<Box<MicrosoftGraphSecuritySslCertificate>>,
    ///The numerical identifier of the port which is standardized across the internet.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub port: Option<f64>,
    ///The general protocol used to scan the port. The possible values are: tcp, udp, unknownFutureValue.
    pub protocol: Option<MicrosoftGraphSecurityHostPortProtocol>,
    ///The hostPortComponents retrieved from scanning the port.
    pub services: Option<Vec<MicrosoftGraphSecurityHostPortComponent>>,
    ///The status of the port. The possible values are: open, filtered, closed, unknownFutureValue.
    pub status: Option<MicrosoftGraphSecurityHostPortStatus>,
    ///The total amount of times that Microsoft Defender Threat Intelligence has observed the hostPort in all its scans.
    #[serde(rename = "timesObserved")]
    pub times_observed: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostPortBanner {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The text response received from a web component when scanning a hostPort.
    pub banner: Option<String>,
    ///The first date and time when Microsoft Defender Threat Intelligence observed the hostPortBanner. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The last date and time when Microsoft Defender Threat Intelligence observed the hostPortBanner. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The specific protocol used to scan the hostPort.
    #[serde(rename = "scanProtocol")]
    pub scan_protocol: Option<String>,
    ///The total amount of times that Microsoft Defender Threat Intelligence has observed the hostPortBanner in all its scans.
    #[serde(rename = "timesObserved")]
    pub times_observed: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostPortComponent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub component: Option<Box<MicrosoftGraphSecurityHostComponent>>,
    ///The first date and time when Microsoft Defender Threat Intelligence observed the hostPortComponent. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether this hostPortComponent is recent, which is determined by whether the hostPortComponent was observed either at the same time or after the latest hostPortBanner in the scan history, or within two days of the latest scan of the hostPort when there are no hostPortBanners in the scan history.
    #[serde(rename = "isRecent")]
    pub is_recent: Option<bool>,
    ///The last date and time when Microsoft Defender Threat Intelligence observed the hostPortComponent. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityHostPortProtocol {
    #[serde(rename = "tcp")]
    #[default]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityHostPortStatus {
    #[serde(rename = "open")]
    #[default]
    Open,
    #[serde(rename = "filtered")]
    Filtered,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostReputation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.hostReputation".to_string())]
    pub odata_type: String,
    pub classification: Option<MicrosoftGraphSecurityHostReputationClassification>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of rules that have been used to calculate the classification and score.
    pub rules: Option<Vec<MicrosoftGraphSecurityHostReputationRule>>,
    ///The calculated score (0-100) of the requested host. A higher value indicates that this host is more likely to be suspicious or malicious.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub score: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityHostReputationClassification {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "suspicious")]
    Suspicious,
    #[serde(rename = "malicious")]
    Malicious,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostReputationRule {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The description of the rule that gives more context.
    pub description: Option<String>,
    ///The name of the rule.
    pub name: Option<String>,
    ///Link to a web page with details related to this rule.
    #[serde(rename = "relatedDetailsUrl")]
    pub related_details_url: Option<String>,
    pub severity: Option<MicrosoftGraphSecurityHostReputationRuleSeverity>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityHostReputationRuleSeverity {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostSslCertificate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.hostSslCertificate".to_string())]
    pub odata_type: String,
    ///The first date and time when this hostSslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The host for this hostSslCertificate.
    pub host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The most recent date and time when this hostSslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The ports related with this hostSslCertificate.
    pub ports: Option<Vec<MicrosoftGraphSecurityHostSslCertificatePort>>,
    ///The sslCertificate for this hostSslCertificate.
    #[serde(rename = "sslCertificate")]
    pub ssl_certificate: Option<Box<MicrosoftGraphSecuritySslCertificate>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostSslCertificatePort {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The first date and time when this port was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The most recent date and time when this port was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The port number.
    pub port: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostTracker {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.hostTracker".to_string())]
    pub odata_type: String,
    ///The first date and time when this hostTracker was observed by Microsoft Defender Threat Intelligence. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The kind of hostTracker that was detected. For example, GoogleAnalyticsID or JarmHash.
    pub kind: Option<String>,
    ///The most recent date and time when this hostTracker was observed by Microsoft Defender Threat Intelligence. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The identification value for the hostTracker.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHostname {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.hostname".to_string())]
    pub odata_type: String,
    ///The hostPairs that are resources associated with a host, where that host is the parentHost and has an outgoing pairing to a childHost.
    #[serde(rename = "childHostPairs")]
    pub child_host_pairs: Option<Vec<MicrosoftGraphSecurityHostPair>>,
    ///The hostComponents that are associated with this host.
    pub components: Option<Vec<MicrosoftGraphSecurityHostComponent>>,
    ///The hostCookies that are associated with this host.
    pub cookies: Option<Vec<MicrosoftGraphSecurityHostCookie>>,
    ///The first date and time when this host was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The hostPairs that are associated with this host, where this host is either the parentHost or childHost.
    #[serde(rename = "hostPairs")]
    pub host_pairs: Option<Vec<MicrosoftGraphSecurityHostPair>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The most recent date and time when this host was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The hostPairs that are associated with a host, where that host is the childHost and has an incoming pairing with a parentHost.
    #[serde(rename = "parentHostPairs")]
    pub parent_host_pairs: Option<Vec<MicrosoftGraphSecurityHostPair>>,
    ///Passive DNS retrieval about this host.
    #[serde(rename = "passiveDns")]
    pub passive_dns: Option<Vec<MicrosoftGraphSecurityPassiveDnsRecord>>,
    ///Reverse passive DNS retrieval about this host.
    #[serde(rename = "passiveDnsReverse")]
    pub passive_dns_reverse: Option<Vec<MicrosoftGraphSecurityPassiveDnsRecord>>,
    ///The hostPorts associated with a host.
    pub ports: Option<Vec<MicrosoftGraphSecurityHostPort>>,
    ///The company or individual who registered this hostname, from WHOIS data.
    pub registrant: Option<String>,
    ///The registrar for this hostname, from WHOIS data.
    pub registrar: Option<String>,
    ///Represents a calculated reputation of this host.
    pub reputation: Option<MicrosoftGraphSecurityHostReputation>,
    ///The hostSslCertificates that are associated with this host.
    #[serde(rename = "sslCertificates")]
    pub ssl_certificates: Option<Vec<MicrosoftGraphSecurityHostSslCertificate>>,
    ///The subdomains that are associated with this host.
    pub subdomains: Option<Vec<MicrosoftGraphSecuritySubdomain>>,
    ///The hostTrackers that are associated with this host.
    pub trackers: Option<Vec<MicrosoftGraphSecurityHostTracker>>,
    ///The most recent whoisRecord for this host.
    pub whois: Option<Box<MicrosoftGraphSecurityWhoisRecord>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityHyperlink {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The name for this hyperlink.
    pub name: Option<String>,
    ///The URL for this hyperlink.
    pub url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityIdentityContainer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.identityContainer".to_string())]
    pub odata_type: String,
    ///Represents potential issues identified by Microsoft Defender for Identity within a customer's Microsoft Defender for Identity configuration.
    #[serde(rename = "healthIssues")]
    pub health_issues: Option<Vec<MicrosoftGraphSecurityHealthIssue>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents a customer's Microsoft Defender for Identity sensors.
    pub sensors: Option<Vec<MicrosoftGraphSecuritySensor>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityIncident {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.incident".to_string())]
    pub odata_type: String,
    ///The list of related alerts. Supports $expand.
    pub alerts: Option<Vec<MicrosoftGraphSecurityAlert>>,
    ///Owner of the incident, or null if no owner is assigned. Free editable text.
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<String>,
    ///The specification for the incident. Possible values are: unknown, falsePositive, truePositive, informationalExpectedActivity, unknownFutureValue.
    pub classification: Option<MicrosoftGraphSecurityAlertClassification>,
    ///Array of comments created by the Security Operations (SecOps) team when the incident is managed.
    pub comments: Option<Vec<MicrosoftGraphSecurityAlertComment>>,
    ///Time when the incident was first created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Array of custom tags associated with an incident.
    #[serde(rename = "customTags")]
    pub custom_tags: Option<Vec<Option<String>>>,
    ///Description of the incident.
    pub description: Option<String>,
    ///Specifies the determination of the incident. Possible values are: unknown, apt, malware, securityPersonnel, securityTesting, unwantedSoftware, other, multiStagedAttack, compromisedUser, phishing, maliciousUserActivity, clean, insufficientData, confirmedUserActivity, lineOfBusinessApplication, unknownFutureValue.
    pub determination: Option<MicrosoftGraphSecurityAlertDetermination>,
    ///The incident name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The URL for the incident page in the Microsoft 365 Defender portal.
    #[serde(rename = "incidentWebUrl")]
    pub incident_web_url: Option<String>,
    ///The identity that last modified the incident.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<String>,
    ///Time when the incident was last updated.
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Only populated in case an incident is grouped with another incident, as part of the logic that processes incidents. In such a case, the status property is redirected.
    #[serde(rename = "redirectIncidentId")]
    pub redirect_incident_id: Option<String>,
    ///User input that explains the resolution of the incident and the classification choice. This property contains free editable text.
    #[serde(rename = "resolvingComment")]
    pub resolving_comment: Option<String>,
    pub severity: Option<MicrosoftGraphSecurityAlertSeverity>,
    pub status: Option<MicrosoftGraphSecurityIncidentStatus>,
    ///The overview of an attack. When applicable, the summary contains details of what occurred, impacted assets, and the type of attack.
    pub summary: Option<String>,
    ///The system tags associated with the incident.
    #[serde(rename = "systemTags")]
    pub system_tags: Option<Vec<Option<String>>>,
    ///The Microsoft Entra tenant in which the alert was created.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityIncidentStatus {
    #[serde(rename = "active")]
    #[default]
    Active,
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "inProgress")]
    InProgress,
    #[serde(rename = "redirected")]
    Redirected,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "awaitingAction")]
    AwaitingAction,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityIndicator {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.indicator".to_string())]
    pub odata_type: String,
    pub artifact: Option<MicrosoftGraphSecurityArtifact>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub source: Option<MicrosoftGraphSecurityIndicatorSource>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityIndicatorSource {
    #[serde(rename = "microsoft")]
    #[default]
    Microsoft,
    #[serde(rename = "osint")]
    Osint,
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityIntelligenceProfile {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.intelligenceProfile".to_string())]
    pub odata_type: String,
    ///A list of commonly-known aliases for the threat intelligence included in the intelligenceProfile.
    pub aliases: Option<Vec<Option<String>>>,
    ///The country/region of origin for the given actor or threat associated with this intelligenceProfile.
    #[serde(rename = "countriesOrRegionsOfOrigin")]
    pub countries_or_regions_of_origin: Option<
        Vec<MicrosoftGraphSecurityIntelligenceProfileCountryOrRegionOfOrigin>,
    >,
    pub description: Option<MicrosoftGraphSecurityFormattedContent>,
    ///The date and time when this intelligenceProfile was first active. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstActiveDateTime")]
    pub first_active_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Includes an assemblage of high-fidelity network indicators of compromise.
    pub indicators: Option<Vec<MicrosoftGraphSecurityIntelligenceProfileIndicator>>,
    pub kind: Option<MicrosoftGraphSecurityIntelligenceProfileKind>,
    pub summary: Option<MicrosoftGraphSecurityFormattedContent>,
    ///Known targets related to this intelligenceProfile.
    pub targets: Option<Vec<Option<String>>>,
    ///The title of this intelligenceProfile.
    pub title: Option<String>,
    ///Formatted information featuring a description of the distinctive tactics, techniques, and procedures (TTP) of the group, followed by a list of all known custom, commodity, and publicly available implants used by the group.
    pub tradecraft: Option<MicrosoftGraphSecurityFormattedContent>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityIntelligenceProfileCountryOrRegionOfOrigin {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A codified representation for this country/region of origin.
    pub code: Option<String>,
    ///A display label for this ountry/region of origin.
    pub label: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityIntelligenceProfileIndicator {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.intelligenceProfileIndicator".to_string())]
    pub odata_type: String,
    pub artifact: Option<MicrosoftGraphSecurityArtifact>,
    ///Designate when an artifact was first used actively in an attack, when a particular sample was compiled, or if neither of those could be ascertained when the file was first seen in public repositories (for example, VirusTotal, ANY.RUN, Hybrid Analysis) or reported publicly.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Designate when an artifact was most recently used actively in an attack, when a particular sample was compiled, or if neither of those could be ascertained when the file was first seen in public repositories (for example, VirusTotal, ANY.RUN, Hybrid Analysis) or reported publicly.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub source: Option<MicrosoftGraphSecurityIndicatorSource>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityIntelligenceProfileKind {
    #[serde(rename = "actor")]
    #[default]
    Actor,
    #[serde(rename = "tool")]
    Tool,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityIoTdeviceEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ioTDeviceEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The device ID.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///The friendly name of the device.
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    ///The URL to the device page in the IoT Defender portal.
    #[serde(rename = "devicePageLink")]
    pub device_page_link: Option<String>,
    ///The device subtype.
    #[serde(rename = "deviceSubType")]
    pub device_sub_type: Option<String>,
    ///The type of the device. For example, 'temperature sensor,' 'freezer,' 'wind turbine,' and so on.
    #[serde(rename = "deviceType")]
    pub device_type: Option<String>,
    ///The importance level for the IoT device. Possible values are low, normal, high, and unknownFutureValue.
    pub importance: Option<MicrosoftGraphSecurityIoTdeviceImportanceType>,
    ///The azureResourceEvidence entity that represents the IoT Hub that the device belongs to.
    #[serde(rename = "ioTHub")]
    pub io_thub: Option<MicrosoftGraphSecurityAzureResourceEvidence>,
    ///The ID of the Azure Security Center for the IoT agent that is running on the device.
    #[serde(rename = "ioTSecurityAgentId")]
    pub io_tsecurity_agent_id: Option<String>,
    ///The current IP address of the device.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<MicrosoftGraphSecurityIpEvidence>,
    ///Indicates whether the device classified as an authorized device.
    #[serde(rename = "isAuthorized")]
    pub is_authorized: Option<bool>,
    ///Indicates whether the device classified as a programming device.
    #[serde(rename = "isProgramming")]
    pub is_programming: Option<bool>,
    ///Indicates whether the device classified as a scanner.
    #[serde(rename = "isScanner")]
    pub is_scanner: Option<bool>,
    ///The MAC address of the device.
    #[serde(rename = "macAddress")]
    pub mac_address: Option<String>,
    ///The manufacturer of the device.
    pub manufacturer: Option<String>,
    ///The model of the device.
    pub model: Option<String>,
    ///The current network interface controllers on the device.
    pub nics: Option<Vec<MicrosoftGraphSecurityNicEvidence>>,
    ///The operating system the device is running.
    #[serde(rename = "operatingSystem")]
    pub operating_system: Option<String>,
    ///The owners for the device.
    pub owners: Option<Vec<Option<String>>>,
    ///The list of protocols that the device supports.
    pub protocols: Option<Vec<Option<String>>>,
    ///The Purdue Layer of the device.
    #[serde(rename = "purdueLayer")]
    pub purdue_layer: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///The sensor that monitors the device.
    pub sensor: Option<String>,
    ///The serial number of the device.
    #[serde(rename = "serialNumber")]
    pub serial_number: Option<String>,
    ///The site location of the device.
    pub site: Option<String>,
    ///The source (microsoft/vendor) of the device entity.
    pub source: Option<String>,
    ///A URL reference to the source item where the device is managed.
    #[serde(rename = "sourceRef")]
    pub source_ref: Option<MicrosoftGraphSecurityUrlEvidence>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
    ///The zone location of the device within a site.
    pub zone: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityIoTdeviceImportanceType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityIpAddress {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ipAddress".to_string())]
    pub odata_type: String,
    ///The details about the autonomous system to which this IP address belongs.
    #[serde(rename = "autonomousSystem")]
    pub autonomous_system: Option<MicrosoftGraphSecurityAutonomousSystem>,
    ///The hostPairs that are resources associated with a host, where that host is the parentHost and has an outgoing pairing to a childHost.
    #[serde(rename = "childHostPairs")]
    pub child_host_pairs: Option<Vec<MicrosoftGraphSecurityHostPair>>,
    ///The hostComponents that are associated with this host.
    pub components: Option<Vec<MicrosoftGraphSecurityHostComponent>>,
    ///The hostCookies that are associated with this host.
    pub cookies: Option<Vec<MicrosoftGraphSecurityHostCookie>>,
    ///The country/region for this IP address.
    #[serde(rename = "countryOrRegion")]
    pub country_or_region: Option<String>,
    ///The first date and time when this host was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The hostPairs that are associated with this host, where this host is either the parentHost or childHost.
    #[serde(rename = "hostPairs")]
    pub host_pairs: Option<Vec<MicrosoftGraphSecurityHostPair>>,
    ///The hosting company listed for this host.
    #[serde(rename = "hostingProvider")]
    pub hosting_provider: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The most recent date and time when this host was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The block of IP addresses this IP address belongs to.
    pub netblock: Option<String>,
    ///The hostPairs that are associated with a host, where that host is the childHost and has an incoming pairing with a parentHost.
    #[serde(rename = "parentHostPairs")]
    pub parent_host_pairs: Option<Vec<MicrosoftGraphSecurityHostPair>>,
    ///Passive DNS retrieval about this host.
    #[serde(rename = "passiveDns")]
    pub passive_dns: Option<Vec<MicrosoftGraphSecurityPassiveDnsRecord>>,
    ///Reverse passive DNS retrieval about this host.
    #[serde(rename = "passiveDnsReverse")]
    pub passive_dns_reverse: Option<Vec<MicrosoftGraphSecurityPassiveDnsRecord>>,
    ///The hostPorts associated with a host.
    pub ports: Option<Vec<MicrosoftGraphSecurityHostPort>>,
    ///Represents a calculated reputation of this host.
    pub reputation: Option<MicrosoftGraphSecurityHostReputation>,
    ///The hostSslCertificates that are associated with this host.
    #[serde(rename = "sslCertificates")]
    pub ssl_certificates: Option<Vec<MicrosoftGraphSecurityHostSslCertificate>>,
    ///The subdomains that are associated with this host.
    pub subdomains: Option<Vec<MicrosoftGraphSecuritySubdomain>>,
    ///The hostTrackers that are associated with this host.
    pub trackers: Option<Vec<MicrosoftGraphSecurityHostTracker>>,
    ///The most recent whoisRecord for this host.
    pub whois: Option<Box<MicrosoftGraphSecurityWhoisRecord>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityIpEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.ipEvidence".to_string())]
    pub odata_type: String,
    ///The two-letter country code according to ISO 3166 format, for example: US, UK, CA, etc.
    #[serde(rename = "countryLetterCode")]
    pub country_letter_code: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The value of the IP Address, can be either in V4 address or V6 address format.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    pub location: Option<MicrosoftGraphSecurityGeoLocation>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    pub stream: Option<MicrosoftGraphSecurityStream>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityItemsToInclude {
    #[serde(rename = "searchHits")]
    #[default]
    SearchHits,
    #[serde(rename = "partiallyIndexed")]
    PartiallyIndexed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityKubernetesClusterEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.kubernetesClusterEvidence".to_string())]
    pub odata_type: String,
    ///The cloud identifier of the cluster. Can be either an amazonResourceEvidence, azureResourceEvidence, or googleCloudResourceEvidence object.
    #[serde(rename = "cloudResource")]
    pub cloud_resource: Option<MicrosoftGraphSecurityAlertEvidence>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The distribution type of the cluster.
    pub distribution: Option<String>,
    ///The cluster name.
    pub name: Option<String>,
    ///The platform the cluster runs on. Possible values are: unknown, aks, eks, gke, arc, unknownFutureValue.
    pub platform: Option<MicrosoftGraphSecurityKubernetesPlatform>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
    ///The kubernetes version of the cluster.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityKubernetesControllerEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.kubernetesControllerEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The labels for the Kubernetes pod.
    pub labels: Option<MicrosoftGraphSecurityDictionary>,
    ///The controller name.
    pub name: Option<String>,
    ///The service account namespace.
    pub namespace: Option<MicrosoftGraphSecurityKubernetesNamespaceEvidence>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    ///The controller type.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityKubernetesNamespaceEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.kubernetesNamespaceEvidence".to_string())]
    pub odata_type: String,
    ///The namespace cluster.
    pub cluster: Option<MicrosoftGraphSecurityKubernetesClusterEvidence>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The labels for the Kubernetes pod.
    pub labels: Option<MicrosoftGraphSecurityDictionary>,
    ///The namespace name.
    pub name: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityKubernetesPlatform {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "aks")]
    Aks,
    #[serde(rename = "eks")]
    Eks,
    #[serde(rename = "gke")]
    Gke,
    #[serde(rename = "arc")]
    Arc,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityKubernetesPodEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.kubernetesPodEvidence".to_string())]
    pub odata_type: String,
    ///The list of pod containers which are not init or ephemeral containers.
    pub containers: Option<Vec<MicrosoftGraphSecurityContainerEvidence>>,
    ///The pod controller.
    pub controller: Option<MicrosoftGraphSecurityKubernetesControllerEvidence>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The list of pod ephemeral containers.
    #[serde(rename = "ephemeralContainers")]
    pub ephemeral_containers: Option<Vec<MicrosoftGraphSecurityContainerEvidence>>,
    ///The list of pod init containers.
    #[serde(rename = "initContainers")]
    pub init_containers: Option<Vec<MicrosoftGraphSecurityContainerEvidence>>,
    ///The pod labels.
    pub labels: Option<MicrosoftGraphSecurityDictionary>,
    ///The pod name.
    pub name: Option<String>,
    ///The pod namespace.
    pub namespace: Option<MicrosoftGraphSecurityKubernetesNamespaceEvidence>,
    ///The pod IP.
    #[serde(rename = "podIp")]
    pub pod_ip: Option<MicrosoftGraphSecurityIpEvidence>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///The pod service account.
    #[serde(rename = "serviceAccount")]
    pub service_account: Option<MicrosoftGraphSecurityKubernetesServiceAccountEvidence>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityKubernetesSecretEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.kubernetesSecretEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The secret name.
    pub name: Option<String>,
    ///The secret namespace.
    pub namespace: Option<MicrosoftGraphSecurityKubernetesNamespaceEvidence>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///The secret type can include both built-in types and custom ones. Examples of built-in types are: Opaque, kubernetes.io/service-account-token, kubernetes.io/dockercfg, kubernetes.io/dockerconfigjson, kubernetes.io/basic-auth, kubernetes.io/ssh-auth, kubernetes.io/tls, bootstrap.kubernetes.io/token.
    #[serde(rename = "secretType")]
    pub secret_type: Option<String>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityKubernetesServiceAccountEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.kubernetesServiceAccountEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The service account name.
    pub name: Option<String>,
    ///The service account namespace.
    pub namespace: Option<MicrosoftGraphSecurityKubernetesNamespaceEvidence>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityKubernetesServiceEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.kubernetesServiceEvidence".to_string())]
    pub odata_type: String,
    ///The service cluster IP.
    #[serde(rename = "clusterIP")]
    pub cluster_ip: Option<MicrosoftGraphSecurityIpEvidence>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The service external IPs.
    #[serde(rename = "externalIPs")]
    pub external_ips: Option<Vec<MicrosoftGraphSecurityIpEvidence>>,
    ///The service labels.
    pub labels: Option<MicrosoftGraphSecurityDictionary>,
    ///The service name.
    pub name: Option<String>,
    ///The service namespace.
    pub namespace: Option<MicrosoftGraphSecurityKubernetesNamespaceEvidence>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///The service selector.
    pub selector: Option<MicrosoftGraphSecurityDictionary>,
    ///The list of service ports.
    #[serde(rename = "servicePorts")]
    pub service_ports: Option<Vec<MicrosoftGraphSecurityKubernetesServicePort>>,
    #[serde(rename = "serviceType")]
    pub service_type: Option<MicrosoftGraphSecurityKubernetesServiceType>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityKubernetesServicePort {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The application protocol for this port.
    #[serde(rename = "appProtocol")]
    pub app_protocol: Option<String>,
    ///The name of this port within the service.
    pub name: Option<String>,
    ///The port on each node on which this service is exposed when the type is either NodePort or LoadBalancer.
    #[serde(rename = "nodePort")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub node_port: Option<f64>,
    ///The port that this service exposes.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub port: Option<f64>,
    ///The protocol name. Possible values are: udp, tcp, sctp, unknownFutureValue.
    pub protocol: Option<MicrosoftGraphSecurityContainerPortProtocol>,
    ///The name or number of the port to access on the pods targeted by the service. The port number must be in the range 1 to 65535. The name must be an IANASVCNAME.
    #[serde(rename = "targetPort")]
    pub target_port: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityKubernetesServiceType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "clusterIP")]
    ClusterIp,
    #[serde(rename = "externalName")]
    ExternalName,
    #[serde(rename = "nodePort")]
    NodePort,
    #[serde(rename = "loadBalancer")]
    LoadBalancer,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityLabelsRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.labelsRoot".to_string())]
    pub odata_type: String,
    ///Specifies the underlying authority that describes the type of content to be retained and its retention schedule.
    pub authorities: Option<Vec<MicrosoftGraphSecurityAuthorityTemplate>>,
    ///Specifies a group of similar types of content in a particular department.
    pub categories: Option<Vec<MicrosoftGraphSecurityCategoryTemplate>>,
    ///The specific rule or regulation created by a jurisdiction used to determine whether certain labels and content should be retained or deleted.
    pub citations: Option<Vec<MicrosoftGraphSecurityCitationTemplate>>,
    ///Specifies the department or business unit of an organization to which a label belongs.
    pub departments: Option<Vec<MicrosoftGraphSecurityDepartmentTemplate>>,
    ///Specifies a unique alpha-numeric identifier for an organization’s retention schedule.
    #[serde(rename = "filePlanReferences")]
    pub file_plan_references: Option<
        Vec<MicrosoftGraphSecurityFilePlanReferenceTemplate>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents how customers can manage their data, whether and for how long to retain or delete it.
    #[serde(rename = "retentionLabels")]
    pub retention_labels: Option<Vec<MicrosoftGraphSecurityRetentionLabel>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityLoggedOnUser {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///User account name of the logged-on user.
    #[serde(rename = "accountName")]
    pub account_name: Option<String>,
    ///User account domain of the logged-on user.
    #[serde(rename = "domainName")]
    pub domain_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityMailClusterEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.mailClusterEvidence".to_string())]
    pub odata_type: String,
    ///The clustering logic of the emails inside the cluster.
    #[serde(rename = "clusterBy")]
    pub cluster_by: Option<String>,
    ///The value utilized to cluster the similar emails.
    #[serde(rename = "clusterByValue")]
    pub cluster_by_value: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///Count of emails in the email cluster.
    #[serde(rename = "emailCount")]
    pub email_count: Option<f64>,
    ///Unique identifiers for the emails in the cluster, generated by Microsoft 365.
    #[serde(rename = "networkMessageIds")]
    pub network_message_ids: Option<Vec<Option<String>>>,
    ///The query used to identify the email cluster.
    pub query: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    ///Uniform resource name (URN) of the automated investigation where the cluster was identified.
    pub urn: Option<String>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityMailboxConfigurationEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.mailboxConfigurationEvidence".to_string())]
    pub odata_type: String,
    #[serde(rename = "configurationId")]
    pub configuration_id: Option<String>,
    #[serde(rename = "configurationType")]
    pub configuration_type: Option<MicrosoftGraphSecurityMailboxConfigurationType>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(rename = "externalDirectoryObjectId")]
    pub external_directory_object_id: Option<uuid::Uuid>,
    #[serde(rename = "mailboxPrimaryAddress")]
    pub mailbox_primary_address: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub upn: Option<String>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityMailboxConfigurationType {
    #[serde(rename = "mailForwardingRule")]
    #[default]
    MailForwardingRule,
    #[serde(rename = "owaSettings")]
    OwaSettings,
    #[serde(rename = "ewsSettings")]
    EwsSettings,
    #[serde(rename = "mailDelegation")]
    MailDelegation,
    #[serde(rename = "userInboxRule")]
    UserInboxRule,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityMailboxEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.mailboxEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The name associated with the mailbox.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The primary email address of the mailbox.
    #[serde(rename = "primaryAddress")]
    pub primary_address: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    ///The user principal name of the mailbox.
    pub upn: Option<String>,
    ///The user account of the mailbox.
    #[serde(rename = "userAccount")]
    pub user_account: Option<MicrosoftGraphSecurityUserAccount>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityMalwareEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.malwareEvidence".to_string())]
    pub odata_type: String,
    pub category: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    pub files: Option<Vec<MicrosoftGraphSecurityFileEvidence>>,
    pub name: Option<String>,
    pub processes: Option<Vec<MicrosoftGraphSecurityProcessEvidence>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityNetworkAdapter {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.networkAdapter".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the network adapter is selected for capturing and analyzing network traffic.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///The name of the network adapter.
    pub name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityNetworkConnectionEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.networkConnectionEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "destinationAddress")]
    pub destination_address: Option<MicrosoftGraphSecurityIpEvidence>,
    #[serde(rename = "destinationPort")]
    pub destination_port: Option<f64>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    pub protocol: Option<MicrosoftGraphSecurityProtocolType>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    #[serde(rename = "sourceAddress")]
    pub source_address: Option<MicrosoftGraphSecurityIpEvidence>,
    #[serde(rename = "sourcePort")]
    pub source_port: Option<f64>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityNetworkProtocol {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "ip")]
    Ip,
    #[serde(rename = "icmp")]
    Icmp,
    #[serde(rename = "igmp")]
    Igmp,
    #[serde(rename = "ggp")]
    Ggp,
    #[serde(rename = "ipv4")]
    Ipv4,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "pup")]
    Pup,
    #[serde(rename = "udp")]
    Udp,
    #[serde(rename = "idp")]
    Idp,
    #[serde(rename = "ipv6")]
    Ipv6,
    #[serde(rename = "ipv6RoutingHeader")]
    Ipv6RoutingHeader,
    #[serde(rename = "ipv6FragmentHeader")]
    Ipv6FragmentHeader,
    #[serde(rename = "ipSecEncapsulatingSecurityPayload")]
    IpSecEncapsulatingSecurityPayload,
    #[serde(rename = "ipSecAuthenticationHeader")]
    IpSecAuthenticationHeader,
    #[serde(rename = "icmpV6")]
    IcmpV6,
    #[serde(rename = "ipv6NoNextHeader")]
    Ipv6NoNextHeader,
    #[serde(rename = "ipv6DestinationOptions")]
    Ipv6DestinationOptions,
    #[serde(rename = "nd")]
    Nd,
    #[serde(rename = "raw")]
    Raw,
    #[serde(rename = "ipx")]
    Ipx,
    #[serde(rename = "spx")]
    Spx,
    #[serde(rename = "spxII")]
    SpxIi,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityNicEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.nicEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The current IP address of the NIC.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<MicrosoftGraphSecurityIpEvidence>,
    ///The MAC address of the NIC.
    #[serde(rename = "macAddress")]
    pub mac_address: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
    ///The current virtual local area networks of the NIC.
    pub vlans: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityOauthApplicationEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.oauthApplicationEvidence".to_string())]
    pub odata_type: String,
    ///Unique identifier of the application.
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///Name of the application.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier of the application object in Azure AD.
    #[serde(rename = "objectId")]
    pub object_id: Option<String>,
    ///The name of the application publisher.
    pub publisher: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityOcrSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether or not OCR is enabled for the case.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Maximum image size that will be processed in KB).
    #[serde(rename = "maxImageSize")]
    pub max_image_size: Option<f64>,
    ///The timeout duration for the OCR engine. A longer timeout might increase success of OCR, but might add to the total processing time.
    pub timeout: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityOnboardingStatus {
    #[serde(rename = "insufficientInfo")]
    #[default]
    InsufficientInfo,
    #[serde(rename = "onboarded")]
    Onboarded,
    #[serde(rename = "canBeOnboarded")]
    CanBeOnboarded,
    #[serde(rename = "unsupported")]
    Unsupported,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityPassiveDnsRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.passiveDnsRecord".to_string())]
    pub odata_type: String,
    pub artifact: Option<MicrosoftGraphSecurityArtifact>,
    ///The date and time that this passiveDnsRecord entry was collected by Microsoft. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "collectedDateTime")]
    pub collected_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when this passiveDnsRecord entry was first seen. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time when this passiveDnsRecord entry was most recently seen. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "parentHost")]
    pub parent_host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The DNS record type for this passiveDnsRecord entry.
    #[serde(rename = "recordType")]
    pub record_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityProcessEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.processEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The status of the detection.The possible values are: detected, blocked, prevented, unknownFutureValue.
    #[serde(rename = "detectionStatus")]
    pub detection_status: Option<MicrosoftGraphSecurityDetectionStatus>,
    ///Image file details.
    #[serde(rename = "imageFile")]
    pub image_file: Option<MicrosoftGraphSecurityFileDetails>,
    ///A unique identifier assigned to a device by Microsoft Defender for Endpoint.
    #[serde(rename = "mdeDeviceId")]
    pub mde_device_id: Option<String>,
    ///Date and time when the parent of the process was created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "parentProcessCreationDateTime")]
    pub parent_process_creation_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Process ID (PID) of the parent process that spawned the process.
    #[serde(rename = "parentProcessId")]
    pub parent_process_id: Option<f64>,
    ///Parent process image file details.
    #[serde(rename = "parentProcessImageFile")]
    pub parent_process_image_file: Option<MicrosoftGraphSecurityFileDetails>,
    ///Command line used to create the new process.
    #[serde(rename = "processCommandLine")]
    pub process_command_line: Option<String>,
    ///Date and time when the process was created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "processCreationDateTime")]
    pub process_creation_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Process ID (PID) of the newly created process.
    #[serde(rename = "processId")]
    pub process_id: Option<f64>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    ///User details of the user that ran the process.
    #[serde(rename = "userAccount")]
    pub user_account: Option<MicrosoftGraphSecurityUserAccount>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityProtocolType {
    #[serde(rename = "tcp")]
    #[default]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityQueryType {
    #[serde(rename = "files")]
    #[default]
    Files,
    #[serde(rename = "messages")]
    Messages,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityRedundancyDetectionSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether email threading and near duplicate detection are enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Specifies the maximum number of words used for email threading and near duplicate detection. To learn more, see Minimum/maximum number of words.
    #[serde(rename = "maxWords")]
    pub max_words: Option<f64>,
    ///Specifies the minimum number of words used for email threading and near duplicate detection. To learn more, see Minimum/maximum number of words.
    #[serde(rename = "minWords")]
    pub min_words: Option<f64>,
    ///Specifies the similarity level for documents to be put in the same near duplicate set. To learn more, see Document and email similarity threshold.
    #[serde(rename = "similarityThreshold")]
    pub similarity_threshold: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityRegistryKeyEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.registryKeyEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///Registry hive of the key that the recorded action was applied to.
    #[serde(rename = "registryHive")]
    pub registry_hive: Option<String>,
    ///Registry key that the recorded action was applied to.
    #[serde(rename = "registryKey")]
    pub registry_key: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityRegistryValueEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.registryValueEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///A unique identifier assigned to a device by Microsoft Defender for Endpoint.
    #[serde(rename = "mdeDeviceId")]
    pub mde_device_id: Option<String>,
    ///Registry hive of the key that the recorded action was applied to.
    #[serde(rename = "registryHive")]
    pub registry_hive: Option<String>,
    ///Registry key that the recorded action was applied to.
    #[serde(rename = "registryKey")]
    pub registry_key: Option<String>,
    ///Data of the registry value that the recorded action was applied to.
    #[serde(rename = "registryValue")]
    pub registry_value: Option<String>,
    ///Name of the registry value that the recorded action was applied to.
    #[serde(rename = "registryValueName")]
    pub registry_value_name: Option<String>,
    ///Data type, such as binary or string, of the registry value that the recorded action was applied to.
    #[serde(rename = "registryValueType")]
    pub registry_value_type: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityReportFileMetadata {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The URL to download the report.
    #[serde(rename = "downloadUrl")]
    pub download_url: Option<String>,
    ///The name of the file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The size of the file.
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityReportsRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.securityReportsRoot".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityResource {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Name of the resource that is related to current alert. Required.
    pub resource: Option<String>,
    ///Represents type of security resources related to an alert. Possible values are: attacked, related.
    #[serde(rename = "resourceType")]
    pub resource_type: Option<MicrosoftGraphSecurityResourceType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityResourceAccessEvent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The time of the access event.
    #[serde(rename = "accessDateTime")]
    pub access_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The identifier of the user account.
    #[serde(rename = "accountId")]
    pub account_id: Option<String>,
    ///IP address of the resource.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///The protocol and host name pairs describing the connection.
    #[serde(rename = "resourceIdentifier")]
    pub resource_identifier: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityResourceType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "attacked")]
    Attacked,
    #[serde(rename = "related")]
    Related,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
discriminated_enum! {
    pub enum MicrosoftGraphSecurityRetentionDuration { discriminator : "@odata.type",
    variants : [("#microsoft.graph.security.retentionDurationForever", Forever(Box <
    MicrosoftGraphSecurityRetentionDurationForever >)),
    ("#microsoft.graph.security.retentionDurationInDays", InDays(Box <
    MicrosoftGraphSecurityRetentionDurationInDays >))], fallback : RetentionDuration(Box
    < MicrosoftGraphSecurityRetentionDurationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityRetentionDurationBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityRetentionDurationForever {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.retentionDurationForever".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityRetentionDurationInDays {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.retentionDurationInDays".to_string())]
    pub odata_type: String,
    ///Specifies the time period in days for which an item with the applied retention label will be retained for.
    pub days: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityRetentionEvent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.retentionEvent".to_string())]
    pub odata_type: String,
    ///The user who created the retentionEvent.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date time when the retentionEvent was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Optional information about the event.
    pub description: Option<String>,
    ///Name of the event.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Represents the success status of a created event and additional information.
    #[serde(rename = "eventPropagationResults")]
    pub event_propagation_results: Option<
        Vec<MicrosoftGraphSecurityEventPropagationResult>,
    >,
    ///Represents the workload (SharePoint Online, OneDrive for Business, Exchange Online) and identification information associated with a retention event.
    #[serde(rename = "eventQueries")]
    pub event_queries: Option<Vec<MicrosoftGraphSecurityEventQuery>>,
    ///Status of event propogation to the scoped locations after the event has been created.
    #[serde(rename = "eventStatus")]
    pub event_status: Option<MicrosoftGraphSecurityRetentionEventStatus>,
    ///Optional time when the event should be triggered.
    #[serde(rename = "eventTriggerDateTime")]
    pub event_trigger_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user who last modified the retentionEvent.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The latest date time when the retentionEvent was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Last time the status of the event was updated.
    #[serde(rename = "lastStatusUpdateDateTime")]
    pub last_status_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies the event that will start the retention period for labels that use this event type when an event is created.
    #[serde(rename = "retentionEventType")]
    pub retention_event_type: Option<MicrosoftGraphSecurityRetentionEventType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityRetentionEventStatus {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The error if the status isn't successful.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The status of the distribution. The possible values are: pending, error, success, notAvaliable.
    pub status: Option<MicrosoftGraphSecurityEventStatusType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityRetentionEventType {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.retentionEventType".to_string())]
    pub odata_type: String,
    ///The user who created the retentionEventType.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date time when the retentionEventType was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Optional information about the event type.
    pub description: Option<String>,
    ///Name of the event type.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user who last modified the retentionEventType.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The latest date time when the retentionEventType was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityRetentionLabel {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.retentionLabel".to_string())]
    pub odata_type: String,
    ///Specifies the action to take on the labeled document after the period specified by the retentionDuration property expires. The possible values are: none, delete, startDispositionReview, unknownFutureValue.
    #[serde(rename = "actionAfterRetentionPeriod")]
    pub action_after_retention_period: Option<
        MicrosoftGraphSecurityActionAfterRetentionPeriod,
    >,
    ///Specifies how the behavior of a document with this label should be during the retention period. The possible values are: doNotRetain, retain, retainAsRecord, retainAsRegulatoryRecord, unknownFutureValue.
    #[serde(rename = "behaviorDuringRetentionPeriod")]
    pub behavior_during_retention_period: Option<
        MicrosoftGraphSecurityBehaviorDuringRetentionPeriod,
    >,
    ///Represents the user who created the retentionLabel.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Represents the date and time in which the retentionLabel is created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies the locked or unlocked state of a record label when it is created.The possible values are: startLocked, startUnlocked, unknownFutureValue.
    #[serde(rename = "defaultRecordBehavior")]
    pub default_record_behavior: Option<MicrosoftGraphSecurityDefaultRecordBehavior>,
    ///Provides label information for the admin. Optional.
    #[serde(rename = "descriptionForAdmins")]
    pub description_for_admins: Option<String>,
    ///Provides the label information for the user. Optional.
    #[serde(rename = "descriptionForUsers")]
    pub description_for_users: Option<String>,
    ///Represents out-of-the-box values that provide more options to improve the manageability and organization of the content you need to label.
    pub descriptors: Option<MicrosoftGraphSecurityFilePlanDescriptor>,
    ///Unique string that defines a label name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///When action at the end of retention is chosen as 'dispositionReview', dispositionReviewStages specifies a sequential set of stages with at least one reviewer in each stage.
    #[serde(rename = "dispositionReviewStages")]
    pub disposition_review_stages: Option<
        Vec<MicrosoftGraphSecurityDispositionReviewStage>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies whether the label is currently being used.
    #[serde(rename = "isInUse")]
    pub is_in_use: Option<bool>,
    ///Specifies the replacement label to be applied automatically after the retention period of the current label ends.
    #[serde(rename = "labelToBeApplied")]
    pub label_to_be_applied: Option<String>,
    ///The user who last modified the retentionLabel.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The latest date time when the retentionLabel was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies the number of days to retain the content.
    #[serde(rename = "retentionDuration")]
    pub retention_duration: Option<MicrosoftGraphSecurityRetentionDuration>,
    ///Represents the type associated with a retention event.
    #[serde(rename = "retentionEventType")]
    pub retention_event_type: Option<MicrosoftGraphSecurityRetentionEventType>,
    ///Specifies whether the retention duration is calculated from the content creation date, labeled date, or last modification date. The possible values are: dateLabeled, dateCreated, dateModified, dateOfEvent, unknownFutureValue.
    #[serde(rename = "retentionTrigger")]
    pub retention_trigger: Option<MicrosoftGraphSecurityRetentionTrigger>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityRetentionTrigger {
    #[serde(rename = "dateLabeled")]
    #[default]
    DateLabeled,
    #[serde(rename = "dateCreated")]
    DateCreated,
    #[serde(rename = "dateModified")]
    DateModified,
    #[serde(rename = "dateOfEvent")]
    DateOfEvent,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityReviewSetSettings {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "disableGrouping")]
    DisableGrouping,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecuritySasTokenEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.sasTokenEvidence".to_string())]
    pub odata_type: String,
    #[serde(rename = "allowedIpAddresses")]
    pub allowed_ip_addresses: Option<String>,
    #[serde(rename = "allowedResourceTypes")]
    pub allowed_resource_types: Option<Vec<Option<String>>>,
    #[serde(rename = "allowedServices")]
    pub allowed_services: Option<Vec<Option<String>>>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "expiryDateTime")]
    pub expiry_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub permissions: Option<Vec<Option<String>>>,
    pub protocol: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    #[serde(rename = "signatureHash")]
    pub signature_hash: Option<String>,
    #[serde(rename = "signedWith")]
    pub signed_with: Option<String>,
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "storageResource")]
    pub storage_resource: Option<MicrosoftGraphSecurityAzureResourceEvidence>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecuritySearch {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.search".to_string())]
    pub odata_type: String,
    #[serde(rename = "contentQuery")]
    pub content_query: Option<String>,
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub description: Option<String>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecuritySecurityGroupEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.securityGroupEvidence".to_string())]
    pub odata_type: String,
    ///The unique group identifier assigned by the on-premises Active Directory.
    #[serde(rename = "activeDirectoryObjectGuid")]
    pub active_directory_object_guid: Option<uuid::Uuid>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The name of the security group.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The distinguished name of the security group.
    #[serde(rename = "distinguishedName")]
    pub distinguished_name: Option<String>,
    ///The friendly name of the security group.
    #[serde(rename = "friendlyName")]
    pub friendly_name: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Unique identifier of the security group.
    #[serde(rename = "securityGroupId")]
    pub security_group_id: Option<String>,
    ///The security identifier of the group.
    pub sid: Option<String>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecuritySensor {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.sensor".to_string())]
    pub odata_type: String,
    ///The date and time when the sensor was generated. The Timestamp represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "deploymentStatus")]
    pub deployment_status: Option<MicrosoftGraphSecurityDeploymentStatus>,
    ///The display name of the sensor.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The fully qualified domain name of the sensor.
    #[serde(rename = "domainName")]
    pub domain_name: Option<String>,
    ///Represents potential issues within a customer's Microsoft Defender for Identity configuration that Microsoft Defender for Identity identified related to the sensor.
    #[serde(rename = "healthIssues")]
    pub health_issues: Option<Vec<MicrosoftGraphSecurityHealthIssue>>,
    #[serde(rename = "healthStatus")]
    pub health_status: Option<MicrosoftGraphSecuritySensorHealthStatus>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///This field displays the count of health issues related to this sensor.
    #[serde(rename = "openHealthIssuesCount")]
    pub open_health_issues_count: Option<f64>,
    #[serde(rename = "sensorType")]
    pub sensor_type: Option<MicrosoftGraphSecuritySensorType>,
    pub settings: Option<MicrosoftGraphSecuritySensorSettings>,
    ///The version of the sensor.
    pub version: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecuritySensorHealthStatus {
    #[serde(rename = "healthy")]
    #[default]
    Healthy,
    #[serde(rename = "notHealthyLow")]
    NotHealthyLow,
    #[serde(rename = "notHealthyMedium")]
    NotHealthyMedium,
    #[serde(rename = "notHealthyHigh")]
    NotHealthyHigh,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecuritySensorSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Description of the sensor.
    pub description: Option<String>,
    ///DNS names for the domain controller
    #[serde(rename = "domainControllerDnsNames")]
    pub domain_controller_dns_names: Option<Vec<Option<String>>>,
    ///Indicates whether to delay updates for the sensor.
    #[serde(rename = "isDelayedDeploymentEnabled")]
    pub is_delayed_deployment_enabled: Option<bool>,
    #[serde(rename = "networkAdapters")]
    pub network_adapters: Option<Vec<MicrosoftGraphSecurityNetworkAdapter>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecuritySensorType {
    #[serde(rename = "adConnectIntegrated")]
    #[default]
    AdConnectIntegrated,
    #[serde(rename = "adcsIntegrated")]
    AdcsIntegrated,
    #[serde(rename = "adfsIntegrated")]
    AdfsIntegrated,
    #[serde(rename = "domainControllerIntegrated")]
    DomainControllerIntegrated,
    #[serde(rename = "domainControllerStandalone")]
    DomainControllerStandalone,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityServicePrincipalEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.servicePrincipalEvidence".to_string())]
    pub odata_type: String,
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    #[serde(rename = "appOwnerTenantId")]
    pub app_owner_tenant_id: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    #[serde(rename = "servicePrincipalName")]
    pub service_principal_name: Option<String>,
    #[serde(rename = "servicePrincipalObjectId")]
    pub service_principal_object_id: Option<String>,
    #[serde(rename = "servicePrincipalType")]
    pub service_principal_type: Option<MicrosoftGraphSecurityServicePrincipalType>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityServicePrincipalType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "application")]
    Application,
    #[serde(rename = "managedIdentity")]
    ManagedIdentity,
    #[serde(rename = "legacy")]
    Legacy,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityServiceSource {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "microsoftDefenderForEndpoint")]
    MicrosoftDefenderForEndpoint,
    #[serde(rename = "microsoftDefenderForIdentity")]
    MicrosoftDefenderForIdentity,
    #[serde(rename = "microsoftDefenderForCloudApps")]
    MicrosoftDefenderForCloudApps,
    #[serde(rename = "microsoftDefenderForOffice365")]
    MicrosoftDefenderForOffice365,
    #[serde(rename = "microsoft365Defender")]
    Microsoft365Defender,
    #[serde(rename = "azureAdIdentityProtection")]
    AzureAdIdentityProtection,
    #[serde(rename = "microsoftAppGovernance")]
    MicrosoftAppGovernance,
    #[serde(rename = "dataLossPrevention")]
    DataLossPrevention,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "microsoftDefenderForCloud")]
    MicrosoftDefenderForCloud,
    #[serde(rename = "microsoftSentinel")]
    MicrosoftSentinel,
    #[serde(rename = "microsoftInsiderRiskManagement")]
    MicrosoftInsiderRiskManagement,
    #[serde(rename = "microsoftThreatIntelligence")]
    MicrosoftThreatIntelligence,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecuritySiteSource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.siteSource".to_string())]
    pub odata_type: String,
    ///The user who created the dataSource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the dataSource was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The display name of the dataSource and is the name of the SharePoint site.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The hold status of the dataSource.The possible values are: notApplied, applied, applying, removing, partial
    #[serde(rename = "holdStatus")]
    pub hold_status: Option<MicrosoftGraphSecurityDataSourceHoldStatus>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub site: Option<Box<MicrosoftGraphSite>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecuritySourceType {
    #[serde(rename = "mailbox")]
    #[default]
    Mailbox,
    #[serde(rename = "site")]
    Site,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecuritySslCertificate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.sslCertificate".to_string())]
    pub odata_type: String,
    ///The date and time when a certificate expires. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A hash of the certificate calculated on the data and signature.
    pub fingerprint: Option<String>,
    ///The first date and time when this sslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time when a certificate was issued. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "issueDateTime")]
    pub issue_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The entity that grants this certificate.
    pub issuer: Option<MicrosoftGraphSecuritySslCertificateEntity>,
    ///The most recent date and time when this sslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The host resources related with this sslCertificate.
    #[serde(rename = "relatedHosts")]
    pub related_hosts: Option<Vec<MicrosoftGraphSecurityHost>>,
    ///The serial number associated with an SSL certificate.
    #[serde(rename = "serialNumber")]
    pub serial_number: Option<String>,
    ///A SHA-1 hash of the certificate. Note: This is not the signature.
    pub sha1: Option<String>,
    ///The person, site, machine, and so on, this certificate is for.
    pub subject: Option<MicrosoftGraphSecuritySslCertificateEntity>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecuritySslCertificateEntity {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A physical address of the entity.
    pub address: Option<MicrosoftGraphPhysicalAddress>,
    ///Alternate names for this entity that are part of the certificate.
    #[serde(rename = "alternateNames")]
    pub alternate_names: Option<Vec<Option<String>>>,
    ///A common name for this entity.
    #[serde(rename = "commonName")]
    pub common_name: Option<String>,
    ///An email for this entity.
    pub email: Option<String>,
    ///If the entity is a person, this is the person's given name (first name).
    #[serde(rename = "givenName")]
    pub given_name: Option<String>,
    ///If the entity is an organization, this is the name of the organization.
    #[serde(rename = "organizationName")]
    pub organization_name: Option<String>,
    ///If the entity is an organization, this communicates if a unit in the organization is named on the entity.
    #[serde(rename = "organizationUnitName")]
    pub organization_unit_name: Option<String>,
    ///A serial number assigned to the entity; usually only available if the entity is the issuer.
    #[serde(rename = "serialNumber")]
    pub serial_number: Option<String>,
    ///If the entity is a person, this is the person's surname (last name).
    pub surname: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityStatisticsOptions {
    #[serde(rename = "includeRefiners")]
    #[default]
    IncludeRefiners,
    #[serde(rename = "includeQueryStats")]
    IncludeQueryStats,
    #[serde(rename = "includeUnindexedStats")]
    IncludeUnindexedStats,
    #[serde(rename = "advancedIndexing")]
    AdvancedIndexing,
    #[serde(rename = "locationsWithoutHits")]
    LocationsWithoutHits,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityStream {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecuritySubcategoryTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.subcategoryTemplate".to_string())]
    pub odata_type: String,
    ///Represents the user who created the filePlanDescriptorTemplate column.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Represents the date and time in which the filePlanDescriptorTemplate is created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Unique string that defines a filePlanDescriptorTemplate name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecuritySubdomain {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.subdomain".to_string())]
    pub odata_type: String,
    ///The date and time when Microsoft Defender Threat Intelligence first observed the subdomain. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecuritySubmissionMailEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.submissionMailEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "networkMessageId")]
    pub network_message_id: Option<String>,
    pub recipient: Option<String>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    #[serde(rename = "reportType")]
    pub report_type: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    pub sender: Option<String>,
    #[serde(rename = "senderIp")]
    pub sender_ip: Option<String>,
    pub subject: Option<String>,
    #[serde(rename = "submissionDateTime")]
    pub submission_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "submissionId")]
    pub submission_id: Option<String>,
    pub submitter: Option<String>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityTag {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.tag".to_string())]
    pub odata_type: String,
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    pub description: Option<String>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityTeamsDeliveryLocation {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "teams")]
    Teams,
    #[serde(rename = "quarantine")]
    Quarantine,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityTeamsMessageDeliveryAction {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "deliveredAsSpam")]
    DeliveredAsSpam,
    #[serde(rename = "delivered")]
    Delivered,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "replaced")]
    Replaced,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityTeamsMessageEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.teamsMessageEvidence".to_string())]
    pub odata_type: String,
    ///The identifier of the campaign that this Teams message is part of.
    #[serde(rename = "campaignId")]
    pub campaign_id: Option<String>,
    ///The channel ID associated with this Teams message.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The delivery action of this Teams message. Possible values are: unknown, deliveredAsSpam, delivered, blocked, replaced, unknownFutureValue.
    #[serde(rename = "deliveryAction")]
    pub delivery_action: Option<MicrosoftGraphSecurityTeamsMessageDeliveryAction>,
    ///The delivery location of this Teams message. Possible values are: unknown, teams, quarantine, failed, unknownFutureValue.
    #[serde(rename = "deliveryLocation")]
    pub delivery_location: Option<MicrosoftGraphSecurityTeamsDeliveryLocation>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    ///The list of file entities that are attached to this Teams message.
    pub files: Option<Vec<MicrosoftGraphSecurityFileEvidence>>,
    ///The identifier of the team or group that this message is part of.
    #[serde(rename = "groupId")]
    pub group_id: Option<String>,
    ///Indicates whether the message is owned by the organization that reported the security detection alert.
    #[serde(rename = "isExternal")]
    pub is_external: Option<bool>,
    ///Indicates whether the message is owned by your organization.
    #[serde(rename = "isOwned")]
    pub is_owned: Option<bool>,
    ///Date and time when the message was last edited. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The direction of the Teams message. The possible values are: unknown, inbound, outbound, intraorg, unknownFutureValue.
    #[serde(rename = "messageDirection")]
    pub message_direction: Option<MicrosoftGraphSecurityAntispamTeamsDirection>,
    ///Message identifier unique within the thread.
    #[serde(rename = "messageId")]
    pub message_id: Option<String>,
    ///Tenant ID (GUID) of the owner of the message.
    #[serde(rename = "owningTenantId")]
    pub owning_tenant_id: Option<uuid::Uuid>,
    ///Identifier of the message to which the current message is a reply; otherwise, it's the same as the messageId.
    #[serde(rename = "parentMessageId")]
    pub parent_message_id: Option<String>,
    ///The received date of this message. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "receivedDateTime")]
    pub received_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The recipients of this Teams message.
    pub recipients: Option<Vec<Option<String>>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///The SMTP format address of the sender.
    #[serde(rename = "senderFromAddress")]
    pub sender_from_address: Option<String>,
    ///The IP address of the sender.
    #[serde(rename = "senderIP")]
    pub sender_ip: Option<String>,
    ///Source of the message; for example, desktop and mobile.
    #[serde(rename = "sourceAppName")]
    pub source_app_name: Option<String>,
    ///The source ID of this Teams message.
    #[serde(rename = "sourceId")]
    pub source_id: Option<String>,
    ///The subject of this Teams message.
    pub subject: Option<String>,
    ///The list of recipients who were detected as suspicious.
    #[serde(rename = "suspiciousRecipients")]
    pub suspicious_recipients: Option<Vec<Option<String>>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    ///Identifier of the channel or chat that this message is part of.
    #[serde(rename = "threadId")]
    pub thread_id: Option<String>,
    ///The Teams message type. Supported values are: Chat, Topic, Space, and Meeting.
    #[serde(rename = "threadType")]
    pub thread_type: Option<String>,
    ///The URLs contained in this Teams message.
    pub urls: Option<Vec<MicrosoftGraphSecurityUrlEvidence>>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityThreatIntelligence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.threatIntelligence".to_string())]
    pub odata_type: String,
    ///Refers to indicators of threat or compromise highlighted in an article.Note: List retrieval is not yet supported.
    #[serde(rename = "articleIndicators")]
    pub article_indicators: Option<Vec<MicrosoftGraphSecurityArticleIndicator>>,
    ///A list of article objects.
    pub articles: Option<Vec<MicrosoftGraphSecurityArticle>>,
    ///Retrieve details about hostComponent objects.Note: List retrieval is not yet supported.
    #[serde(rename = "hostComponents")]
    pub host_components: Option<Vec<MicrosoftGraphSecurityHostComponent>>,
    ///Retrieve details about hostCookie objects.Note: List retrieval is not yet supported.
    #[serde(rename = "hostCookies")]
    pub host_cookies: Option<Vec<MicrosoftGraphSecurityHostCookie>>,
    ///Retrieve details about hostTracker objects.Note: List retrieval is not yet supported.
    #[serde(rename = "hostPairs")]
    pub host_pairs: Option<Vec<MicrosoftGraphSecurityHostPair>>,
    ///Retrieve details about hostPort objects.Note: List retrieval is not yet supported.
    #[serde(rename = "hostPorts")]
    pub host_ports: Option<Vec<MicrosoftGraphSecurityHostPort>>,
    ///Retrieve details about hostSslCertificate objects.Note: List retrieval is not yet supported.
    #[serde(rename = "hostSslCertificates")]
    pub host_ssl_certificates: Option<Vec<MicrosoftGraphSecurityHostSslCertificate>>,
    ///Retrieve details about hostTracker objects.Note: List retrieval is not yet supported.
    #[serde(rename = "hostTrackers")]
    pub host_trackers: Option<Vec<MicrosoftGraphSecurityHostTracker>>,
    ///Refers to host objects that Microsoft Threat Intelligence has observed.Note: List retrieval is not yet supported.
    pub hosts: Option<Vec<MicrosoftGraphSecurityHost>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A list of intelligenceProfile objects.
    #[serde(rename = "intelProfiles")]
    pub intel_profiles: Option<Vec<MicrosoftGraphSecurityIntelligenceProfile>>,
    #[serde(rename = "intelligenceProfileIndicators")]
    pub intelligence_profile_indicators: Option<
        Vec<MicrosoftGraphSecurityIntelligenceProfileIndicator>,
    >,
    ///Retrieve details about passiveDnsRecord objects.Note: List retrieval is not yet supported.
    #[serde(rename = "passiveDnsRecords")]
    pub passive_dns_records: Option<Vec<MicrosoftGraphSecurityPassiveDnsRecord>>,
    ///Retrieve details about sslCertificate objects.Note: List retrieval is not yet supported.
    #[serde(rename = "sslCertificates")]
    pub ssl_certificates: Option<Vec<MicrosoftGraphSecuritySslCertificate>>,
    ///Retrieve details about the subdomain.Note: List retrieval is not yet supported.
    pub subdomains: Option<Vec<MicrosoftGraphSecuritySubdomain>>,
    ///Retrieve details about vulnerabilities.Note: List retrieval is not yet supported.
    pub vulnerabilities: Option<Vec<MicrosoftGraphSecurityVulnerability>>,
    ///Retrieve details about whoisHistoryRecord objects.Note: List retrieval is not yet supported.
    #[serde(rename = "whoisHistoryRecords")]
    pub whois_history_records: Option<Vec<MicrosoftGraphSecurityWhoisHistoryRecord>>,
    ///A list of whoisRecord objects.
    #[serde(rename = "whoisRecords")]
    pub whois_records: Option<Vec<MicrosoftGraphSecurityWhoisRecord>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityTopicModelingSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether the themes model should dynamically optimize the number of generated topics. To learn more, see Adjust maximum number of themes dynamically.
    #[serde(rename = "dynamicallyAdjustTopicCount")]
    pub dynamically_adjust_topic_count: Option<bool>,
    ///Indicates whether the themes model should exclude numbers while parsing document texts. To learn more, see Include numbers in themes.
    #[serde(rename = "ignoreNumbers")]
    pub ignore_numbers: Option<bool>,
    ///Indicates whether themes model is enabled for the case.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///The total number of topics that the themes model will generate for a review set. To learn more, see Maximum number of themes.
    #[serde(rename = "topicCount")]
    pub topic_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityTriggerTypesRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.triggerTypesRoot".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "retentionEventTypes")]
    pub retention_event_types: Option<Vec<MicrosoftGraphSecurityRetentionEventType>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityTriggersRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.triggersRoot".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "retentionEvents")]
    pub retention_events: Option<Vec<MicrosoftGraphSecurityRetentionEvent>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityUnclassifiedArtifact {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.unclassifiedArtifact".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The kind for this unclassifiedArtifact resource, describing what this value means.
    pub kind: Option<String>,
    ///The value for this unclassifiedArtifact.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityUnifiedGroupSource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.unifiedGroupSource".to_string())]
    pub odata_type: String,
    ///The user who created the dataSource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the dataSource was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The display name of the dataSource and is the name of the SharePoint site.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    pub group: Option<Box<MicrosoftGraphGroup>>,
    ///The hold status of the dataSource.The possible values are: notApplied, applied, applying, removing, partial
    #[serde(rename = "holdStatus")]
    pub hold_status: Option<MicrosoftGraphSecurityDataSourceHoldStatus>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies which sources are included in this group. Possible values are: mailbox, site.
    #[serde(rename = "includedSources")]
    pub included_sources: Option<MicrosoftGraphSecuritySourceType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityUrlEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.urlEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    ///The Unique Resource Locator (URL).
    pub url: Option<String>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityUserAccount {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The displayed name of the user account.
    #[serde(rename = "accountName")]
    pub account_name: Option<String>,
    ///The unique user identifier assigned by the on-premises Active Directory.
    #[serde(rename = "activeDirectoryObjectGuid")]
    pub active_directory_object_guid: Option<uuid::Uuid>,
    ///The user object identifier in Microsoft Entra ID.
    #[serde(rename = "azureAdUserId")]
    pub azure_ad_user_id: Option<String>,
    ///The user display name in Microsoft Entra ID.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the Active Directory domain of which the user is a member.
    #[serde(rename = "domainName")]
    pub domain_name: Option<String>,
    ///Information on resource access attempts made by the user account.
    #[serde(rename = "resourceAccessEvents")]
    pub resource_access_events: Option<Vec<MicrosoftGraphSecurityResourceAccessEvent>>,
    ///The user principal name of the account in Microsoft Entra ID.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
    ///The local security identifier of the user account.
    #[serde(rename = "userSid")]
    pub user_sid: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityUserEvidence {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.userEvidence".to_string())]
    pub odata_type: String,
    ///The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Detailed description of the entity role/s in an alert. Values are free-form.
    #[serde(rename = "detailedRoles")]
    pub detailed_roles: Option<Vec<Option<String>>>,
    #[serde(rename = "remediationStatus")]
    pub remediation_status: Option<MicrosoftGraphSecurityEvidenceRemediationStatus>,
    ///Details about the remediation status.
    #[serde(rename = "remediationStatusDetails")]
    pub remediation_status_details: Option<String>,
    ///The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
    pub roles: Option<Vec<MicrosoftGraphSecurityEvidenceRole>>,
    pub stream: Option<MicrosoftGraphSecurityStream>,
    ///Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
    pub tags: Option<Vec<Option<String>>>,
    ///The user account details.
    #[serde(rename = "userAccount")]
    pub user_account: Option<MicrosoftGraphSecurityUserAccount>,
    pub verdict: Option<MicrosoftGraphSecurityEvidenceVerdict>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityUserSource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.userSource".to_string())]
    pub odata_type: String,
    ///The user who created the dataSource.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time the dataSource was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The display name of the dataSource and is the name of the SharePoint site.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Email address of the user's mailbox.
    pub email: Option<String>,
    ///The hold status of the dataSource.The possible values are: notApplied, applied, applying, removing, partial
    #[serde(rename = "holdStatus")]
    pub hold_status: Option<MicrosoftGraphSecurityDataSourceHoldStatus>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies which sources are included in this group. Possible values are: mailbox, site.
    #[serde(rename = "includedSources")]
    pub included_sources: Option<MicrosoftGraphSecuritySourceType>,
    ///The URL of the user's OneDrive for Business site. Read-only.
    #[serde(rename = "siteWebUrl")]
    pub site_web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityVendorInformation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specific provider (product/service - not vendor company); for example, WindowsDefenderATP.
    pub provider: Option<String>,
    ///Version of the provider or subprovider, if it exists, that generated the alert. Required
    #[serde(rename = "providerVersion")]
    pub provider_version: Option<String>,
    ///Specific subprovider (under aggregating provider); for example, WindowsDefenderATP.SmartScreen.
    #[serde(rename = "subProvider")]
    pub sub_provider: Option<String>,
    ///Name of the alert vendor (for example, Microsoft, Dell, FireEye). Required
    pub vendor: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityVmCloudProvider {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "azure")]
    Azure,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityVmMetadata {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "cloudProvider")]
    pub cloud_provider: Option<MicrosoftGraphSecurityVmCloudProvider>,
    ///Unique identifier of the Azure resource.
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
    ///Unique identifier of the Azure subscription the customer tenant belongs to.
    #[serde(rename = "subscriptionId")]
    pub subscription_id: Option<String>,
    ///Unique identifier of the virtual machine instance.
    #[serde(rename = "vmId")]
    pub vm_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityVulnerability {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.vulnerability".to_string())]
    pub odata_type: String,
    ///Indicates whether this vulnerability has any known exploits associated to known bad actors.
    #[serde(rename = "activeExploitsObserved")]
    pub active_exploits_observed: Option<bool>,
    ///Articles related to this vulnerability.
    pub articles: Option<Vec<MicrosoftGraphSecurityArticle>>,
    ///Community-defined common weakness enumerations (CWE).
    #[serde(rename = "commonWeaknessEnumerationIds")]
    pub common_weakness_enumeration_ids: Option<Vec<String>>,
    ///Components related to this vulnerability article.
    pub components: Option<Vec<MicrosoftGraphSecurityVulnerabilityComponent>>,
    ///The date and time when this vulnerability article was first created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "cvss2Summary")]
    pub cvss2summary: Option<MicrosoftGraphSecurityCvssSummary>,
    #[serde(rename = "cvss3Summary")]
    pub cvss3summary: Option<MicrosoftGraphSecurityCvssSummary>,
    pub description: Option<MicrosoftGraphSecurityFormattedContent>,
    ///Known exploits for this vulnerability.
    pub exploits: Option<Vec<MicrosoftGraphSecurityHyperlink>>,
    ///Indicates whether this vulnerability has exploits in public sources (such as Packetstorm or Exploit-DB) online.
    #[serde(rename = "exploitsAvailable")]
    pub exploits_available: Option<bool>,
    ///Indicates whether chatter about this vulnerability has been discovered online.
    #[serde(rename = "hasChatter")]
    pub has_chatter: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time when this vulnerability article was most recently updated.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A unique algorithm that reflects the priority of a vulnerability based on the CVSS score, exploits, chatter, and linkage to malware. This property also evaluates the recency of these components so users can understand which vulnerability should be remediated first.
    #[serde(rename = "priorityScore")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub priority_score: Option<f64>,
    ///The date and time when this vulnerability article was published.
    #[serde(rename = "publishedDateTime")]
    pub published_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Reference links where further information can be learned about this vulnerability.
    pub references: Option<Vec<MicrosoftGraphSecurityHyperlink>>,
    ///Any known remediation steps.
    pub remediation: Option<MicrosoftGraphSecurityFormattedContent>,
    pub severity: Option<MicrosoftGraphSecurityVulnerabilitySeverity>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityVulnerabilityComponent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.vulnerabilityComponent".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The name of this vulnerability component.
    pub name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSecurityVulnerabilitySeverity {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityWhoisBaseRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.whoisBaseRecord".to_string())]
    pub odata_type: String,
    ///The contact information for the abuse contact.
    pub abuse: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The contact information for the admin contact.
    pub admin: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The contact information for the billing contact.
    pub billing: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The domain status for this WHOIS object.
    #[serde(rename = "domainStatus")]
    pub domain_status: Option<String>,
    ///The date and time when this WHOIS record expires with the registrar. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The first seen date and time of this WHOIS record. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The last seen date and time of this WHOIS record. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when this WHOIS record was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The nameservers for this WHOIS object.
    pub nameservers: Option<Vec<MicrosoftGraphSecurityWhoisNameserver>>,
    ///The contact information for the noc contact.
    pub noc: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The raw WHOIS details for this WHOIS object.
    #[serde(rename = "rawWhoisText")]
    pub raw_whois_text: Option<String>,
    ///The contact information for the registrant contact.
    pub registrant: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The contact information for the registrar contact.
    pub registrar: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The date and time when this WHOIS record was registered with a registrar. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "registrationDateTime")]
    pub registration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The contact information for the technical contact.
    pub technical: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The WHOIS server that provides the details.
    #[serde(rename = "whoisServer")]
    pub whois_server: Option<String>,
    ///The contact information for the zone contact.
    pub zone: Option<MicrosoftGraphSecurityWhoisContact>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityWhoisContact {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The physical address of the entity.
    pub address: Option<MicrosoftGraphPhysicalAddress>,
    ///The email of this WHOIS contact.
    pub email: Option<String>,
    ///The fax of this WHOIS contact. No format is guaranteed.
    pub fax: Option<String>,
    ///The name of this WHOIS contact.
    pub name: Option<String>,
    ///The organization of this WHOIS contact.
    pub organization: Option<String>,
    ///The telephone of this WHOIS contact. No format is guaranteed.
    pub telephone: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityWhoisHistoryRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.whoisHistoryRecord".to_string())]
    pub odata_type: String,
    ///The contact information for the abuse contact.
    pub abuse: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The contact information for the admin contact.
    pub admin: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The contact information for the billing contact.
    pub billing: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The domain status for this WHOIS object.
    #[serde(rename = "domainStatus")]
    pub domain_status: Option<String>,
    ///The date and time when this WHOIS record expires with the registrar. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The first seen date and time of this WHOIS record. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The last seen date and time of this WHOIS record. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when this WHOIS record was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The nameservers for this WHOIS object.
    pub nameservers: Option<Vec<MicrosoftGraphSecurityWhoisNameserver>>,
    ///The contact information for the noc contact.
    pub noc: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The raw WHOIS details for this WHOIS object.
    #[serde(rename = "rawWhoisText")]
    pub raw_whois_text: Option<String>,
    ///The contact information for the registrant contact.
    pub registrant: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The contact information for the registrar contact.
    pub registrar: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The date and time when this WHOIS record was registered with a registrar. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "registrationDateTime")]
    pub registration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The contact information for the technical contact.
    pub technical: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The WHOIS server that provides the details.
    #[serde(rename = "whoisServer")]
    pub whois_server: Option<String>,
    ///The contact information for the zone contact.
    pub zone: Option<MicrosoftGraphSecurityWhoisContact>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityWhoisNameserver {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The first seen date and time of this WHOIS contact. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The last seen date and time of this WHOIS contact. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSecurityWhoisRecord {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.security.whoisRecord".to_string())]
    pub odata_type: String,
    ///The contact information for the abuse contact.
    pub abuse: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The contact information for the admin contact.
    pub admin: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The contact information for the billing contact.
    pub billing: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The domain status for this WHOIS object.
    #[serde(rename = "domainStatus")]
    pub domain_status: Option<String>,
    ///The date and time when this WHOIS record expires with the registrar. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The first seen date and time of this WHOIS record. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "firstSeenDateTime")]
    pub first_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of historical records associated to this WHOIS object.
    pub history: Option<Vec<MicrosoftGraphSecurityWhoisHistoryRecord>>,
    pub host: Option<Box<MicrosoftGraphSecurityHost>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The last seen date and time of this WHOIS record. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSeenDateTime")]
    pub last_seen_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when this WHOIS record was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The nameservers for this WHOIS object.
    pub nameservers: Option<Vec<MicrosoftGraphSecurityWhoisNameserver>>,
    ///The contact information for the noc contact.
    pub noc: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The raw WHOIS details for this WHOIS object.
    #[serde(rename = "rawWhoisText")]
    pub raw_whois_text: Option<String>,
    ///The contact information for the registrant contact.
    pub registrant: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The contact information for the registrar contact.
    pub registrar: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The date and time when this WHOIS record was registered with a registrar. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "registrationDateTime")]
    pub registration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The contact information for the technical contact.
    pub technical: Option<MicrosoftGraphSecurityWhoisContact>,
    ///The WHOIS server that provides the details.
    #[serde(rename = "whoisServer")]
    pub whois_server: Option<String>,
    ///The contact information for the zone contact.
    pub zone: Option<MicrosoftGraphSecurityWhoisContact>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSelectionLikelihoodInfo {
    #[serde(rename = "notSpecified")]
    #[default]
    NotSpecified,
    #[serde(rename = "high")]
    High,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSelfServiceSignUpAuthenticationFlowConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether self-service sign-up flow is enabled or disabled. The default value is false. This property isn't a key. Required.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSendDtmfCompletionReason {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "completedSuccessfully")]
    CompletedSuccessfully,
    #[serde(rename = "mediaOperationCanceled")]
    MediaOperationCanceled,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSendDtmfTonesOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sendDtmfTonesOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The results of the action. Possible values are: unknown, completedSuccessfully, mediaOperationCanceled, unknownfutureValue.
    #[serde(rename = "completionReason")]
    pub completion_reason: Option<MicrosoftGraphSendDtmfCompletionReason>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSensitivity {
    #[serde(rename = "normal")]
    #[default]
    Normal,
    #[serde(rename = "personal")]
    Personal,
    #[serde(rename = "private")]
    Private,
    #[serde(rename = "confidential")]
    Confidential,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSensitivityLabel {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sensitivityLabel".to_string())]
    pub odata_type: String,
    #[serde(rename = "actionSource")]
    pub action_source: Option<MicrosoftGraphLabelActionSource>,
    #[serde(rename = "autoTooltip")]
    pub auto_tooltip: Option<String>,
    pub description: Option<String>,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    #[serde(rename = "isEndpointProtectionEnabled")]
    pub is_endpoint_protection_enabled: Option<bool>,
    #[serde(rename = "isScopedToUser")]
    pub is_scoped_to_user: Option<bool>,
    pub locale: Option<String>,
    pub name: Option<String>,
    pub priority: Option<f64>,
    pub rights: Option<MicrosoftGraphUsageRightsIncluded>,
    pub sublabels: Option<Vec<MicrosoftGraphSensitivityLabel>>,
    #[serde(rename = "toolTip")]
    pub tool_tip: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServerProcessedContent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A key-value map where keys are string identifiers and values are rich text with HTML format. SharePoint servers treat the values as HTML content and run services like safety checks, search index and link fixup on them.
    #[serde(rename = "htmlStrings")]
    pub html_strings: Option<Vec<MicrosoftGraphMetaDataKeyStringPair>>,
    ///A key-value map where keys are string identifiers and values are image sources. SharePoint servers treat the values as image sources and run services like search index and link fixup on them.
    #[serde(rename = "imageSources")]
    pub image_sources: Option<Vec<MicrosoftGraphMetaDataKeyStringPair>>,
    ///A key-value map where keys are string identifiers and values are links. SharePoint servers treat the values as links and run services like link fixup on them.
    pub links: Option<Vec<MicrosoftGraphMetaDataKeyStringPair>>,
    ///A key-value map where keys are string identifiers and values are strings that should be search indexed.
    #[serde(rename = "searchablePlainTexts")]
    pub searchable_plain_texts: Option<Vec<MicrosoftGraphMetaDataKeyStringPair>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceAnnouncement {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.serviceAnnouncement".to_string())]
    pub odata_type: String,
    ///A collection of service health information for tenant. This property is a contained navigation property, it is nullable and readonly.
    #[serde(rename = "healthOverviews")]
    pub health_overviews: Option<Vec<MicrosoftGraphServiceHealth>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of service issues for tenant. This property is a contained navigation property, it is nullable and readonly.
    pub issues: Option<Vec<MicrosoftGraphServiceHealthIssue>>,
    ///A collection of service messages for tenant. This property is a contained navigation property, it is nullable and readonly.
    pub messages: Option<Vec<MicrosoftGraphServiceUpdateMessage>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceAnnouncementAttachment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.serviceAnnouncementAttachment".to_string())]
    pub odata_type: String,
    ///The attachment content.
    pub content: Option<String>,
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub name: Option<String>,
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceAnnouncementBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.serviceAnnouncementBase".to_string())]
    pub odata_type: String,
    ///More details about service event. This property doesn't support filters.
    pub details: Option<Vec<MicrosoftGraphKeyValuePair>>,
    ///The end time of the service event.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The last modified time of the service event.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The start time of the service event.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The title of the service event.
    pub title: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.serviceApp".to_string())]
    pub odata_type: String,
    ///The Entra ID application ID.
    pub application: Option<MicrosoftGraphIdentity>,
    ///Timestamp of the effective activation of the service app.
    #[serde(rename = "effectiveDateTime")]
    pub effective_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification of the entity.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Timestamp of the creation of the service app entity.
    #[serde(rename = "registrationDateTime")]
    pub registration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The status of the service app. This value indicates whether or not the application can be used to control the backup service. The possible values are: inactive, active, pendingActive, pendingInactive, unknownFutureValue.
    pub status: Option<MicrosoftGraphServiceAppStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphServiceAppStatus {
    #[serde(rename = "inactive")]
    #[default]
    Inactive,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "pendingActive")]
    PendingActive,
    #[serde(rename = "pendingInactive")]
    PendingInactive,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceHealth {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.serviceHealth".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of issues that happened on the service, with detailed information for each issue.
    pub issues: Option<Vec<MicrosoftGraphServiceHealthIssue>>,
    ///The service name. Use the list healthOverviews operation to get exact string names for services subscribed by the tenant.
    pub service: Option<String>,
    pub status: Option<MicrosoftGraphServiceHealthStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphServiceHealthClassificationType {
    #[serde(rename = "advisory")]
    #[default]
    Advisory,
    #[serde(rename = "incident")]
    Incident,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceHealthIssue {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.serviceHealthIssue".to_string())]
    pub odata_type: String,
    pub classification: Option<MicrosoftGraphServiceHealthClassificationType>,
    ///More details about service event. This property doesn't support filters.
    pub details: Option<Vec<MicrosoftGraphKeyValuePair>>,
    ///The end time of the service event.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The feature name of the service issue.
    pub feature: Option<String>,
    ///The feature group name of the service issue.
    #[serde(rename = "featureGroup")]
    pub feature_group: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The description of the service issue impact.
    #[serde(rename = "impactDescription")]
    pub impact_description: Option<String>,
    ///Indicates whether the issue is resolved.
    #[serde(rename = "isResolved")]
    pub is_resolved: Option<bool>,
    ///The last modified time of the service event.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub origin: Option<MicrosoftGraphServiceHealthOrigin>,
    ///Collection of historical posts for the service issue.
    pub posts: Option<Vec<MicrosoftGraphServiceHealthIssuePost>>,
    ///Indicates the service affected by the issue.
    pub service: Option<String>,
    ///The start time of the service event.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub status: Option<MicrosoftGraphServiceHealthStatus>,
    ///The title of the service event.
    pub title: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceHealthIssuePost {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The published time of the post.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The content of the service issue post. The supported value for the contentType property is html.
    pub description: Option<MicrosoftGraphItemBody>,
    ///The post type of the service issue historical post. Possible values are: regular, quick, strategic, unknownFutureValue.
    #[serde(rename = "postType")]
    pub post_type: Option<MicrosoftGraphPostType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphServiceHealthOrigin {
    #[serde(rename = "microsoft")]
    #[default]
    Microsoft,
    #[serde(rename = "thirdParty")]
    ThirdParty,
    #[serde(rename = "customer")]
    Customer,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphServiceHealthStatus {
    #[serde(rename = "serviceOperational")]
    #[default]
    ServiceOperational,
    #[serde(rename = "investigating")]
    Investigating,
    #[serde(rename = "restoringService")]
    RestoringService,
    #[serde(rename = "verifyingService")]
    VerifyingService,
    #[serde(rename = "serviceRestored")]
    ServiceRestored,
    #[serde(rename = "postIncidentReviewPublished")]
    PostIncidentReviewPublished,
    #[serde(rename = "serviceDegradation")]
    ServiceDegradation,
    #[serde(rename = "serviceInterruption")]
    ServiceInterruption,
    #[serde(rename = "extendedRecovery")]
    ExtendedRecovery,
    #[serde(rename = "falsePositive")]
    FalsePositive,
    #[serde(rename = "investigationSuspended")]
    InvestigationSuspended,
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "mitigatedExternal")]
    MitigatedExternal,
    #[serde(rename = "mitigated")]
    Mitigated,
    #[serde(rename = "resolvedExternal")]
    ResolvedExternal,
    #[serde(rename = "confirmed")]
    Confirmed,
    #[serde(rename = "reported")]
    Reported,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceHostedMediaConfig {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.serviceHostedMediaConfig".to_string())]
    pub odata_type: String,
    ///The list of media to pre-fetch.
    #[serde(rename = "preFetchMedia")]
    pub pre_fetch_media: Option<Vec<MicrosoftGraphMediaInfo>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServicePlanInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The object the service plan can be assigned to. The possible values are:User - service plan can be assigned to individual users.Company - service plan can be assigned to the entire tenant.
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<String>,
    ///The provisioning status of the service plan. The possible values are:Success - Service is fully provisioned.Disabled - Service is disabled.Error - The service plan isn't provisioned and is in an error state.PendingInput - The service isn't provisioned and is awaiting service confirmation.PendingActivation - The service is provisioned but requires explicit activation by an administrator (for example, Intune_O365 service plan)PendingProvisioning - Microsoft has added a new service to the product SKU and it isn't activated in the tenant.
    #[serde(rename = "provisioningStatus")]
    pub provisioning_status: Option<String>,
    ///The unique identifier of the service plan.
    #[serde(rename = "servicePlanId")]
    pub service_plan_id: Option<uuid::Uuid>,
    ///The name of the service plan.
    #[serde(rename = "servicePlanName")]
    pub service_plan_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServicePrincipal {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.servicePrincipal".to_string())]
    pub odata_type: String,
    ///true if the service principal account is enabled; otherwise, false. If set to false, then no users are able to sign in to this app, even if they're assigned to it. Supports $filter (eq, ne, not, in).
    #[serde(rename = "accountEnabled")]
    pub account_enabled: Option<bool>,
    ///Defines custom behavior that a consuming service can use to call an app in specific contexts. For example, applications that can render file streams may set the addIns property for its 'FileHandler' functionality. This lets services like Microsoft 365 call the application in the context of a document the user is working on.
    #[serde(rename = "addIns")]
    pub add_ins: Option<Vec<MicrosoftGraphAddIn>>,
    ///Used to retrieve service principals by subscription, identify resource group and full resource IDs for managed identities. Supports $filter (eq, not, ge, le, startsWith).
    #[serde(rename = "alternativeNames")]
    pub alternative_names: Option<Vec<String>>,
    ///The description exposed by the associated application.
    #[serde(rename = "appDescription")]
    pub app_description: Option<String>,
    ///The display name exposed by the associated application. Maximum length is 256 characters.
    #[serde(rename = "appDisplayName")]
    pub app_display_name: Option<String>,
    ///The unique identifier for the associated application (its appId property). Alternate key. Supports $filter (eq, ne, not, in, startsWith).
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///The appManagementPolicy applied to this application.
    #[serde(rename = "appManagementPolicies")]
    pub app_management_policies: Option<Vec<MicrosoftGraphAppManagementPolicy>>,
    ///Contains the tenant ID where the application is registered. This is applicable only to service principals backed by applications. Supports $filter (eq, ne, NOT, ge, le).
    #[serde(rename = "appOwnerOrganizationId")]
    pub app_owner_organization_id: Option<uuid::Uuid>,
    ///App role assignments for this app or service, granted to users, groups, and other service principals. Supports $expand.
    #[serde(rename = "appRoleAssignedTo")]
    pub app_role_assigned_to: Option<Vec<MicrosoftGraphAppRoleAssignment>>,
    ///Specifies whether users or other service principals need to be granted an app role assignment for this service principal before users can sign in or apps can get tokens. The default value is false. Not nullable. Supports $filter (eq, ne, NOT).
    #[serde(rename = "appRoleAssignmentRequired")]
    pub app_role_assignment_required: Option<bool>,
    ///App role assignment for another app or service, granted to this service principal. Supports $expand.
    #[serde(rename = "appRoleAssignments")]
    pub app_role_assignments: Option<Vec<MicrosoftGraphAppRoleAssignment>>,
    ///The roles exposed by the application that's linked to this service principal. For more information, see the appRoles property definition on the application entity. Not nullable.
    #[serde(rename = "appRoles")]
    pub app_roles: Option<Vec<MicrosoftGraphAppRole>>,
    ///Unique identifier of the applicationTemplate. Supports $filter (eq, not, ne). Read-only. null if the service principal wasn't created from an application template.
    #[serde(rename = "applicationTemplateId")]
    pub application_template_id: Option<String>,
    ///The claimsMappingPolicies assigned to this service principal. Supports $expand.
    #[serde(rename = "claimsMappingPolicies")]
    pub claims_mapping_policies: Option<Vec<MicrosoftGraphClaimsMappingPolicy>>,
    ///Directory objects created by this service principal. Read-only. Nullable.
    #[serde(rename = "createdObjects")]
    pub created_objects: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///An open complex type that holds the value of a custom security attribute that is assigned to a directory object. Nullable. Returned only on $select. Supports $filter (eq, ne, not, startsWith). Filter value is case sensitive. To read this property, the calling app must be assigned the CustomSecAttributeAssignment.Read.All permission. To write this property, the calling app must be assigned the CustomSecAttributeAssignment.ReadWrite.All permissions. To read or write this property in delegated scenarios, the admin must be assigned the Attribute Assignment Administrator role.
    #[serde(rename = "customSecurityAttributes")]
    pub custom_security_attributes: Option<MicrosoftGraphCustomSecurityAttributeValue>,
    #[serde(rename = "delegatedPermissionClassifications")]
    pub delegated_permission_classifications: Option<
        Vec<MicrosoftGraphDelegatedPermissionClassification>,
    >,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Free text field to provide an internal end-user facing description of the service principal. End-user portals such MyApps displays the application description in this field. The maximum allowed size is 1,024 characters. Supports $filter (eq, ne, not, ge, le, startsWith) and $search.
    pub description: Option<String>,
    ///Specifies whether Microsoft has disabled the registered application. Possible values are: null (default value), NotDisabled, and DisabledDueToViolationOfServicesAgreement (reasons include suspicious, abusive, or malicious activity, or a violation of the Microsoft Services Agreement).  Supports $filter (eq, ne, not).
    #[serde(rename = "disabledByMicrosoftStatus")]
    pub disabled_by_microsoft_status: Option<String>,
    ///The display name for the service principal. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    pub endpoints: Option<Vec<MicrosoftGraphEndpoint>>,
    ///Federated identities for a specific type of service principal - managed identity. Supports $expand and $filter (/$count eq 0, /$count ne 0).
    #[serde(rename = "federatedIdentityCredentials")]
    pub federated_identity_credentials: Option<
        Vec<MicrosoftGraphFederatedIdentityCredential>,
    >,
    ///The homeRealmDiscoveryPolicies assigned to this service principal. Supports $expand.
    #[serde(rename = "homeRealmDiscoveryPolicies")]
    pub home_realm_discovery_policies: Option<
        Vec<MicrosoftGraphHomeRealmDiscoveryPolicy>,
    >,
    ///Home page or landing page of the application.
    pub homepage: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Basic profile information of the acquired application such as app's marketing, support, terms of service and privacy statement URLs. The terms of service and privacy statement are surfaced to users through the user consent experience. For more info, see How to: Add Terms of service and privacy statement for registered Microsoft Entra apps. Supports $filter (eq, ne, not, ge, le, and eq on null values).
    pub info: Option<MicrosoftGraphInformationalUrl>,
    ///The collection of key credentials associated with the service principal. Not nullable. Supports $filter (eq, not, ge, le).
    #[serde(rename = "keyCredentials")]
    pub key_credentials: Option<Vec<MicrosoftGraphKeyCredential>>,
    ///Specifies the URL where the service provider redirects the user to Microsoft Entra ID to authenticate. Microsoft Entra ID uses the URL to launch the application from Microsoft 365 or the Microsoft Entra My Apps. When blank, Microsoft Entra ID performs IdP-initiated sign-on for applications configured with SAML-based single sign-on. The user launches the application from Microsoft 365, the Microsoft Entra My Apps, or the Microsoft Entra SSO URL.
    #[serde(rename = "loginUrl")]
    pub login_url: Option<String>,
    ///Specifies the URL that the Microsoft's authorization service uses to sign out a user using OpenID Connect front-channel, back-channel, or SAML sign out protocols.
    #[serde(rename = "logoutUrl")]
    pub logout_url: Option<String>,
    ///Roles that this service principal is a member of. HTTP Methods: GET Read-only. Nullable. Supports $expand.
    #[serde(rename = "memberOf")]
    pub member_of: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Free text field to capture information about the service principal, typically used for operational purposes. Maximum allowed size is 1,024 characters.
    pub notes: Option<String>,
    ///Specifies the list of email addresses where Microsoft Entra ID sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Microsoft Entra Gallery applications.
    #[serde(rename = "notificationEmailAddresses")]
    pub notification_email_addresses: Option<Vec<String>>,
    ///Delegated permission grants authorizing this service principal to access an API on behalf of a signed-in user. Read-only. Nullable.
    #[serde(rename = "oauth2PermissionGrants")]
    pub oauth2permission_grants: Option<Vec<MicrosoftGraphOAuth2PermissionGrant>>,
    ///The delegated permissions exposed by the application. For more information, see the oauth2PermissionScopes property on the application entity's api property. Not nullable.
    #[serde(rename = "oauth2PermissionScopes")]
    pub oauth2permission_scopes: Option<Vec<MicrosoftGraphPermissionScope>>,
    ///Directory objects that this service principal owns. Read-only. Nullable. Supports $expand, $select nested in $expand, and $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1).
    #[serde(rename = "ownedObjects")]
    pub owned_objects: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Directory objects that are owners of this servicePrincipal. The owners are a set of nonadmin users or servicePrincipals who are allowed to modify this object. Supports $expand, $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1), and $select nested in $expand.
    pub owners: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The collection of password credentials associated with the application. Not nullable.
    #[serde(rename = "passwordCredentials")]
    pub password_credentials: Option<Vec<MicrosoftGraphPasswordCredential>>,
    ///Specifies the single sign-on mode configured for this application. Microsoft Entra ID uses the preferred single sign-on mode to launch the application from Microsoft 365 or the My Apps portal. The supported values are password, saml, notSupported, and oidc. Note: This field might be null for older SAML apps and for OIDC applications where it isn't set automatically.
    #[serde(rename = "preferredSingleSignOnMode")]
    pub preferred_single_sign_on_mode: Option<String>,
    ///This property can be used on SAML applications (apps that have preferredSingleSignOnMode set to saml) to control which certificate is used to sign the SAML responses. For applications that aren't SAML, don't write or otherwise rely on this property.
    #[serde(rename = "preferredTokenSigningKeyThumbprint")]
    pub preferred_token_signing_key_thumbprint: Option<String>,
    ///The remoteDesktopSecurityConfiguration object applied to this service principal. Supports $filter (eq) for isRemoteDesktopProtocolEnabled property.
    #[serde(rename = "remoteDesktopSecurityConfiguration")]
    pub remote_desktop_security_configuration: Option<
        MicrosoftGraphRemoteDesktopSecurityConfiguration,
    >,
    ///The URLs that user tokens are sent to for sign in with the associated application, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to for the associated application. Not nullable.
    #[serde(rename = "replyUrls")]
    pub reply_urls: Option<Vec<String>>,
    ///The resource-specific application permissions exposed by this application. Currently, resource-specific permissions are only supported for Teams apps accessing to specific chats and teams using Microsoft Graph. Read-only.
    #[serde(rename = "resourceSpecificApplicationPermissions")]
    pub resource_specific_application_permissions: Option<
        Vec<MicrosoftGraphResourceSpecificPermission>,
    >,
    ///The collection for settings related to saml single sign-on.
    #[serde(rename = "samlSingleSignOnSettings")]
    pub saml_single_sign_on_settings: Option<MicrosoftGraphSamlSingleSignOnSettings>,
    ///Contains the list of identifiersUris, copied over from the associated application. Additional values can be added to hybrid applications. These values can be used to identify the permissions exposed by this app within Microsoft Entra ID. For example,Client apps can specify a resource URI that is based on the values of this property to acquire an access token, which is the URI returned in the 'aud' claim.The any operator is required for filter expressions on multi-valued properties. Not nullable.  Supports $filter (eq, not, ge, le, startsWith).
    #[serde(rename = "servicePrincipalNames")]
    pub service_principal_names: Option<Vec<String>>,
    ///Identifies whether the service principal represents an application, a managed identity, or a legacy application. This is set by Microsoft Entra ID internally. The servicePrincipalType property can be set to three different values: Application - A service principal that represents an application or service. The appId property identifies the associated app registration, and matches the appId of an application, possibly from a different tenant. If the associated app registration is missing, tokens aren't issued for the service principal.ManagedIdentity - A service principal that represents a managed identity. Service principals representing managed identities can be granted access and permissions, but can't be updated or modified directly.Legacy - A service principal that represents an app created before app registrations, or through legacy experiences. A legacy service principal can have credentials, service principal names, reply URLs, and other properties that are editable by an authorized user, but doesn't have an associated app registration. The appId value doesn't associate the service principal with an app registration. The service principal can only be used in the tenant where it was created.SocialIdp - For internal use.
    #[serde(rename = "servicePrincipalType")]
    pub service_principal_type: Option<String>,
    ///Specifies the Microsoft accounts that are supported for the current application. Read-only. Supported values are:AzureADMyOrg: Users with a Microsoft work or school account in my organization's Microsoft Entra tenant (single-tenant).AzureADMultipleOrgs: Users with a Microsoft work or school account in any organization's Microsoft Entra tenant (multitenant).AzureADandPersonalMicrosoftAccount: Users with a personal Microsoft account, or a work or school account in any organization's Microsoft Entra tenant.PersonalMicrosoftAccount: Users with a personal Microsoft account only.
    #[serde(rename = "signInAudience")]
    pub sign_in_audience: Option<String>,
    ///Represents the capability for Microsoft Entra identity synchronization through the Microsoft Graph API.
    pub synchronization: Option<MicrosoftGraphSynchronization>,
    ///Custom strings that can be used to categorize and identify the service principal. Not nullable. The value is the union of strings set here and on the associated application entity's tags property.Supports $filter (eq, not, ge, le, startsWith).
    pub tags: Option<Vec<String>>,
    ///Specifies the keyId of a public key from the keyCredentials collection. When configured, Microsoft Entra ID issues tokens for this application encrypted using the key specified by this property. The application code that receives the encrypted token must use the matching private key to decrypt the token before it can be used for the signed-in user.
    #[serde(rename = "tokenEncryptionKeyId")]
    pub token_encryption_key_id: Option<uuid::Uuid>,
    ///The tokenIssuancePolicies assigned to this service principal.
    #[serde(rename = "tokenIssuancePolicies")]
    pub token_issuance_policies: Option<Vec<MicrosoftGraphTokenIssuancePolicy>>,
    ///The tokenLifetimePolicies assigned to this service principal.
    #[serde(rename = "tokenLifetimePolicies")]
    pub token_lifetime_policies: Option<Vec<MicrosoftGraphTokenLifetimePolicy>>,
    #[serde(rename = "transitiveMemberOf")]
    pub transitive_member_of: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Specifies the verified publisher of the application that's linked to this service principal.
    #[serde(rename = "verifiedPublisher")]
    pub verified_publisher: Option<MicrosoftGraphVerifiedPublisher>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServicePrincipalIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.servicePrincipalIdentity".to_string())]
    pub odata_type: String,
    ///The application identifier of the service principal.
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServicePrincipalLockConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Enables locking all sensitive properties. The sensitive properties are keyCredentials, passwordCredentials, and tokenEncryptionKeyId.
    #[serde(rename = "allProperties")]
    pub all_properties: Option<bool>,
    ///Locks the keyCredentials and passwordCredentials properties for modification where credential usage type is Sign.
    #[serde(rename = "credentialsWithUsageSign")]
    pub credentials_with_usage_sign: Option<bool>,
    ///Locks the keyCredentials and passwordCredentials properties for modification where credential usage type is Verify. This locks OAuth service principals.
    #[serde(rename = "credentialsWithUsageVerify")]
    pub credentials_with_usage_verify: Option<bool>,
    ///Enables or disables service principal lock configuration. To allow the sensitive properties to be updated, update this property to false to disable the lock on the service principal.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Locks the tokenEncryptionKeyId property for modification on the service principal.
    #[serde(rename = "tokenEncryptionKeyId")]
    pub token_encryption_key_id: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServicePrincipalRiskDetection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.servicePrincipalRiskDetection".to_string())]
    pub odata_type: String,
    ///Indicates the activity type the detected risk is linked to.  The possible values are: signin, servicePrincipal. Use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: servicePrincipal.
    pub activity: Option<MicrosoftGraphActivityType>,
    ///Date and time when the risky activity occurred. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "activityDateTime")]
    pub activity_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Additional information associated with the risk detection. This string value is represented as a JSON object with the quotations escaped.
    #[serde(rename = "additionalInfo")]
    pub additional_info: Option<String>,
    ///The unique identifier for the associated application.
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///Correlation ID of the sign-in activity associated with the risk detection. This property is null if the risk detection is not associated with a sign-in activity.
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<String>,
    ///Date and time when the risk was detected. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "detectedDateTime")]
    pub detected_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Timing of the detected risk , whether real-time or offline. The possible values are: notDefined, realtime, nearRealtime, offline, unknownFutureValue.
    #[serde(rename = "detectionTimingType")]
    pub detection_timing_type: Option<MicrosoftGraphRiskDetectionTimingType>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Provides the IP address of the client from where the risk occurred.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///The unique identifier for the key credential associated with the risk detection.
    #[serde(rename = "keyIds")]
    pub key_ids: Option<Vec<Option<String>>>,
    ///Date and time when the risk detection was last updated.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Location from where the sign-in was initiated.
    pub location: Option<MicrosoftGraphSignInLocation>,
    ///Request identifier of the sign-in activity associated with the risk detection. This property is null if the risk detection is not associated with a sign-in activity. Supports $filter (eq).
    #[serde(rename = "requestId")]
    pub request_id: Option<String>,
    ///Details of the detected risk. Note: Details for this property are only available for Workload Identities Premium customers. Events in tenants without this license will be returned hidden. The possible values are: none, hidden, adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal. Use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: adminConfirmedServicePrincipalCompromised , adminDismissedAllRiskForServicePrincipal.
    #[serde(rename = "riskDetail")]
    pub risk_detail: Option<MicrosoftGraphRiskDetail>,
    ///The type of risk event detected. The possible values are: investigationsThreatIntelligence, generic, adminConfirmedServicePrincipalCompromised, suspiciousSignins, leakedCredentials, anomalousServicePrincipalActivity, maliciousApplication, suspiciousApplication.
    #[serde(rename = "riskEventType")]
    pub risk_event_type: Option<String>,
    ///Level of the detected risk. Note: Details for this property are only available for Workload Identities Premium customers. Events in tenants without this license will be returned hidden. The possible values are: low, medium, high, hidden, none.
    #[serde(rename = "riskLevel")]
    pub risk_level: Option<MicrosoftGraphRiskLevel>,
    ///The state of a detected risky service principal or sign-in activity. The possible values are: none, dismissed, atRisk, confirmedCompromised.
    #[serde(rename = "riskState")]
    pub risk_state: Option<MicrosoftGraphRiskState>,
    ///The display name for the service principal.
    #[serde(rename = "servicePrincipalDisplayName")]
    pub service_principal_display_name: Option<String>,
    ///The unique identifier for the service principal. Supports $filter (eq).
    #[serde(rename = "servicePrincipalId")]
    pub service_principal_id: Option<String>,
    ///Source of the risk detection. For example, identityProtection.
    pub source: Option<String>,
    ///Indicates the type of token issuer for the detected sign-in risk. The possible values are: AzureAD.
    #[serde(rename = "tokenIssuerType")]
    pub token_issuer_type: Option<MicrosoftGraphTokenIssuerType>,
}
discriminated_enum! {
    pub enum MicrosoftGraphServiceProvisioningError { discriminator : "@odata.type",
    variants : [("#microsoft.graph.serviceProvisioningXmlError",
    MicrosoftGraphServiceProvisioningXmlError(Box <
    MicrosoftGraphServiceProvisioningXmlError >))], fallback :
    ServiceProvisioningError(Box < MicrosoftGraphServiceProvisioningErrorBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceProvisioningErrorBase {
    ///The date and time at which the error occurred.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether the error has been attended to.
    #[serde(rename = "isResolved")]
    pub is_resolved: Option<bool>,
    ///Qualified service instance (for example, 'SharePoint/Dublin') that published the service error information.
    #[serde(rename = "serviceInstance")]
    pub service_instance: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceProvisioningXmlError {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.serviceProvisioningXmlError".to_string())]
    pub odata_type: String,
    ///The date and time at which the error occurred.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Error Information published by the Federated Service as an xml string.
    #[serde(rename = "errorDetail")]
    pub error_detail: Option<String>,
    ///Indicates whether the error has been attended to.
    #[serde(rename = "isResolved")]
    pub is_resolved: Option<bool>,
    ///Qualified service instance (for example, 'SharePoint/Dublin') that published the service error information.
    #[serde(rename = "serviceInstance")]
    pub service_instance: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceStatus {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The type of consumer. The possible values are: unknown, firstparty, thirdparty, unknownFutureValue.
    #[serde(rename = "backupServiceConsumer")]
    pub backup_service_consumer: Option<MicrosoftGraphBackupServiceConsumer>,
    ///The reason the service is disabled. The possible values are: none, controllerServiceAppDeleted, invalidBillingProfile, userRequested, unknownFutureValue.
    #[serde(rename = "disableReason")]
    pub disable_reason: Option<MicrosoftGraphDisableReason>,
    ///The expiration time of the grace period.
    #[serde(rename = "gracePeriodDateTime")]
    pub grace_period_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification of the entity.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The expiration time of the restoration allowed period.
    #[serde(rename = "restoreAllowedTillDateTime")]
    pub restore_allowed_till_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Status of the service. This value indicates what capabilities can be used. The possible values are: disabled, enabled, protectionChangeLocked, restoreLocked, unknownFutureValue.
    pub status: Option<MicrosoftGraphBackupServiceStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceStorageQuotaBreakdown {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.serviceStorageQuotaBreakdown".to_string())]
    pub odata_type: String,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "manageWebUrl")]
    pub manage_web_url: Option<String>,
    pub used: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphServiceUpdateCategory {
    #[serde(rename = "preventOrFixIssue")]
    #[default]
    PreventOrFixIssue,
    #[serde(rename = "planForChange")]
    PlanForChange,
    #[serde(rename = "stayInformed")]
    StayInformed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceUpdateMessage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.serviceUpdateMessage".to_string())]
    pub odata_type: String,
    ///The expected deadline of the action for the message.
    #[serde(rename = "actionRequiredByDateTime")]
    pub action_required_by_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A collection of serviceAnnouncementAttachments.
    pub attachments: Option<Vec<MicrosoftGraphServiceAnnouncementAttachment>>,
    ///The zip file that contains all attachments for a message.
    #[serde(rename = "attachmentsArchive")]
    pub attachments_archive: Option<String>,
    pub body: Option<MicrosoftGraphItemBody>,
    pub category: Option<MicrosoftGraphServiceUpdateCategory>,
    ///More details about service event. This property doesn't support filters.
    pub details: Option<Vec<MicrosoftGraphKeyValuePair>>,
    ///The end time of the service event.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether the message has any attachment.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the message describes a major update for the service.
    #[serde(rename = "isMajorChange")]
    pub is_major_change: Option<bool>,
    ///The last modified time of the service event.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The affected services by the service message.
    pub services: Option<Vec<Option<String>>>,
    pub severity: Option<MicrosoftGraphServiceUpdateSeverity>,
    ///The start time of the service event.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A collection of tags for the service message. Tags are provided by the service team/support team who post the message to tell whether this message contains privacy data, or whether this message is for a service new feature update, and so on.
    pub tags: Option<Vec<Option<String>>>,
    ///The title of the service event.
    pub title: Option<String>,
    ///Represents user viewpoints data of the service message. This data includes message status such as whether the user has archived, read, or marked the message as favorite. This property is null when accessed with application permissions.
    #[serde(rename = "viewPoint")]
    pub view_point: Option<MicrosoftGraphServiceUpdateMessageViewpoint>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphServiceUpdateMessageViewpoint {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether the user archived the message.
    #[serde(rename = "isArchived")]
    pub is_archived: Option<bool>,
    ///Indicates whether the user marked the message as favorite.
    #[serde(rename = "isFavorited")]
    pub is_favorited: Option<bool>,
    ///Indicates whether the user read the message.
    #[serde(rename = "isRead")]
    pub is_read: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphServiceUpdateSeverity {
    #[serde(rename = "normal")]
    #[default]
    Normal,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSettingSource {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Not yet documented
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Not yet documented
    pub id: Option<String>,
    #[serde(rename = "sourceType")]
    pub source_type: Option<MicrosoftGraphSettingSourceType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSettingSourceType {
    #[serde(rename = "deviceConfiguration")]
    #[default]
    DeviceConfiguration,
    #[serde(rename = "deviceIntent")]
    DeviceIntent,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSettingStateDeviceSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.settingStateDeviceSummary".to_string())]
    pub odata_type: String,
    ///Device Compliant count for the setting
    #[serde(rename = "compliantDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub compliant_device_count: Option<f64>,
    ///Device conflict error count for the setting
    #[serde(rename = "conflictDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub conflict_device_count: Option<f64>,
    ///Device error count for the setting
    #[serde(rename = "errorDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_device_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Name of the InstancePath for the setting
    #[serde(rename = "instancePath")]
    pub instance_path: Option<String>,
    ///Device NonCompliant count for the setting
    #[serde(rename = "nonCompliantDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub non_compliant_device_count: Option<f64>,
    ///Device Not Applicable count for the setting
    #[serde(rename = "notApplicableDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_device_count: Option<f64>,
    ///Device Compliant count for the setting
    #[serde(rename = "remediatedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub remediated_device_count: Option<f64>,
    ///Name of the setting
    #[serde(rename = "settingName")]
    pub setting_name: Option<String>,
    ///Device Unkown count for the setting
    #[serde(rename = "unknownDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub unknown_device_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSettingTemplateValue {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Default value for the setting.
    #[serde(rename = "defaultValue")]
    pub default_value: Option<String>,
    ///Description of the setting.
    pub description: Option<String>,
    ///Name of the setting.
    pub name: Option<String>,
    ///Type of the setting.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSettingValue {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Name of the setting (as defined by the groupSettingTemplate).
    pub name: Option<String>,
    ///Value of the setting.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharePointIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sharePointIdentity".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
    ///The sign in name of the SharePoint identity.
    #[serde(rename = "loginName")]
    pub login_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharePointIdentitySet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sharePointIdentitySet".to_string())]
    pub odata_type: String,
    ///Optional. The application associated with this action.
    pub application: Option<MicrosoftGraphIdentity>,
    ///Optional. The device associated with this action.
    pub device: Option<MicrosoftGraphIdentity>,
    ///The group associated with this action. Optional.
    pub group: Option<MicrosoftGraphIdentity>,
    ///The SharePoint group associated with this action. Optional.
    #[serde(rename = "siteGroup")]
    pub site_group: Option<MicrosoftGraphSharePointIdentity>,
    ///The SharePoint user associated with this action. Optional.
    #[serde(rename = "siteUser")]
    pub site_user: Option<MicrosoftGraphSharePointIdentity>,
    ///Optional. The user associated with this action.
    pub user: Option<MicrosoftGraphIdentity>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharePointProtectionPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sharePointProtectionPolicy".to_string())]
    pub odata_type: String,
    ///The identity of person who created the policy.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the policy.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the policy to be created.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the person who last modified the policy.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The timestamp of the last modification of the policy.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains the retention setting details for the policy.
    #[serde(rename = "retentionSettings")]
    pub retention_settings: Option<Vec<MicrosoftGraphRetentionSetting>>,
    ///The rules associated with the SharePoint Protection policy.
    #[serde(rename = "siteInclusionRules")]
    pub site_inclusion_rules: Option<Vec<MicrosoftGraphSiteProtectionRule>>,
    ///The protection units (sites) that are protected under the site protection policy.
    #[serde(rename = "siteProtectionUnits")]
    pub site_protection_units: Option<Vec<MicrosoftGraphSiteProtectionUnit>>,
    #[serde(rename = "siteProtectionUnitsBulkAdditionJobs")]
    pub site_protection_units_bulk_addition_jobs: Option<
        Vec<MicrosoftGraphSiteProtectionUnitsBulkAdditionJob>,
    >,
    ///The aggregated status of the protection units associated with the policy. The possible values are: inactive, activeWithErrors, updating, active, unknownFutureValue.
    pub status: Option<MicrosoftGraphProtectionPolicyStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharePointRestoreSession {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sharePointRestoreSession".to_string())]
    pub odata_type: String,
    ///The time of completion of the restore session.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The identity of person who created the restore session.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the restore session.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains error details if the restore session fails or completes with an error.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the restore session.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification of the restore session.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether the restore session was created normally or by a bulk job.
    #[serde(rename = "restoreJobType")]
    pub restore_job_type: Option<MicrosoftGraphRestoreJobType>,
    ///The number of metadata artifacts that belong to this restore session.
    #[serde(rename = "restoreSessionArtifactCount")]
    pub restore_session_artifact_count: Option<
        MicrosoftGraphRestoreSessionArtifactCount,
    >,
    ///A collection of restore points and destination details that can be used to restore SharePoint sites.
    #[serde(rename = "siteRestoreArtifacts")]
    pub site_restore_artifacts: Option<Vec<MicrosoftGraphSiteRestoreArtifact>>,
    ///A collection of SharePoint site URLs and destination details that can be used to restore SharePoint sites.
    #[serde(rename = "siteRestoreArtifactsBulkAdditionRequests")]
    pub site_restore_artifacts_bulk_addition_requests: Option<
        Vec<MicrosoftGraphSiteRestoreArtifactsBulkAdditionRequest>,
    >,
    ///Status of the restore session. The value is an aggregated status of the restored artifacts. The possible values are: draft, activating, active, completedWithError, completed, unknownFutureValue, failed. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: failed.
    pub status: Option<MicrosoftGraphRestoreSessionStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphShared {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The identity of the owner of the shared item. Read-only.
    pub owner: Option<MicrosoftGraphIdentitySet>,
    ///Indicates the scope of how the item is shared. The possible values are: anonymous, organization, or users. Read-only.
    pub scope: Option<String>,
    ///The identity of the user who shared the item. Read-only.
    #[serde(rename = "sharedBy")]
    pub shared_by: Option<MicrosoftGraphIdentitySet>,
    ///The UTC date and time when the item was shared. Read-only.
    #[serde(rename = "sharedDateTime")]
    pub shared_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharedDriveItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sharedDriveItem".to_string())]
    pub odata_type: String,
    ///Identity of the user, device, or application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who created the item. Read-only.
    #[serde(rename = "createdByUser")]
    pub created_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Provides a user-visible description of the item. Optional.
    pub description: Option<String>,
    ///Used to access the underlying driveItem
    #[serde(rename = "driveItem")]
    pub drive_item: Option<Box<MicrosoftGraphDriveItem>>,
    ///ETag for the item. Read-only.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///All driveItems contained in the sharing root. This collection cannot be enumerated.
    pub items: Option<Vec<MicrosoftGraphDriveItem>>,
    ///Identity of the user, device, and application that last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who last modified the item. Read-only.
    #[serde(rename = "lastModifiedByUser")]
    pub last_modified_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Used to access the underlying list
    pub list: Option<Box<MicrosoftGraphList>>,
    ///Used to access the underlying listItem
    #[serde(rename = "listItem")]
    pub list_item: Option<Box<MicrosoftGraphListItem>>,
    ///The name of the item. Read-write.
    pub name: Option<String>,
    ///Information about the owner of the shared item being referenced.
    pub owner: Option<MicrosoftGraphIdentitySet>,
    ///Parent information, if the item has a parent. Read-write.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    ///Used to access the permission representing the underlying sharing link
    pub permission: Option<MicrosoftGraphPermission>,
    ///Used to access the underlying driveItem. Deprecated -- use driveItem instead.
    pub root: Option<Box<MicrosoftGraphDriveItem>>,
    ///Used to access the underlying site
    pub site: Option<Box<MicrosoftGraphSite>>,
    ///URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharedInsight {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sharedInsight".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Details about the shared item. Read only.
    #[serde(rename = "lastShared")]
    pub last_shared: Option<MicrosoftGraphSharingDetail>,
    #[serde(rename = "lastSharedMethod")]
    pub last_shared_method: Option<MicrosoftGraphEntity>,
    ///Used for navigating to the item that was shared. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.
    pub resource: Option<MicrosoftGraphEntity>,
    ///Reference properties of the shared document, such as the url and type of the document. Read-only
    #[serde(rename = "resourceReference")]
    pub resource_reference: Option<MicrosoftGraphResourceReference>,
    ///Properties that you can use to visualize the document in your experience. Read-only
    #[serde(rename = "resourceVisualization")]
    pub resource_visualization: Option<MicrosoftGraphResourceVisualization>,
    #[serde(rename = "sharingHistory")]
    pub sharing_history: Option<Vec<MicrosoftGraphSharingDetail>>,
}
///Possible values for when accounts are deleted on a shared PC.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSharedPcaccountDeletionPolicyType {
    #[serde(rename = "immediate")]
    #[default]
    Immediate,
    #[serde(rename = "diskSpaceThreshold")]
    DiskSpaceThreshold,
    #[serde(rename = "diskSpaceThresholdOrInactiveThreshold")]
    DiskSpaceThresholdOrInactiveThreshold,
}
///SharedPC Account Manager Policy. Only applies when the account manager is enabled.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharedPcaccountManagerPolicy {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Possible values for when accounts are deleted on a shared PC.
    #[serde(rename = "accountDeletionPolicy")]
    pub account_deletion_policy: Option<MicrosoftGraphSharedPcaccountDeletionPolicyType>,
    ///Sets the percentage of available disk space a PC should have before it stops deleting cached shared PC accounts. Only applies when AccountDeletionPolicy is DiskSpaceThreshold or DiskSpaceThresholdOrInactiveThreshold. Valid values 0 to 100
    #[serde(rename = "cacheAccountsAboveDiskFreePercentage")]
    pub cache_accounts_above_disk_free_percentage: Option<f64>,
    ///Specifies when the accounts will start being deleted when they have not been logged on during the specified period, given as number of days. Only applies when AccountDeletionPolicy is DiskSpaceThreshold or DiskSpaceThresholdOrInactiveThreshold.
    #[serde(rename = "inactiveThresholdDays")]
    pub inactive_threshold_days: Option<f64>,
    ///Sets the percentage of disk space remaining on a PC before cached accounts will be deleted to free disk space. Accounts that have been inactive the longest will be deleted first. Only applies when AccountDeletionPolicy is DiskSpaceThresholdOrInactiveThreshold. Valid values 0 to 100
    #[serde(rename = "removeAccountsBelowDiskFreePercentage")]
    pub remove_accounts_below_disk_free_percentage: Option<f64>,
}
///Type of accounts that are allowed to share the PC.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSharedPcallowedAccountType {
    #[serde(rename = "guest")]
    #[default]
    Guest,
    #[serde(rename = "domain")]
    Domain,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharedPcconfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sharedPCConfiguration".to_string())]
    pub odata_type: String,
    ///Specifies how accounts are managed on a shared PC. Only applies when disableAccountManager is false.
    #[serde(rename = "accountManagerPolicy")]
    pub account_manager_policy: Option<MicrosoftGraphSharedPcaccountManagerPolicy>,
    ///Specifies whether local storage is allowed on a shared PC.
    #[serde(rename = "allowLocalStorage")]
    pub allow_local_storage: Option<bool>,
    ///Type of accounts that are allowed to share the PC.
    #[serde(rename = "allowedAccounts")]
    pub allowed_accounts: Option<MicrosoftGraphSharedPcallowedAccountType>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Disables the account manager for shared PC mode.
    #[serde(rename = "disableAccountManager")]
    pub disable_account_manager: Option<bool>,
    ///Specifies whether the default shared PC education environment policies should be disabled. For Windows 10 RS2 and later, this policy will be applied without setting Enabled to true.
    #[serde(rename = "disableEduPolicies")]
    pub disable_edu_policies: Option<bool>,
    ///Specifies whether the default shared PC power policies should be disabled.
    #[serde(rename = "disablePowerPolicies")]
    pub disable_power_policies: Option<bool>,
    ///Disables the requirement to sign in whenever the device wakes up from sleep mode.
    #[serde(rename = "disableSignInOnResume")]
    pub disable_sign_in_on_resume: Option<bool>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Enables shared PC mode and applies the shared pc policies.
    pub enabled: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies the time in seconds that a device must sit idle before the PC goes to sleep. Setting this value to 0 prevents the sleep timeout from occurring.
    #[serde(rename = "idleTimeBeforeSleepInSeconds")]
    pub idle_time_before_sleep_in_seconds: Option<f64>,
    ///Specifies the display text for the account shown on the sign-in screen which launches the app specified by SetKioskAppUserModelId. Only applies when KioskAppUserModelId is set.
    #[serde(rename = "kioskAppDisplayName")]
    pub kiosk_app_display_name: Option<String>,
    ///Specifies the application user model ID of the app to use with assigned access.
    #[serde(rename = "kioskAppUserModelId")]
    pub kiosk_app_user_model_id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies the daily start time of maintenance hour.
    #[serde(rename = "maintenanceStartTime")]
    pub maintenance_start_time: Option<chrono::NaiveTime>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharedWithChannelTeamInfo {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sharedWithChannelTeamInfo".to_string())]
    pub odata_type: String,
    ///A collection of team members who have access to the shared channel.
    #[serde(rename = "allowedMembers")]
    pub allowed_members: Option<Vec<MicrosoftGraphConversationMember>>,
    ///The name of the team.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the team is the host of the channel.
    #[serde(rename = "isHostTeam")]
    pub is_host_team: Option<bool>,
    pub team: Option<Box<MicrosoftGraphTeam>>,
    ///The ID of the Microsoft Entra tenant.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharepoint {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sharepoint".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub settings: Option<MicrosoftGraphSharepointSettings>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharepointIds {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The unique identifier (guid) for the item's list in SharePoint.
    #[serde(rename = "listId")]
    pub list_id: Option<String>,
    ///An integer identifier for the item within the containing list.
    #[serde(rename = "listItemId")]
    pub list_item_id: Option<String>,
    ///The unique identifier (guid) for the item within OneDrive for Business or a SharePoint site.
    #[serde(rename = "listItemUniqueId")]
    pub list_item_unique_id: Option<String>,
    ///The unique identifier (guid) for the item's site collection (SPSite).
    #[serde(rename = "siteId")]
    pub site_id: Option<String>,
    ///The SharePoint URL for the site that contains the item.
    #[serde(rename = "siteUrl")]
    pub site_url: Option<String>,
    ///The unique identifier (guid) for the tenancy.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    ///The unique identifier (guid) for the item's site (SPWeb).
    #[serde(rename = "webId")]
    pub web_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharepointSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sharepointSettings".to_string())]
    pub odata_type: String,
    ///Collection of trusted domain GUIDs for the OneDrive sync app.
    #[serde(rename = "allowedDomainGuidsForSyncApp")]
    pub allowed_domain_guids_for_sync_app: Option<Vec<Option<uuid::Uuid>>>,
    ///Collection of managed paths available for site creation. Read-only.
    #[serde(rename = "availableManagedPathsForSiteCreation")]
    pub available_managed_paths_for_site_creation: Option<Vec<String>>,
    ///The number of days for preserving a deleted user's OneDrive.
    #[serde(rename = "deletedUserPersonalSiteRetentionPeriodInDays")]
    pub deleted_user_personal_site_retention_period_in_days: Option<f64>,
    ///Collection of file extensions not uploaded by the OneDrive sync app.
    #[serde(rename = "excludedFileExtensionsForSyncApp")]
    pub excluded_file_extensions_for_sync_app: Option<Vec<Option<String>>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Specifies the idle session sign-out policies for the tenant.
    #[serde(rename = "idleSessionSignOut")]
    pub idle_session_sign_out: Option<MicrosoftGraphIdleSessionSignOut>,
    ///Specifies the image tagging option for the tenant. Possible values are: disabled, basic, enhanced.
    #[serde(rename = "imageTaggingOption")]
    pub image_tagging_option: Option<MicrosoftGraphImageTaggingChoice>,
    ///Indicates whether comments are allowed on modern site pages in SharePoint.
    #[serde(rename = "isCommentingOnSitePagesEnabled")]
    pub is_commenting_on_site_pages_enabled: Option<bool>,
    ///Indicates whether push notifications are enabled for OneDrive events.
    #[serde(rename = "isFileActivityNotificationEnabled")]
    pub is_file_activity_notification_enabled: Option<bool>,
    ///Indicates whether legacy authentication protocols are enabled for the tenant.
    #[serde(rename = "isLegacyAuthProtocolsEnabled")]
    pub is_legacy_auth_protocols_enabled: Option<bool>,
    ///Indicates whether if Fluid Framework is allowed on SharePoint sites.
    #[serde(rename = "isLoopEnabled")]
    pub is_loop_enabled: Option<bool>,
    ///Indicates whether files can be synced using the OneDrive sync app for Mac.
    #[serde(rename = "isMacSyncAppEnabled")]
    pub is_mac_sync_app_enabled: Option<bool>,
    ///Indicates whether guests must sign in using the same account to which sharing invitations are sent.
    #[serde(rename = "isRequireAcceptingUserToMatchInvitedUserEnabled")]
    pub is_require_accepting_user_to_match_invited_user_enabled: Option<bool>,
    ///Indicates whether guests are allowed to reshare files, folders, and sites they don't own.
    #[serde(rename = "isResharingByExternalUsersEnabled")]
    pub is_resharing_by_external_users_enabled: Option<bool>,
    ///Indicates whether mobile push notifications are enabled for SharePoint.
    #[serde(rename = "isSharePointMobileNotificationEnabled")]
    pub is_share_point_mobile_notification_enabled: Option<bool>,
    ///Indicates whether the newsfeed is allowed on the modern site pages in SharePoint.
    #[serde(rename = "isSharePointNewsfeedEnabled")]
    pub is_share_point_newsfeed_enabled: Option<bool>,
    ///Indicates whether users are allowed to create sites.
    #[serde(rename = "isSiteCreationEnabled")]
    pub is_site_creation_enabled: Option<bool>,
    ///Indicates whether the UI commands for creating sites are shown.
    #[serde(rename = "isSiteCreationUIEnabled")]
    pub is_site_creation_uienabled: Option<bool>,
    ///Indicates whether creating new modern pages is allowed on SharePoint sites.
    #[serde(rename = "isSitePagesCreationEnabled")]
    pub is_site_pages_creation_enabled: Option<bool>,
    ///Indicates whether site storage space is automatically managed or if specific storage limits are set per site.
    #[serde(rename = "isSitesStorageLimitAutomatic")]
    pub is_sites_storage_limit_automatic: Option<bool>,
    ///Indicates whether the sync button in OneDrive is hidden.
    #[serde(rename = "isSyncButtonHiddenOnPersonalSite")]
    pub is_sync_button_hidden_on_personal_site: Option<bool>,
    ///Indicates whether users are allowed to sync files only on PCs joined to specific domains.
    #[serde(rename = "isUnmanagedSyncAppForTenantRestricted")]
    pub is_unmanaged_sync_app_for_tenant_restricted: Option<bool>,
    ///The default OneDrive storage limit for all new and existing users who are assigned a qualifying license. Measured in megabytes (MB).
    #[serde(rename = "personalSiteDefaultStorageLimitInMB")]
    pub personal_site_default_storage_limit_in_mb: Option<f64>,
    ///Collection of email domains that are allowed for sharing outside the organization.
    #[serde(rename = "sharingAllowedDomainList")]
    pub sharing_allowed_domain_list: Option<Vec<Option<String>>>,
    ///Collection of email domains that are blocked for sharing outside the organization.
    #[serde(rename = "sharingBlockedDomainList")]
    pub sharing_blocked_domain_list: Option<Vec<Option<String>>>,
    ///Sharing capability for the tenant. Possible values are: disabled, externalUserSharingOnly, externalUserAndGuestSharing, existingExternalUserSharingOnly.
    #[serde(rename = "sharingCapability")]
    pub sharing_capability: Option<MicrosoftGraphSharingCapabilities>,
    ///Specifies the external sharing mode for domains. Possible values are: none, allowList, blockList.
    #[serde(rename = "sharingDomainRestrictionMode")]
    pub sharing_domain_restriction_mode: Option<
        MicrosoftGraphSharingDomainRestrictionMode,
    >,
    ///The value of the team site managed path. This is the path under which new team sites will be created.
    #[serde(rename = "siteCreationDefaultManagedPath")]
    pub site_creation_default_managed_path: Option<String>,
    ///The default storage quota for a new site upon creation. Measured in megabytes (MB).
    #[serde(rename = "siteCreationDefaultStorageLimitInMB")]
    pub site_creation_default_storage_limit_in_mb: Option<f64>,
    ///The default timezone of a tenant for newly created sites. For a list of possible values, see SPRegionalSettings.TimeZones property.
    #[serde(rename = "tenantDefaultTimezone")]
    pub tenant_default_timezone: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSharingCapabilities {
    #[serde(rename = "disabled")]
    #[default]
    Disabled,
    #[serde(rename = "externalUserSharingOnly")]
    ExternalUserSharingOnly,
    #[serde(rename = "externalUserAndGuestSharing")]
    ExternalUserAndGuestSharing,
    #[serde(rename = "existingExternalUserSharingOnly")]
    ExistingExternalUserSharingOnly,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharingDetail {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The user who shared the document.
    #[serde(rename = "sharedBy")]
    pub shared_by: Option<MicrosoftGraphInsightIdentity>,
    ///The date and time the file was last shared. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "sharedDateTime")]
    pub shared_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Reference properties of the document, such as the URL and type of the document. Read-only
    #[serde(rename = "sharingReference")]
    pub sharing_reference: Option<MicrosoftGraphResourceReference>,
    ///The subject with which the document was shared.
    #[serde(rename = "sharingSubject")]
    pub sharing_subject: Option<String>,
    ///Determines the way the document was shared. Can be by a 1Link1, 1Attachment1, 1Group1, 1Site1.
    #[serde(rename = "sharingType")]
    pub sharing_type: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSharingDomainRestrictionMode {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "allowList")]
    AllowList,
    #[serde(rename = "blockList")]
    BlockList,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharingInvitation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The email address provided for the recipient of the sharing invitation. Read-only.
    pub email: Option<String>,
    ///Provides information about who sent the invitation that created this permission, if that information is available. Read-only.
    #[serde(rename = "invitedBy")]
    pub invited_by: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "redeemedBy")]
    pub redeemed_by: Option<String>,
    ///If true the recipient of the invitation needs to sign in in order to access the shared item. Read-only.
    #[serde(rename = "signInRequired")]
    pub sign_in_required: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSharingLink {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The app the link is associated with.
    pub application: Option<MicrosoftGraphIdentity>,
    ///If true then the user can only use this link to view the item on the web, and cannot use it to download the contents of the item. Only for OneDrive for Business and SharePoint.
    #[serde(rename = "preventsDownload")]
    pub prevents_download: Option<bool>,
    ///The scope of the link represented by this permission. Value anonymous indicates the link is usable by anyone, organization indicates the link is only usable for users signed into the same tenant.
    pub scope: Option<String>,
    ///The type of the link created.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
    ///For embed links, this property contains the HTML code for an <iframe> element that will embed the item in a webpage.
    #[serde(rename = "webHtml")]
    pub web_html: Option<String>,
    ///A URL that opens the item in the browser on the OneDrive website.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphShift {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.shift".to_string())]
    pub odata_type: String,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Draft changes in the shift. Draft changes are only visible to managers. The changes are visible to employees when they're shared, which copies the changes from the draftShift to the sharedShift property.
    #[serde(rename = "draftShift")]
    pub draft_shift: Option<MicrosoftGraphShiftItem>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The shift is marked for deletion, a process that is finalized when the schedule is shared.
    #[serde(rename = "isStagedForDeletion")]
    pub is_staged_for_deletion: Option<bool>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///ID of the scheduling group the shift is part of. Required.
    #[serde(rename = "schedulingGroupId")]
    pub scheduling_group_id: Option<String>,
    ///The shared version of this shift that is viewable by both employees and managers. Updates to the sharedShift property send notifications to users in the Teams client.
    #[serde(rename = "sharedShift")]
    pub shared_shift: Option<MicrosoftGraphShiftItem>,
    ///ID of the user assigned to the shift. Required.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphShiftActivity {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Customer defined code for the shiftActivity. Required.
    pub code: Option<String>,
    ///The name of the shiftActivity. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The end date and time for the shiftActivity. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether the microsoft.graph.user should be paid for the activity during their shift. Required.
    #[serde(rename = "isPaid")]
    pub is_paid: Option<bool>,
    ///The start date and time for the shiftActivity. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub theme: Option<MicrosoftGraphScheduleEntityTheme>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphShiftAvailability {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies the pattern for recurrence
    pub recurrence: Option<MicrosoftGraphPatternedRecurrence>,
    ///The time slot(s) preferred by the user.
    #[serde(rename = "timeSlots")]
    pub time_slots: Option<Vec<MicrosoftGraphTimeRange>>,
    ///Specifies the time zone for the indicated time.
    #[serde(rename = "timeZone")]
    pub time_zone: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphShiftItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.shiftItem".to_string())]
    pub odata_type: String,
    ///An incremental part of a shift which can cover details of when and where an employee is during their shift. For example, an assignment or a scheduled break or lunch. Required.
    pub activities: Option<Vec<MicrosoftGraphShiftActivity>>,
    ///The shift label of the shiftItem.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The shift notes for the shiftItem.
    pub notes: Option<String>,
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub theme: Option<MicrosoftGraphScheduleEntityTheme>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphShiftPreferences {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.shiftPreferences".to_string())]
    pub odata_type: String,
    ///Availability of the user to be scheduled for work and its recurrence pattern.
    pub availability: Option<Vec<MicrosoftGraphShiftAvailability>>,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSignIn {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.signIn".to_string())]
    pub odata_type: String,
    ///App name displayed in the Microsoft Entra admin center.  Supports $filter (eq, startsWith).
    #[serde(rename = "appDisplayName")]
    pub app_display_name: Option<String>,
    ///Unique GUID that represents the app ID in the Microsoft Entra ID.  Supports $filter (eq).
    #[serde(rename = "appId")]
    pub app_id: Option<String>,
    ///Provides a list of conditional access policies that the corresponding sign-in activity triggers. Apps need more Conditional Access-related privileges to read the details of this property. For more information, see Permissions for viewing applied conditional access (CA) policies in sign-ins.
    #[serde(rename = "appliedConditionalAccessPolicies")]
    pub applied_conditional_access_policies: Option<
        Vec<MicrosoftGraphAppliedConditionalAccessPolicy>,
    >,
    ///Identifies the client used for the sign-in activity. Modern authentication clients include Browser, modern clients. Legacy authentication clients include Exchange ActiveSync, IMAP, MAPI, SMTP, POP, and other clients.  Supports $filter (eq).
    #[serde(rename = "clientAppUsed")]
    pub client_app_used: Option<String>,
    ///Reports status of an activated conditional access policy. Possible values are: success, failure, notApplied, and unknownFutureValue.  Supports $filter (eq).
    #[serde(rename = "conditionalAccessStatus")]
    pub conditional_access_status: Option<MicrosoftGraphConditionalAccessStatus>,
    ///The request ID sent from the client when the sign-in is initiated. Used to troubleshoot sign-in activity.  Supports $filter (eq).
    #[serde(rename = "correlationId")]
    pub correlation_id: Option<String>,
    ///Date and time (UTC) the sign-in was initiated. Example: midnight on Jan 1, 2014 is reported as 2014-01-01T00:00:00Z.  Supports $orderby, $filter (eq, le, and ge).
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Device information from where the sign-in occurred; includes device ID, operating system, and browser.  Supports $filter (eq, startsWith) on browser and operatingSytem properties.
    #[serde(rename = "deviceDetail")]
    pub device_detail: Option<MicrosoftGraphDeviceDetail>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///IP address of the client used to sign in.  Supports $filter (eq, startsWith).
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///Indicates whether a sign-in is interactive.
    #[serde(rename = "isInteractive")]
    pub is_interactive: Option<bool>,
    ///Provides the city, state, and country code where the sign-in originated.  Supports $filter (eq, startsWith) on city, state, and countryOrRegion properties.
    pub location: Option<MicrosoftGraphSignInLocation>,
    ///Name of the resource the user signed into.  Supports $filter (eq).
    #[serde(rename = "resourceDisplayName")]
    pub resource_display_name: Option<String>,
    ///ID of the resource that the user signed into.  Supports $filter (eq).
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
    ///The reason behind a specific state of a risky user, sign-in, or a risk event. The possible values are none, adminGeneratedTemporaryPassword, userPerformedSecuredPasswordChange, userPerformedSecuredPasswordReset, adminConfirmedSigninSafe, aiConfirmedSigninSafe, userPassedMFADrivenByRiskBasedPolicy, adminDismissedAllRiskForUser, adminConfirmedSigninCompromised, hidden, adminConfirmedUserCompromised, unknownFutureValue, adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal, m365DAdminDismissedDetection, userChangedPasswordOnPremises, adminDismissedRiskForSignIn, adminConfirmedAccountSafe. Use the Prefer: include-unknown-enum-members request header to get the following value or values in this evolvable enum: adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal, m365DAdminDismissedDetection, userChangedPasswordOnPremises, adminDismissedRiskForSignIn, adminConfirmedAccountSafe.The value none means that Microsoft Entra risk detection did not flag the user or the sign-in as a risky event so far.  Supports $filter (eq). Note: Details for this property are only available for Microsoft Entra ID P2 customers. All other customers are returned hidden.
    #[serde(rename = "riskDetail")]
    pub risk_detail: Option<MicrosoftGraphRiskDetail>,
    #[serde(rename = "riskEventTypes")]
    pub risk_event_types: Option<Vec<MicrosoftGraphRiskEventType>>,
    ///The list of risk event types associated with the sign-in. Possible values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures, malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials, investigationsThreatIntelligence, generic, or unknownFutureValue.  Supports $filter (eq, startsWith).
    #[serde(rename = "riskEventTypes_v2")]
    pub risk_event_types_v2: Option<Vec<Option<String>>>,
    ///Aggregated risk level. The possible values are: none, low, medium, high, hidden, and unknownFutureValue. The value hidden means the user or sign-in wasn't enabled for Microsoft Entra ID Protection.  Supports $filter (eq).  Note: Details for this property are only available for Microsoft Entra ID P2 customers. All other customers are returned hidden.
    #[serde(rename = "riskLevelAggregated")]
    pub risk_level_aggregated: Option<MicrosoftGraphRiskLevel>,
    ///Risk level during sign-in. The possible values are: none, low, medium, high, hidden, and unknownFutureValue. The value hidden means the user or sign-in wasn't enabled for Microsoft Entra ID Protection.  Supports $filter (eq). Note: Details for this property are only available for Microsoft Entra ID P2 customers. All other customers are returned hidden.
    #[serde(rename = "riskLevelDuringSignIn")]
    pub risk_level_during_sign_in: Option<MicrosoftGraphRiskLevel>,
    ///Reports status of the risky user, sign-in, or a risk event. The possible values are: none, confirmedSafe, remediated, dismissed, atRisk, confirmedCompromised, unknownFutureValue.  Supports $filter (eq).
    #[serde(rename = "riskState")]
    pub risk_state: Option<MicrosoftGraphRiskState>,
    ///Sign-in status. Includes the error code and description of the error (if a sign-in failure occurs).  Supports $filter (eq) on errorCode property.
    pub status: Option<MicrosoftGraphSignInStatus>,
    ///Display name of the user that initiated the sign-in.  Supports $filter (eq, startsWith).
    #[serde(rename = "userDisplayName")]
    pub user_display_name: Option<String>,
    ///ID of the user that initiated the sign-in.  Supports $filter (eq).
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///User principal name of the user that initiated the sign-in. This value is always in lowercase. For guest users whose values in the user object typically contain #EXT# before the domain part, this property stores the value in both lowercase and the 'true' format. For example, while the user object stores AdeleVance_fabrikam.com#EXT#@contoso.com, the sign-in logs store adelevance@fabrikam.com. Supports $filter (eq, startsWith).
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSignInActivity {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The last non-interactive sign-in date for a specific user. You can use this field to calculate the last time a client attempted (either successfully or unsuccessfully) to sign in to the directory on behalf of a user. Because some users may use clients to access tenant resources rather than signing into your tenant directly, you can use the non-interactive sign-in date to along with lastSignInDateTime to identify inactive users. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Microsoft Entra ID maintains non-interactive sign-ins going back to May 2020. For more information about using the value of this property, see Manage inactive user accounts in Microsoft Entra ID.
    #[serde(rename = "lastNonInteractiveSignInDateTime")]
    pub last_non_interactive_sign_in_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Request identifier of the last non-interactive sign-in performed by this user.
    #[serde(rename = "lastNonInteractiveSignInRequestId")]
    pub last_non_interactive_sign_in_request_id: Option<String>,
    ///The last interactive sign-in date and time for a specific user. This property records the last time a user attempted an interactive sign-in to the directory—whether the attempt was successful or not. Note: Since unsuccessful attempts are also logged, this value might not accurately reflect actual system usage. For tracking actual account access, please use the lastSuccessfulSignInDateTime property. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastSignInDateTime")]
    pub last_sign_in_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Request identifier of the last interactive sign-in performed by this user.
    #[serde(rename = "lastSignInRequestId")]
    pub last_sign_in_request_id: Option<String>,
    ///The date and time of the user's most recent successful interactive or non-interactive sign-in. Use this property if you need to determine when the account was truly accessed. This field can be used to build reports, such as inactive users. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Microsoft Entra ID maintains interactive sign-ins going back to April 2020. For more information about using the value of this property, see Manage inactive user accounts in Microsoft Entra ID.
    #[serde(rename = "lastSuccessfulSignInDateTime")]
    pub last_successful_sign_in_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The request ID of the last successful sign-in.
    #[serde(rename = "lastSuccessfulSignInRequestId")]
    pub last_successful_sign_in_request_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSignInFrequencyAuthenticationType {
    #[serde(rename = "primaryAndSecondaryAuthentication")]
    #[default]
    PrimaryAndSecondaryAuthentication,
    #[serde(rename = "secondaryAuthentication")]
    SecondaryAuthentication,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSignInFrequencyInterval {
    #[serde(rename = "timeBased")]
    #[default]
    TimeBased,
    #[serde(rename = "everyTime")]
    EveryTime,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSignInFrequencySessionControl {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.signInFrequencySessionControl".to_string())]
    pub odata_type: String,
    ///The possible values are primaryAndSecondaryAuthentication, secondaryAuthentication, unknownFutureValue. This property isn't required when using frequencyInterval with the value of timeBased.
    #[serde(rename = "authenticationType")]
    pub authentication_type: Option<MicrosoftGraphSignInFrequencyAuthenticationType>,
    ///The possible values are timeBased, everyTime, unknownFutureValue. Sign-in frequency of everyTime is available for risky users, risky sign-ins, and Intune device enrollment. For more information, see Require reauthentication every time.
    #[serde(rename = "frequencyInterval")]
    pub frequency_interval: Option<MicrosoftGraphSignInFrequencyInterval>,
    ///Specifies whether the session control is enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Possible values are: days, hours.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphSigninFrequencyType>,
    ///The number of days or hours.
    pub value: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSignInLocation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Provides the city where the sign-in originated and is determined using latitude/longitude information from the sign-in activity.
    pub city: Option<String>,
    ///Provides the country code info (two letter code) where the sign-in originated.  This is calculated using latitude/longitude information from the sign-in activity.
    #[serde(rename = "countryOrRegion")]
    pub country_or_region: Option<String>,
    ///Provides the latitude, longitude and altitude where the sign-in originated.
    #[serde(rename = "geoCoordinates")]
    pub geo_coordinates: Option<MicrosoftGraphGeoCoordinates>,
    ///Provides the State where the sign-in originated. This is calculated using latitude/longitude information from the sign-in activity.
    pub state: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSignInStatus {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Provides additional details on the sign-in activity
    #[serde(rename = "additionalDetails")]
    pub additional_details: Option<String>,
    ///Provides the 5-6 digit error code that's generated during a sign-in failure. Check out the list of error codes and messages.
    #[serde(rename = "errorCode")]
    pub error_code: Option<f64>,
    ///Provides the error message or the reason for failure for the corresponding sign-in activity. Check out the list of error codes and messages.
    #[serde(rename = "failureReason")]
    pub failure_reason: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSignInUserType {
    #[serde(rename = "member")]
    #[default]
    Member,
    #[serde(rename = "guest")]
    Guest,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSigninFrequencyType {
    #[serde(rename = "days")]
    #[default]
    Days,
    #[serde(rename = "hours")]
    Hours,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSigningCertificateUpdateStatus {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Status of the last certificate update. Read-only. For a list of statuses, see certificateUpdateResult status.
    #[serde(rename = "certificateUpdateResult")]
    pub certificate_update_result: Option<String>,
    ///Date and time in ISO 8601 format and in UTC time when the certificate was last updated. Read-only.
    #[serde(rename = "lastRunDateTime")]
    pub last_run_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSimulation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.simulation".to_string())]
    pub odata_type: String,
    ///The social engineering technique used in the attack simulation and training campaign. Supports $filter and $orderby. Possible values are: unknown, credentialHarvesting, attachmentMalware, driveByUrl, linkInAttachment, linkToMalwareFile, unknownFutureValue, oAuthConsentGrant. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: oAuthConsentGrant. For more information on the types of social engineering attack techniques, see simulations.
    #[serde(rename = "attackTechnique")]
    pub attack_technique: Option<MicrosoftGraphSimulationAttackTechnique>,
    ///Attack type of the attack simulation and training campaign. Supports $filter and $orderby. Possible values are: unknown, social, cloud, endpoint, unknownFutureValue.
    #[serde(rename = "attackType")]
    pub attack_type: Option<MicrosoftGraphSimulationAttackType>,
    ///Unique identifier for the attack simulation automation.
    #[serde(rename = "automationId")]
    pub automation_id: Option<String>,
    ///Date and time of completion of the attack simulation and training campaign. Supports $filter and $orderby.
    #[serde(rename = "completionDateTime")]
    pub completion_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Identity of the user who created the attack simulation and training campaign.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time of creation of the attack simulation and training campaign.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description of the attack simulation and training campaign.
    pub description: Option<String>,
    ///Display name of the attack simulation and training campaign. Supports $filter and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Simulation duration in days.
    #[serde(rename = "durationInDays")]
    pub duration_in_days: Option<f64>,
    ///Details about the end user notification setting.
    #[serde(rename = "endUserNotificationSetting")]
    pub end_user_notification_setting: Option<MicrosoftGraphEndUserNotificationSetting>,
    ///Users excluded from the simulation.
    #[serde(rename = "excludedAccountTarget")]
    pub excluded_account_target: Option<MicrosoftGraphAccountTargetContent>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Users targeted in the simulation.
    #[serde(rename = "includedAccountTarget")]
    pub included_account_target: Option<MicrosoftGraphAccountTargetContent>,
    ///Flag that represents if the attack simulation and training campaign was created from a simulation automation flow. Supports $filter and $orderby.
    #[serde(rename = "isAutomated")]
    pub is_automated: Option<bool>,
    ///The landing page associated with a simulation during its creation.
    #[serde(rename = "landingPage")]
    pub landing_page: Option<MicrosoftGraphLandingPage>,
    ///Identity of the user who most recently modified the attack simulation and training campaign.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time of the most recent modification of the attack simulation and training campaign.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time of the launch/start of the attack simulation and training campaign. Supports $filter and $orderby.
    #[serde(rename = "launchDateTime")]
    pub launch_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The login page associated with a simulation during its creation.
    #[serde(rename = "loginPage")]
    pub login_page: Option<MicrosoftGraphLoginPage>,
    ///OAuth app details for the OAuth technique.
    #[serde(rename = "oAuthConsentAppDetail")]
    pub o_auth_consent_app_detail: Option<MicrosoftGraphOAuthConsentAppDetail>,
    ///The payload associated with a simulation during its creation.
    pub payload: Option<MicrosoftGraphPayload>,
    ///Method of delivery of the phishing payload used in the attack simulation and training campaign. Possible values are: unknown, sms, email, teams, unknownFutureValue.
    #[serde(rename = "payloadDeliveryPlatform")]
    pub payload_delivery_platform: Option<MicrosoftGraphPayloadDeliveryPlatform>,
    ///Report of the attack simulation and training campaign.
    pub report: Option<MicrosoftGraphSimulationReport>,
    ///Status of the attack simulation and training campaign. Supports $filter and $orderby. Possible values are: unknown, draft, running, scheduled, succeeded, failed, cancelled, excluded, unknownFutureValue.
    pub status: Option<MicrosoftGraphSimulationStatus>,
    ///Details about the training settings for a simulation.
    #[serde(rename = "trainingSetting")]
    pub training_setting: Option<MicrosoftGraphTrainingSetting>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSimulationAttackTechnique {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "credentialHarvesting")]
    CredentialHarvesting,
    #[serde(rename = "attachmentMalware")]
    AttachmentMalware,
    #[serde(rename = "driveByUrl")]
    DriveByUrl,
    #[serde(rename = "linkInAttachment")]
    LinkInAttachment,
    #[serde(rename = "linkToMalwareFile")]
    LinkToMalwareFile,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSimulationAttackType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "social")]
    Social,
    #[serde(rename = "cloud")]
    Cloud,
    #[serde(rename = "endpoint")]
    Endpoint,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSimulationAutomation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.simulationAutomation".to_string())]
    pub odata_type: String,
    ///Identity of the user who created the attack simulation automation.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the attack simulation automation was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description of the attack simulation automation.
    pub description: Option<String>,
    ///Display name of the attack simulation automation. Supports $filter and $orderby.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user who most recently modified the attack simulation automation.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the attack simulation automation was most recently modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time of the latest run of the attack simulation automation.
    #[serde(rename = "lastRunDateTime")]
    pub last_run_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Date and time of the upcoming run of the attack simulation automation.
    #[serde(rename = "nextRunDateTime")]
    pub next_run_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A collection of simulation automation runs.
    pub runs: Option<Vec<MicrosoftGraphSimulationAutomationRun>>,
    ///Status of the attack simulation automation. Supports $filter and $orderby. The possible values are: unknown, draft, notRunning, running, completed, unknownFutureValue.
    pub status: Option<MicrosoftGraphSimulationAutomationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSimulationAutomationRun {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.simulationAutomationRun".to_string())]
    pub odata_type: String,
    ///Date and time when the run ends in an attack simulation automation.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Unique identifier for the attack simulation campaign initiated in the attack simulation automation run.
    #[serde(rename = "simulationId")]
    pub simulation_id: Option<String>,
    ///Date and time when the run starts in an attack simulation automation.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Status of the attack simulation automation run. The possible values are: unknown, running, succeeded, failed, skipped, unknownFutureValue.
    pub status: Option<MicrosoftGraphSimulationAutomationRunStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSimulationAutomationRunStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "skipped")]
    Skipped,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSimulationAutomationStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "notRunning")]
    NotRunning,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSimulationContentSource {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "global")]
    Global,
    #[serde(rename = "tenant")]
    Tenant,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSimulationContentStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "ready")]
    Ready,
    #[serde(rename = "archive")]
    Archive,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSimulationEvent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Count of the simulation event occurrence in an attack simulation and training campaign.
    pub count: Option<f64>,
    ///Name of the simulation event in an attack simulation and training campaign.
    #[serde(rename = "eventName")]
    pub event_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSimulationEventsContent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Actual percentage of users who fell for the simulated attack in an attack simulation and training campaign.
    #[serde(rename = "compromisedRate")]
    pub compromised_rate: Option<MicrosoftGraphSimulationEventsContentCompromisedRate>,
    ///List of simulation events in an attack simulation and training campaign.
    pub events: Option<Vec<MicrosoftGraphSimulationEvent>>,
}
///Actual percentage of users who fell for the simulated attack in an attack simulation and training campaign.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSimulationEventsContentCompromisedRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSimulationNotification {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.simulationNotification".to_string())]
    pub odata_type: String,
    ///The default language for the end user notification.
    #[serde(rename = "defaultLanguage")]
    pub default_language: Option<String>,
    #[serde(rename = "endUserNotification")]
    pub end_user_notification: Option<MicrosoftGraphEndUserNotification>,
    ///Target user type. Possible values are: unknown, clicked, compromised, allUsers, unknownFutureValue.
    #[serde(rename = "targettedUserType")]
    pub targetted_user_type: Option<MicrosoftGraphTargettedUserType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSimulationReport {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Overview of an attack simulation and training campaign.
    pub overview: Option<MicrosoftGraphSimulationReportOverview>,
    ///The tenant users and their online actions in an attack simulation and training campaign.
    #[serde(rename = "simulationUsers")]
    pub simulation_users: Option<Vec<MicrosoftGraphUserSimulationDetails>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSimulationReportOverview {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///List of recommended actions for a tenant to improve its security posture based on the attack simulation and training campaign attack type.
    #[serde(rename = "recommendedActions")]
    pub recommended_actions: Option<Vec<MicrosoftGraphRecommendedAction>>,
    ///Number of valid users in the attack simulation and training campaign.
    #[serde(rename = "resolvedTargetsCount")]
    pub resolved_targets_count: Option<f64>,
    ///Summary of simulation events in the attack simulation and training campaign.
    #[serde(rename = "simulationEventsContent")]
    pub simulation_events_content: Option<MicrosoftGraphSimulationEventsContent>,
    ///Summary of assigned trainings in the attack simulation and training campaign.
    #[serde(rename = "trainingEventsContent")]
    pub training_events_content: Option<MicrosoftGraphTrainingEventsContent>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSimulationStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "scheduled")]
    Scheduled,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "excluded")]
    Excluded,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSingleServicePrincipal {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.singleServicePrincipal".to_string())]
    pub odata_type: String,
    ///Description of this service principal.
    pub description: Option<String>,
    ///ID of the servicePrincipal.
    #[serde(rename = "servicePrincipalId")]
    pub service_principal_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSingleUser {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.singleUser".to_string())]
    pub odata_type: String,
    ///The name of the user in Microsoft Entra ID. Read-only.
    pub description: Option<String>,
    ///The ID of the user in Microsoft Entra ID.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSingleValueLegacyExtendedProperty {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.singleValueLegacyExtendedProperty".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A property value.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSite {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.site".to_string())]
    pub odata_type: String,
    ///Analytics about the view activities that took place on this site.
    pub analytics: Option<Box<MicrosoftGraphItemAnalytics>>,
    ///The collection of column definitions reusable across lists under this site.
    pub columns: Option<Vec<MicrosoftGraphColumnDefinition>>,
    ///The collection of content types defined for this site.
    #[serde(rename = "contentTypes")]
    pub content_types: Option<Vec<MicrosoftGraphContentType>>,
    ///Identity of the user, device, or application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who created the item. Read-only.
    #[serde(rename = "createdByUser")]
    pub created_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Provides a user-visible description of the item. Optional.
    pub description: Option<String>,
    ///The full title for the site. Read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The default drive (document library) for this site.
    pub drive: Option<Box<MicrosoftGraphDrive>>,
    ///The collection of drives (document libraries) under this site.
    pub drives: Option<Vec<MicrosoftGraphDrive>>,
    ///ETag for the item. Read-only.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    pub error: Option<MicrosoftGraphPublicError>,
    #[serde(rename = "externalColumns")]
    pub external_columns: Option<Vec<MicrosoftGraphColumnDefinition>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identifies whether the site is personal or not. Read-only.
    #[serde(rename = "isPersonalSite")]
    pub is_personal_site: Option<bool>,
    ///Used to address any item contained in this site. This collection can't be enumerated.
    pub items: Option<Vec<MicrosoftGraphBaseItem>>,
    ///Identity of the user, device, and application that last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who last modified the item. Read-only.
    #[serde(rename = "lastModifiedByUser")]
    pub last_modified_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of lists under this site.
    pub lists: Option<Vec<MicrosoftGraphList>>,
    ///The name of the item. Read-write.
    pub name: Option<String>,
    ///Calls the OneNote service for notebook related operations.
    pub onenote: Option<MicrosoftGraphOnenote>,
    ///The collection of long-running operations on the site.
    pub operations: Option<Vec<MicrosoftGraphRichLongRunningOperation>>,
    ///The collection of pages in the baseSitePages list in this site.
    pub pages: Option<Vec<MicrosoftGraphBaseSitePage>>,
    ///Parent information, if the item has a parent. Read-write.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    ///The permissions associated with the site. Nullable.
    pub permissions: Option<Vec<MicrosoftGraphPermission>>,
    ///If present, provides the root site in the site collection. Read-only.
    pub root: Option<MicrosoftGraphRoot>,
    ///Returns identifiers useful for SharePoint REST compatibility. Read-only.
    #[serde(rename = "sharepointIds")]
    pub sharepoint_ids: Option<MicrosoftGraphSharepointIds>,
    ///Provides details about the site's site collection. Available only on the root site. Read-only.
    #[serde(rename = "siteCollection")]
    pub site_collection: Option<MicrosoftGraphSiteCollection>,
    ///The collection of the sub-sites under this site.
    pub sites: Option<Vec<MicrosoftGraphSite>>,
    ///The default termStore under this site.
    #[serde(rename = "termStore")]
    pub term_store: Option<MicrosoftGraphTermStoreStore>,
    ///The collection of termStores under this site.
    #[serde(rename = "termStores")]
    pub term_stores: Option<Vec<MicrosoftGraphTermStoreStore>>,
    ///URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSiteArchivalDetails {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents the current archive status of the site collection. Returned only on $select. The possible values are: recentlyArchived, fullyArchived, reactivating, unknownFutureValue.
    #[serde(rename = "archiveStatus")]
    pub archive_status: Option<MicrosoftGraphSiteArchiveStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSiteArchiveStatus {
    #[serde(rename = "recentlyArchived")]
    #[default]
    RecentlyArchived,
    #[serde(rename = "fullyArchived")]
    FullyArchived,
    #[serde(rename = "reactivating")]
    Reactivating,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSiteCollection {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents whether the site collection is recently archived, fully archived, or reactivating. Possible values are: recentlyArchived, fullyArchived, reactivating, unknownFutureValue.
    #[serde(rename = "archivalDetails")]
    pub archival_details: Option<MicrosoftGraphSiteArchivalDetails>,
    ///The geographic region code for where this site collection resides. Only present for multi-geo tenants. Read-only.
    #[serde(rename = "dataLocationCode")]
    pub data_location_code: Option<String>,
    ///The hostname for the site collection. Read-only.
    pub hostname: Option<String>,
    ///If present, indicates that this is a root site collection in SharePoint. Read-only.
    pub root: Option<MicrosoftGraphRoot>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSiteLockState {
    #[serde(rename = "unlocked")]
    #[default]
    Unlocked,
    #[serde(rename = "lockedReadOnly")]
    LockedReadOnly,
    #[serde(rename = "lockedNoAccess")]
    LockedNoAccess,
    #[serde(rename = "lockedNoAdditions")]
    LockedNoAdditions,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSitePage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.sitePage".to_string())]
    pub odata_type: String,
    ///Indicates the layout of the content in a given SharePoint page, including horizontal sections and vertical sections.
    #[serde(rename = "canvasLayout")]
    pub canvas_layout: Option<MicrosoftGraphCanvasLayout>,
    ///Identity of the user, device, or application that created the item. Read-only.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who created the item. Read-only.
    #[serde(rename = "createdByUser")]
    pub created_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time of item creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Provides a user-visible description of the item. Optional.
    pub description: Option<String>,
    ///ETag for the item. Read-only.
    #[serde(rename = "eTag")]
    pub e_tag: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the user, device, and application that last modified the item. Read-only.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Identity of the user who last modified the item. Read-only.
    #[serde(rename = "lastModifiedByUser")]
    pub last_modified_by_user: Option<Box<MicrosoftGraphUser>>,
    ///Date and time the item was last modified. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the item. Read-write.
    pub name: Option<String>,
    ///The name of the page layout of the page. The possible values are: microsoftReserved, article, home, unknownFutureValue.
    #[serde(rename = "pageLayout")]
    pub page_layout: Option<MicrosoftGraphPageLayoutType>,
    ///Parent information, if the item has a parent. Read-write.
    #[serde(rename = "parentReference")]
    pub parent_reference: Option<MicrosoftGraphItemReference>,
    ///Indicates the promotion kind of the sitePage. The possible values are: microsoftReserved, page, newsPost, unknownFutureValue.
    #[serde(rename = "promotionKind")]
    pub promotion_kind: Option<MicrosoftGraphPagePromotionType>,
    ///The publishing status and the MM.mm version of the page.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphPublicationFacet>,
    ///Reactions information for the page.
    pub reactions: Option<MicrosoftGraphReactionsFacet>,
    ///Determines whether or not to show comments at the bottom of the page.
    #[serde(rename = "showComments")]
    pub show_comments: Option<bool>,
    ///Determines whether or not to show recommended pages at the bottom of the page.
    #[serde(rename = "showRecommendedPages")]
    pub show_recommended_pages: Option<bool>,
    ///Url of the sitePage's thumbnail image
    #[serde(rename = "thumbnailWebUrl")]
    pub thumbnail_web_url: Option<String>,
    ///Title of the sitePage.
    pub title: Option<String>,
    ///Title area on the SharePoint page.
    #[serde(rename = "titleArea")]
    pub title_area: Option<MicrosoftGraphTitleArea>,
    ///Collection of webparts on the SharePoint page.
    #[serde(rename = "webParts")]
    pub web_parts: Option<Vec<MicrosoftGraphWebPart>>,
    ///URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSiteProtectionRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.siteProtectionRule".to_string())]
    pub odata_type: String,
    ///The identity of person who created the rule.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the rule.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains error details if an operation on a rule fails.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "isAutoApplyEnabled")]
    pub is_auto_apply_enabled: Option<bool>,
    ///The identity of the person who last modified the rule.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification made to the rule.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains a site expression. For examples, see siteExpression example.
    #[serde(rename = "siteExpression")]
    pub site_expression: Option<String>,
    ///The status of the protection rule. The possible values are: draft, active, completed, completedWithErrors, unknownFutureValue. The draft member is currently unsupported.
    pub status: Option<MicrosoftGraphProtectionRuleStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSiteProtectionUnit {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.siteProtectionUnit".to_string())]
    pub odata_type: String,
    ///The identity of the person who created the protection unit.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the protection unit. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Contains error details if an error occurred while creating a protection unit.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of person who last modified the protection unit.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification of this protection unit. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier of the protection policy based on which protection unit was created.
    #[serde(rename = "policyId")]
    pub policy_id: Option<String>,
    ///Unique identifier of the SharePoint site.
    #[serde(rename = "siteId")]
    pub site_id: Option<String>,
    ///Name of the SharePoint site.
    #[serde(rename = "siteName")]
    pub site_name: Option<String>,
    ///The web URL of the SharePoint site.
    #[serde(rename = "siteWebUrl")]
    pub site_web_url: Option<String>,
    ///The status of the protection unit. The possible values are: protectRequested, protected, unprotectRequested, unprotected, removeRequested, unknownFutureValue, offboardRequested, offboarded, cancelOffboardRequested. Use the Prefer: include-unknown-enum-members request header to get the following values from this evolvable enum: offboardRequested, offboarded, cancelOffboardRequested.
    pub status: Option<MicrosoftGraphProtectionUnitStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSiteProtectionUnitsBulkAdditionJob {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.siteProtectionUnitsBulkAdditionJob".to_string())]
    pub odata_type: String,
    ///The identity of person who created the job.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time of creation of the job.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the protection units bulk addition job.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Error details containing resource resolution failures, if any.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity of the person who last modified the job.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp of the last modification made to the job.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The list of SharePoint site IDs to add to the SharePoint protection policy.
    #[serde(rename = "siteIds")]
    pub site_ids: Option<Vec<Option<String>>>,
    ///The list of SharePoint site URLs to add to the SharePoint protection policy.
    #[serde(rename = "siteWebUrls")]
    pub site_web_urls: Option<Vec<Option<String>>>,
    pub status: Option<MicrosoftGraphProtectionUnitsBulkJobStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSiteRestoreArtifact {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.siteRestoreArtifact".to_string())]
    pub odata_type: String,
    ///The time when restoration of restore artifact is completed.
    #[serde(rename = "completionDateTime")]
    pub completion_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the restoration destination. The possible values are: new, inPlace, unknownFutureValue.
    #[serde(rename = "destinationType")]
    pub destination_type: Option<MicrosoftGraphDestinationType>,
    ///Contains error details if the restore session fails or completes with an error.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the date and time when an artifact is protected by a protectionPolicy and can be restored.
    #[serde(rename = "restorePoint")]
    pub restore_point: Option<MicrosoftGraphRestorePoint>,
    ///The new site identifier if the value of the destinationType property is new, and the existing site ID if the value is inPlace.
    #[serde(rename = "restoredSiteId")]
    pub restored_site_id: Option<String>,
    ///The name of the restored site.
    #[serde(rename = "restoredSiteName")]
    pub restored_site_name: Option<String>,
    ///The web URL of the restored site.
    #[serde(rename = "restoredSiteWebUrl")]
    pub restored_site_web_url: Option<String>,
    ///The time when restoration of restore artifact is started.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The individual restoration status of the restore artifact. The possible values are: added, scheduling, scheduled, inProgress, succeeded, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphArtifactRestoreStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSiteRestoreArtifactsBulkAdditionRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.siteRestoreArtifactsBulkAdditionRequest".to_string())]
    pub odata_type: String,
    ///The identity of the person who created the bulk request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The time when the bulk request was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates the restoration destination. The possible values are: new, inPlace, unknownFutureValue.
    #[serde(rename = "destinationType")]
    pub destination_type: Option<MicrosoftGraphDestinationType>,
    ///Name of the addition request.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Error details are populated for resource resolution failures.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified this entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///Timestamp when this entity was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The start and end date and time of the protection period.
    #[serde(rename = "protectionTimePeriod")]
    pub protection_time_period: Option<MicrosoftGraphTimePeriod>,
    ///Indicates which protection units to restore. This property isn't implemented yet. Future value; don't use.
    #[serde(rename = "protectionUnitIds")]
    pub protection_unit_ids: Option<Vec<Option<String>>>,
    ///Indicates which restore point to return. The possible values are: oldest, latest, unknownFutureValue.
    #[serde(rename = "restorePointPreference")]
    pub restore_point_preference: Option<MicrosoftGraphRestorePointPreference>,
    ///The list of SharePoint site IDs that are added to the corresponding SharePoint restore session in a bulk operation.
    #[serde(rename = "siteIds")]
    pub site_ids: Option<Vec<Option<String>>>,
    ///The list of SharePoint site URLs that are added to the corresponding SharePoint restore session in a bulk operation.
    #[serde(rename = "siteWebUrls")]
    pub site_web_urls: Option<Vec<Option<String>>>,
    pub status: Option<MicrosoftGraphRestoreArtifactsBulkRequestStatus>,
    ///The type of the restore point. The possible values are: none, fastRestore, unknownFutureValue.
    pub tags: Option<MicrosoftGraphRestorePointTags>,
}
///Possible values for site security level.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSiteSecurityLevel {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "mediumLow")]
    MediumLow,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "mediumHigh")]
    MediumHigh,
    #[serde(rename = "high")]
    High,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSizeRange {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The maximum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply.
    #[serde(rename = "maximumSize")]
    pub maximum_size: Option<f64>,
    ///The minimum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply.
    #[serde(rename = "minimumSize")]
    pub minimum_size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSkypeForBusinessUserConversationMember {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.skypeForBusinessUserConversationMember".to_string())]
    pub odata_type: String,
    ///The display name of the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The roles for that user. This property contains more qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member shouldn't have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role.
    pub roles: Option<Vec<Option<String>>>,
    ///ID of the tenant that the user belongs to.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    ///Microsoft Entra ID of the user.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
    ///The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.
    #[serde(rename = "visibleHistoryStartDateTime")]
    pub visible_history_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSkypeUserConversationMember {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.skypeUserConversationMember".to_string())]
    pub odata_type: String,
    ///The display name of the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The roles for that user. This property contains more qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member shouldn't have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role.
    pub roles: Option<Vec<Option<String>>>,
    ///Skype ID of the user.
    #[serde(rename = "skypeId")]
    pub skype_id: Option<String>,
    ///The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.
    #[serde(rename = "visibleHistoryStartDateTime")]
    pub visible_history_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSmsAuthenticationMethodConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.smsAuthenticationMethodConfiguration".to_string())]
    pub odata_type: String,
    ///Groups of users that are excluded from a policy.
    #[serde(rename = "excludeTargets")]
    pub exclude_targets: Option<Vec<MicrosoftGraphExcludeTarget>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of groups that are enabled to use the authentication method.
    #[serde(rename = "includeTargets")]
    pub include_targets: Option<Vec<MicrosoftGraphSmsAuthenticationMethodTarget>>,
    ///The state of the policy. Possible values are: enabled, disabled.
    pub state: Option<MicrosoftGraphAuthenticationMethodState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSmsAuthenticationMethodTarget {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.smsAuthenticationMethodTarget".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines if the user is enforced to register the authentication method.
    #[serde(rename = "isRegistrationRequired")]
    pub is_registration_required: Option<bool>,
    ///Determines if users can use this authentication method to sign in to Microsoft Entra ID. true if users can use this method for primary authentication, otherwise false.
    #[serde(rename = "isUsableForSignIn")]
    pub is_usable_for_sign_in: Option<bool>,
    #[serde(rename = "targetType")]
    pub target_type: Option<MicrosoftGraphAuthenticationMethodTargetType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSocialIdentityProvider {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.socialIdentityProvider".to_string())]
    pub odata_type: String,
    ///The identifier for the client application obtained when registering the application with the identity provider. Required.
    #[serde(rename = "clientId")]
    pub client_id: Option<String>,
    ///The client secret for the application that is obtained when the application is registered with the identity provider. This is write-only. A read operation returns . Required.
    #[serde(rename = "clientSecret")]
    pub client_secret: Option<String>,
    ///The display name of the identity provider.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///For a B2B scenario, possible values: Google, Facebook. For a B2C scenario, possible values: Microsoft, Google, Amazon, LinkedIn, Facebook, GitHub, Twitter, Weibo, QQ, WeChat. Required.
    #[serde(rename = "identityProviderType")]
    pub identity_provider_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSocialIdentitySource {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.socialIdentitySource".to_string())]
    pub odata_type: String,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(rename = "socialIdentitySourceType")]
    pub social_identity_source_type: Option<MicrosoftGraphSocialIdentitySourceType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSocialIdentitySourceType {
    #[serde(rename = "facebook")]
    #[default]
    Facebook,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSoftwareOathAuthenticationMethod {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.softwareOathAuthenticationMethod".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The secret key of the method. Always returns null.
    #[serde(rename = "secretKey")]
    pub secret_key: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSoftwareOathAuthenticationMethodConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.softwareOathAuthenticationMethodConfiguration".to_string()
    )]
    pub odata_type: String,
    ///Groups of users that are excluded from a policy.
    #[serde(rename = "excludeTargets")]
    pub exclude_targets: Option<Vec<MicrosoftGraphExcludeTarget>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of groups that are enabled to use the authentication method. Expanded by default.
    #[serde(rename = "includeTargets")]
    pub include_targets: Option<Vec<MicrosoftGraphAuthenticationMethodTarget>>,
    ///The state of the policy. Possible values are: enabled, disabled.
    pub state: Option<MicrosoftGraphAuthenticationMethodState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSoftwareUpdateStatusSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.softwareUpdateStatusSummary".to_string())]
    pub odata_type: String,
    ///Number of compliant devices.
    #[serde(rename = "compliantDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub compliant_device_count: Option<f64>,
    ///Number of compliant users.
    #[serde(rename = "compliantUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub compliant_user_count: Option<f64>,
    ///Number of conflict devices.
    #[serde(rename = "conflictDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub conflict_device_count: Option<f64>,
    ///Number of conflict users.
    #[serde(rename = "conflictUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub conflict_user_count: Option<f64>,
    ///The name of the policy.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Number of devices had error.
    #[serde(rename = "errorDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_device_count: Option<f64>,
    ///Number of users had error.
    #[serde(rename = "errorUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub error_user_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Number of non compliant devices.
    #[serde(rename = "nonCompliantDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub non_compliant_device_count: Option<f64>,
    ///Number of non compliant users.
    #[serde(rename = "nonCompliantUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub non_compliant_user_count: Option<f64>,
    ///Number of not applicable devices.
    #[serde(rename = "notApplicableDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_device_count: Option<f64>,
    ///Number of not applicable users.
    #[serde(rename = "notApplicableUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_applicable_user_count: Option<f64>,
    ///Number of remediated devices.
    #[serde(rename = "remediatedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub remediated_device_count: Option<f64>,
    ///Number of remediated users.
    #[serde(rename = "remediatedUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub remediated_user_count: Option<f64>,
    ///Number of unknown devices.
    #[serde(rename = "unknownDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub unknown_device_count: Option<f64>,
    ///Number of unknown users.
    #[serde(rename = "unknownUserCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub unknown_user_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSpaApplication {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies the URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
    #[serde(rename = "redirectUris")]
    pub redirect_uris: Option<Vec<String>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSpecialFolder {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The unique identifier for this item in the /drive/special collection
    pub name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphStagedFeatureName {
    #[serde(rename = "passthroughAuthentication")]
    #[default]
    PassthroughAuthentication,
    #[serde(rename = "seamlessSso")]
    SeamlessSso,
    #[serde(rename = "passwordHashSync")]
    PasswordHashSync,
    #[serde(rename = "emailAsAlternateId")]
    EmailAsAlternateId,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "certificateBasedAuthentication")]
    CertificateBasedAuthentication,
    #[serde(rename = "multiFactorAuthentication")]
    MultiFactorAuthentication,
}
discriminated_enum! {
    pub enum MicrosoftGraphStandardTimeZoneOffset { discriminator : "@odata.type",
    variants : [("#microsoft.graph.daylightTimeZoneOffset",
    MicrosoftGraphDaylightTimeZoneOffset(Box < MicrosoftGraphDaylightTimeZoneOffset >))],
    fallback : StandardTimeZoneOffset(Box < MicrosoftGraphStandardTimeZoneOffsetBase >),
    }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphStandardTimeZoneOffsetBase {
    ///Represents the nth occurrence of the day of week that the transition from daylight saving time to standard time occurs.
    #[serde(rename = "dayOccurrence")]
    pub day_occurrence: Option<f64>,
    ///Represents the day of the week when the transition from daylight saving time to standard time.
    #[serde(rename = "dayOfWeek")]
    pub day_of_week: Option<MicrosoftGraphDayOfWeek>,
    ///Represents the month of the year when the transition from daylight saving time to standard time occurs.
    pub month: Option<f64>,
    ///Represents the time of day when the transition from daylight saving time to standard time occurs.
    pub time: Option<chrono::NaiveTime>,
    ///Represents how frequently in terms of years the change from daylight saving time to standard time occurs. For example, a value of 0 means every year.
    pub year: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphStandardWebPart {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.standardWebPart".to_string())]
    pub odata_type: String,
    ///The instance identifier of the container text webPart. It only works for inline standard webPart in rich text webParts.
    #[serde(rename = "containerTextWebPartId")]
    pub container_text_web_part_id: Option<String>,
    ///Data of the webPart.
    pub data: Option<MicrosoftGraphWebPartData>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A Guid that indicates the webPart type.
    #[serde(rename = "webPartType")]
    pub web_part_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphStartHoldMusicOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.startHoldMusicOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
///State Management Setting.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphStateManagementSetting {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "allowed")]
    Allowed,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphStatus {
    #[serde(rename = "active")]
    #[default]
    Active,
    #[serde(rename = "updated")]
    Updated,
    #[serde(rename = "deleted")]
    Deleted,
    #[serde(rename = "ignored")]
    Ignored,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphStopHoldMusicOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.stopHoldMusicOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphStoragePlanInformation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether there are higher storage quota plans available. Read-only.
    #[serde(rename = "upgradeAvailable")]
    pub upgrade_available: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphStorageQuotaBreakdown {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.storageQuotaBreakdown".to_string())]
    pub odata_type: String,
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "manageWebUrl")]
    pub manage_web_url: Option<String>,
    pub used: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphStorageSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.storageSettings".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub quota: Option<MicrosoftGraphUnifiedStorageQuota>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphStringKeyAttributeMappingSourceValuePair {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The name of the parameter.
    pub key: Option<String>,
    ///The value of the parameter.
    pub value: Option<Box<MicrosoftGraphAttributeMappingSource>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphStringKeyLongValuePair {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The mapping of the user type from the source system to the target system. For example:User to User - For Microsoft Entra ID to Microsoft Entra ID synchronization worker to user - For Workday to Microsoft Entra synchronization.
    pub key: Option<String>,
    ///Total number of synchronized objects.
    pub value: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphStringKeyStringValuePair {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Key.
    pub key: Option<String>,
    ///Value.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphStsPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.stsPolicy".to_string())]
    pub odata_type: String,
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///A string collection containing a JSON string that defines the rules and settings for a policy. The syntax for the definition differs for each derived policy type. Required.
    pub definition: Option<Vec<String>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If set to true, activates this policy. There can be many policies for the same policy type, but only one can be activated as the organization default. Optional, default value is false.
    #[serde(rename = "isOrganizationDefault")]
    pub is_organization_default: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubjectRightsRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.subjectRightsRequest".to_string())]
    pub odata_type: String,
    ///Collection of users who can approve the request. Currently only supported for requests of type delete.
    pub approvers: Option<Vec<MicrosoftGraphUser>>,
    ///Identity that the request is assigned to.
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<MicrosoftGraphIdentity>,
    ///The date and time when the request was closed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "closedDateTime")]
    pub closed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Collection of users who can collaborate on the request.
    pub collaborators: Option<Vec<MicrosoftGraphUser>>,
    ///KQL based content query that should be used for search. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.
    #[serde(rename = "contentQuery")]
    pub content_query: Option<String>,
    ///Identity information for the entity that created the request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the request was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Information about the data subject.
    #[serde(rename = "dataSubject")]
    pub data_subject: Option<MicrosoftGraphDataSubject>,
    ///The type of the data subject. Possible values are: customer, currentEmployee, formerEmployee, prospectiveEmployee, student, teacher, faculty, other, unknownFutureValue.
    #[serde(rename = "dataSubjectType")]
    pub data_subject_type: Option<MicrosoftGraphDataSubjectType>,
    ///Description for the request.
    pub description: Option<String>,
    ///The name of the request.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The external ID for the request that is immutable after creation and is used for tracking the request for the external system. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///Collection of history change events.
    pub history: Option<Vec<MicrosoftGraphSubjectRightsRequestHistory>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Include all versions of the documents. By default, the current copies of the documents are returned. If SharePoint sites have versioning enabled, including all versions includes the historical copies of the documents. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.
    #[serde(rename = "includeAllVersions")]
    pub include_all_versions: Option<bool>,
    ///Include content authored by the data subject. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.
    #[serde(rename = "includeAuthoredContent")]
    pub include_authored_content: Option<bool>,
    ///Insight about the request.
    pub insight: Option<MicrosoftGraphSubjectRightsRequestDetail>,
    ///The date and time when the request is internally due. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "internalDueDateTime")]
    pub internal_due_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Identity information for the entity that last modified the request.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The date and time when the request was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The mailbox locations that should be searched. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.
    #[serde(rename = "mailboxLocations")]
    pub mailbox_locations: Option<MicrosoftGraphSubjectRightsRequestMailboxLocation>,
    ///List of notes associated with the request.
    pub notes: Option<Vec<MicrosoftGraphAuthoredNote>>,
    ///Pause the request after estimate has finished. By default, the data estimate runs and then pauses, allowing you to preview results and then select the option to retrieve data in the UI. You can set this property to false if you want it to perform the estimate and then automatically begin with the retrieval of the content. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.
    #[serde(rename = "pauseAfterEstimate")]
    pub pause_after_estimate: Option<bool>,
    ///List of regulations that this request fulfill.
    pub regulations: Option<Vec<Option<String>>>,
    ///The SharePoint and OneDrive site locations that should be searched. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.
    #[serde(rename = "siteLocations")]
    pub site_locations: Option<MicrosoftGraphSubjectRightsRequestSiteLocation>,
    ///Information about the different stages for the request.
    pub stages: Option<Vec<MicrosoftGraphSubjectRightsRequestStageDetail>>,
    ///The status of the request. Possible values are: active, closed, unknownFutureValue.
    pub status: Option<MicrosoftGraphSubjectRightsRequestStatus>,
    ///Information about the Microsoft Teams team that was created for the request.
    pub team: Option<Box<MicrosoftGraphTeam>>,
    ///The type of the request. Possible values are: export, delete, access, tagForAction, unknownFutureValue.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphSubjectRightsRequestType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubjectRightsRequestAllMailboxLocation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.subjectRightsRequestAllMailboxLocation".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubjectRightsRequestAllSiteLocation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.subjectRightsRequestAllSiteLocation".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubjectRightsRequestDetail {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Count of items that are excluded from the request.
    #[serde(rename = "excludedItemCount")]
    pub excluded_item_count: Option<f64>,
    ///Count of items per insight.
    #[serde(rename = "insightCounts")]
    pub insight_counts: Option<Vec<MicrosoftGraphKeyValuePair>>,
    ///Count of items found.
    #[serde(rename = "itemCount")]
    pub item_count: Option<f64>,
    ///Count of item that need review.
    #[serde(rename = "itemNeedReview")]
    pub item_need_review: Option<f64>,
    ///Count of items per product, such as Exchange, SharePoint, OneDrive, and Teams.
    #[serde(rename = "productItemCounts")]
    pub product_item_counts: Option<Vec<MicrosoftGraphKeyValuePair>>,
    ///Count of items signed off by the administrator.
    #[serde(rename = "signedOffItemCount")]
    pub signed_off_item_count: Option<f64>,
    ///Total item size in bytes.
    #[serde(rename = "totalItemSize")]
    pub total_item_size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubjectRightsRequestEnumeratedMailboxLocation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.subjectRightsRequestEnumeratedMailboxLocation".to_string()
    )]
    pub odata_type: String,
    ///Collection of mailboxes that should be included in the search. Includes the user principal name (UPN) of each mailbox, for example, Monica.Thompson@contoso.com.
    #[serde(rename = "userPrincipalNames")]
    pub user_principal_names: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubjectRightsRequestEnumeratedSiteLocation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.subjectRightsRequestEnumeratedSiteLocation".to_string())]
    pub odata_type: String,
    ///Collection of site URLs that should be included. Includes the URL of each site, for example, https://www.contoso.com/site1.
    pub urls: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubjectRightsRequestHistory {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Identity of the user who changed the  subject rights request.
    #[serde(rename = "changedBy")]
    pub changed_by: Option<MicrosoftGraphIdentitySet>,
    ///Data and time when the entity was changed.
    #[serde(rename = "eventDateTime")]
    pub event_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The stage when the entity was changed. Possible values are: contentRetrieval, contentReview, generateReport, contentDeletion, caseResolved, unknownFutureValue, approval. Use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: approval.
    pub stage: Option<MicrosoftGraphSubjectRightsRequestStage>,
    ///The status of the stage when the entity was changed. Possible values are: notStarted, current, completed, failed, unknownFutureValue.
    #[serde(rename = "stageStatus")]
    pub stage_status: Option<MicrosoftGraphSubjectRightsRequestStageStatus>,
    ///Type of history.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
discriminated_enum! {
    pub enum MicrosoftGraphSubjectRightsRequestMailboxLocation { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.subjectRightsRequestAllMailboxLocation",
    MicrosoftGraphSubjectRightsRequestAllMailboxLocation(Box <
    MicrosoftGraphSubjectRightsRequestAllMailboxLocation >)),
    ("#microsoft.graph.subjectRightsRequestEnumeratedMailboxLocation",
    MicrosoftGraphSubjectRightsRequestEnumeratedMailboxLocation(Box <
    MicrosoftGraphSubjectRightsRequestEnumeratedMailboxLocation >))], fallback :
    SubjectRightsRequestMailboxLocation(Box <
    MicrosoftGraphSubjectRightsRequestMailboxLocationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubjectRightsRequestMailboxLocationBase {}
discriminated_enum! {
    pub enum MicrosoftGraphSubjectRightsRequestSiteLocation { discriminator :
    "@odata.type", variants : [("#microsoft.graph.subjectRightsRequestAllSiteLocation",
    MicrosoftGraphSubjectRightsRequestAllSiteLocation(Box <
    MicrosoftGraphSubjectRightsRequestAllSiteLocation >)),
    ("#microsoft.graph.subjectRightsRequestEnumeratedSiteLocation",
    MicrosoftGraphSubjectRightsRequestEnumeratedSiteLocation(Box <
    MicrosoftGraphSubjectRightsRequestEnumeratedSiteLocation >))], fallback :
    SubjectRightsRequestSiteLocation(Box <
    MicrosoftGraphSubjectRightsRequestSiteLocationBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubjectRightsRequestSiteLocationBase {}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSubjectRightsRequestStage {
    #[serde(rename = "contentRetrieval")]
    #[default]
    ContentRetrieval,
    #[serde(rename = "contentReview")]
    ContentReview,
    #[serde(rename = "generateReport")]
    GenerateReport,
    #[serde(rename = "contentDeletion")]
    ContentDeletion,
    #[serde(rename = "caseResolved")]
    CaseResolved,
    #[serde(rename = "contentEstimate")]
    ContentEstimate,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "approval")]
    Approval,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubjectRightsRequestStageDetail {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Describes the error, if any, for the current stage.
    pub error: Option<MicrosoftGraphPublicError>,
    ///The stage of the subject rights request. Possible values are: contentRetrieval, contentReview, generateReport, contentDeletion, caseResolved, unknownFutureValue, approval. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: approval.
    pub stage: Option<MicrosoftGraphSubjectRightsRequestStage>,
    ///Status of the current stage. Possible values are: notStarted, current, completed, failed, unknownFutureValue.
    pub status: Option<MicrosoftGraphSubjectRightsRequestStageStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSubjectRightsRequestStageStatus {
    #[serde(rename = "notStarted")]
    #[default]
    NotStarted,
    #[serde(rename = "current")]
    Current,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSubjectRightsRequestStatus {
    #[serde(rename = "active")]
    #[default]
    Active,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSubjectRightsRequestType {
    #[serde(rename = "export")]
    #[default]
    Export,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "access")]
    Access,
    #[serde(rename = "tagForAction")]
    TagForAction,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
discriminated_enum! {
    pub enum MicrosoftGraphSubjectSet { discriminator : "@odata.type", variants :
    [("#microsoft.graph.attributeRuleMembers", MicrosoftGraphAttributeRuleMembers(Box <
    MicrosoftGraphAttributeRuleMembers >)),
    ("#microsoft.graph.connectedOrganizationMembers",
    MicrosoftGraphConnectedOrganizationMembers(Box <
    MicrosoftGraphConnectedOrganizationMembers >)), ("#microsoft.graph.externalSponsors",
    MicrosoftGraphExternalSponsors(Box < MicrosoftGraphExternalSponsors >)),
    ("#microsoft.graph.groupMembers", MicrosoftGraphGroupMembers(Box <
    MicrosoftGraphGroupMembers >)),
    ("#microsoft.graph.identityGovernance.groupBasedSubjectSet",
    MicrosoftGraphIdentityGovernanceGroupBasedSubjectSet(Box <
    MicrosoftGraphIdentityGovernanceGroupBasedSubjectSet >)),
    ("#microsoft.graph.identityGovernance.ruleBasedSubjectSet",
    MicrosoftGraphIdentityGovernanceRuleBasedSubjectSet(Box <
    MicrosoftGraphIdentityGovernanceRuleBasedSubjectSet >)),
    ("#microsoft.graph.internalSponsors", MicrosoftGraphInternalSponsors(Box <
    MicrosoftGraphInternalSponsors >)), ("#microsoft.graph.requestorManager",
    MicrosoftGraphRequestorManager(Box < MicrosoftGraphRequestorManager >)),
    ("#microsoft.graph.singleServicePrincipal", MicrosoftGraphSingleServicePrincipal(Box
    < MicrosoftGraphSingleServicePrincipal >)), ("#microsoft.graph.singleUser",
    MicrosoftGraphSingleUser(Box < MicrosoftGraphSingleUser >)),
    ("#microsoft.graph.targetApplicationOwners",
    MicrosoftGraphTargetApplicationOwners(Box < MicrosoftGraphTargetApplicationOwners
    >)), ("#microsoft.graph.targetManager", MicrosoftGraphTargetManager(Box <
    MicrosoftGraphTargetManager >)), ("#microsoft.graph.targetUserSponsors",
    MicrosoftGraphTargetUserSponsors(Box < MicrosoftGraphTargetUserSponsors >))],
    fallback : SubjectSet(Box < MicrosoftGraphSubjectSetBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubjectSetBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubscribeToToneOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.subscribeToToneOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubscribedSku {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.subscribedSku".to_string())]
    pub odata_type: String,
    ///The unique ID of the account this SKU belongs to.
    #[serde(rename = "accountId")]
    pub account_id: Option<String>,
    ///The name of the account this SKU belongs to.
    #[serde(rename = "accountName")]
    pub account_name: Option<String>,
    ///The target class for this SKU. Only SKUs with target class User are assignable. Possible values are: User, Company.
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<String>,
    ///Enabled indicates that the prepaidUnits property has at least one unit that is enabled. LockedOut indicates that the customer canceled their subscription. Possible values are: Enabled, Warning, Suspended, Deleted, LockedOut.
    #[serde(rename = "capabilityStatus")]
    pub capability_status: Option<String>,
    ///The number of licenses that have been assigned.
    #[serde(rename = "consumedUnits")]
    pub consumed_units: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Information about the number and status of prepaid licenses.
    #[serde(rename = "prepaidUnits")]
    pub prepaid_units: Option<MicrosoftGraphLicenseUnitsDetail>,
    ///Information about the service plans that are available with the SKU. Not nullable.
    #[serde(rename = "servicePlans")]
    pub service_plans: Option<Vec<MicrosoftGraphServicePlanInfo>>,
    ///The unique identifier (GUID) for the service SKU.
    #[serde(rename = "skuId")]
    pub sku_id: Option<uuid::Uuid>,
    ///The SKU part number; for example: AAD_PREMIUM or RMSBASIC. To get a list of commercial subscriptions that an organization has acquired, see List subscribedSkus.
    #[serde(rename = "skuPartNumber")]
    pub sku_part_number: Option<String>,
    ///A list of all subscription IDs associated with this SKU.
    #[serde(rename = "subscriptionIds")]
    pub subscription_ids: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSubscription {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.subscription".to_string())]
    pub odata_type: String,
    ///Optional. Identifier of the application used to create the subscription. Read-only.
    #[serde(rename = "applicationId")]
    pub application_id: Option<String>,
    ///Required. Indicates the type of change in the subscribed resource that raises a change notification. The supported values are: created, updated, deleted. Multiple values can be combined using a comma-separated list. Note:  Drive root item and list change notifications support only the updated changeType. User and group change notifications support updated and deleted changeType. Use updated to receive notifications when user or group is created, updated, or soft deleted. Use deleted to receive notifications when user or group is permanently deleted.
    #[serde(rename = "changeType")]
    pub change_type: Option<String>,
    ///Optional. Specifies the value of the clientState property sent by the service in each change notification. The maximum length is 128 characters. The client can check that the change notification came from the service by comparing the value of the clientState property sent with the subscription with the value of the clientState property received with each change notification.
    #[serde(rename = "clientState")]
    pub client_state: Option<String>,
    ///Optional. Identifier of the user or service principal that created the subscription. If the app used delegated permissions to create the subscription, this field contains the ID of the signed-in user the app called on behalf of. If the app used application permissions, this field contains the ID of the service principal corresponding to the app. Read-only.
    #[serde(rename = "creatorId")]
    pub creator_id: Option<String>,
    ///Optional. A base64-encoded representation of a certificate with a public key used to encrypt resource data in change notifications. Optional but required when includeResourceData is true.
    #[serde(rename = "encryptionCertificate")]
    pub encryption_certificate: Option<String>,
    ///Optional. A custom app-provided identifier to help identify the certificate needed to decrypt resource data.
    #[serde(rename = "encryptionCertificateId")]
    pub encryption_certificate_id: Option<String>,
    ///Required. Specifies the date and time when the webhook subscription expires. The time is in UTC, and can be an amount of time from subscription creation that varies for the resource subscribed to. Any value under 45 minutes after the time of the request is automatically set to 45 minutes after the request time. For the maximum supported subscription length of time, see Subscription lifetime.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Optional. When set to true, change notifications include resource data (such as content of a chat message).
    #[serde(rename = "includeResourceData")]
    pub include_resource_data: Option<bool>,
    ///Optional. Specifies the latest version of Transport Layer Security (TLS) that the notification endpoint, specified by notificationUrl, supports. The possible values are: v10, v11, v12, v13. For subscribers whose notification endpoint supports a version lower than the currently recommended version (TLS 1.2), specifying this property by a set timeline allows them to temporarily use their deprecated version of TLS before completing their upgrade to TLS 1.2. For these subscribers, not setting this property per the timeline would result in subscription operations failing. For subscribers whose notification endpoint already supports TLS 1.2, setting this property is optional. In such cases, Microsoft Graph defaults the property to v1_2.
    #[serde(rename = "latestSupportedTlsVersion")]
    pub latest_supported_tls_version: Option<String>,
    ///Required for Teams resources if  the expirationDateTime value is more than 1 hour from now; optional otherwise. The URL of the endpoint that receives lifecycle notifications, including subscriptionRemoved, reauthorizationRequired, and missed notifications. This URL must make use of the HTTPS protocol. For more information, see Reduce missing subscriptions and change notifications.
    #[serde(rename = "lifecycleNotificationUrl")]
    pub lifecycle_notification_url: Option<String>,
    ///Optional. OData query options for specifying value for the targeting resource. Clients receive notifications when resource reaches the state matching the query options provided here. With this new property in the subscription creation payload along with all existing properties, Webhooks deliver notifications whenever a resource reaches the desired state mentioned in the notificationQueryOptions property. For example, when the print job is completed or when a print job resource isFetchable property value becomes true etc.  Supported only for Universal Print Service. For more information, see Subscribe to change notifications from cloud printing APIs using Microsoft Graph.
    #[serde(rename = "notificationQueryOptions")]
    pub notification_query_options: Option<String>,
    ///Required. The URL of the endpoint that receives the change notifications. This URL must make use of the HTTPS protocol. Any query string parameter included in the notificationUrl property is included in the HTTP POST request when Microsoft Graph sends the change notifications.
    #[serde(rename = "notificationUrl")]
    pub notification_url: Option<String>,
    ///Optional. The app ID that the subscription service can use to generate the validation token. The value allows the client to validate the authenticity of the notification received.
    #[serde(rename = "notificationUrlAppId")]
    pub notification_url_app_id: Option<String>,
    ///Required. Specifies the resource that is monitored for changes. Don't include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path values for each supported resource.
    pub resource: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSwapShiftsChangeRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.swapShiftsChangeRequest".to_string())]
    pub odata_type: String,
    ///Indicates who the request is assigned to. Possible values are: sender, recipient, manager, system, unknownFutureValue.
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<MicrosoftGraphScheduleChangeRequestActor>,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when the manager approved or declined the scheduleChangeRequest. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "managerActionDateTime")]
    pub manager_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the manager regarding the scheduleChangeRequest. Optional.
    #[serde(rename = "managerActionMessage")]
    pub manager_action_message: Option<String>,
    ///The user ID of the manager who approved or declined the scheduleChangeRequest.
    #[serde(rename = "managerUserId")]
    pub manager_user_id: Option<String>,
    ///The date and time when the recipient approved or declined the request.
    #[serde(rename = "recipientActionDateTime")]
    pub recipient_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the recipient regarding the request.
    #[serde(rename = "recipientActionMessage")]
    pub recipient_action_message: Option<String>,
    ///The recipient's Shift ID
    #[serde(rename = "recipientShiftId")]
    pub recipient_shift_id: Option<String>,
    ///The recipient's user ID.
    #[serde(rename = "recipientUserId")]
    pub recipient_user_id: Option<String>,
    ///The date and time when the sender sent the scheduleChangeRequest. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "senderDateTime")]
    pub sender_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the sender of the scheduleChangeRequest. Optional.
    #[serde(rename = "senderMessage")]
    pub sender_message: Option<String>,
    ///The sender's shift ID.
    #[serde(rename = "senderShiftId")]
    pub sender_shift_id: Option<String>,
    ///The user ID of the sender of the scheduleChangeRequest.
    #[serde(rename = "senderUserId")]
    pub sender_user_id: Option<String>,
    ///The state of the scheduleChangeRequest. Possible values are: pending, approved, declined, unknownFutureValue.
    pub state: Option<MicrosoftGraphScheduleChangeState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronization {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.synchronization".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Performs synchronization by periodically running in the background, polling for changes in one directory, and pushing them to another directory.
    pub jobs: Option<Vec<MicrosoftGraphSynchronizationJob>>,
    ///Represents a collection of credentials to access provisioned cloud applications.
    pub secrets: Option<Vec<MicrosoftGraphSynchronizationSecretKeyStringValuePair>>,
    ///Preconfigured synchronization settings for a particular application.
    pub templates: Option<Vec<MicrosoftGraphSynchronizationTemplate>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationError {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The error code. For example, AzureDirectoryB2BManagementPolicyCheckFailure.
    pub code: Option<String>,
    ///The error message. For example, Policy permitting auto-redemption of invitations not configured.
    pub message: Option<String>,
    ///The action to take to resolve the error. For example, false.
    #[serde(rename = "tenantActionable")]
    pub tenant_actionable: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationJob {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.synchronizationJob".to_string())]
    pub odata_type: String,
    ///The bulk upload operation for the job.
    #[serde(rename = "bulkUpload")]
    pub bulk_upload: Option<MicrosoftGraphBulkUpload>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Schedule used to run the job. Read-only.
    pub schedule: Option<MicrosoftGraphSynchronizationSchedule>,
    ///The synchronization schema configured for the job.
    pub schema: Option<MicrosoftGraphSynchronizationSchema>,
    ///Status of the job, which includes when the job was last run, current job state, and errors.
    pub status: Option<MicrosoftGraphSynchronizationStatus>,
    ///Settings associated with the job. Some settings are inherited from the template.
    #[serde(rename = "synchronizationJobSettings")]
    pub synchronization_job_settings: Option<Vec<MicrosoftGraphKeyValuePair>>,
    ///Identifier of the synchronization template this job is based on.
    #[serde(rename = "templateId")]
    pub template_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSynchronizationMetadata {
    #[serde(rename = "GalleryApplicationIdentifier")]
    #[default]
    GalleryApplicationIdentifier,
    #[serde(rename = "GalleryApplicationKey")]
    GalleryApplicationKey,
    #[serde(rename = "IsOAuthEnabled")]
    IsOauthEnabled,
    #[serde(rename = "IsSynchronizationAgentAssignmentRequired")]
    IsSynchronizationAgentAssignmentRequired,
    #[serde(rename = "IsSynchronizationAgentRequired")]
    IsSynchronizationAgentRequired,
    #[serde(rename = "IsSynchronizationInPreview")]
    IsSynchronizationInPreview,
    #[serde(rename = "OAuthSettings")]
    OauthSettings,
    #[serde(rename = "SynchronizationLearnMoreIbizaFwLink")]
    SynchronizationLearnMoreIbizaFwLink,
    #[serde(rename = "ConfigurationFields")]
    ConfigurationFields,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationMetadataEntry {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Possible values are: GalleryApplicationIdentifier, GalleryApplicationKey, IsOAuthEnabled, IsSynchronizationAgentAssignmentRequired, IsSynchronizationAgentRequired, IsSynchronizationInPreview, OAuthSettings, SynchronizationLearnMoreIbizaFwLink, ConfigurationFields.
    pub key: Option<MicrosoftGraphSynchronizationMetadata>,
    ///Value of the metadata property.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationProgress {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The numerator of a progress ratio; the number of units of changes already processed.
    #[serde(rename = "completedUnits")]
    pub completed_units: Option<f64>,
    ///The time of a progress observation as an offset in minutes from UTC.
    #[serde(rename = "progressObservationDateTime")]
    pub progress_observation_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The denominator of a progress ratio; a number of units of changes to be processed to accomplish synchronization.
    #[serde(rename = "totalUnits")]
    pub total_units: Option<f64>,
    ///An optional description of the units.
    pub units: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationQuarantine {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Date and time when the quarantine was last evaluated and imposed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "currentBegan")]
    pub current_began: Option<chrono::DateTime<chrono::Utc>>,
    ///Describes the error(s) that occurred when putting the synchronization job into quarantine.
    pub error: Option<MicrosoftGraphSynchronizationError>,
    ///Date and time when the next attempt to re-evaluate the quarantine will be made. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "nextAttempt")]
    pub next_attempt: Option<chrono::DateTime<chrono::Utc>>,
    pub reason: Option<MicrosoftGraphQuarantineReason>,
    ///Date and time when the quarantine was first imposed in this series (a series starts when a quarantine is first imposed, and is reset as soon as the quarantine is lifted). The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "seriesBegan")]
    pub series_began: Option<chrono::DateTime<chrono::Utc>>,
    ///Number of times in this series the quarantine was re-evaluated and left in effect (a series starts when quarantine is first imposed, and is reset as soon as quarantine is lifted).
    #[serde(rename = "seriesCount")]
    pub series_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationRule {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "containerFilter")]
    pub container_filter: Option<MicrosoftGraphContainerFilter>,
    ///true if the synchronization rule can be customized; false if this rule is read-only and shouldn't be changed.
    pub editable: Option<bool>,
    #[serde(rename = "groupFilter")]
    pub group_filter: Option<MicrosoftGraphGroupFilter>,
    ///Synchronization rule identifier. Must be one of the identifiers recognized by the synchronization engine. Supported rule identifiers can be found in the synchronization template returned by the API.
    pub id: Option<String>,
    ///Additional extension properties. Unless instructed explicitly by the support team, metadata values shouldn't be changed.
    pub metadata: Option<Vec<MicrosoftGraphStringKeyStringValuePair>>,
    ///Human-readable name of the synchronization rule. Not nullable.
    pub name: Option<String>,
    ///Collection of object mappings supported by the rule. Tells the synchronization engine which objects should be synchronized.
    #[serde(rename = "objectMappings")]
    pub object_mappings: Option<Vec<MicrosoftGraphObjectMapping>>,
    ///Priority relative to other rules in the synchronizationSchema. Rules with the lowest priority number will be processed first.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub priority: Option<f64>,
    ///Name of the source directory. Must match one of the directory definitions in synchronizationSchema.
    #[serde(rename = "sourceDirectoryName")]
    pub source_directory_name: Option<String>,
    ///Name of the target directory. Must match one of the directory definitions in synchronizationSchema.
    #[serde(rename = "targetDirectoryName")]
    pub target_directory_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationSchedule {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Date and time when this job expires. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    pub expiration: Option<chrono::DateTime<chrono::Utc>>,
    ///The interval between synchronization iterations. The value is represented in ISO 8601  format for durations. For example, P1M represents a period of one month and PT1M represents a period of one minute.
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub interval: Option<String>,
    pub state: Option<MicrosoftGraphSynchronizationScheduleState>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSynchronizationScheduleState {
    #[serde(rename = "Active")]
    #[default]
    Active,
    #[serde(rename = "Disabled")]
    Disabled,
    #[serde(rename = "Paused")]
    Paused,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationSchema {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.synchronizationSchema".to_string())]
    pub odata_type: String,
    ///Contains the collection of directories and all of their objects.
    pub directories: Option<Vec<MicrosoftGraphDirectoryDefinition>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of synchronization rules configured for the synchronizationJob or synchronizationTemplate.
    #[serde(rename = "synchronizationRules")]
    pub synchronization_rules: Option<Vec<MicrosoftGraphSynchronizationRule>>,
    ///The version of the schema, updated automatically with every schema change.
    pub version: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSynchronizationSecret {
    #[serde(rename = "None")]
    #[default]
    None,
    #[serde(rename = "UserName")]
    UserName,
    #[serde(rename = "Password")]
    Password,
    #[serde(rename = "SecretToken")]
    SecretToken,
    #[serde(rename = "AppKey")]
    AppKey,
    #[serde(rename = "BaseAddress")]
    BaseAddress,
    #[serde(rename = "ClientIdentifier")]
    ClientIdentifier,
    #[serde(rename = "ClientSecret")]
    ClientSecret,
    #[serde(rename = "SingleSignOnType")]
    SingleSignOnType,
    #[serde(rename = "Sandbox")]
    Sandbox,
    #[serde(rename = "Url")]
    Url,
    #[serde(rename = "Domain")]
    Domain,
    #[serde(rename = "ConsumerKey")]
    ConsumerKey,
    #[serde(rename = "ConsumerSecret")]
    ConsumerSecret,
    #[serde(rename = "TokenKey")]
    TokenKey,
    #[serde(rename = "TokenExpiration")]
    TokenExpiration,
    #[serde(rename = "Oauth2AccessToken")]
    Oauth2AccessToken,
    #[serde(rename = "Oauth2AccessTokenCreationTime")]
    Oauth2AccessTokenCreationTime,
    #[serde(rename = "Oauth2RefreshToken")]
    Oauth2RefreshToken,
    #[serde(rename = "SyncAll")]
    SyncAll,
    #[serde(rename = "InstanceName")]
    InstanceName,
    #[serde(rename = "Oauth2ClientId")]
    Oauth2ClientId,
    #[serde(rename = "Oauth2ClientSecret")]
    Oauth2ClientSecret,
    #[serde(rename = "CompanyId")]
    CompanyId,
    #[serde(rename = "UpdateKeyOnSoftDelete")]
    UpdateKeyOnSoftDelete,
    #[serde(rename = "SynchronizationSchedule")]
    SynchronizationSchedule,
    #[serde(rename = "SystemOfRecord")]
    SystemOfRecord,
    #[serde(rename = "SandboxName")]
    SandboxName,
    #[serde(rename = "EnforceDomain")]
    EnforceDomain,
    #[serde(rename = "SyncNotificationSettings")]
    SyncNotificationSettings,
    #[serde(rename = "SkipOutOfScopeDeletions")]
    SkipOutOfScopeDeletions,
    #[serde(rename = "Oauth2AuthorizationCode")]
    Oauth2AuthorizationCode,
    #[serde(rename = "Oauth2RedirectUri")]
    Oauth2RedirectUri,
    #[serde(rename = "ApplicationTemplateIdentifier")]
    ApplicationTemplateIdentifier,
    #[serde(rename = "Oauth2TokenExchangeUri")]
    Oauth2TokenExchangeUri,
    #[serde(rename = "Oauth2AuthorizationUri")]
    Oauth2AuthorizationUri,
    #[serde(rename = "AuthenticationType")]
    AuthenticationType,
    #[serde(rename = "Server")]
    Server,
    #[serde(rename = "PerformInboundEntitlementGrants")]
    PerformInboundEntitlementGrants,
    #[serde(rename = "HardDeletesEnabled")]
    HardDeletesEnabled,
    #[serde(rename = "SyncAgentCompatibilityKey")]
    SyncAgentCompatibilityKey,
    #[serde(rename = "SyncAgentADContainer")]
    SyncAgentAdcontainer,
    #[serde(rename = "ValidateDomain")]
    ValidateDomain,
    #[serde(rename = "TestReferences")]
    TestReferences,
    #[serde(rename = "ConnectionString")]
    ConnectionString,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationSecretKeyStringValuePair {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub key: Option<MicrosoftGraphSynchronizationSecret>,
    ///The value of the secret.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationStatus {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub code: Option<MicrosoftGraphSynchronizationStatusCode>,
    ///Number of consecutive times this job failed.
    #[serde(rename = "countSuccessiveCompleteFailures")]
    pub count_successive_complete_failures: Option<f64>,
    ///true if the job's escrows (object-level errors) were pruned during initial synchronization. Escrows can be pruned if during the initial synchronization, you reach the threshold of errors that would normally put the job in quarantine. Instead of going into quarantine, the synchronization process clears the job's errors and continues until the initial synchronization is completed. When the initial synchronization is completed, the job will pause and wait for the customer to clean up the errors.
    #[serde(rename = "escrowsPruned")]
    pub escrows_pruned: Option<bool>,
    ///Details of the last execution of the job.
    #[serde(rename = "lastExecution")]
    pub last_execution: Option<MicrosoftGraphSynchronizationTaskExecution>,
    ///Details of the last execution of this job, which didn't have any errors.
    #[serde(rename = "lastSuccessfulExecution")]
    pub last_successful_execution: Option<MicrosoftGraphSynchronizationTaskExecution>,
    ///Details of the last execution of the job, which exported objects into the target directory.
    #[serde(rename = "lastSuccessfulExecutionWithExports")]
    pub last_successful_execution_with_exports: Option<
        MicrosoftGraphSynchronizationTaskExecution,
    >,
    ///Details of the progress of a job toward completion.
    pub progress: Option<Vec<MicrosoftGraphSynchronizationProgress>>,
    ///If job is in quarantine, quarantine details.
    pub quarantine: Option<MicrosoftGraphSynchronizationQuarantine>,
    ///The time when steady state (no more changes to the process) was first achieved. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "steadyStateFirstAchievedTime")]
    pub steady_state_first_achieved_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The time when steady state (no more changes to the process) was last achieved. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "steadyStateLastAchievedTime")]
    pub steady_state_last_achieved_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Count of synchronized objects, listed by object type.
    #[serde(rename = "synchronizedEntryCountByType")]
    pub synchronized_entry_count_by_type: Option<
        Vec<MicrosoftGraphStringKeyLongValuePair>,
    >,
    ///In the event of an error, the URL with the troubleshooting steps for the issue.
    #[serde(rename = "troubleshootingUrl")]
    pub troubleshooting_url: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSynchronizationStatusCode {
    #[serde(rename = "NotConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "NotRun")]
    NotRun,
    #[serde(rename = "Active")]
    Active,
    #[serde(rename = "Paused")]
    Paused,
    #[serde(rename = "Quarantine")]
    Quarantine,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationTaskExecution {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Identifier of the job run.
    #[serde(rename = "activityIdentifier")]
    pub activity_identifier: Option<String>,
    ///Count of processed entries that were assigned for this application.
    #[serde(rename = "countEntitled")]
    pub count_entitled: Option<f64>,
    ///Count of processed entries that were assigned for provisioning.
    #[serde(rename = "countEntitledForProvisioning")]
    pub count_entitled_for_provisioning: Option<f64>,
    ///Count of entries that were escrowed (errors).
    #[serde(rename = "countEscrowed")]
    pub count_escrowed: Option<f64>,
    ///Count of entries that were escrowed, including system-generated escrows.
    #[serde(rename = "countEscrowedRaw")]
    pub count_escrowed_raw: Option<f64>,
    ///Count of exported entries.
    #[serde(rename = "countExported")]
    pub count_exported: Option<f64>,
    ///Count of entries that were expected to be exported.
    #[serde(rename = "countExports")]
    pub count_exports: Option<f64>,
    ///Count of imported entries.
    #[serde(rename = "countImported")]
    pub count_imported: Option<f64>,
    ///Count of imported delta-changes.
    #[serde(rename = "countImportedDeltas")]
    pub count_imported_deltas: Option<f64>,
    ///Count of imported delta-changes pertaining to reference changes.
    #[serde(rename = "countImportedReferenceDeltas")]
    pub count_imported_reference_deltas: Option<f64>,
    ///If an error was encountered, contains a synchronizationError object with details.
    pub error: Option<MicrosoftGraphSynchronizationError>,
    pub state: Option<MicrosoftGraphSynchronizationTaskExecutionResult>,
    ///Time when this job run began. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "timeBegan")]
    pub time_began: Option<chrono::DateTime<chrono::Utc>>,
    ///Time when this job run ended. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "timeEnded")]
    pub time_ended: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphSynchronizationTaskExecutionResult {
    #[serde(rename = "Succeeded")]
    #[default]
    Succeeded,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "EntryLevelErrors")]
    EntryLevelErrors,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSynchronizationTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.synchronizationTemplate".to_string())]
    pub odata_type: String,
    ///Identifier of the application this template belongs to.
    #[serde(rename = "applicationId")]
    pub application_id: Option<uuid::Uuid>,
    ///true if this template is recommended to be the default for the application.
    pub default: Option<bool>,
    ///Description of the template.
    pub description: Option<String>,
    ///true if this template should appear in the collection of templates available for the application instance (service principal).
    pub discoverable: Option<bool>,
    ///One of the well-known factory tags supported by the synchronization engine. The factoryTag tells the synchronization engine which implementation to use when processing jobs based on this template.
    #[serde(rename = "factoryTag")]
    pub factory_tag: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Additional extension properties. Unless mentioned explicitly, metadata values should not be changed.
    pub metadata: Option<Vec<MicrosoftGraphSynchronizationMetadataEntry>>,
    ///Default synchronization schema for the jobs based on this template.
    pub schema: Option<MicrosoftGraphSynchronizationSchema>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphSystemFacet {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTabUpdatedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.tabUpdatedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///Unique identifier of the tab.
    #[serde(rename = "tabId")]
    pub tab_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTargetApplicationOwners {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.targetApplicationOwners".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTargetDeviceGroup {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.targetDeviceGroup".to_string())]
    pub odata_type: String,
    ///Display name for the target device group.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTargetManager {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.targetManager".to_string())]
    pub odata_type: String,
    ///Manager level, between 1 and 4. The direct manager is 1.
    #[serde(rename = "managerLevel")]
    pub manager_level: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTargetResource {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates the visible name defined for the resource. Typically specified when the resource is created.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///When type is set to Group, this indicates the group type. Possible values are: unifiedGroups, azureAD, and unknownFutureValue
    #[serde(rename = "groupType")]
    pub group_type: Option<MicrosoftGraphGroupType>,
    ///Indicates the unique ID of the resource.
    pub id: Option<String>,
    ///Indicates name, old value and new value of each attribute that changed. Property values depend on the operation type.
    #[serde(rename = "modifiedProperties")]
    pub modified_properties: Option<Vec<MicrosoftGraphModifiedProperty>>,
    ///Describes the resource type.  Example values include Application, Group, ServicePrincipal, and User.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
    ///When type is set to User, this includes the user name that initiated the action; null for other types.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTargetUserSponsors {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.targetUserSponsors".to_string())]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTargetedManagedAppConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.targetedManagedAppConfiguration".to_string())]
    pub odata_type: String,
    ///List of apps to which the policy is deployed.
    pub apps: Option<Vec<MicrosoftGraphManagedMobileApp>>,
    ///Navigation property to list of inclusion and exclusion groups to which the policy is deployed.
    pub assignments: Option<Vec<MicrosoftGraphTargetedManagedAppPolicyAssignment>>,
    ///The date and time the policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A set of string key and string value pairs to be sent to apps for users to whom the configuration is scoped, unalterned by this service
    #[serde(rename = "customSettings")]
    pub custom_settings: Option<Vec<MicrosoftGraphKeyValuePair>>,
    ///Count of apps to which the current policy is deployed.
    #[serde(rename = "deployedAppCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub deployed_app_count: Option<f64>,
    ///Navigation property to deployment summary of the configuration.
    #[serde(rename = "deploymentSummary")]
    pub deployment_summary: Option<MicrosoftGraphManagedAppPolicyDeploymentSummary>,
    ///The policy's description.
    pub description: Option<String>,
    ///Policy display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates if the policy is deployed to any inclusion groups or not.
    #[serde(rename = "isAssigned")]
    pub is_assigned: Option<bool>,
    ///Last time the policy was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Version of the entity.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTargetedManagedAppPolicyAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.targetedManagedAppPolicyAssignment".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identifier for deployment to a group or app
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTargetedManagedAppProtection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.targetedManagedAppProtection".to_string())]
    pub odata_type: String,
    ///Data storage locations where a user may store managed data.
    #[serde(rename = "allowedDataStorageLocations")]
    pub allowed_data_storage_locations: Option<
        Vec<MicrosoftGraphManagedAppDataStorageLocation>,
    >,
    ///Data can be transferred from/to these classes of apps
    #[serde(rename = "allowedInboundDataTransferSources")]
    pub allowed_inbound_data_transfer_sources: Option<
        MicrosoftGraphManagedAppDataTransferLevel,
    >,
    ///Represents the level to which the device's clipboard may be shared between apps
    #[serde(rename = "allowedOutboundClipboardSharingLevel")]
    pub allowed_outbound_clipboard_sharing_level: Option<
        MicrosoftGraphManagedAppClipboardSharingLevel,
    >,
    ///Data can be transferred from/to these classes of apps
    #[serde(rename = "allowedOutboundDataTransferDestinations")]
    pub allowed_outbound_data_transfer_destinations: Option<
        MicrosoftGraphManagedAppDataTransferLevel,
    >,
    ///Navigation property to list of inclusion and exclusion groups to which the policy is deployed.
    pub assignments: Option<Vec<MicrosoftGraphTargetedManagedAppPolicyAssignment>>,
    ///Indicates whether contacts can be synced to the user's device.
    #[serde(rename = "contactSyncBlocked")]
    pub contact_sync_blocked: Option<bool>,
    ///The date and time the policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether the backup of a managed app's data is blocked.
    #[serde(rename = "dataBackupBlocked")]
    pub data_backup_blocked: Option<bool>,
    ///The policy's description.
    pub description: Option<String>,
    ///Indicates whether device compliance is required.
    #[serde(rename = "deviceComplianceRequired")]
    pub device_compliance_required: Option<bool>,
    ///Indicates whether use of the app pin is required if the device pin is set.
    #[serde(rename = "disableAppPinIfDevicePinIsSet")]
    pub disable_app_pin_if_device_pin_is_set: Option<bool>,
    ///Policy display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Indicates whether use of the fingerprint reader is allowed in place of a pin if PinRequired is set to True.
    #[serde(rename = "fingerprintBlocked")]
    pub fingerprint_blocked: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates if the policy is deployed to any inclusion groups or not.
    #[serde(rename = "isAssigned")]
    pub is_assigned: Option<bool>,
    ///Last time the policy was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Type of managed browser
    #[serde(rename = "managedBrowser")]
    pub managed_browser: Option<MicrosoftGraphManagedBrowserType>,
    ///Indicates whether internet links should be opened in the managed browser app, or any custom browser specified by CustomBrowserProtocol (for iOS) or CustomBrowserPackageId/CustomBrowserDisplayName (for Android)
    #[serde(rename = "managedBrowserToOpenLinksRequired")]
    pub managed_browser_to_open_links_required: Option<bool>,
    ///Maximum number of incorrect pin retry attempts before the managed app is either blocked or wiped.
    #[serde(rename = "maximumPinRetries")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub maximum_pin_retries: Option<f64>,
    ///Minimum pin length required for an app-level pin if PinRequired is set to True
    #[serde(rename = "minimumPinLength")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub minimum_pin_length: Option<f64>,
    ///Versions less than the specified version will block the managed app from accessing company data.
    #[serde(rename = "minimumRequiredAppVersion")]
    pub minimum_required_app_version: Option<String>,
    ///Versions less than the specified version will block the managed app from accessing company data.
    #[serde(rename = "minimumRequiredOsVersion")]
    pub minimum_required_os_version: Option<String>,
    ///Versions less than the specified version will result in warning message on the managed app.
    #[serde(rename = "minimumWarningAppVersion")]
    pub minimum_warning_app_version: Option<String>,
    ///Versions less than the specified version will result in warning message on the managed app from accessing company data.
    #[serde(rename = "minimumWarningOsVersion")]
    pub minimum_warning_os_version: Option<String>,
    ///Indicates whether organizational credentials are required for app use.
    #[serde(rename = "organizationalCredentialsRequired")]
    pub organizational_credentials_required: Option<bool>,
    ///TimePeriod before the all-level pin must be reset if PinRequired is set to True.
    #[serde(rename = "periodBeforePinReset")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_before_pin_reset: Option<String>,
    ///The period after which access is checked when the device is not connected to the internet.
    #[serde(rename = "periodOfflineBeforeAccessCheck")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_offline_before_access_check: Option<String>,
    ///The amount of time an app is allowed to remain disconnected from the internet before all managed data it is wiped.
    #[serde(rename = "periodOfflineBeforeWipeIsEnforced")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_offline_before_wipe_is_enforced: Option<String>,
    ///The period after which access is checked when the device is connected to the internet.
    #[serde(rename = "periodOnlineBeforeAccessCheck")]
    #[validate(
        regex(
            path = "REGEX_MICROSOFT_GRAPH_ANDROID_MANAGED_APP_PROTECTION_PERIOD_BEFORE_PIN_RESET"
        )
    )]
    pub period_online_before_access_check: Option<String>,
    ///Character set which is to be used for a user's app PIN
    #[serde(rename = "pinCharacterSet")]
    pub pin_character_set: Option<MicrosoftGraphManagedAppPinCharacterSet>,
    ///Indicates whether an app-level pin is required.
    #[serde(rename = "pinRequired")]
    pub pin_required: Option<bool>,
    ///Indicates whether printing is allowed from managed apps.
    #[serde(rename = "printBlocked")]
    pub print_blocked: Option<bool>,
    ///Indicates whether users may use the 'Save As' menu item to save a copy of protected files.
    #[serde(rename = "saveAsBlocked")]
    pub save_as_blocked: Option<bool>,
    ///Indicates whether simplePin is blocked.
    #[serde(rename = "simplePinBlocked")]
    pub simple_pin_blocked: Option<bool>,
    ///Version of the entity.
    pub version: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTargettedUserType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "clicked")]
    Clicked,
    #[serde(rename = "compromised")]
    Compromised,
    #[serde(rename = "allUsers")]
    AllUsers,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTaskFileAttachment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.taskFileAttachment".to_string())]
    pub odata_type: String,
    ///The base64-encoded contents of the file.
    #[serde(rename = "contentBytes")]
    pub content_bytes: Option<String>,
    ///The MIME type.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The display name of the attachment. This doesn't need to be the actual file name.
    pub name: Option<String>,
    ///The length of the attachment in bytes.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub size: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTaskStatus {
    #[serde(rename = "notStarted")]
    #[default]
    NotStarted,
    #[serde(rename = "inProgress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "waitingOnOthers")]
    WaitingOnOthers,
    #[serde(rename = "deferred")]
    Deferred,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeam {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.team".to_string())]
    pub odata_type: String,
    ///List of channels either hosted in or shared with the team (incoming channels).
    #[serde(rename = "allChannels")]
    pub all_channels: Option<Vec<MicrosoftGraphChannel>>,
    ///The collection of channels and messages associated with the team.
    pub channels: Option<Vec<MicrosoftGraphChannel>>,
    ///An optional label. Typically describes the data or business sensitivity of the team. Must match one of a preconfigured set in the tenant's directory.
    pub classification: Option<String>,
    ///Timestamp at which the team was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///An optional description for the team. Maximum length: 1,024 characters.
    pub description: Option<String>,
    ///The name of the team.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the first channel in the team. This is an optional property, only used during team creation and isn't returned in methods to get and list teams.
    #[serde(rename = "firstChannelName")]
    pub first_channel_name: Option<String>,
    ///Settings to configure use of Giphy, memes, and stickers in the team.
    #[serde(rename = "funSettings")]
    pub fun_settings: Option<MicrosoftGraphTeamFunSettings>,
    pub group: Option<Box<MicrosoftGraphGroup>>,
    ///Settings to configure whether guests can create, update, or delete channels in the team.
    #[serde(rename = "guestSettings")]
    pub guest_settings: Option<MicrosoftGraphTeamGuestSettings>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///List of channels shared with the team.
    #[serde(rename = "incomingChannels")]
    pub incoming_channels: Option<Vec<MicrosoftGraphChannel>>,
    ///The apps installed in this team.
    #[serde(rename = "installedApps")]
    pub installed_apps: Option<Vec<MicrosoftGraphTeamsAppInstallation>>,
    ///A unique ID for the team that was used in a few places such as the audit log/Office 365 Management Activity API.
    #[serde(rename = "internalId")]
    pub internal_id: Option<String>,
    ///Whether this team is in read-only mode.
    #[serde(rename = "isArchived")]
    pub is_archived: Option<bool>,
    ///Settings to configure whether members can perform certain actions, for example, create channels and add bots, in the team.
    #[serde(rename = "memberSettings")]
    pub member_settings: Option<MicrosoftGraphTeamMemberSettings>,
    ///Members and owners of the team.
    pub members: Option<Vec<MicrosoftGraphConversationMember>>,
    ///Settings to configure messaging and mentions in the team.
    #[serde(rename = "messagingSettings")]
    pub messaging_settings: Option<MicrosoftGraphTeamMessagingSettings>,
    ///The async operations that ran or are running on this team.
    pub operations: Option<Vec<MicrosoftGraphTeamsAsyncOperation>>,
    ///A collection of permissions granted to apps to access the team.
    #[serde(rename = "permissionGrants")]
    pub permission_grants: Option<Vec<MicrosoftGraphResourceSpecificPermissionGrant>>,
    ///The profile photo for the team.
    pub photo: Option<MicrosoftGraphProfilePhoto>,
    ///The general channel for the team.
    #[serde(rename = "primaryChannel")]
    pub primary_channel: Option<Box<MicrosoftGraphChannel>>,
    ///The schedule of shifts for this team.
    pub schedule: Option<MicrosoftGraphSchedule>,
    ///Optional. Indicates whether the team is intended for a particular use case. Each team specialization has access to unique behaviors and experiences targeted to its use case.
    pub specialization: Option<MicrosoftGraphTeamSpecialization>,
    ///Contains summary information about the team, including number of owners, members, and guests.
    pub summary: Option<MicrosoftGraphTeamSummary>,
    ///The tags associated with the team.
    pub tags: Option<Vec<MicrosoftGraphTeamworkTag>>,
    ///The template this team was created from. See available templates.
    pub template: Option<MicrosoftGraphTeamsTemplate>,
    ///The ID of the Microsoft Entra tenant.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    ///The visibility of the group and team. Defaults to Public.
    pub visibility: Option<MicrosoftGraphTeamVisibilityType>,
    ///A hyperlink that goes to the team in the Microsoft Teams client. You get this URL when you right-click a team in the Microsoft Teams client and select Get link to team. This URL should be treated as an opaque blob, and not parsed.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamArchivedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamArchivedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///Unique identifier of the team.
    #[serde(rename = "teamId")]
    pub team_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamCreatedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamCreatedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///Description for the team.
    #[serde(rename = "teamDescription")]
    pub team_description: Option<String>,
    ///Display name of the team.
    #[serde(rename = "teamDisplayName")]
    pub team_display_name: Option<String>,
    ///Unique identifier of the team.
    #[serde(rename = "teamId")]
    pub team_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamDescriptionUpdatedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamDescriptionUpdatedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///The updated description for the team.
    #[serde(rename = "teamDescription")]
    pub team_description: Option<String>,
    ///Unique identifier of the team.
    #[serde(rename = "teamId")]
    pub team_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamFunSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If set to true, enables users to include custom memes.
    #[serde(rename = "allowCustomMemes")]
    pub allow_custom_memes: Option<bool>,
    ///If set to true, enables Giphy use.
    #[serde(rename = "allowGiphy")]
    pub allow_giphy: Option<bool>,
    ///If set to true, enables users to include stickers and memes.
    #[serde(rename = "allowStickersAndMemes")]
    pub allow_stickers_and_memes: Option<bool>,
    ///Giphy content rating. Possible values are: moderate, strict.
    #[serde(rename = "giphyContentRating")]
    pub giphy_content_rating: Option<MicrosoftGraphGiphyRatingType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamGuestSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If set to true, guests can add and update channels.
    #[serde(rename = "allowCreateUpdateChannels")]
    pub allow_create_update_channels: Option<bool>,
    ///If set to true, guests can delete channels.
    #[serde(rename = "allowDeleteChannels")]
    pub allow_delete_channels: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamInfo {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamInfo".to_string())]
    pub odata_type: String,
    ///The name of the team.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub team: Option<Box<MicrosoftGraphTeam>>,
    ///The ID of the Microsoft Entra tenant.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamJoiningDisabledEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamJoiningDisabledEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///Unique identifier of the team.
    #[serde(rename = "teamId")]
    pub team_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamJoiningEnabledEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamJoiningEnabledEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///Unique identifier of the team.
    #[serde(rename = "teamId")]
    pub team_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamMemberSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If set to true, members can add and remove apps.
    #[serde(rename = "allowAddRemoveApps")]
    pub allow_add_remove_apps: Option<bool>,
    ///If set to true, members can add and update private channels.
    #[serde(rename = "allowCreatePrivateChannels")]
    pub allow_create_private_channels: Option<bool>,
    ///If set to true, members can add and update channels.
    #[serde(rename = "allowCreateUpdateChannels")]
    pub allow_create_update_channels: Option<bool>,
    ///If set to true, members can add, update, and remove connectors.
    #[serde(rename = "allowCreateUpdateRemoveConnectors")]
    pub allow_create_update_remove_connectors: Option<bool>,
    ///If set to true, members can add, update, and remove tabs.
    #[serde(rename = "allowCreateUpdateRemoveTabs")]
    pub allow_create_update_remove_tabs: Option<bool>,
    ///If set to true, members can delete channels.
    #[serde(rename = "allowDeleteChannels")]
    pub allow_delete_channels: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamMessagingSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///If set to true, @channel mentions are allowed.
    #[serde(rename = "allowChannelMentions")]
    pub allow_channel_mentions: Option<bool>,
    ///If set to true, owners can delete any message.
    #[serde(rename = "allowOwnerDeleteMessages")]
    pub allow_owner_delete_messages: Option<bool>,
    ///If set to true, @team mentions are allowed.
    #[serde(rename = "allowTeamMentions")]
    pub allow_team_mentions: Option<bool>,
    ///If set to true, users can delete their messages.
    #[serde(rename = "allowUserDeleteMessages")]
    pub allow_user_delete_messages: Option<bool>,
    ///If set to true, users can edit their messages.
    #[serde(rename = "allowUserEditMessages")]
    pub allow_user_edit_messages: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamRenamedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamRenamedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///The updated name of the team.
    #[serde(rename = "teamDisplayName")]
    pub team_display_name: Option<String>,
    ///Unique identifier of the team.
    #[serde(rename = "teamId")]
    pub team_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamSpecialization {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "educationStandard")]
    EducationStandard,
    #[serde(rename = "educationClass")]
    EducationClass,
    #[serde(rename = "educationProfessionalLearningCommunity")]
    EducationProfessionalLearningCommunity,
    #[serde(rename = "educationStaff")]
    EducationStaff,
    #[serde(rename = "healthcareStandard")]
    HealthcareStandard,
    #[serde(rename = "healthcareCareCoordination")]
    HealthcareCareCoordination,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamSummary {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Count of guests in a team.
    #[serde(rename = "guestsCount")]
    pub guests_count: Option<f64>,
    ///Count of members in a team.
    #[serde(rename = "membersCount")]
    pub members_count: Option<f64>,
    ///Count of owners in a team.
    #[serde(rename = "ownersCount")]
    pub owners_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamUnarchivedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamUnarchivedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///Unique identifier of the team.
    #[serde(rename = "teamId")]
    pub team_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamVisibilityType {
    #[serde(rename = "private")]
    #[default]
    Private,
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "hiddenMembership")]
    HiddenMembership,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamsApp".to_string())]
    pub odata_type: String,
    ///The details for each version of the app.
    #[serde(rename = "appDefinitions")]
    pub app_definitions: Option<Vec<MicrosoftGraphTeamsAppDefinition>>,
    ///The name of the catalog app provided by the app developer in the Microsoft Teams zip app package.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The method of distribution for the app. Read-only.
    #[serde(rename = "distributionMethod")]
    pub distribution_method: Option<MicrosoftGraphTeamsAppDistributionMethod>,
    ///The ID of the catalog provided by the app developer in the Microsoft Teams zip app package.
    #[serde(rename = "externalId")]
    pub external_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsAppAuthorization {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The registration ID of the Microsoft Entra app ID associated with the teamsApp.
    #[serde(rename = "clientAppId")]
    pub client_app_id: Option<String>,
    ///Set of permissions required by the teamsApp.
    #[serde(rename = "requiredPermissionSet")]
    pub required_permission_set: Option<MicrosoftGraphTeamsAppPermissionSet>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsAppDefinition {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamsAppDefinition".to_string())]
    pub odata_type: String,
    ///Authorization requirements specified in the Teams app manifest.
    pub authorization: Option<MicrosoftGraphTeamsAppAuthorization>,
    ///The details of the bot specified in the Teams app manifest.
    pub bot: Option<MicrosoftGraphTeamworkBot>,
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///Verbose description of the application.
    pub description: Option<String>,
    ///The name of the app provided by the app developer.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The published status of a specific version of a Teams app. Possible values are:submitted—The specific version of the Teams app was submitted and is under review.published—The request to publish the specific version of the Teams app was approved by the admin and the app is published.rejected—The admin rejected the request to publish the specific version of the Teams app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphTeamsAppPublishingState>,
    ///Short description of the application.
    #[serde(rename = "shortDescription")]
    pub short_description: Option<String>,
    ///The ID from the Teams app manifest.
    #[serde(rename = "teamsAppId")]
    pub teams_app_id: Option<String>,
    ///The version number of the application.
    pub version: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamsAppDistributionMethod {
    #[serde(rename = "store")]
    #[default]
    Store,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "sideloaded")]
    Sideloaded,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsAppInstallation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamsAppInstallation".to_string())]
    pub odata_type: String,
    ///The set of resource-specific permissions consented to while installing or upgrading the teamsApp.
    #[serde(rename = "consentedPermissionSet")]
    pub consented_permission_set: Option<MicrosoftGraphTeamsAppPermissionSet>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The app that is installed.
    #[serde(rename = "teamsApp")]
    pub teams_app: Option<MicrosoftGraphTeamsApp>,
    ///The details of this version of the app.
    #[serde(rename = "teamsAppDefinition")]
    pub teams_app_definition: Option<MicrosoftGraphTeamsAppDefinition>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsAppInstalledEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamsAppInstalledEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///Display name of the teamsApp.
    #[serde(rename = "teamsAppDisplayName")]
    pub teams_app_display_name: Option<String>,
    ///Unique identifier of the teamsApp.
    #[serde(rename = "teamsAppId")]
    pub teams_app_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsAppPermissionSet {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A collection of resource-specific permissions.
    #[serde(rename = "resourceSpecificPermissions")]
    pub resource_specific_permissions: Option<
        Vec<MicrosoftGraphTeamsAppResourceSpecificPermission>,
    >,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamsAppPublishingState {
    #[serde(rename = "submitted")]
    #[default]
    Submitted,
    #[serde(rename = "rejected")]
    Rejected,
    #[serde(rename = "published")]
    Published,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsAppRemovedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamsAppRemovedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///Display name of the teamsApp.
    #[serde(rename = "teamsAppDisplayName")]
    pub teams_app_display_name: Option<String>,
    ///Unique identifier of the teamsApp.
    #[serde(rename = "teamsAppId")]
    pub teams_app_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsAppResourceSpecificPermission {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The type of resource-specific permission.
    #[serde(rename = "permissionType")]
    pub permission_type: Option<MicrosoftGraphTeamsAppResourceSpecificPermissionType>,
    ///The name of the resource-specific permission.
    #[serde(rename = "permissionValue")]
    pub permission_value: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamsAppResourceSpecificPermissionType {
    #[serde(rename = "delegated")]
    #[default]
    Delegated,
    #[serde(rename = "application")]
    Application,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsAppSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamsAppSettings".to_string())]
    pub odata_type: String,
    ///Indicates whether users are allowed to request access to the unavailable Teams apps.
    #[serde(rename = "allowUserRequestsForAppAccess")]
    pub allow_user_requests_for_app_access: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether resource-specific consent for personal scope in Teams apps is enabled for the tenant. True indicates that Teams apps that are allowed in the tenant and require resource-specific permissions can be installed in the personal scope. False blocks the installation of any Teams app that requires resource-specific permissions in the personal scope.
    #[serde(rename = "isUserPersonalScopeResourceSpecificConsentEnabled")]
    pub is_user_personal_scope_resource_specific_consent_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsAppUpgradedEventMessageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamsAppUpgradedEventMessageDetail".to_string())]
    pub odata_type: String,
    ///Initiator of the event.
    pub initiator: Option<MicrosoftGraphIdentitySet>,
    ///Display name of the teamsApp.
    #[serde(rename = "teamsAppDisplayName")]
    pub teams_app_display_name: Option<String>,
    ///Unique identifier of the teamsApp.
    #[serde(rename = "teamsAppId")]
    pub teams_app_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsAsyncOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamsAsyncOperation".to_string())]
    pub odata_type: String,
    ///Number of times the operation was attempted before being marked successful or failed.
    #[serde(rename = "attemptsCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub attempts_count: Option<f64>,
    ///Time when the operation was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Any error that causes the async operation to fail.
    pub error: Option<MicrosoftGraphOperationError>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Time when the async operation was last updated.
    #[serde(rename = "lastActionDateTime")]
    pub last_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "operationType")]
    pub operation_type: Option<MicrosoftGraphTeamsAsyncOperationType>,
    pub status: Option<MicrosoftGraphTeamsAsyncOperationStatus>,
    ///The ID of the object that's created or modified as result of this async operation, typically a team.
    #[serde(rename = "targetResourceId")]
    pub target_resource_id: Option<String>,
    ///The location of the object that's created or modified as result of this async operation. This URL should be treated as an opaque value and not parsed into its component paths.
    #[serde(rename = "targetResourceLocation")]
    pub target_resource_location: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamsAsyncOperationStatus {
    #[serde(rename = "invalid")]
    #[default]
    Invalid,
    #[serde(rename = "notStarted")]
    NotStarted,
    #[serde(rename = "inProgress")]
    InProgress,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamsAsyncOperationType {
    #[serde(rename = "invalid")]
    #[default]
    Invalid,
    #[serde(rename = "cloneTeam")]
    CloneTeam,
    #[serde(rename = "archiveTeam")]
    ArchiveTeam,
    #[serde(rename = "unarchiveTeam")]
    UnarchiveTeam,
    #[serde(rename = "createTeam")]
    CreateTeam,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "teamifyGroup")]
    TeamifyGroup,
    #[serde(rename = "createChannel")]
    CreateChannel,
    #[serde(rename = "archiveChannel")]
    ArchiveChannel,
    #[serde(rename = "unarchiveChannel")]
    UnarchiveChannel,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsTab {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamsTab".to_string())]
    pub odata_type: String,
    ///Container for custom settings applied to a tab. The tab is considered configured only once this property is set.
    pub configuration: Option<MicrosoftGraphTeamsTabConfiguration>,
    ///Name of the tab.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The application that is linked to the tab. This can't be changed after tab creation.
    #[serde(rename = "teamsApp")]
    pub teams_app: Option<MicrosoftGraphTeamsApp>,
    ///Deep link URL of the tab instance. Read-only.
    #[serde(rename = "webUrl")]
    pub web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsTabConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Url used for rendering tab contents in Teams. Required.
    #[serde(rename = "contentUrl")]
    pub content_url: Option<String>,
    ///Identifier for the entity hosted by the tab provider.
    #[serde(rename = "entityId")]
    pub entity_id: Option<String>,
    ///Url called by Teams client when a Tab is removed using the Teams Client.
    #[serde(rename = "removeUrl")]
    pub remove_url: Option<String>,
    ///Url for showing tab contents outside of Teams.
    #[serde(rename = "websiteUrl")]
    pub website_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamsTemplate {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamsTemplate".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamwork {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamwork".to_string())]
    pub odata_type: String,
    ///A collection of deleted chats.
    #[serde(rename = "deletedChats")]
    pub deleted_chats: Option<Vec<MicrosoftGraphDeletedChat>>,
    ///The deleted team.
    #[serde(rename = "deletedTeams")]
    pub deleted_teams: Option<Vec<MicrosoftGraphDeletedTeam>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether Microsoft Teams is enabled for the organization.
    #[serde(rename = "isTeamsEnabled")]
    pub is_teams_enabled: Option<bool>,
    ///Represents the region of the organization or the tenant. The region value can be any region supported by the Teams payload. The possible values are: Americas, Europe and MiddleEast, Asia Pacific, UAE, Australia, Brazil, Canada, Switzerland, Germany, France, India, Japan, South Korea, Norway, Singapore, United Kingdom, South Africa, Sweden, Qatar, Poland, Italy, Israel, Spain, Mexico, USGov Community Cloud, USGov Community Cloud High, USGov Department of Defense, and China.
    pub region: Option<String>,
    ///Represents tenant-wide settings for all Teams apps in the tenant.
    #[serde(rename = "teamsAppSettings")]
    pub teams_app_settings: Option<MicrosoftGraphTeamsAppSettings>,
    #[serde(rename = "workforceIntegrations")]
    pub workforce_integrations: Option<Vec<MicrosoftGraphWorkforceIntegration>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamworkApplicationIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamworkApplicationIdentity".to_string())]
    pub odata_type: String,
    ///Type of application that is referenced. Possible values are: aadApplication, bot, tenantBot, office365Connector, outgoingWebhook, and unknownFutureValue.
    #[serde(rename = "applicationIdentityType")]
    pub application_identity_type: Option<MicrosoftGraphTeamworkApplicationIdentityType>,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamworkApplicationIdentityType {
    #[serde(rename = "aadApplication")]
    #[default]
    AadApplication,
    #[serde(rename = "bot")]
    Bot,
    #[serde(rename = "tenantBot")]
    TenantBot,
    #[serde(rename = "office365Connector")]
    Office365Connector,
    #[serde(rename = "outgoingWebhook")]
    OutgoingWebhook,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamworkBot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamworkBot".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamworkCallEventType {
    #[serde(rename = "call")]
    #[default]
    Call,
    #[serde(rename = "meeting")]
    Meeting,
    #[serde(rename = "screenShare")]
    ScreenShare,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamworkConversationIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamworkConversationIdentity".to_string())]
    pub odata_type: String,
    ///Type of conversation. Possible values are: team, channel, chat, and unknownFutureValue.
    #[serde(rename = "conversationIdentityType")]
    pub conversation_identity_type: Option<
        MicrosoftGraphTeamworkConversationIdentityType,
    >,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamworkConversationIdentityType {
    #[serde(rename = "team")]
    #[default]
    Team,
    #[serde(rename = "channel")]
    Channel,
    #[serde(rename = "chat")]
    Chat,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamworkHostedContent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamworkHostedContent".to_string())]
    pub odata_type: String,
    ///Write only. Bytes for the hosted content (such as images).
    #[serde(rename = "contentBytes")]
    pub content_bytes: Option<String>,
    ///Write only. Content type. such as image/png, image/jpg.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamworkOnlineMeetingInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The identifier of the calendar event associated with the meeting.
    #[serde(rename = "calendarEventId")]
    pub calendar_event_id: Option<String>,
    ///The URL that users click to join or uniquely identify the meeting.
    #[serde(rename = "joinWebUrl")]
    pub join_web_url: Option<String>,
    ///The organizer of the meeting.
    pub organizer: Option<MicrosoftGraphTeamworkUserIdentity>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamworkTag {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamworkTag".to_string())]
    pub odata_type: String,
    ///The description of the tag as it appears to the user in Microsoft Teams. A teamworkTag can't have more than 200 teamworkTagMembers.
    pub description: Option<String>,
    ///The name of the tag as it appears to the user in Microsoft Teams.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The number of users assigned to the tag.
    #[serde(rename = "memberCount")]
    pub member_count: Option<f64>,
    ///Users assigned to the tag.
    pub members: Option<Vec<MicrosoftGraphTeamworkTagMember>>,
    ///The type of the tag. Default is standard.
    #[serde(rename = "tagType")]
    pub tag_type: Option<MicrosoftGraphTeamworkTagType>,
    ///ID of the team in which the tag is defined.
    #[serde(rename = "teamId")]
    pub team_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamworkTagIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamworkTagIdentity".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamworkTagMember {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamworkTagMember".to_string())]
    pub odata_type: String,
    ///The member's display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The ID of the tenant that the tag member is a part of.
    #[serde(rename = "tenantId")]
    pub tenant_id: Option<String>,
    ///The user ID of the member.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamworkTagType {
    #[serde(rename = "standard")]
    #[default]
    Standard,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTeamworkUserIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.teamworkUserIdentity".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
    ///Type of user. Possible values are: aadUser, onPremiseAadUser, anonymousGuest, federatedUser, personalMicrosoftAccountUser, skypeUser, phoneUser, unknownFutureValue and emailUser.
    #[serde(rename = "userIdentityType")]
    pub user_identity_type: Option<MicrosoftGraphTeamworkUserIdentityType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTeamworkUserIdentityType {
    #[serde(rename = "aadUser")]
    #[default]
    AadUser,
    #[serde(rename = "onPremiseAadUser")]
    OnPremiseAadUser,
    #[serde(rename = "anonymousGuest")]
    AnonymousGuest,
    #[serde(rename = "federatedUser")]
    FederatedUser,
    #[serde(rename = "personalMicrosoftAccountUser")]
    PersonalMicrosoftAccountUser,
    #[serde(rename = "skypeUser")]
    SkypeUser,
    #[serde(rename = "phoneUser")]
    PhoneUser,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "emailUser")]
    EmailUser,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTelecomExpenseManagementPartner {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.telecomExpenseManagementPartner".to_string())]
    pub odata_type: String,
    ///Whether the partner's AAD app has been authorized to access Intune.
    #[serde(rename = "appAuthorized")]
    pub app_authorized: Option<bool>,
    ///Display name of the TEM partner.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Whether Intune's connection to the TEM service is currently enabled or disabled.
    pub enabled: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Timestamp of the last request sent to Intune by the TEM partner.
    #[serde(rename = "lastConnectionDateTime")]
    pub last_connection_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///URL of the TEM partner's administrative control panel, where an administrator can configure their TEM service.
    pub url: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTemplateApplicationLevel {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "newPartners")]
    NewPartners,
    #[serde(rename = "existingPartners")]
    ExistingPartners,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTemplateScenarios {
    #[serde(rename = "new")]
    #[default]
    New,
    #[serde(rename = "secureFoundation")]
    SecureFoundation,
    #[serde(rename = "zeroTrust")]
    ZeroTrust,
    #[serde(rename = "remoteWork")]
    RemoteWork,
    #[serde(rename = "protectAdmins")]
    ProtectAdmins,
    #[serde(rename = "emergingThreats")]
    EmergingThreats,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTemporaryAccessPassAuthenticationMethod {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.temporaryAccessPassAuthenticationMethod".to_string())]
    pub odata_type: String,
    ///The date and time when the Temporary Access Pass was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The state of the authentication method that indicates whether it's currently usable by the user.
    #[serde(rename = "isUsable")]
    pub is_usable: Option<bool>,
    ///Determines whether the pass is limited to a one-time use. If true, the pass can be used once; if false, the pass can be used multiple times within the Temporary Access Pass lifetime.
    #[serde(rename = "isUsableOnce")]
    pub is_usable_once: Option<bool>,
    ///The lifetime of the Temporary Access Pass in minutes starting at startDateTime. Must be between 10 and 43200 inclusive (equivalent to 30 days).
    #[serde(rename = "lifetimeInMinutes")]
    pub lifetime_in_minutes: Option<f64>,
    ///Details about the usability state (isUsable). Reasons can include: EnabledByPolicy, DisabledByPolicy, Expired, NotYetValid, OneTimeUsed.
    #[serde(rename = "methodUsabilityReason")]
    pub method_usability_reason: Option<String>,
    ///The date and time when the Temporary Access Pass becomes available to use and when isUsable is true is enforced.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The Temporary Access Pass used to authenticate. Returned only on creation of a new temporaryAccessPassAuthenticationMethod object; Hidden in subsequent read operations and returned as null with GET.
    #[serde(rename = "temporaryAccessPass")]
    pub temporary_access_pass: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTemporaryAccessPassAuthenticationMethodConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.temporaryAccessPassAuthenticationMethodConfiguration".to_string(

        )
    )]
    pub odata_type: String,
    ///Default length in characters of a Temporary Access Pass object. Must be between 8 and 48 characters.
    #[serde(rename = "defaultLength")]
    pub default_length: Option<f64>,
    ///Default lifetime in minutes for a Temporary Access Pass. Value can be any integer between the minimumLifetimeInMinutes and maximumLifetimeInMinutes.
    #[serde(rename = "defaultLifetimeInMinutes")]
    pub default_lifetime_in_minutes: Option<f64>,
    ///Groups of users that are excluded from a policy.
    #[serde(rename = "excludeTargets")]
    pub exclude_targets: Option<Vec<MicrosoftGraphExcludeTarget>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of groups that are enabled to use the authentication method.
    #[serde(rename = "includeTargets")]
    pub include_targets: Option<Vec<MicrosoftGraphAuthenticationMethodTarget>>,
    ///If true, all the passes in the tenant will be restricted to one-time use. If false, passes in the tenant can be created to be either one-time use or reusable.
    #[serde(rename = "isUsableOnce")]
    pub is_usable_once: Option<bool>,
    ///Maximum lifetime in minutes for any Temporary Access Pass created in the tenant. Value can be between 10 and 43200 minutes (equivalent to 30 days).
    #[serde(rename = "maximumLifetimeInMinutes")]
    pub maximum_lifetime_in_minutes: Option<f64>,
    ///Minimum lifetime in minutes for any Temporary Access Pass created in the tenant. Value can be between 10 and 43200 minutes (equivalent to 30 days).
    #[serde(rename = "minimumLifetimeInMinutes")]
    pub minimum_lifetime_in_minutes: Option<f64>,
    ///The state of the policy. Possible values are: enabled, disabled.
    pub state: Option<MicrosoftGraphAuthenticationMethodState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTenantAppManagementPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.tenantAppManagementPolicy".to_string())]
    pub odata_type: String,
    ///Restrictions that apply as default to all application objects in the tenant.
    #[serde(rename = "applicationRestrictions")]
    pub application_restrictions: Option<
        MicrosoftGraphAppManagementApplicationConfiguration,
    >,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Denotes whether the policy is enabled. Default value is false.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Restrictions that apply as default to all service principal objects in the tenant.
    #[serde(rename = "servicePrincipalRestrictions")]
    pub service_principal_restrictions: Option<
        MicrosoftGraphAppManagementServicePrincipalConfiguration,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTenantDataSecurityAndGovernance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.tenantDataSecurityAndGovernance".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "protectionScopes")]
    pub protection_scopes: Option<MicrosoftGraphTenantProtectionScopeContainer>,
    #[serde(rename = "sensitivityLabels")]
    pub sensitivity_labels: Option<Vec<MicrosoftGraphSensitivityLabel>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTenantProtectionScopeContainer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.tenantProtectionScopeContainer".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Specifies whether the column allows more than one value.
    #[serde(rename = "allowMultipleValues")]
    pub allow_multiple_values: Option<bool>,
    #[serde(rename = "parentTerm")]
    pub parent_term: Option<Box<MicrosoftGraphTermStoreTerm>>,
    ///Specifies whether to display the entire term path or only the term label.
    #[serde(rename = "showFullyQualifiedName")]
    pub show_fully_qualified_name: Option<bool>,
    #[serde(rename = "termSet")]
    pub term_set: Option<Box<MicrosoftGraphTermStoreSet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermStoreGroup {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.termStore.group".to_string())]
    pub odata_type: String,
    ///Date and time of the group creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description that gives details on the term usage.
    pub description: Option<String>,
    ///Name of the group.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///ID of the parent site of this group.
    #[serde(rename = "parentSiteId")]
    pub parent_site_id: Option<String>,
    ///Returns the type of the group. Possible values are: global, system, and siteCollection.
    pub scope: Option<MicrosoftGraphTermStoreTermGroupScope>,
    ///All sets under the group in a term [store].
    pub sets: Option<Vec<MicrosoftGraphTermStoreSet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermStoreLocalizedDescription {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The description in the localized language.
    pub description: Option<String>,
    ///The language tag for the label.
    #[serde(rename = "languageTag")]
    pub language_tag: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermStoreLocalizedLabel {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether the label is the default label.
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    ///The language tag for the label.
    #[serde(rename = "languageTag")]
    pub language_tag: Option<String>,
    ///The name of the label.
    pub name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermStoreLocalizedName {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The language tag for the label.
    #[serde(rename = "languageTag")]
    pub language_tag: Option<String>,
    ///The name in the localized language.
    pub name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermStoreRelation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.termStore.relation".to_string())]
    pub odata_type: String,
    ///The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].
    #[serde(rename = "fromTerm")]
    pub from_term: Option<Box<MicrosoftGraphTermStoreTerm>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The type of relation. Possible values are: pin, reuse.
    pub relationship: Option<MicrosoftGraphTermStoreRelationType>,
    ///The [set] in which the relation is relevant.
    pub set: Option<Box<MicrosoftGraphTermStoreSet>>,
    ///The to [term] of the relation. The term to which the relationship is defined.
    #[serde(rename = "toTerm")]
    pub to_term: Option<Box<MicrosoftGraphTermStoreTerm>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTermStoreRelationType {
    #[serde(rename = "pin")]
    #[default]
    Pin,
    #[serde(rename = "reuse")]
    Reuse,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermStoreSet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.termStore.set".to_string())]
    pub odata_type: String,
    ///Children terms of set in term [store].
    pub children: Option<Vec<MicrosoftGraphTermStoreTerm>>,
    ///Date and time of set creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description that gives details on the term usage.
    pub description: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Name of the set for each languageTag.
    #[serde(rename = "localizedNames")]
    pub localized_names: Option<Vec<MicrosoftGraphTermStoreLocalizedName>>,
    #[serde(rename = "parentGroup")]
    pub parent_group: Option<Box<MicrosoftGraphTermStoreGroup>>,
    ///Custom properties for the set.
    pub properties: Option<Vec<MicrosoftGraphKeyValue>>,
    ///Indicates which terms have been pinned or reused directly under the set.
    pub relations: Option<Vec<MicrosoftGraphTermStoreRelation>>,
    ///All the terms under the set.
    pub terms: Option<Vec<MicrosoftGraphTermStoreTerm>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermStoreStore {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.termStore.store".to_string())]
    pub odata_type: String,
    ///Default language of the term store.
    #[serde(rename = "defaultLanguageTag")]
    pub default_language_tag: Option<String>,
    ///Collection of all groups available in the term store.
    pub groups: Option<Vec<MicrosoftGraphTermStoreGroup>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///List of languages for the term store.
    #[serde(rename = "languageTags")]
    pub language_tags: Option<Vec<String>>,
    ///Collection of all sets available in the term store. This relationship can only be used to load a specific term set.
    pub sets: Option<Vec<MicrosoftGraphTermStoreSet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermStoreTerm {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.termStore.term".to_string())]
    pub odata_type: String,
    ///Children of current term.
    pub children: Option<Vec<MicrosoftGraphTermStoreTerm>>,
    ///Date and time of term creation. Read-only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description about term that is dependent on the languageTag.
    pub descriptions: Option<Vec<MicrosoftGraphTermStoreLocalizedDescription>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Label metadata for a term.
    pub labels: Option<Vec<MicrosoftGraphTermStoreLocalizedLabel>>,
    ///Last date and time of term modification. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Collection of properties on the term.
    pub properties: Option<Vec<MicrosoftGraphKeyValue>>,
    ///To indicate which terms are related to the current term as either pinned or reused.
    pub relations: Option<Vec<MicrosoftGraphTermStoreRelation>>,
    ///The [set] in which the term is created.
    pub set: Option<Box<MicrosoftGraphTermStoreSet>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTermStoreTermGroupScope {
    #[serde(rename = "global")]
    #[default]
    Global,
    #[serde(rename = "system")]
    System,
    #[serde(rename = "siteCollection")]
    SiteCollection,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermsAndConditions {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.termsAndConditions".to_string())]
    pub odata_type: String,
    ///Administrator-supplied explanation of the terms and conditions, typically describing what it means to accept the terms and conditions set out in the T&C policy. This is shown to the user on prompts to accept the T&C policy.
    #[serde(rename = "acceptanceStatement")]
    pub acceptance_statement: Option<String>,
    ///The list of acceptance statuses for this T&C policy.
    #[serde(rename = "acceptanceStatuses")]
    pub acceptance_statuses: Option<
        Vec<MicrosoftGraphTermsAndConditionsAcceptanceStatus>,
    >,
    ///The list of assignments for this T&C policy.
    pub assignments: Option<Vec<MicrosoftGraphTermsAndConditionsAssignment>>,
    ///Administrator-supplied body text of the terms and conditions, typically the terms themselves. This is shown to the user on prompts to accept the T&C policy.
    #[serde(rename = "bodyText")]
    pub body_text: Option<String>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Administrator-supplied description of the T&C policy.
    pub description: Option<String>,
    ///Administrator-supplied name for the T&C policy.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Administrator-supplied title of the terms and conditions. This is shown to the user on prompts to accept the T&C policy.
    pub title: Option<String>,
    ///Integer indicating the current version of the terms. Incremented when an administrator makes a change to the terms and wishes to require users to re-accept the modified T&C policy.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermsAndConditionsAcceptanceStatus {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.termsAndConditionsAcceptanceStatus".to_string())]
    pub odata_type: String,
    ///DateTime when the terms were last accepted by the user.
    #[serde(rename = "acceptedDateTime")]
    pub accepted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Most recent version number of the T&C accepted by the user.
    #[serde(rename = "acceptedVersion")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub accepted_version: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Navigation link to the terms and conditions that are assigned.
    #[serde(rename = "termsAndConditions")]
    pub terms_and_conditions: Option<Box<MicrosoftGraphTermsAndConditions>>,
    ///Display name of the user whose acceptance the entity represents.
    #[serde(rename = "userDisplayName")]
    pub user_display_name: Option<String>,
    ///The userPrincipalName of the User that accepted the term.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermsAndConditionsAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.termsAndConditionsAssignment".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Assignment target that the T&C policy is assigned to.
    pub target: Option<MicrosoftGraphDeviceAndAppManagementAssignmentTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermsExpiration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents the frequency at which the terms will expire, after its first expiration as set in startDateTime. The value is represented in ISO 8601 format for durations. For example, PT1M represents a time period of one month.
    pub frequency: Option<String>,
    ///The DateTime when the agreement is set to expire for all users. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTermsOfUseContainer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.termsOfUseContainer".to_string())]
    pub odata_type: String,
    ///Represents the current status of a user's response to a company's customizable terms of use agreement.
    #[serde(rename = "agreementAcceptances")]
    pub agreement_acceptances: Option<Vec<MicrosoftGraphAgreementAcceptance>>,
    ///Represents a tenant's customizable terms of use agreement that's created and managed with Microsoft Entra ID Governance.
    pub agreements: Option<Vec<MicrosoftGraphAgreement>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTextColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Whether to allow multiple lines of text.
    #[serde(rename = "allowMultipleLines")]
    pub allow_multiple_lines: Option<bool>,
    ///Whether updates to this column should replace existing text, or append to it.
    #[serde(rename = "appendChangesToExistingText")]
    pub append_changes_to_existing_text: Option<bool>,
    ///The size of the text box.
    #[serde(rename = "linesForEditing")]
    pub lines_for_editing: Option<f64>,
    ///The maximum number of characters for the value.
    #[serde(rename = "maxLength")]
    pub max_length: Option<f64>,
    ///The type of text being stored. Must be one of plain or richText
    #[serde(rename = "textType")]
    pub text_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTextContent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.textContent".to_string())]
    pub odata_type: String,
    ///The text content data. Inherits properties from contentBase.
    pub data: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTextWebPart {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.textWebPart".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The HTML string in text web part.
    #[serde(rename = "innerHtml")]
    pub inner_html: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphThreatAssessmentContentType {
    #[serde(rename = "mail")]
    #[default]
    Mail,
    #[serde(rename = "url")]
    Url,
    #[serde(rename = "file")]
    File,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphThreatAssessmentRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.threatAssessmentRequest".to_string())]
    pub odata_type: String,
    pub category: Option<MicrosoftGraphThreatCategory>,
    ///The content type of threat assessment. Possible values are: mail, url, file.
    #[serde(rename = "contentType")]
    pub content_type: Option<MicrosoftGraphThreatAssessmentContentType>,
    ///The threat assessment request creator.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "expectedAssessment")]
    pub expected_assessment: Option<MicrosoftGraphThreatExpectedAssessment>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The source of the threat assessment request. Possible values are: administrator.
    #[serde(rename = "requestSource")]
    pub request_source: Option<MicrosoftGraphThreatAssessmentRequestSource>,
    ///A collection of threat assessment results. Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.
    pub results: Option<Vec<MicrosoftGraphThreatAssessmentResult>>,
    ///The assessment process status. Possible values are: pending, completed.
    pub status: Option<MicrosoftGraphThreatAssessmentStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphThreatAssessmentRequestSource {
    #[serde(rename = "undefined")]
    #[default]
    Undefined,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "administrator")]
    Administrator,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphThreatAssessmentResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.threatAssessmentResult".to_string())]
    pub odata_type: String,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result message for each threat assessment.
    pub message: Option<String>,
    ///The threat assessment result type. Possible values are: checkPolicy, rescan.
    #[serde(rename = "resultType")]
    pub result_type: Option<MicrosoftGraphThreatAssessmentResultType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphThreatAssessmentResultType {
    #[serde(rename = "checkPolicy")]
    #[default]
    CheckPolicy,
    #[serde(rename = "rescan")]
    Rescan,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphThreatAssessmentStatus {
    #[serde(rename = "pending")]
    #[default]
    Pending,
    #[serde(rename = "completed")]
    Completed,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphThreatCategory {
    #[serde(rename = "undefined")]
    #[default]
    Undefined,
    #[serde(rename = "spam")]
    Spam,
    #[serde(rename = "phishing")]
    Phishing,
    #[serde(rename = "malware")]
    Malware,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphThreatExpectedAssessment {
    #[serde(rename = "block")]
    #[default]
    Block,
    #[serde(rename = "unblock")]
    Unblock,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphThumbnail {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The content stream for the thumbnail.
    pub content: Option<String>,
    ///The height of the thumbnail, in pixels.
    pub height: Option<f64>,
    ///The unique identifier of the item that provided the thumbnail. This is only available when a folder thumbnail is requested.
    #[serde(rename = "sourceItemId")]
    pub source_item_id: Option<String>,
    ///The URL used to fetch the thumbnail content.
    pub url: Option<String>,
    ///The width of the thumbnail, in pixels.
    pub width: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphThumbnailColumn {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphThumbnailSet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.thumbnailSet".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A 1920x1920 scaled thumbnail.
    pub large: Option<MicrosoftGraphThumbnail>,
    ///A 176x176 scaled thumbnail.
    pub medium: Option<MicrosoftGraphThumbnail>,
    ///A 48x48 cropped thumbnail.
    pub small: Option<MicrosoftGraphThumbnail>,
    ///A custom thumbnail image or the original image used to generate other thumbnails.
    pub source: Option<MicrosoftGraphThumbnail>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTicketInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The ticket number.
    #[serde(rename = "ticketNumber")]
    pub ticket_number: Option<String>,
    ///The description of the ticket system.
    #[serde(rename = "ticketSystem")]
    pub ticket_system: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeCard {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.timeCard".to_string())]
    pub odata_type: String,
    ///The list of breaks associated with the timeCard.
    pub breaks: Option<Vec<MicrosoftGraphTimeCardBreak>>,
    ///The clock-in event of the timeCard.
    #[serde(rename = "clockInEvent")]
    pub clock_in_event: Option<MicrosoftGraphTimeCardEvent>,
    ///The clock-out event of the timeCard.
    #[serde(rename = "clockOutEvent")]
    pub clock_out_event: Option<MicrosoftGraphTimeCardEvent>,
    ///Indicates whether this timeCard entry is confirmed. Possible values are: none, user, manager, unknownFutureValue.
    #[serde(rename = "confirmedBy")]
    pub confirmed_by: Option<MicrosoftGraphConfirmedBy>,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes about the timeCard.
    pub notes: Option<MicrosoftGraphItemBody>,
    ///The original timeCardEntry of the timeCard before it was edited.
    #[serde(rename = "originalEntry")]
    pub original_entry: Option<MicrosoftGraphTimeCardEntry>,
    ///The current state of the timeCard during its life cycle. The possible values are: clockedIn, onBreak, clockedOut, unknownFutureValue.
    pub state: Option<MicrosoftGraphTimeCardState>,
    ///User ID to which the timeCard belongs.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeCardBreak {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///ID of the timeCardBreak.
    #[serde(rename = "breakId")]
    pub break_id: Option<String>,
    ///The start event of the timeCardBreak.
    pub end: Option<MicrosoftGraphTimeCardEvent>,
    ///Notes about the timeCardBreak.
    pub notes: Option<MicrosoftGraphItemBody>,
    pub start: Option<MicrosoftGraphTimeCardEvent>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeCardEntry {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The clock-in event of the timeCard.
    pub breaks: Option<Vec<MicrosoftGraphTimeCardBreak>>,
    ///The clock-out event of the timeCard.
    #[serde(rename = "clockInEvent")]
    pub clock_in_event: Option<MicrosoftGraphTimeCardEvent>,
    ///The list of breaks associated with the timeCard.
    #[serde(rename = "clockOutEvent")]
    pub clock_out_event: Option<MicrosoftGraphTimeCardEvent>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeCardEvent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The time the entry is recorded.
    #[serde(rename = "dateTime")]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether this action happens at an approved location.
    #[serde(rename = "isAtApprovedLocation")]
    pub is_at_approved_location: Option<bool>,
    ///Notes about the timeCardEvent.
    pub notes: Option<MicrosoftGraphItemBody>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTimeCardState {
    #[serde(rename = "clockedIn")]
    #[default]
    ClockedIn,
    #[serde(rename = "onBreak")]
    OnBreak,
    #[serde(rename = "clockedOut")]
    ClockedOut,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeClockSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The approved location of the timeClock.
    #[serde(rename = "approvedLocation")]
    pub approved_location: Option<MicrosoftGraphGeoCoordinates>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeOff {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.timeOff".to_string())]
    pub odata_type: String,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The draft version of this timeOff item that is viewable by managers. It must be shared before it's visible to team members. Required.
    #[serde(rename = "draftTimeOff")]
    pub draft_time_off: Option<MicrosoftGraphTimeOffItem>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The timeOff is marked for deletion, a process that is finalized when the schedule is shared.
    #[serde(rename = "isStagedForDeletion")]
    pub is_staged_for_deletion: Option<bool>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The shared version of this timeOff that is viewable by both employees and managers. Updates to the sharedTimeOff property send notifications to users in the Teams client. Required.
    #[serde(rename = "sharedTimeOff")]
    pub shared_time_off: Option<MicrosoftGraphTimeOffItem>,
    ///ID of the user assigned to the timeOff. Required.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeOffItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.timeOffItem".to_string())]
    pub odata_type: String,
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub theme: Option<MicrosoftGraphScheduleEntityTheme>,
    ///ID of the timeOffReason for this timeOffItem. Required.
    #[serde(rename = "timeOffReasonId")]
    pub time_off_reason_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeOffReason {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.timeOffReason".to_string())]
    pub odata_type: String,
    ///The code of the timeOffReason to represent an external identifier. This field must be unique within the team in Microsoft Teams and uses an alphanumeric format, with a maximum of 100 characters.
    pub code: Option<String>,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the timeOffReason. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Supported icon types are: none, car, calendar, running, plane, firstAid, doctor, notWorking, clock, juryDuty, globe, cup, phone, weather, umbrella, piggyBank, dog, cake, trafficCone, pin, sunny. Required.
    #[serde(rename = "iconType")]
    pub icon_type: Option<MicrosoftGraphTimeOffReasonIconType>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the timeOffReason can be used when creating new entities or updating existing ones. Required.
    #[serde(rename = "isActive")]
    pub is_active: Option<bool>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTimeOffReasonIconType {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "car")]
    Car,
    #[serde(rename = "calendar")]
    Calendar,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "plane")]
    Plane,
    #[serde(rename = "firstAid")]
    FirstAid,
    #[serde(rename = "doctor")]
    Doctor,
    #[serde(rename = "notWorking")]
    NotWorking,
    #[serde(rename = "clock")]
    Clock,
    #[serde(rename = "juryDuty")]
    JuryDuty,
    #[serde(rename = "globe")]
    Globe,
    #[serde(rename = "cup")]
    Cup,
    #[serde(rename = "phone")]
    Phone,
    #[serde(rename = "weather")]
    Weather,
    #[serde(rename = "umbrella")]
    Umbrella,
    #[serde(rename = "piggyBank")]
    PiggyBank,
    #[serde(rename = "dog")]
    Dog,
    #[serde(rename = "cake")]
    Cake,
    #[serde(rename = "trafficCone")]
    TrafficCone,
    #[serde(rename = "pin")]
    Pin,
    #[serde(rename = "sunny")]
    Sunny,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeOffRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.timeOffRequest".to_string())]
    pub odata_type: String,
    ///Indicates who the request is assigned to. Possible values are: sender, recipient, manager, system, unknownFutureValue.
    #[serde(rename = "assignedTo")]
    pub assigned_to: Option<MicrosoftGraphScheduleChangeRequestActor>,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time the time off ends in ISO 8601 format and in UTC time.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time when the manager approved or declined the scheduleChangeRequest. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "managerActionDateTime")]
    pub manager_action_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the manager regarding the scheduleChangeRequest. Optional.
    #[serde(rename = "managerActionMessage")]
    pub manager_action_message: Option<String>,
    ///The user ID of the manager who approved or declined the scheduleChangeRequest.
    #[serde(rename = "managerUserId")]
    pub manager_user_id: Option<String>,
    ///The date and time when the sender sent the scheduleChangeRequest. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "senderDateTime")]
    pub sender_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The message sent by the sender of the scheduleChangeRequest. Optional.
    #[serde(rename = "senderMessage")]
    pub sender_message: Option<String>,
    ///The user ID of the sender of the scheduleChangeRequest.
    #[serde(rename = "senderUserId")]
    pub sender_user_id: Option<String>,
    ///The date and time the time off starts in ISO 8601 format and in UTC time.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The state of the scheduleChangeRequest. Possible values are: pending, approved, declined, unknownFutureValue.
    pub state: Option<MicrosoftGraphScheduleChangeState>,
    ///The reason for the time off.
    #[serde(rename = "timeOffReasonId")]
    pub time_off_reason_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimePeriod {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The date time of the end of the time period.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date time of the start of the time period.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeRange {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///End time for the time range.
    #[serde(rename = "endTime")]
    pub end_time: Option<chrono::NaiveTime>,
    ///Start time for the time range.
    #[serde(rename = "startTime")]
    pub start_time: Option<chrono::NaiveTime>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeSlot {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    pub end: Option<MicrosoftGraphDateTimeTimeZone>,
    pub start: Option<MicrosoftGraphDateTimeTimeZone>,
}
discriminated_enum! {
    pub enum MicrosoftGraphTimeZoneBase { discriminator : "@odata.type", variants :
    [("#microsoft.graph.customTimeZone", MicrosoftGraphCustomTimeZone(Box <
    MicrosoftGraphCustomTimeZone >))], fallback : TimeZoneBase(Box <
    MicrosoftGraphTimeZoneBaseBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTimeZoneBaseBase {
    ///The name of a time zone. It can be a standard time zone name such as 'Hawaii-Aleutian Standard Time', or 'Customized Time Zone' for a custom time zone.
    pub name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTitleArea {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Alternative text on the title area.
    #[serde(rename = "alternativeText")]
    pub alternative_text: Option<String>,
    ///Indicates whether the title area has a gradient effect enabled.
    #[serde(rename = "enableGradientEffect")]
    pub enable_gradient_effect: Option<bool>,
    ///URL of the image in the title area.
    #[serde(rename = "imageWebUrl")]
    pub image_web_url: Option<String>,
    ///Enumeration value that indicates the layout of the title area. The possible values are: imageAndTitle, plain, colorBlock, overlap, unknownFutureValue.
    pub layout: Option<MicrosoftGraphTitleAreaLayoutType>,
    ///Contains collections of data that can be processed by server side services like search index and link fixup.
    #[serde(rename = "serverProcessedContent")]
    pub server_processed_content: Option<MicrosoftGraphServerProcessedContent>,
    ///Indicates whether the author should be shown in title area.
    #[serde(rename = "showAuthor")]
    pub show_author: Option<bool>,
    ///Indicates whether the published date should be shown in title area.
    #[serde(rename = "showPublishedDate")]
    pub show_published_date: Option<bool>,
    ///Indicates whether the text block above title should be shown in title area.
    #[serde(rename = "showTextBlockAboveTitle")]
    pub show_text_block_above_title: Option<bool>,
    ///The text above title line.
    #[serde(rename = "textAboveTitle")]
    pub text_above_title: Option<String>,
    ///Enumeration value that indicates the text alignment of the title area. The possible values are: left, center, unknownFutureValue.
    #[serde(rename = "textAlignment")]
    pub text_alignment: Option<MicrosoftGraphTitleAreaTextAlignmentType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTitleAreaLayoutType {
    #[serde(rename = "imageAndTitle")]
    #[default]
    ImageAndTitle,
    #[serde(rename = "plain")]
    Plain,
    #[serde(rename = "colorBlock")]
    ColorBlock,
    #[serde(rename = "overlap")]
    Overlap,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTitleAreaTextAlignmentType {
    #[serde(rename = "left")]
    #[default]
    Left,
    #[serde(rename = "center")]
    Center,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTodo {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.todo".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The task lists in the users mailbox.
    pub lists: Option<Vec<MicrosoftGraphTodoTaskList>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTodoTask {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.todoTask".to_string())]
    pub odata_type: String,
    #[serde(rename = "attachmentSessions")]
    pub attachment_sessions: Option<Vec<MicrosoftGraphAttachmentSession>>,
    ///A collection of file attachments for the task.
    pub attachments: Option<Vec<MicrosoftGraphAttachmentBase>>,
    ///The task body that typically contains information about the task.
    pub body: Option<MicrosoftGraphItemBody>,
    ///The date and time when the task body was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
    #[serde(rename = "bodyLastModifiedDateTime")]
    pub body_last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The categories associated with the task. Each category corresponds to the displayName property of an outlookCategory that the user has defined.
    pub categories: Option<Vec<Option<String>>>,
    ///A collection of checklistItems linked to a task.
    #[serde(rename = "checklistItems")]
    pub checklist_items: Option<Vec<MicrosoftGraphChecklistItem>>,
    ///The date and time in the specified time zone that the task was finished.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The date and time when the task was created. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time in the specified time zone that the task is to be finished.
    #[serde(rename = "dueDateTime")]
    pub due_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The collection of open extensions defined for the task. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///Indicates whether the task has attachments.
    #[serde(rename = "hasAttachments")]
    pub has_attachments: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub importance: Option<MicrosoftGraphImportance>,
    ///Set to true if an alert is set to remind the user of the task.
    #[serde(rename = "isReminderOn")]
    pub is_reminder_on: Option<bool>,
    ///The date and time when the task was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A collection of resources linked to the task.
    #[serde(rename = "linkedResources")]
    pub linked_resources: Option<Vec<MicrosoftGraphLinkedResource>>,
    ///The recurrence pattern for the task.
    pub recurrence: Option<MicrosoftGraphPatternedRecurrence>,
    ///The date and time in the specified time zone for a reminder alert of the task to occur.
    #[serde(rename = "reminderDateTime")]
    pub reminder_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The date and time in the specified time zone at which the task is scheduled to start.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    pub status: Option<MicrosoftGraphTaskStatus>,
    ///A brief description of the task.
    pub title: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTodoTaskList {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.todoTaskList".to_string())]
    pub odata_type: String,
    ///The name of the task list.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The collection of open extensions defined for the task list. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///True if the user is owner of the given task list.
    #[serde(rename = "isOwner")]
    pub is_owner: Option<bool>,
    ///True if the task list is shared with other users
    #[serde(rename = "isShared")]
    pub is_shared: Option<bool>,
    ///The tasks in this task list. Read-only. Nullable.
    pub tasks: Option<Vec<MicrosoftGraphTodoTask>>,
    #[serde(rename = "wellknownListName")]
    pub wellknown_list_name: Option<MicrosoftGraphWellknownListName>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTokenIssuancePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.tokenIssuancePolicy".to_string())]
    pub odata_type: String,
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///A string collection containing a JSON string that defines the rules and settings for a policy. The syntax for the definition differs for each derived policy type. Required.
    pub definition: Option<Vec<String>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If set to true, activates this policy. There can be many policies for the same policy type, but only one can be activated as the organization default. Optional, default value is false.
    #[serde(rename = "isOrganizationDefault")]
    pub is_organization_default: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTokenIssuerType {
    #[serde(rename = "AzureAD")]
    #[default]
    AzureAd,
    #[serde(rename = "ADFederationServices")]
    AdfederationServices,
    #[serde(rename = "UnknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "AzureADBackupAuth")]
    AzureAdbackupAuth,
    #[serde(rename = "ADFederationServicesMFAAdapter")]
    AdfederationServicesMfaadapter,
    #[serde(rename = "NPSExtension")]
    Npsextension,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTokenLifetimePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.tokenLifetimePolicy".to_string())]
    pub odata_type: String,
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///A string collection containing a JSON string that defines the rules and settings for a policy. The syntax for the definition differs for each derived policy type. Required.
    pub definition: Option<Vec<String>>,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description for this policy. Required.
    pub description: Option<String>,
    ///Display name for this policy. Required.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///If set to true, activates this policy. There can be many policies for the same policy type, but only one can be activated as the organization default. Optional, default value is false.
    #[serde(rename = "isOrganizationDefault")]
    pub is_organization_default: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTokenMeetingInfo {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.tokenMeetingInfo".to_string())]
    pub odata_type: String,
    ///The token used to join the call.
    pub token: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTone {
    #[serde(rename = "tone0")]
    #[default]
    Tone0,
    #[serde(rename = "tone1")]
    Tone1,
    #[serde(rename = "tone2")]
    Tone2,
    #[serde(rename = "tone3")]
    Tone3,
    #[serde(rename = "tone4")]
    Tone4,
    #[serde(rename = "tone5")]
    Tone5,
    #[serde(rename = "tone6")]
    Tone6,
    #[serde(rename = "tone7")]
    Tone7,
    #[serde(rename = "tone8")]
    Tone8,
    #[serde(rename = "tone9")]
    Tone9,
    #[serde(rename = "star")]
    Star,
    #[serde(rename = "pound")]
    Pound,
    #[serde(rename = "a")]
    A,
    #[serde(rename = "b")]
    B,
    #[serde(rename = "c")]
    C,
    #[serde(rename = "d")]
    D,
    #[serde(rename = "flash")]
    Flash,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphToneInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///An incremental identifier used for ordering DTMF events.
    #[serde(rename = "sequenceId")]
    pub sequence_id: Option<f64>,
    pub tone: Option<MicrosoftGraphTone>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTraining {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.training".to_string())]
    pub odata_type: String,
    ///Training availability status. Possible values are: unknown, notAvailable, available, archive, delete, unknownFutureValue.
    #[serde(rename = "availabilityStatus")]
    pub availability_status: Option<MicrosoftGraphTrainingAvailabilityStatus>,
    ///Identity of the user who created the training.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the training was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description for the training.
    pub description: Option<String>,
    ///The display name for the training.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Training duration.
    #[serde(rename = "durationInMinutes")]
    pub duration_in_minutes: Option<f64>,
    ///Indicates whether the training has any evaluation.
    #[serde(rename = "hasEvaluation")]
    pub has_evaluation: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Language specific details on a training.
    #[serde(rename = "languageDetails")]
    pub language_details: Option<Vec<MicrosoftGraphTrainingLanguageDetail>>,
    ///Identity of the user who last modified the training.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the training was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Training content source. Possible values are: unknown, global, tenant, unknownFutureValue.
    pub source: Option<MicrosoftGraphSimulationContentSource>,
    ///Supported locales for content for the associated training.
    #[serde(rename = "supportedLocales")]
    pub supported_locales: Option<Vec<Option<String>>>,
    ///Training tags.
    pub tags: Option<Vec<Option<String>>>,
    ///The type of training. Possible values are: unknown, phishing, unknownFutureValue.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphTrainingType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTrainingAssignedTo {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "allUsers")]
    AllUsers,
    #[serde(rename = "clickedPayload")]
    ClickedPayload,
    #[serde(rename = "compromised")]
    Compromised,
    #[serde(rename = "reportedPhish")]
    ReportedPhish,
    #[serde(rename = "readButNotClicked")]
    ReadButNotClicked,
    #[serde(rename = "didNothing")]
    DidNothing,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTrainingAvailabilityStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "notAvailable")]
    NotAvailable,
    #[serde(rename = "available")]
    Available,
    #[serde(rename = "archive")]
    Archive,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTrainingCompletionDuration {
    #[serde(rename = "week")]
    #[default]
    Week,
    #[serde(rename = "fortnite")]
    Fortnite,
    #[serde(rename = "month")]
    Month,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTrainingEventsContent {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///List of assigned trainings and their information in an attack simulation and training campaign.
    #[serde(rename = "assignedTrainingsInfos")]
    pub assigned_trainings_infos: Option<Vec<MicrosoftGraphAssignedTrainingInfo>>,
    ///Number of users who were assigned trainings in an attack simulation and training campaign.
    #[serde(rename = "trainingsAssignedUserCount")]
    pub trainings_assigned_user_count: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTrainingLanguageDetail {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.trainingLanguageDetail".to_string())]
    pub odata_type: String,
    ///Language specific content for the training.
    pub content: Option<String>,
    ///Identity of the user who created the language details.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the language details were created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Description as defined by the user.
    pub description: Option<String>,
    ///Display name as defined by the user.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the training has a default language.
    #[serde(rename = "isDefaultLangauge")]
    pub is_default_langauge: Option<bool>,
    ///Identity of the user who last modified the details.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphEmailIdentity>,
    ///Date and time when the trainingLanguageDetail was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Content locale for the training detail.
    pub locale: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTrainingNotificationSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.trainingNotificationSetting".to_string())]
    pub odata_type: String,
    ///Notification preference. Possible values are: unknown, microsoft, custom, unknownFutureValue.
    #[serde(rename = "notificationPreference")]
    pub notification_preference: Option<MicrosoftGraphEndUserNotificationPreference>,
    ///Positive reinforcement detail.
    #[serde(rename = "positiveReinforcement")]
    pub positive_reinforcement: Option<MicrosoftGraphPositiveReinforcementNotification>,
    ///End user notification type. Possible values are: unknown, noTraining, trainingSelected, noNotification, unknownFutureValue.
    #[serde(rename = "settingType")]
    pub setting_type: Option<MicrosoftGraphEndUserNotificationSettingType>,
    ///Training assignment details.
    #[serde(rename = "trainingAssignment")]
    pub training_assignment: Option<MicrosoftGraphBaseEndUserNotification>,
    ///Training reminder details.
    #[serde(rename = "trainingReminder")]
    pub training_reminder: Option<MicrosoftGraphTrainingReminderNotification>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTrainingReminderNotification {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.trainingReminderNotification".to_string())]
    pub odata_type: String,
    ///The default language for the end user notification.
    #[serde(rename = "defaultLanguage")]
    pub default_language: Option<String>,
    ///Configurable frequency for the reminder email introduced during simulation creation. Possible values are: unknown, weekly, biWeekly, unknownFutureValue.
    #[serde(rename = "deliveryFrequency")]
    pub delivery_frequency: Option<MicrosoftGraphNotificationDeliveryFrequency>,
    #[serde(rename = "endUserNotification")]
    pub end_user_notification: Option<MicrosoftGraphEndUserNotification>,
}
discriminated_enum! {
    pub enum MicrosoftGraphTrainingSetting { discriminator : "@odata.type", variants :
    [("#microsoft.graph.customTrainingSetting", MicrosoftGraphCustomTrainingSetting(Box <
    MicrosoftGraphCustomTrainingSetting >)),
    ("#microsoft.graph.microsoftCustomTrainingSetting",
    MicrosoftGraphMicrosoftCustomTrainingSetting(Box <
    MicrosoftGraphMicrosoftCustomTrainingSetting >)),
    ("#microsoft.graph.microsoftManagedTrainingSetting",
    MicrosoftGraphMicrosoftManagedTrainingSetting(Box <
    MicrosoftGraphMicrosoftManagedTrainingSetting >)),
    ("#microsoft.graph.microsoftTrainingAssignmentMapping",
    MicrosoftGraphMicrosoftTrainingAssignmentMapping(Box <
    MicrosoftGraphMicrosoftTrainingAssignmentMapping >)),
    ("#microsoft.graph.noTrainingSetting", MicrosoftGraphNoTrainingSetting(Box <
    MicrosoftGraphNoTrainingSetting >))], fallback : TrainingSetting(Box <
    MicrosoftGraphTrainingSettingBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTrainingSettingBase {
    ///Type of setting. Possible values are: microsoftCustom, microsoftManaged, noTraining, custom, unknownFutureValue.
    #[serde(rename = "settingType")]
    pub setting_type: Option<MicrosoftGraphTrainingSettingType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTrainingSettingType {
    #[serde(rename = "microsoftCustom")]
    #[default]
    MicrosoftCustom,
    #[serde(rename = "microsoftManaged")]
    MicrosoftManaged,
    #[serde(rename = "noTraining")]
    NoTraining,
    #[serde(rename = "custom")]
    Custom,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTrainingStatus {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "assigned")]
    Assigned,
    #[serde(rename = "inProgress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "overdue")]
    Overdue,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTrainingType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "phishing")]
    Phishing,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphTrending {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.trending".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Used for navigating to the trending document.
    pub resource: Option<MicrosoftGraphEntity>,
    ///Reference properties of the trending document, such as the url and type of the document.
    #[serde(rename = "resourceReference")]
    pub resource_reference: Option<MicrosoftGraphResourceReference>,
    ///Properties that you can use to visualize the document in your experience.
    #[serde(rename = "resourceVisualization")]
    pub resource_visualization: Option<MicrosoftGraphResourceVisualization>,
    ///Value indicating how much the document is currently trending. The larger the number, the more the document is currently trending around the user (the more relevant it is). Returned documents are sorted by this value.
    pub weight: Option<MicrosoftGraphTrendingWeight>,
}
///Value indicating how much the document is currently trending. The larger the number, the more the document is currently trending around the user (the more relevant it is). Returned documents are sorted by this value.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphTrendingWeight {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedApprovalStage {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The number of days that a request can be pending a response before it is automatically denied.
    #[serde(rename = "approvalStageTimeOutInDays")]
    pub approval_stage_time_out_in_days: Option<f64>,
    ///The escalation approvers for this stage when the primary approvers don't respond.
    #[serde(rename = "escalationApprovers")]
    pub escalation_approvers: Option<Vec<MicrosoftGraphSubjectSet>>,
    ///The time a request can be pending a response from a primary approver before it can be escalated to the escalation approvers.
    #[serde(rename = "escalationTimeInMinutes")]
    pub escalation_time_in_minutes: Option<f64>,
    ///Indicates whether the approver must provide justification for their reponse.
    #[serde(rename = "isApproverJustificationRequired")]
    pub is_approver_justification_required: Option<bool>,
    ///Indicates whether escalation if enabled.
    #[serde(rename = "isEscalationEnabled")]
    pub is_escalation_enabled: Option<bool>,
    ///The primary approvers of this stage.
    #[serde(rename = "primaryApprovers")]
    pub primary_approvers: Option<Vec<MicrosoftGraphSubjectSet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRbacResourceAction {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRbacResourceAction".to_string())]
    pub odata_type: String,
    #[serde(rename = "actionVerb")]
    pub action_verb: Option<String>,
    #[serde(rename = "authenticationContextId")]
    pub authentication_context_id: Option<String>,
    pub description: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "isAuthenticationContextSettable")]
    pub is_authentication_context_settable: Option<bool>,
    pub name: Option<String>,
    #[serde(rename = "resourceScopeId")]
    pub resource_scope_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRbacResourceNamespace {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRbacResourceNamespace".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub name: Option<String>,
    #[serde(rename = "resourceActions")]
    pub resource_actions: Option<Vec<MicrosoftGraphUnifiedRbacResourceAction>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRole {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The unified role definition ID of the directory role. Refer to unifiedRoleDefinition resource.
    #[serde(rename = "roleDefinitionId")]
    pub role_definition_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleAssignment".to_string())]
    pub odata_type: String,
    ///Read-only property with details of the app specific scope when the assignment scope is app specific. Containment entity. Supports $expand for the entitlement provider only.
    #[serde(rename = "appScope")]
    pub app_scope: Option<MicrosoftGraphAppScope>,
    ///Identifier of the app specific scope when the assignment scope is app specific. The scope of an assignment determines the set of resources for which the principal has been granted access. App scopes are scopes that are defined and understood by a resource application only. For the entitlement management provider, use this property to specify a catalog. For example, /AccessPackageCatalog/beedadfe-01d5-4025-910b-84abb9369997. Supports $filter (eq, in). For example, /roleManagement/entitlementManagement/roleAssignments?$filter=appScopeId eq '/AccessPackageCatalog/{catalog id}'.
    #[serde(rename = "appScopeId")]
    pub app_scope_id: Option<String>,
    pub condition: Option<String>,
    ///The directory object that is the scope of the assignment. Read-only. Supports $expand for the directory provider.
    #[serde(rename = "directoryScope")]
    pub directory_scope: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the directory object representing the scope of the assignment. The scope of an assignment determines the set of resources for which the principal has been granted access. Directory scopes are shared scopes stored in the directory that are understood by multiple applications, unlike app scopes that are defined and understood by a resource application only. Supports $filter (eq, in).
    #[serde(rename = "directoryScopeId")]
    pub directory_scope_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Referencing the assigned principal. Read-only. Supports $expand except for the Exchange provider.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the principal to which the assignment is granted. Supported principals are users, role-assignable groups, and service principals. Supports $filter (eq, in).
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///The roleDefinition the assignment is for. Supports $expand.
    #[serde(rename = "roleDefinition")]
    pub role_definition: Option<Box<MicrosoftGraphUnifiedRoleDefinition>>,
    ///Identifier of the unifiedRoleDefinition the assignment is for. Read-only. Supports $filter (eq, in).
    #[serde(rename = "roleDefinitionId")]
    pub role_definition_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleAssignmentSchedule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleAssignmentSchedule".to_string())]
    pub odata_type: String,
    ///If the request is from an eligible administrator to activate a role, this parameter shows the related eligible assignment for that activation. Otherwise, it's null. Supports $expand.
    #[serde(rename = "activatedUsing")]
    pub activated_using: Option<MicrosoftGraphUnifiedRoleEligibilitySchedule>,
    ///Read-only property with details of the app-specific scope when the role eligibility or assignment is scoped to an app. Nullable.
    #[serde(rename = "appScope")]
    pub app_scope: Option<MicrosoftGraphAppScope>,
    ///Identifier of the app-specific scope when the assignment or eligibility is scoped to an app. The scope of an assignment or eligibility determines the set of resources for which the principal has been granted access. App scopes are scopes that are defined and understood by this application only. Use / for tenant-wide app scopes. Use directoryScopeId to limit the scope to particular directory objects, for example, administrative units.
    #[serde(rename = "appScopeId")]
    pub app_scope_id: Option<String>,
    ///The type of the assignment that can either be Assigned or Activated. Supports $filter (eq, ne).
    #[serde(rename = "assignmentType")]
    pub assignment_type: Option<String>,
    ///When the schedule was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Identifier of the object through which this schedule was created.
    #[serde(rename = "createdUsing")]
    pub created_using: Option<String>,
    ///The directory object that is the scope of the role eligibility or assignment. Read-only.
    #[serde(rename = "directoryScope")]
    pub directory_scope: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the directory object representing the scope of the assignment or eligibility. The scope of an assignment or eligibility determines the set of resources for which the principal has been granted access. Directory scopes are shared scopes stored in the directory that are understood by multiple applications. Use / for tenant-wide scope. Use appScopeId to limit the scope to an application only.
    #[serde(rename = "directoryScopeId")]
    pub directory_scope_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///How the assignment is inherited. It can either be Inherited, Direct, or Group. It can further imply whether the unifiedRoleAssignmentSchedule can be managed by the caller. Supports $filter (eq, ne).
    #[serde(rename = "memberType")]
    pub member_type: Option<String>,
    ///When the schedule was last modified.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The principal that's getting a role assignment or that's eligible for a role through the request.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the principal that has been granted the role assignment or eligibility.
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.
    #[serde(rename = "roleDefinition")]
    pub role_definition: Option<Box<MicrosoftGraphUnifiedRoleDefinition>>,
    ///Identifier of the unifiedRoleDefinition object that is being assigned to the principal or that a principal is eligible for.
    #[serde(rename = "roleDefinitionId")]
    pub role_definition_id: Option<String>,
    ///The period of the role assignment. It can represent a single occurrence or multiple recurrences.
    #[serde(rename = "scheduleInfo")]
    pub schedule_info: Option<MicrosoftGraphRequestSchedule>,
    ///The status of the role assignment or eligibility request.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleAssignmentScheduleInstance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleAssignmentScheduleInstance".to_string())]
    pub odata_type: String,
    ///If the request is from an eligible administrator to activate a role, this parameter shows the related eligible assignment for that activation. Otherwise, it's null. Supports $expand and $select nested in $expand.
    #[serde(rename = "activatedUsing")]
    pub activated_using: Option<MicrosoftGraphUnifiedRoleEligibilityScheduleInstance>,
    ///Read-only property with details of the app-specific scope when the assignment or role eligibility is scoped to an app. Nullable.
    #[serde(rename = "appScope")]
    pub app_scope: Option<MicrosoftGraphAppScope>,
    ///Identifier of the app-specific scope when the assignment or role eligibility is scoped to an app. The scope of an assignment or role eligibility determines the set of resources for which the principal has been granted access. App scopes are scopes that are defined and understood by this application only. Use / for tenant-wide app scopes. Use directoryScopeId to limit the scope to particular directory objects, for example, administrative units.
    #[serde(rename = "appScopeId")]
    pub app_scope_id: Option<String>,
    ///The type of the assignment that can either be Assigned or Activated. Supports $filter (eq, ne).
    #[serde(rename = "assignmentType")]
    pub assignment_type: Option<String>,
    ///The directory object that is the scope of the assignment or role eligibility. Read-only.
    #[serde(rename = "directoryScope")]
    pub directory_scope: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the directory object representing the scope of the assignment or role eligibility. The scope of an assignment or role eligibility determines the set of resources for which the principal has been granted access. Directory scopes are shared scopes stored in the directory that are understood by multiple applications. Use / for tenant-wide scope. Use appScopeId to limit the scope to an application only.
    #[serde(rename = "directoryScopeId")]
    pub directory_scope_id: Option<String>,
    ///The end date of the schedule instance.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///How the assignment is inherited. It can either be Inherited, Direct, or Group. It can further imply whether the unifiedRoleAssignmentSchedule can be managed by the caller. Supports $filter (eq, ne).
    #[serde(rename = "memberType")]
    pub member_type: Option<String>,
    ///The principal that's getting a role assignment or role eligibility through the request.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the principal that has been granted the role assignment or that's eligible for a role.
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///The identifier of the role assignment in Microsoft Entra. Supports $filter (eq, ne).
    #[serde(rename = "roleAssignmentOriginId")]
    pub role_assignment_origin_id: Option<String>,
    ///The identifier of the unifiedRoleAssignmentSchedule object from which this instance was created. Supports $filter (eq, ne).
    #[serde(rename = "roleAssignmentScheduleId")]
    pub role_assignment_schedule_id: Option<String>,
    ///Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.
    #[serde(rename = "roleDefinition")]
    pub role_definition: Option<Box<MicrosoftGraphUnifiedRoleDefinition>>,
    ///Identifier of the unifiedRoleDefinition object that is being assigned to the principal or that the principal is eligible for.
    #[serde(rename = "roleDefinitionId")]
    pub role_definition_id: Option<String>,
    ///When this instance starts.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleAssignmentScheduleRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleAssignmentScheduleRequest".to_string())]
    pub odata_type: String,
    ///Represents the type of the operation on the role assignment request. The possible values are: adminAssign, adminUpdate, adminRemove, selfActivate, selfDeactivate, adminExtend, adminRenew, selfExtend, selfRenew, unknownFutureValue. adminAssign: For administrators to assign roles to principals.adminRemove: For administrators to remove principals from roles. adminUpdate: For administrators to change existing role assignments.adminExtend: For administrators to extend expiring assignments.adminRenew: For administrators to renew expired assignments.selfActivate: For principals to activate their assignments.selfDeactivate: For principals to deactivate their active assignments.selfExtend: For principals to request to extend their expiring assignments.selfRenew: For principals to request to renew their expired assignments.
    pub action: Option<MicrosoftGraphUnifiedRoleScheduleRequestActions>,
    ///If the request is from an eligible administrator to activate a role, this parameter will show the related eligible assignment for that activation. Otherwise, it's null. Supports $expand and $select nested in $expand.
    #[serde(rename = "activatedUsing")]
    pub activated_using: Option<MicrosoftGraphUnifiedRoleEligibilitySchedule>,
    ///Read-only property with details of the app-specific scope when the assignment is scoped to an app. Nullable. Supports $expand.
    #[serde(rename = "appScope")]
    pub app_scope: Option<MicrosoftGraphAppScope>,
    ///Identifier of the app-specific scope when the assignment is scoped to an app. The scope of an assignment determines the set of resources for which the principal has been granted access. App scopes are scopes that are defined and understood by this application only. Use / for tenant-wide app scopes. Use directoryScopeId to limit the scope to particular directory objects, for example, administrative units. Supports $filter (eq, ne, and on null values).
    #[serde(rename = "appScopeId")]
    pub app_scope_id: Option<String>,
    ///The identifier of the approval of the request.
    #[serde(rename = "approvalId")]
    pub approval_id: Option<String>,
    ///The request completion date time.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The principal that created the request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The request creation date time.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Free text field to define any custom data for the request. Not used.
    #[serde(rename = "customData")]
    pub custom_data: Option<String>,
    ///The directory object that is the scope of the assignment. Read-only. Supports $expand.
    #[serde(rename = "directoryScope")]
    pub directory_scope: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the directory object representing the scope of the assignment. The scope of an assignment determines the set of resources for which the principal has been granted access. Directory scopes are shared scopes stored in the directory that are understood by multiple applications. Use / for tenant-wide scope. Use appScopeId to limit the scope to an application only. Supports $filter (eq, ne, and on null values).
    #[serde(rename = "directoryScopeId")]
    pub directory_scope_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines whether the call is a validation or an actual call. Only set this property if you want to check whether an activation is subject to additional rules like MFA before actually submitting the request.
    #[serde(rename = "isValidationOnly")]
    pub is_validation_only: Option<bool>,
    ///A message provided by users and administrators when create they create the unifiedRoleAssignmentScheduleRequest object.
    pub justification: Option<String>,
    ///The principal that's getting a role assignment through the request. Supports $expand and $select nested in $expand for id only.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the principal that has been granted the assignment. Can be a user, role-assignable group, or a service principal. Supports $filter (eq, ne).
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///Detailed information for the unifiedRoleDefinition object that is referenced through the roleDefinitionId property. Supports $expand and $select nested in $expand.
    #[serde(rename = "roleDefinition")]
    pub role_definition: Option<Box<MicrosoftGraphUnifiedRoleDefinition>>,
    ///Identifier of the unifiedRoleDefinition object that is being assigned to the principal. Supports $filter (eq, ne).
    #[serde(rename = "roleDefinitionId")]
    pub role_definition_id: Option<String>,
    ///The period of the role assignment. Recurring schedules are currently unsupported.
    #[serde(rename = "scheduleInfo")]
    pub schedule_info: Option<MicrosoftGraphRequestSchedule>,
    ///The status of the request. Not nullable. The possible values are: Canceled, Denied, Failed, Granted, PendingAdminDecision, PendingApproval, PendingProvisioning, PendingScheduleCreation, Provisioned, Revoked, and ScheduleCreated. Not nullable.
    pub status: Option<String>,
    ///The schedule for an eligible role assignment that is referenced through the targetScheduleId property. Supports $expand and $select nested in $expand.
    #[serde(rename = "targetSchedule")]
    pub target_schedule: Option<MicrosoftGraphUnifiedRoleAssignmentSchedule>,
    ///Identifier of the schedule object that's linked to the assignment request. Supports $filter (eq, ne).
    #[serde(rename = "targetScheduleId")]
    pub target_schedule_id: Option<String>,
    ///Ticket details linked to the role assignment request including details of the ticket number and ticket system.
    #[serde(rename = "ticketInfo")]
    pub ticket_info: Option<MicrosoftGraphTicketInfo>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleDefinition {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleDefinition".to_string())]
    pub odata_type: String,
    ///The description for the unifiedRoleDefinition. Read-only when isBuiltIn is true.
    pub description: Option<String>,
    ///The display name for the unifiedRoleDefinition. Read-only when isBuiltIn is true. Required.  Supports $filter (eq, in).
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Read-only collection of role definitions that the given role definition inherits from. Only Microsoft Entra built-in roles (isBuiltIn is true) support this attribute. Supports $expand.
    #[serde(rename = "inheritsPermissionsFrom")]
    pub inherits_permissions_from: Option<Vec<MicrosoftGraphUnifiedRoleDefinition>>,
    ///Flag indicating whether the role definition is part of the default set included in Microsoft Entra or a custom definition. Read-only. Supports $filter (eq, in).
    #[serde(rename = "isBuiltIn")]
    pub is_built_in: Option<bool>,
    ///Flag indicating whether the role is enabled for assignment. If false the role is not available for assignment. Read-only when isBuiltIn is true.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///List of the scopes or permissions the role definition applies to. Currently only / is supported. Read-only when isBuiltIn is true. DO NOT USE. This will be deprecated soon. Attach scope to role assignment.
    #[serde(rename = "resourceScopes")]
    pub resource_scopes: Option<Vec<String>>,
    ///List of permissions included in the role. Read-only when isBuiltIn is true. Required.
    #[serde(rename = "rolePermissions")]
    pub role_permissions: Option<Vec<MicrosoftGraphUnifiedRolePermission>>,
    ///Custom template identifier that can be set when isBuiltIn is false but is read-only when isBuiltIn is true. This identifier is typically used if one needs an identifier to be the same across different directories.
    #[serde(rename = "templateId")]
    pub template_id: Option<String>,
    ///Indicates version of the role definition. Read-only when isBuiltIn is true.
    pub version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleEligibilitySchedule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleEligibilitySchedule".to_string())]
    pub odata_type: String,
    ///Read-only property with details of the app-specific scope when the role eligibility or assignment is scoped to an app. Nullable.
    #[serde(rename = "appScope")]
    pub app_scope: Option<MicrosoftGraphAppScope>,
    ///Identifier of the app-specific scope when the assignment or eligibility is scoped to an app. The scope of an assignment or eligibility determines the set of resources for which the principal has been granted access. App scopes are scopes that are defined and understood by this application only. Use / for tenant-wide app scopes. Use directoryScopeId to limit the scope to particular directory objects, for example, administrative units.
    #[serde(rename = "appScopeId")]
    pub app_scope_id: Option<String>,
    ///When the schedule was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Identifier of the object through which this schedule was created.
    #[serde(rename = "createdUsing")]
    pub created_using: Option<String>,
    ///The directory object that is the scope of the role eligibility or assignment. Read-only.
    #[serde(rename = "directoryScope")]
    pub directory_scope: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the directory object representing the scope of the assignment or eligibility. The scope of an assignment or eligibility determines the set of resources for which the principal has been granted access. Directory scopes are shared scopes stored in the directory that are understood by multiple applications. Use / for tenant-wide scope. Use appScopeId to limit the scope to an application only.
    #[serde(rename = "directoryScopeId")]
    pub directory_scope_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///How the role eligibility is inherited. It can either be Inherited, Direct, or Group. It can further imply whether the unifiedRoleEligibilitySchedule can be managed by the caller. Supports $filter (eq, ne).
    #[serde(rename = "memberType")]
    pub member_type: Option<String>,
    ///When the schedule was last modified.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The principal that's getting a role assignment or that's eligible for a role through the request.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the principal that has been granted the role assignment or eligibility.
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.
    #[serde(rename = "roleDefinition")]
    pub role_definition: Option<Box<MicrosoftGraphUnifiedRoleDefinition>>,
    ///Identifier of the unifiedRoleDefinition object that is being assigned to the principal or that a principal is eligible for.
    #[serde(rename = "roleDefinitionId")]
    pub role_definition_id: Option<String>,
    ///The period of the role eligibility.
    #[serde(rename = "scheduleInfo")]
    pub schedule_info: Option<MicrosoftGraphRequestSchedule>,
    ///The status of the role assignment or eligibility request.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleEligibilityScheduleInstance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleEligibilityScheduleInstance".to_string())]
    pub odata_type: String,
    ///Read-only property with details of the app-specific scope when the assignment or role eligibility is scoped to an app. Nullable.
    #[serde(rename = "appScope")]
    pub app_scope: Option<MicrosoftGraphAppScope>,
    ///Identifier of the app-specific scope when the assignment or role eligibility is scoped to an app. The scope of an assignment or role eligibility determines the set of resources for which the principal has been granted access. App scopes are scopes that are defined and understood by this application only. Use / for tenant-wide app scopes. Use directoryScopeId to limit the scope to particular directory objects, for example, administrative units.
    #[serde(rename = "appScopeId")]
    pub app_scope_id: Option<String>,
    ///The directory object that is the scope of the assignment or role eligibility. Read-only.
    #[serde(rename = "directoryScope")]
    pub directory_scope: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the directory object representing the scope of the assignment or role eligibility. The scope of an assignment or role eligibility determines the set of resources for which the principal has been granted access. Directory scopes are shared scopes stored in the directory that are understood by multiple applications. Use / for tenant-wide scope. Use appScopeId to limit the scope to an application only.
    #[serde(rename = "directoryScopeId")]
    pub directory_scope_id: Option<String>,
    ///The end date of the schedule instance.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///How the role eligibility is inherited. It can either be Inherited, Direct, or Group. It can further imply whether the unifiedRoleEligibilitySchedule can be managed by the caller. Supports $filter (eq, ne).
    #[serde(rename = "memberType")]
    pub member_type: Option<String>,
    ///The principal that's getting a role assignment or role eligibility through the request.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the principal that has been granted the role assignment or that's eligible for a role.
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.
    #[serde(rename = "roleDefinition")]
    pub role_definition: Option<Box<MicrosoftGraphUnifiedRoleDefinition>>,
    ///Identifier of the unifiedRoleDefinition object that is being assigned to the principal or that the principal is eligible for.
    #[serde(rename = "roleDefinitionId")]
    pub role_definition_id: Option<String>,
    ///The identifier of the unifiedRoleEligibilitySchedule object from which this instance was created. Supports $filter (eq, ne).
    #[serde(rename = "roleEligibilityScheduleId")]
    pub role_eligibility_schedule_id: Option<String>,
    ///When this instance starts.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleEligibilityScheduleRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleEligibilityScheduleRequest".to_string())]
    pub odata_type: String,
    ///Represents the type of operation on the role eligibility request. The possible values are: adminAssign, adminUpdate, adminRemove, selfActivate, selfDeactivate, adminExtend, adminRenew, selfExtend, selfRenew, unknownFutureValue. adminAssign: For administrators to assign eligible roles to principals.adminRemove: For administrators to remove eligible roles from principals. adminUpdate: For administrators to change existing role eligibilities.adminExtend: For administrators to extend expiring role eligibilities.adminRenew: For administrators to renew expired eligibilities.selfActivate: For users to activate their assignments.selfDeactivate: For users to deactivate their active assignments.selfExtend: For users to request to extend their expiring assignments.selfRenew: For users to request to renew their expired assignments.
    pub action: Option<MicrosoftGraphUnifiedRoleScheduleRequestActions>,
    ///Read-only property with details of the app-specific scope when the role eligibility is scoped to an app. Nullable. Supports $expand.
    #[serde(rename = "appScope")]
    pub app_scope: Option<MicrosoftGraphAppScope>,
    ///Identifier of the app-specific scope when the role eligibility is scoped to an app. The scope of a role eligibility determines the set of resources for which the principal is eligible to access. App scopes are scopes that are defined and understood by this application only. Use / for tenant-wide app scopes. Use directoryScopeId to limit the scope to particular directory objects, for example, administrative units. Supports $filter (eq, ne, and on null values).
    #[serde(rename = "appScopeId")]
    pub app_scope_id: Option<String>,
    ///The identifier of the approval of the request.
    #[serde(rename = "approvalId")]
    pub approval_id: Option<String>,
    ///The request completion date time.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The principal that created the request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The request creation date time.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Free text field to define any custom data for the request. Not used.
    #[serde(rename = "customData")]
    pub custom_data: Option<String>,
    ///The directory object that is the scope of the role eligibility. Read-only. Supports $expand.
    #[serde(rename = "directoryScope")]
    pub directory_scope: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the directory object representing the scope of the role eligibility. The scope of a role eligibility determines the set of resources for which the principal has been granted access. Directory scopes are shared scopes stored in the directory that are understood by multiple applications. Use / for tenant-wide scope. Use appScopeId to limit the scope to an application only. Supports $filter (eq, ne, and on null values).
    #[serde(rename = "directoryScopeId")]
    pub directory_scope_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines whether the call is a validation or an actual call. Only set this property if you want to check whether an activation is subject to additional rules like MFA before actually submitting the request.
    #[serde(rename = "isValidationOnly")]
    pub is_validation_only: Option<bool>,
    ///A message provided by users and administrators when create they create the unifiedRoleEligibilityScheduleRequest object.
    pub justification: Option<String>,
    ///The principal that's getting a role eligibility through the request. Supports $expand.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the principal that has been granted the role eligibility. Can be a user or a role-assignable group. You can grant only active assignments service principals.Supports $filter (eq, ne).
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///Detailed information for the unifiedRoleDefinition object that is referenced through the roleDefinitionId property. Supports $expand.
    #[serde(rename = "roleDefinition")]
    pub role_definition: Option<Box<MicrosoftGraphUnifiedRoleDefinition>>,
    ///Identifier of the unifiedRoleDefinition object that is being assigned to the principal. Supports $filter (eq, ne).
    #[serde(rename = "roleDefinitionId")]
    pub role_definition_id: Option<String>,
    ///The period of the role eligibility. Recurring schedules are currently unsupported.
    #[serde(rename = "scheduleInfo")]
    pub schedule_info: Option<MicrosoftGraphRequestSchedule>,
    ///The status of the request. Not nullable. The possible values are: Canceled, Denied, Failed, Granted, PendingAdminDecision, PendingApproval, PendingProvisioning, PendingScheduleCreation, Provisioned, Revoked, and ScheduleCreated. Not nullable.
    pub status: Option<String>,
    ///The schedule for a role eligibility that is referenced through the targetScheduleId property. Supports $expand.
    #[serde(rename = "targetSchedule")]
    pub target_schedule: Option<MicrosoftGraphUnifiedRoleEligibilitySchedule>,
    ///Identifier of the schedule object that's linked to the eligibility request. Supports $filter (eq, ne).
    #[serde(rename = "targetScheduleId")]
    pub target_schedule_id: Option<String>,
    ///Ticket details linked to the role eligibility request including details of the ticket number and ticket system. Optional.
    #[serde(rename = "ticketInfo")]
    pub ticket_info: Option<MicrosoftGraphTicketInfo>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleManagementPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleManagementPolicy".to_string())]
    pub odata_type: String,
    ///Description for the policy.
    pub description: Option<String>,
    ///Display name for the policy.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The list of effective rules like approval rules and expiration rules evaluated based on inherited referenced rules. For example, if there is a tenant-wide policy to enforce enabling an approval rule, the effective rule will be to enable approval even if the policy has a rule to disable approval. Supports $expand.
    #[serde(rename = "effectiveRules")]
    pub effective_rules: Option<Vec<MicrosoftGraphUnifiedRoleManagementPolicyRule>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///This can only be set to true for a single tenant-wide policy which will apply to all scopes and roles. Set the scopeId to / and scopeType to Directory. Supports $filter (eq, ne).
    #[serde(rename = "isOrganizationDefault")]
    pub is_organization_default: Option<bool>,
    ///The identity who last modified the role setting.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentity>,
    ///The time when the role setting was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The collection of rules like approval rules and expiration rules. Supports $expand.
    pub rules: Option<Vec<MicrosoftGraphUnifiedRoleManagementPolicyRule>>,
    ///The identifier of the scope where the policy is created. Can be / for the tenant or a group ID. Required.
    #[serde(rename = "scopeId")]
    pub scope_id: Option<String>,
    ///The type of the scope where the policy is created. One of Directory, DirectoryRole, Group. Required.
    #[serde(rename = "scopeType")]
    pub scope_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleManagementPolicyApprovalRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleManagementPolicyApprovalRule".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The settings for approval of the role assignment.
    pub setting: Option<MicrosoftGraphApprovalSettings>,
    ///Defines details of scope that's targeted by role management policy rule. The details can include the principal type, the role assignment type, and actions affecting a role. Supports $filter (eq, ne).
    pub target: Option<MicrosoftGraphUnifiedRoleManagementPolicyRuleTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleManagementPolicyAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleManagementPolicyAssignment".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The policy that's associated with a policy assignment. Supports $expand and a nested $expand of the rules and effectiveRules relationships for the policy.
    pub policy: Option<MicrosoftGraphUnifiedRoleManagementPolicy>,
    ///The id of the policy. Inherited from entity.
    #[serde(rename = "policyId")]
    pub policy_id: Option<String>,
    ///For Microsoft Entra roles policy, it's the identifier of the role definition object where the policy applies. For PIM for Groups membership and ownership, it's either member or owner. Supports $filter (eq).
    #[serde(rename = "roleDefinitionId")]
    pub role_definition_id: Option<String>,
    ///The identifier of the scope where the policy is assigned. Can be / for the tenant or a group ID. Required.
    #[serde(rename = "scopeId")]
    pub scope_id: Option<String>,
    ///The type of the scope where the policy is assigned. One of Directory, DirectoryRole, Group. Required.
    #[serde(rename = "scopeType")]
    pub scope_type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleManagementPolicyAuthenticationContextRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.unifiedRoleManagementPolicyAuthenticationContextRule".to_string(

        )
    )]
    pub odata_type: String,
    ///The value of the authentication context claim.
    #[serde(rename = "claimValue")]
    pub claim_value: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Determines whether this rule is enabled.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Defines details of scope that's targeted by role management policy rule. The details can include the principal type, the role assignment type, and actions affecting a role. Supports $filter (eq, ne).
    pub target: Option<MicrosoftGraphUnifiedRoleManagementPolicyRuleTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleManagementPolicyEnablementRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleManagementPolicyEnablementRule".to_string())]
    pub odata_type: String,
    ///The collection of rules that are enabled for this policy rule. For example, MultiFactorAuthentication, Ticketing, and Justification.
    #[serde(rename = "enabledRules")]
    pub enabled_rules: Option<Vec<Option<String>>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Defines details of scope that's targeted by role management policy rule. The details can include the principal type, the role assignment type, and actions affecting a role. Supports $filter (eq, ne).
    pub target: Option<MicrosoftGraphUnifiedRoleManagementPolicyRuleTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleManagementPolicyExpirationRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleManagementPolicyExpirationRule".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether expiration is required or if it's a permanently active assignment or eligibility.
    #[serde(rename = "isExpirationRequired")]
    pub is_expiration_required: Option<bool>,
    ///The maximum duration allowed for eligibility or assignment that isn't permanent. Required when isExpirationRequired is true.
    #[serde(rename = "maximumDuration")]
    pub maximum_duration: Option<String>,
    ///Defines details of scope that's targeted by role management policy rule. The details can include the principal type, the role assignment type, and actions affecting a role. Supports $filter (eq, ne).
    pub target: Option<MicrosoftGraphUnifiedRoleManagementPolicyRuleTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleManagementPolicyNotificationRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.unifiedRoleManagementPolicyNotificationRule".to_string()
    )]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether a default recipient will receive the notification email.
    #[serde(rename = "isDefaultRecipientsEnabled")]
    pub is_default_recipients_enabled: Option<bool>,
    ///The level of notification. The possible values are None, Critical, All.
    #[serde(rename = "notificationLevel")]
    pub notification_level: Option<String>,
    ///The list of recipients of the email notifications.
    #[serde(rename = "notificationRecipients")]
    pub notification_recipients: Option<Vec<Option<String>>>,
    ///The type of notification. Only Email is supported.
    #[serde(rename = "notificationType")]
    pub notification_type: Option<String>,
    ///The type of recipient of the notification. The possible values are Requestor, Approver, Admin.
    #[serde(rename = "recipientType")]
    pub recipient_type: Option<String>,
    ///Defines details of scope that's targeted by role management policy rule. The details can include the principal type, the role assignment type, and actions affecting a role. Supports $filter (eq, ne).
    pub target: Option<MicrosoftGraphUnifiedRoleManagementPolicyRuleTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleManagementPolicyRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleManagementPolicyRule".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Defines details of scope that's targeted by role management policy rule. The details can include the principal type, the role assignment type, and actions affecting a role. Supports $filter (eq, ne).
    pub target: Option<MicrosoftGraphUnifiedRoleManagementPolicyRuleTarget>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleManagementPolicyRuleTarget {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The type of caller that's the target of the policy rule. Allowed values are: None, Admin, EndUser.
    pub caller: Option<String>,
    ///The list of role settings that are enforced and cannot be overridden by child scopes. Use All for all settings.
    #[serde(rename = "enforcedSettings")]
    pub enforced_settings: Option<Vec<Option<String>>>,
    ///The list of role settings that can be inherited by child scopes. Use All for all settings.
    #[serde(rename = "inheritableSettings")]
    pub inheritable_settings: Option<Vec<Option<String>>>,
    ///The role assignment type that's the target of policy rule. Allowed values are: Eligibility, Assignment.
    pub level: Option<String>,
    ///The role management operations that are the target of the policy rule. Allowed values are: All, Activate, Deactivate, Assign, Update, Remove, Extend, Renew.
    pub operations: Option<
        Vec<MicrosoftGraphUnifiedRoleManagementPolicyRuleTargetOperations>,
    >,
    #[serde(rename = "targetObjects")]
    pub target_objects: Option<Vec<MicrosoftGraphDirectoryObject>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUnifiedRoleManagementPolicyRuleTargetOperations {
    #[serde(rename = "all")]
    #[default]
    All,
    #[serde(rename = "activate")]
    Activate,
    #[serde(rename = "deactivate")]
    Deactivate,
    #[serde(rename = "assign")]
    Assign,
    #[serde(rename = "update")]
    Update,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "extend")]
    Extend,
    #[serde(rename = "renew")]
    Renew,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRolePermission {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Set of tasks that can be performed on a resource. Required.
    #[serde(rename = "allowedResourceActions")]
    pub allowed_resource_actions: Option<Vec<String>>,
    ///Optional constraints that must be met for the permission to be effective. Not supported for custom roles.
    pub condition: Option<String>,
    ///Set of tasks that may not be performed on a resource. Not yet supported.
    #[serde(rename = "excludedResourceActions")]
    pub excluded_resource_actions: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleScheduleBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleScheduleBase".to_string())]
    pub odata_type: String,
    ///Read-only property with details of the app-specific scope when the role eligibility or assignment is scoped to an app. Nullable.
    #[serde(rename = "appScope")]
    pub app_scope: Option<MicrosoftGraphAppScope>,
    ///Identifier of the app-specific scope when the assignment or eligibility is scoped to an app. The scope of an assignment or eligibility determines the set of resources for which the principal has been granted access. App scopes are scopes that are defined and understood by this application only. Use / for tenant-wide app scopes. Use directoryScopeId to limit the scope to particular directory objects, for example, administrative units.
    #[serde(rename = "appScopeId")]
    pub app_scope_id: Option<String>,
    ///When the schedule was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Identifier of the object through which this schedule was created.
    #[serde(rename = "createdUsing")]
    pub created_using: Option<String>,
    ///The directory object that is the scope of the role eligibility or assignment. Read-only.
    #[serde(rename = "directoryScope")]
    pub directory_scope: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the directory object representing the scope of the assignment or eligibility. The scope of an assignment or eligibility determines the set of resources for which the principal has been granted access. Directory scopes are shared scopes stored in the directory that are understood by multiple applications. Use / for tenant-wide scope. Use appScopeId to limit the scope to an application only.
    #[serde(rename = "directoryScopeId")]
    pub directory_scope_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When the schedule was last modified.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The principal that's getting a role assignment or that's eligible for a role through the request.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the principal that has been granted the role assignment or eligibility.
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.
    #[serde(rename = "roleDefinition")]
    pub role_definition: Option<Box<MicrosoftGraphUnifiedRoleDefinition>>,
    ///Identifier of the unifiedRoleDefinition object that is being assigned to the principal or that a principal is eligible for.
    #[serde(rename = "roleDefinitionId")]
    pub role_definition_id: Option<String>,
    ///The status of the role assignment or eligibility request.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedRoleScheduleInstanceBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedRoleScheduleInstanceBase".to_string())]
    pub odata_type: String,
    ///Read-only property with details of the app-specific scope when the assignment or role eligibility is scoped to an app. Nullable.
    #[serde(rename = "appScope")]
    pub app_scope: Option<MicrosoftGraphAppScope>,
    ///Identifier of the app-specific scope when the assignment or role eligibility is scoped to an app. The scope of an assignment or role eligibility determines the set of resources for which the principal has been granted access. App scopes are scopes that are defined and understood by this application only. Use / for tenant-wide app scopes. Use directoryScopeId to limit the scope to particular directory objects, for example, administrative units.
    #[serde(rename = "appScopeId")]
    pub app_scope_id: Option<String>,
    ///The directory object that is the scope of the assignment or role eligibility. Read-only.
    #[serde(rename = "directoryScope")]
    pub directory_scope: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the directory object representing the scope of the assignment or role eligibility. The scope of an assignment or role eligibility determines the set of resources for which the principal has been granted access. Directory scopes are shared scopes stored in the directory that are understood by multiple applications. Use / for tenant-wide scope. Use appScopeId to limit the scope to an application only.
    #[serde(rename = "directoryScopeId")]
    pub directory_scope_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The principal that's getting a role assignment or role eligibility through the request.
    pub principal: Option<MicrosoftGraphDirectoryObject>,
    ///Identifier of the principal that has been granted the role assignment or that's eligible for a role.
    #[serde(rename = "principalId")]
    pub principal_id: Option<String>,
    ///Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.
    #[serde(rename = "roleDefinition")]
    pub role_definition: Option<Box<MicrosoftGraphUnifiedRoleDefinition>>,
    ///Identifier of the unifiedRoleDefinition object that is being assigned to the principal or that the principal is eligible for.
    #[serde(rename = "roleDefinitionId")]
    pub role_definition_id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUnifiedRoleScheduleRequestActions {
    #[serde(rename = "adminAssign")]
    #[default]
    AdminAssign,
    #[serde(rename = "adminUpdate")]
    AdminUpdate,
    #[serde(rename = "adminRemove")]
    AdminRemove,
    #[serde(rename = "selfActivate")]
    SelfActivate,
    #[serde(rename = "selfDeactivate")]
    SelfDeactivate,
    #[serde(rename = "adminExtend")]
    AdminExtend,
    #[serde(rename = "adminRenew")]
    AdminRenew,
    #[serde(rename = "selfExtend")]
    SelfExtend,
    #[serde(rename = "selfRenew")]
    SelfRenew,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnifiedStorageQuota {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unifiedStorageQuota".to_string())]
    pub odata_type: String,
    pub deleted: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "manageWebUrl")]
    pub manage_web_url: Option<String>,
    pub remaining: Option<f64>,
    pub services: Option<Vec<MicrosoftGraphServiceStorageQuotaBreakdown>>,
    pub state: Option<String>,
    pub total: Option<f64>,
    pub used: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUnmuteParticipantOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.unmuteParticipantOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUpdateRecordingStatusOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.updateRecordingStatusOperation".to_string())]
    pub odata_type: String,
    ///Unique Client Context string. Max limit is 256 chars.
    #[serde(rename = "clientContext")]
    pub client_context: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The result information. Read-only.
    #[serde(rename = "resultInfo")]
    pub result_info: Option<MicrosoftGraphResultInfo>,
    pub status: Option<MicrosoftGraphOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUploadSession {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The date and time in UTC that the upload session expires. The complete file must be uploaded before this expiration time is reached. Each fragment uploaded during the session extends the expiration time.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A collection of byte ranges that the server is missing for the file. These ranges are zero indexed and of the format 'start-end' (for example '0-26' to indicate the first 27 bytes of the file). When uploading files as Outlook attachments, instead of a collection of ranges, this property always indicates a single value '{start}', the location in the file where the next upload should begin.
    #[serde(rename = "nextExpectedRanges")]
    pub next_expected_ranges: Option<Vec<Option<String>>>,
    ///The URL endpoint that accepts PUT requests for byte ranges of the file.
    #[serde(rename = "uploadUrl")]
    pub upload_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUriClickSecurityState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "clickAction")]
    pub click_action: Option<String>,
    #[serde(rename = "clickDateTime")]
    pub click_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub id: Option<String>,
    #[serde(rename = "sourceId")]
    pub source_id: Option<String>,
    #[serde(rename = "uriDomain")]
    pub uri_domain: Option<String>,
    pub verdict: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUrlAssessmentRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.urlAssessmentRequest".to_string())]
    pub odata_type: String,
    pub category: Option<MicrosoftGraphThreatCategory>,
    ///The content type of threat assessment. Possible values are: mail, url, file.
    #[serde(rename = "contentType")]
    pub content_type: Option<MicrosoftGraphThreatAssessmentContentType>,
    ///The threat assessment request creator.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(rename = "expectedAssessment")]
    pub expected_assessment: Option<MicrosoftGraphThreatExpectedAssessment>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The source of the threat assessment request. Possible values are: administrator.
    #[serde(rename = "requestSource")]
    pub request_source: Option<MicrosoftGraphThreatAssessmentRequestSource>,
    ///A collection of threat assessment results. Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.
    pub results: Option<Vec<MicrosoftGraphThreatAssessmentResult>>,
    ///The assessment process status. Possible values are: pending, completed.
    pub status: Option<MicrosoftGraphThreatAssessmentStatus>,
    ///The URL string.
    pub url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUsageDetails {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The date and time the resource was last accessed by the user. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastAccessedDateTime")]
    pub last_accessed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The date and time the resource was last modified by the user. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUsageRights {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "docEdit")]
    DocEdit,
    #[serde(rename = "edit")]
    Edit,
    #[serde(rename = "comment")]
    Comment,
    #[serde(rename = "export")]
    Export,
    #[serde(rename = "forward")]
    Forward,
    #[serde(rename = "owner")]
    Owner,
    #[serde(rename = "print")]
    Print,
    #[serde(rename = "reply")]
    Reply,
    #[serde(rename = "replyAll")]
    ReplyAll,
    #[serde(rename = "view")]
    View,
    #[serde(rename = "extract")]
    Extract,
    #[serde(rename = "viewRightsData")]
    ViewRightsData,
    #[serde(rename = "editRightsData")]
    EditRightsData,
    #[serde(rename = "objModel")]
    ObjModel,
    #[serde(rename = "accessDenied")]
    AccessDenied,
    #[serde(rename = "userDefinedProtectionTypeNotSupportedException")]
    UserDefinedProtectionTypeNotSupportedException,
    #[serde(rename = "encryptedProtectionTypeNotSupportedException")]
    EncryptedProtectionTypeNotSupportedException,
    #[serde(rename = "purviewClaimsChallengeNotSupportedException")]
    PurviewClaimsChallengeNotSupportedException,
    #[serde(rename = "exception")]
    Exception,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUsageRightsIncluded {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.usageRightsIncluded".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The email of owner label rights.
    #[serde(rename = "ownerEmail")]
    pub owner_email: Option<String>,
    ///The email of user with label user rights.
    #[serde(rename = "userEmail")]
    pub user_email: Option<String>,
    pub value: Option<MicrosoftGraphUsageRights>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUsedInsight {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.usedInsight".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Information about when the item was last viewed or modified by the user. Read-only.
    #[serde(rename = "lastUsed")]
    pub last_used: Option<MicrosoftGraphUsageDetails>,
    ///Used for navigating to the item that was used. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.
    pub resource: Option<MicrosoftGraphEntity>,
    ///Reference properties of the used document, such as the URL and type of the document. Read-only
    #[serde(rename = "resourceReference")]
    pub resource_reference: Option<MicrosoftGraphResourceReference>,
    ///Properties that you can use to visualize the document in your experience. Read-only
    #[serde(rename = "resourceVisualization")]
    pub resource_visualization: Option<MicrosoftGraphResourceVisualization>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUser {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.user".to_string())]
    pub odata_type: String,
    ///A freeform text entry field for the user to describe themselves. Returned only on $select.
    #[serde(rename = "aboutMe")]
    pub about_me: Option<String>,
    ///true if the account is enabled; otherwise, false. This property is required when a user is created. Returned only on $select. Supports $filter (eq, ne, not, and in).
    #[serde(rename = "accountEnabled")]
    pub account_enabled: Option<bool>,
    ///The user's activities across devices. Read-only. Nullable.
    pub activities: Option<Vec<MicrosoftGraphUserActivity>>,
    ///Sets the age group of the user. Allowed values: null, Minor, NotAdult, and Adult. For more information, see legal age group property definitions. Returned only on $select. Supports $filter (eq, ne, not, and in).
    #[serde(rename = "ageGroup")]
    pub age_group: Option<String>,
    ///The user's terms of use acceptance statuses. Read-only. Nullable.
    #[serde(rename = "agreementAcceptances")]
    pub agreement_acceptances: Option<Vec<MicrosoftGraphAgreementAcceptance>>,
    ///Represents the app roles a user is granted for an application. Supports $expand.
    #[serde(rename = "appRoleAssignments")]
    pub app_role_assignments: Option<Vec<MicrosoftGraphAppRoleAssignment>>,
    ///The licenses that are assigned to the user, including inherited (group-based) licenses. This property doesn't differentiate between directly assigned and inherited licenses. Use the licenseAssignmentStates property to identify the directly assigned and inherited licenses. Not nullable. Returned only on $select. Supports $filter (eq, not, /$count eq 0, /$count ne 0).
    #[serde(rename = "assignedLicenses")]
    pub assigned_licenses: Option<Vec<MicrosoftGraphAssignedLicense>>,
    ///The plans that are assigned to the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq and not).
    #[serde(rename = "assignedPlans")]
    pub assigned_plans: Option<Vec<MicrosoftGraphAssignedPlan>>,
    ///The authentication methods that are supported for the user.
    pub authentication: Option<MicrosoftGraphAuthentication>,
    #[serde(rename = "authorizationInfo")]
    pub authorization_info: Option<MicrosoftGraphAuthorizationInfo>,
    ///The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z. Returned only on $select.
    pub birthday: Option<chrono::DateTime<chrono::Utc>>,
    ///The telephone numbers for the user. NOTE: Although it's a string collection, only one number can be set for this property. Read-only for users synced from the on-premises directory. Returned by default. Supports $filter (eq, not, ge, le, startsWith).
    #[serde(rename = "businessPhones")]
    pub business_phones: Option<Vec<String>>,
    ///The user's primary calendar. Read-only.
    pub calendar: Option<Box<MicrosoftGraphCalendar>>,
    ///The user's calendar groups. Read-only. Nullable.
    #[serde(rename = "calendarGroups")]
    pub calendar_groups: Option<Vec<MicrosoftGraphCalendarGroup>>,
    ///The calendar view for the calendar. Read-only. Nullable.
    #[serde(rename = "calendarView")]
    pub calendar_view: Option<Vec<MicrosoftGraphEvent>>,
    ///The user's calendars. Read-only. Nullable.
    pub calendars: Option<Vec<MicrosoftGraphCalendar>>,
    pub chats: Option<Vec<MicrosoftGraphChat>>,
    ///The city where the user is located. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    pub city: Option<String>,
    #[serde(rename = "cloudClipboard")]
    pub cloud_clipboard: Option<MicrosoftGraphCloudClipboardRoot>,
    ///The name of the company that the user is associated with. This property can be useful for describing the company that a guest comes from. The maximum length is 64 characters.Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "companyName")]
    pub company_name: Option<String>,
    ///Sets whether consent was obtained for minors. Allowed values: null, Granted, Denied, and NotRequired. For more information, see legal age group property definitions. Returned only on $select. Supports $filter (eq, ne, not, and in).
    #[serde(rename = "consentProvidedForMinor")]
    pub consent_provided_for_minor: Option<String>,
    ///The user's contacts folders. Read-only. Nullable.
    #[serde(rename = "contactFolders")]
    pub contact_folders: Option<Vec<MicrosoftGraphContactFolder>>,
    ///The user's contacts. Read-only. Nullable.
    pub contacts: Option<Vec<MicrosoftGraphContact>>,
    ///The country or region where the user is located; for example, US or UK. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    pub country: Option<String>,
    ///The date and time the user was created, in ISO 8601 format and UTC. The value can't be modified and is automatically populated when the entity is created. Nullable. For on-premises users, the value represents when they were first created in Microsoft Entra ID. Property is null for some users created before June 2018 and on-premises users that were synced to Microsoft Entra ID before June 2018. Read-only. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Directory objects that the user created. Read-only. Nullable.
    #[serde(rename = "createdObjects")]
    pub created_objects: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Indicates whether the user account was created through one of the following methods:  As a regular school or work account (null). As an external account (Invitation). As a local account for an Azure Active Directory B2C tenant (LocalAccount). Through self-service sign-up by an internal user using email verification (EmailVerified). Through self-service sign-up by a guest signing up through a link that is part of a user flow (SelfServiceSignUp). Read-only.Returned only on $select. Supports $filter (eq, ne, not, in).
    #[serde(rename = "creationType")]
    pub creation_type: Option<String>,
    ///An open complex type that holds the value of a custom security attribute that is assigned to a directory object. Nullable. Returned only on $select. Supports $filter (eq, ne, not, startsWith). The filter value is case-sensitive. To read this property, the calling app must be assigned the CustomSecAttributeAssignment.Read.All permission. To write this property, the calling app must be assigned the CustomSecAttributeAssignment.ReadWrite.All permissions. To read or write this property in delegated scenarios, the admin must be assigned the Attribute Assignment Administrator role.
    #[serde(rename = "customSecurityAttributes")]
    pub custom_security_attributes: Option<MicrosoftGraphCustomSecurityAttributeValue>,
    ///The data security and governance settings for the user. Read-only. Nullable.
    #[serde(rename = "dataSecurityAndGovernance")]
    pub data_security_and_governance: Option<
        MicrosoftGraphUserDataSecurityAndGovernance,
    >,
    ///Date and time when this object was deleted. Always null when the object hasn't been deleted.
    #[serde(rename = "deletedDateTime")]
    pub deleted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The name of the department in which the user works. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, and eq on null values).
    pub department: Option<String>,
    ///The limit on the maximum number of devices that the user is permitted to enroll. Allowed values are 5 or 1000.
    #[serde(rename = "deviceEnrollmentLimit")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_enrollment_limit: Option<f64>,
    ///The list of troubleshooting events for this user.
    #[serde(rename = "deviceManagementTroubleshootingEvents")]
    pub device_management_troubleshooting_events: Option<
        Vec<MicrosoftGraphDeviceManagementTroubleshootingEvent>,
    >,
    ///The users and contacts that report to the user. (The users and contacts that have their manager property set to this user.) Read-only. Nullable. Supports $expand.
    #[serde(rename = "directReports")]
    pub direct_reports: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The name displayed in the address book for the user. This value is usually the combination of the user's first name, middle initial, and family name. This property is required when a user is created and it can't be cleared during updates. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values), $orderby, and $search.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The user's OneDrive. Read-only.
    pub drive: Option<Box<MicrosoftGraphDrive>>,
    ///A collection of drives available for this user. Read-only.
    pub drives: Option<Vec<MicrosoftGraphDrive>>,
    #[serde(rename = "employeeExperience")]
    pub employee_experience: Option<MicrosoftGraphEmployeeExperienceUser>,
    ///The date and time when the user was hired or will start work in a future hire. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).
    #[serde(rename = "employeeHireDate")]
    pub employee_hire_date: Option<chrono::DateTime<chrono::Utc>>,
    ///The employee identifier assigned to the user by the organization. The maximum length is 16 characters. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "employeeId")]
    pub employee_id: Option<String>,
    ///The date and time when the user left or will leave the organization. To read this property, the calling app must be assigned the User-LifeCycleInfo.Read.All permission. To write this property, the calling app must be assigned the User.Read.All and User-LifeCycleInfo.ReadWrite.All permissions. To read this property in delegated scenarios, the admin needs at least one of the following Microsoft Entra roles: Lifecycle Workflows Administrator (least privilege), Global Reader. To write this property in delegated scenarios, the admin needs the Global Administrator role. Supports $filter (eq, ne, not , ge, le, in). For more information, see Configure the employeeLeaveDateTime property for a user.
    #[serde(rename = "employeeLeaveDateTime")]
    pub employee_leave_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Represents organization data (for example, division and costCenter) associated with a user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).
    #[serde(rename = "employeeOrgData")]
    pub employee_org_data: Option<MicrosoftGraphEmployeeOrgData>,
    ///Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith).
    #[serde(rename = "employeeType")]
    pub employee_type: Option<String>,
    ///The user's events. Default is to show Events under the Default Calendar. Read-only. Nullable.
    pub events: Option<Vec<MicrosoftGraphEvent>>,
    ///The collection of open extensions defined for the user. Read-only. Supports $expand. Nullable.
    pub extensions: Option<Vec<MicrosoftGraphExtension>>,
    ///For a guest invited to the tenant using the invitation API, this property represents the invited user's invitation status. For invited users, the state can be PendingAcceptance or Accepted, or null for all other users. Returned only on $select. Supports $filter (eq, ne, not , in).
    #[serde(rename = "externalUserState")]
    pub external_user_state: Option<String>,
    ///Shows the timestamp for the latest change to the externalUserState property. Returned only on $select. Supports $filter (eq, ne, not , in).
    #[serde(rename = "externalUserStateChangeDateTime")]
    pub external_user_state_change_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The fax number of the user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "faxNumber")]
    pub fax_number: Option<String>,
    #[serde(rename = "followedSites")]
    pub followed_sites: Option<Vec<MicrosoftGraphSite>>,
    ///The given name (first name) of the user. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "givenName")]
    pub given_name: Option<String>,
    ///The hire date of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z. Returned only on $select.  Note: This property is specific to SharePoint in Microsoft 365. We recommend using the native employeeHireDate property to set and update hire date values using Microsoft Graph APIs.
    #[serde(rename = "hireDate")]
    pub hire_date: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the identities that can be used to sign in to this user account. Microsoft (also known as a local account), organizations, or social identity providers such as Facebook, Google, and Microsoft can provide identity and tie it to a user account. It might contain multiple items with the same signInType value. Returned only on $select.  Supports $filter (eq) with limitations.
    pub identities: Option<Vec<MicrosoftGraphObjectIdentity>>,
    ///The instant message voice-over IP (VOIP) session initiation protocol (SIP) addresses for the user. Read-only. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith).
    #[serde(rename = "imAddresses")]
    pub im_addresses: Option<Vec<Option<String>>>,
    ///Relevance classification of the user's messages based on explicit designations that override inferred relevance or importance.
    #[serde(rename = "inferenceClassification")]
    pub inference_classification: Option<MicrosoftGraphInferenceClassification>,
    ///Represents relationships between a user and items such as OneDrive for work or school documents, calculated using advanced analytics and machine learning techniques. Read-only. Nullable.
    pub insights: Option<MicrosoftGraphItemInsights>,
    ///A list for the user to describe their interests. Returned only on $select.
    pub interests: Option<Vec<Option<String>>>,
    ///true if the user is a member of a restricted management administrative unit. If not set, the default value is null and the default behavior is false. Read-only.  To manage a user who is a member of a restricted management administrative unit, the administrator or calling app must be assigned a Microsoft Entra role at the scope of the restricted management administrative unit. Returned only on $select.
    #[serde(rename = "isManagementRestricted")]
    pub is_management_restricted: Option<bool>,
    ///Don't use – reserved for future use.
    #[serde(rename = "isResourceAccount")]
    pub is_resource_account: Option<bool>,
    ///The user's job title. Maximum length is 128 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "jobTitle")]
    pub job_title: Option<String>,
    #[serde(rename = "joinedTeams")]
    pub joined_teams: Option<Vec<MicrosoftGraphTeam>>,
    ///The time when this Microsoft Entra user last changed their password or when their password was created, whichever date the latest action was performed. The date and time information uses ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned only on $select.
    #[serde(rename = "lastPasswordChangeDateTime")]
    pub last_password_change_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. Allowed values: null, Undefined,  MinorWithOutParentalConsent, MinorWithParentalConsent, MinorNoParentalConsentRequired, NotAdult, and Adult. For more information, see legal age group property definitions. Returned only on $select.
    #[serde(rename = "legalAgeGroupClassification")]
    pub legal_age_group_classification: Option<String>,
    ///State of license assignments for this user. Also indicates licenses that are directly assigned or the user inherited through group memberships. Read-only. Returned only on $select.
    #[serde(rename = "licenseAssignmentStates")]
    pub license_assignment_states: Option<Vec<MicrosoftGraphLicenseAssignmentState>>,
    ///A collection of this user's license details. Read-only.
    #[serde(rename = "licenseDetails")]
    pub license_details: Option<Vec<MicrosoftGraphLicenseDetails>>,
    ///The SMTP address for the user, for example, jeff@contoso.com. Changes to this property update the user's proxyAddresses collection to include the value as an SMTP address. This property can't contain accent characters.  NOTE: We don't recommend updating this property for Azure AD B2C user profiles. Use the otherMails property instead. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith, and eq on null values).
    pub mail: Option<String>,
    ///The user's mail folders. Read-only. Nullable.
    #[serde(rename = "mailFolders")]
    pub mail_folders: Option<Vec<MicrosoftGraphMailFolder>>,
    ///The mail alias for the user. This property must be specified when a user is created. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "mailNickname")]
    pub mail_nickname: Option<String>,
    ///Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale, and time zone. Returned only on $select.
    #[serde(rename = "mailboxSettings")]
    pub mailbox_settings: Option<MicrosoftGraphMailboxSettings>,
    ///Zero or more managed app registrations that belong to the user.
    #[serde(rename = "managedAppRegistrations")]
    pub managed_app_registrations: Option<Vec<MicrosoftGraphManagedAppRegistration>>,
    ///The managed devices associated with the user.
    #[serde(rename = "managedDevices")]
    pub managed_devices: Option<Vec<MicrosoftGraphManagedDevice>>,
    ///The user or contact that is this user's manager. Read-only. Supports $expand.
    pub manager: Option<MicrosoftGraphDirectoryObject>,
    ///The groups and directory roles that the user is a member of. Read-only. Nullable. Supports $expand.
    #[serde(rename = "memberOf")]
    pub member_of: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The messages in a mailbox or folder. Read-only. Nullable.
    pub messages: Option<Vec<MicrosoftGraphMessage>>,
    ///The primary cellular telephone number for the user. Read-only for users synced from the on-premises directory. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values) and $search.
    #[serde(rename = "mobilePhone")]
    pub mobile_phone: Option<String>,
    ///The URL for the user's site. Returned only on $select.
    #[serde(rename = "mySite")]
    pub my_site: Option<String>,
    #[serde(rename = "oauth2PermissionGrants")]
    pub oauth2permission_grants: Option<Vec<MicrosoftGraphOAuth2PermissionGrant>>,
    ///The office location in the user's place of business. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "officeLocation")]
    pub office_location: Option<String>,
    ///Contains the on-premises Active Directory distinguished name or DN. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select.
    #[serde(rename = "onPremisesDistinguishedName")]
    pub on_premises_distinguished_name: Option<String>,
    ///Contains the on-premises domainFQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select.
    #[serde(rename = "onPremisesDomainName")]
    pub on_premises_domain_name: Option<String>,
    ///Contains extensionAttributes1-15 for the user. These extension attributes are also known as Exchange custom attributes 1-15. Each attribute can store up to 1024 characters. For an onPremisesSyncEnabled user, the source of authority for this set of properties is the on-premises and is read-only. For a cloud-only user (where onPremisesSyncEnabled is false), these properties can be set during the creation or update of a user object.  For a cloud-only user previously synced from on-premises Active Directory, these properties are read-only in Microsoft Graph but can be fully managed through the Exchange Admin Center or the Exchange Online V2 module in PowerShell. Returned only on $select. Supports $filter (eq, ne, not, in).
    #[serde(rename = "onPremisesExtensionAttributes")]
    pub on_premises_extension_attributes: Option<
        MicrosoftGraphOnPremisesExtensionAttributes,
    >,
    ///This property is used to associate an on-premises Active Directory user account to their Microsoft Entra user object. This property must be specified when creating a new user account in the Graph if you're using a federated domain for the user's userPrincipalName (UPN) property. NOTE: The $ and _ characters can't be used when specifying this property. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in).
    #[serde(rename = "onPremisesImmutableId")]
    pub on_premises_immutable_id: Option<String>,
    ///Indicates the last time at which the object was synced with the on-premises directory; for example: 2013-02-16T03:04:54Z. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in).
    #[serde(rename = "onPremisesLastSyncDateTime")]
    pub on_premises_last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Errors when using Microsoft synchronization product during provisioning. Returned only on $select. Supports $filter (eq, not, ge, le).
    #[serde(rename = "onPremisesProvisioningErrors")]
    pub on_premises_provisioning_errors: Option<
        Vec<MicrosoftGraphOnPremisesProvisioningError>,
    >,
    ///Contains the on-premises samAccountName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith).
    #[serde(rename = "onPremisesSamAccountName")]
    pub on_premises_sam_account_name: Option<String>,
    ///Contains the on-premises security identifier (SID) for the user that was synchronized from on-premises to the cloud. Read-only. Returned only on $select. Supports $filter (eq including on null values).
    #[serde(rename = "onPremisesSecurityIdentifier")]
    pub on_premises_security_identifier: Option<String>,
    ///true if this user object is currently being synced from an on-premises Active Directory (AD); otherwise the user isn't being synced and can be managed in Microsoft Entra ID. Read-only. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values).
    #[serde(rename = "onPremisesSyncEnabled")]
    pub on_premises_sync_enabled: Option<bool>,
    ///Contains the on-premises userPrincipalName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith).
    #[serde(rename = "onPremisesUserPrincipalName")]
    pub on_premises_user_principal_name: Option<String>,
    pub onenote: Option<MicrosoftGraphOnenote>,
    ///Information about a meeting, including the URL used to join a meeting, the attendees list, and the description.
    #[serde(rename = "onlineMeetings")]
    pub online_meetings: Option<Vec<MicrosoftGraphOnlineMeeting>>,
    ///A list of other email addresses for the user; for example: ['bob@contoso.com', 'Robert@fabrikam.com']. Can store up to 250 values, each with a limit of 250 characters. NOTE: This property can't contain accent characters. Returned only on $select. Supports $filter (eq, not, ge, le, in, startsWith, endsWith, /$count eq 0, /$count ne 0).
    #[serde(rename = "otherMails")]
    pub other_mails: Option<Vec<String>>,
    pub outlook: Option<MicrosoftGraphOutlookUser>,
    ///Devices the user owns. Read-only. Nullable. Supports $expand and $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1).
    #[serde(rename = "ownedDevices")]
    pub owned_devices: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Directory objects the user owns. Read-only. Nullable. Supports $expand, $select nested in $expand, and $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1).
    #[serde(rename = "ownedObjects")]
    pub owned_objects: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///Specifies password policies for the user. This value is an enumeration with one possible value being DisableStrongPassword, which allows weaker passwords than the default policy to be specified. DisablePasswordExpiration can also be specified. The two might be specified together; for example: DisablePasswordExpiration, DisableStrongPassword. Returned only on $select. For more information on the default password policies, see Microsoft Entra password policies. Supports $filter (ne, not, and eq on null values).
    #[serde(rename = "passwordPolicies")]
    pub password_policies: Option<String>,
    ///Specifies the password profile for the user. The profile contains the user's password. This property is required when a user is created. The password in the profile must satisfy minimum requirements as specified by the passwordPolicies property. By default, a strong password is required. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). To update this property:  User-PasswordProfile.ReadWrite.All is the least privileged permission to update this property.  In delegated scenarios, the User Administrator Microsoft Entra role is the least privileged admin role supported to update this property for nonadmin users. Privileged Authentication Administrator is the least privileged role that's allowed to update this property for all administrators in the tenant. In general, the signed-in user must have a higher privileged administrator role as indicated in Who can reset passwords.  In app-only scenarios, the calling app must be assigned a supported permission and at least the User Administrator Microsoft Entra role.
    #[serde(rename = "passwordProfile")]
    pub password_profile: Option<MicrosoftGraphPasswordProfile>,
    ///A list for the user to enumerate their past projects. Returned only on $select.
    #[serde(rename = "pastProjects")]
    pub past_projects: Option<Vec<Option<String>>>,
    ///People that are relevant to the user. Read-only. Nullable.
    pub people: Option<Vec<MicrosoftGraphPerson>>,
    ///List all resource-specific permission grants of a user.
    #[serde(rename = "permissionGrants")]
    pub permission_grants: Option<Vec<MicrosoftGraphResourceSpecificPermissionGrant>>,
    ///The user's profile photo. Read-only.
    pub photo: Option<MicrosoftGraphProfilePhoto>,
    ///The collection of the user's profile photos in different sizes. Read-only.
    pub photos: Option<Vec<MicrosoftGraphProfilePhoto>>,
    ///Entry-point to the Planner resource that might exist for a user. Read-only.
    pub planner: Option<MicrosoftGraphPlannerUser>,
    ///The postal code for the user's postal address. The postal code is specific to the user's country or region. In the United States of America, this attribute contains the ZIP code. Maximum length is 40 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "postalCode")]
    pub postal_code: Option<String>,
    ///The preferred data location for the user. For more information, see OneDrive Online Multi-Geo.
    #[serde(rename = "preferredDataLocation")]
    pub preferred_data_location: Option<String>,
    ///The preferred language for the user. The preferred language format is based on RFC 4646. The name is a combination of an ISO 639 two-letter lowercase culture code associated with the language, and an ISO 3166 two-letter uppercase subculture code associated with the country or region. Example: 'en-US', or 'es-ES'. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values)
    #[serde(rename = "preferredLanguage")]
    pub preferred_language: Option<String>,
    ///The preferred name for the user. Not Supported. This attribute returns an empty string.Returned only on $select.
    #[serde(rename = "preferredName")]
    pub preferred_name: Option<String>,
    pub presence: Option<MicrosoftGraphPresence>,
    pub print: Option<Box<MicrosoftGraphUserPrint>>,
    ///The plans that are provisioned for the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le).
    #[serde(rename = "provisionedPlans")]
    pub provisioned_plans: Option<Vec<MicrosoftGraphProvisionedPlan>>,
    ///For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. Changes to the mail property update this collection to include the value as an SMTP address. For more information, see mail and proxyAddresses properties. The proxy address prefixed with SMTP (capitalized) is the primary proxy address, while those addresses prefixed with smtp are the secondary proxy addresses. For Azure AD B2C accounts, this property has a limit of 10 unique addresses. Read-only in Microsoft Graph; you can update this property only through the Microsoft 365 admin center. Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0).
    #[serde(rename = "proxyAddresses")]
    pub proxy_addresses: Option<Vec<String>>,
    ///Devices that are registered for the user. Read-only. Nullable. Supports $expand and returns up to 100 objects.
    #[serde(rename = "registeredDevices")]
    pub registered_devices: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///A list for the user to enumerate their responsibilities. Returned only on $select.
    pub responsibilities: Option<Vec<Option<String>>>,
    ///A list for the user to enumerate the schools they attended. Returned only on $select.
    pub schools: Option<Vec<Option<String>>>,
    #[serde(rename = "scopedRoleMemberOf")]
    pub scoped_role_member_of: Option<Vec<MicrosoftGraphScopedRoleMembership>>,
    ///Security identifier (SID) of the user, used in Windows scenarios. Read-only. Returned by default. Supports $select and $filter (eq, not, ge, le, startsWith).
    #[serde(rename = "securityIdentifier")]
    pub security_identifier: Option<String>,
    ///Errors published by a federated service describing a nontransient, service-specific error regarding the properties or link from a user object.  Supports $filter (eq, not, for isResolved and serviceInstance).
    #[serde(rename = "serviceProvisioningErrors")]
    pub service_provisioning_errors: Option<Vec<MicrosoftGraphServiceProvisioningError>>,
    pub settings: Option<MicrosoftGraphUserSettings>,
    ///Do not use in Microsoft Graph. Manage this property through the Microsoft 365 admin center instead. Represents whether the user should be included in the Outlook global address list. See Known issue.
    #[serde(rename = "showInAddressList")]
    pub show_in_address_list: Option<bool>,
    ///Get the last signed-in date and request ID of the sign-in for a given user. Read-only.Returned only on $select. Supports $filter (eq, ne, not, ge, le) but not with any other filterable properties. Note: Details for this property require a Microsoft Entra ID P1 or P2 license and the AuditLog.Read.All permission.This property isn't returned for a user who never signed in or last signed in before April 2020.
    #[serde(rename = "signInActivity")]
    pub sign_in_activity: Option<MicrosoftGraphSignInActivity>,
    ///Any refresh tokens or session tokens (session cookies) issued before this time are invalid. Applications get an error when using an invalid refresh or session token to acquire a delegated access token (to access APIs such as Microsoft Graph). If this happens, the application needs to acquire a new refresh token by requesting the authorized endpoint. Read-only. Use revokeSignInSessions to reset. Returned only on $select.
    #[serde(rename = "signInSessionsValidFromDateTime")]
    pub sign_in_sessions_valid_from_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A list for the user to enumerate their skills. Returned only on $select.
    pub skills: Option<Vec<Option<String>>>,
    ///The identifier that relates the user to the working time schedule triggers. Read-Only. Nullable
    pub solutions: Option<MicrosoftGraphUserSolutionRoot>,
    ///The users and groups responsible for this guest's privileges in the tenant and keeping the guest's information and access updated. (HTTP Methods: GET, POST, DELETE.). Supports $expand.
    pub sponsors: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///The state or province in the user's address. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    pub state: Option<String>,
    ///The street address of the user's place of business. Maximum length is 1,024 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "streetAddress")]
    pub street_address: Option<String>,
    ///The user's surname (family name or last name). Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    pub surname: Option<String>,
    ///A container for Microsoft Teams features available for the user. Read-only. Nullable.
    pub teamwork: Option<MicrosoftGraphUserTeamwork>,
    ///Represents the To Do services available to a user.
    pub todo: Option<MicrosoftGraphTodo>,
    ///The groups, including nested groups, and directory roles that a user is a member of. Nullable.
    #[serde(rename = "transitiveMemberOf")]
    pub transitive_member_of: Option<Vec<MicrosoftGraphDirectoryObject>>,
    ///A two-letter country code (ISO standard 3166). Required for users that are assigned licenses due to legal requirements to check for availability of services in countries/regions. Examples include: US, JP, and GB. Not nullable. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
    #[serde(rename = "usageLocation")]
    pub usage_location: Option<String>,
    ///The user principal name (UPN) of the user. The UPN is an Internet-style sign-in name for the user based on the Internet standard RFC 822. By convention, this value should map to the user's email name. The general format is alias@domain, where the domain must be present in the tenant's collection of verified domains. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of organization.NOTE: This property can't contain accent characters. Only the following characters are allowed A - Z, a - z, 0 - 9, ' . - _ ! # ^ ~. For the complete list of allowed characters, see username policies. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith) and $orderby.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
    ///A string value that can be used to classify user types in your directory. The possible values are Member and Guest. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). NOTE: For more information about the permissions for members and guests, see What are the default user permissions in Microsoft Entra ID?
    #[serde(rename = "userType")]
    pub user_type: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserAccountSecurityType {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "power")]
    Power,
    #[serde(rename = "administrator")]
    Administrator,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserActivity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userActivity".to_string())]
    pub odata_type: String,
    ///Required. URL used to launch the activity in the best native experience represented by the appId. Might launch a web-based app if no native app exists.
    #[serde(rename = "activationUrl")]
    pub activation_url: Option<String>,
    ///Required. URL for the domain representing the cross-platform identity mapping for the app. Mapping is stored either as a JSON file hosted on the domain or configurable via Windows Dev Center. The JSON file is named cross-platform-app-identifiers and is hosted at root of your HTTPS domain, either at the top level domain or include a sub domain. For example: https://contoso.com or https://myapp.contoso.com but NOT https://myapp.contoso.com/somepath. You must have a unique file and domain (or sub domain) per cross-platform app identity. For example, a separate file and domain is needed for Word vs. PowerPoint.
    #[serde(rename = "activitySourceHost")]
    pub activity_source_host: Option<String>,
    ///Required. The unique activity ID in the context of the app - supplied by caller and immutable thereafter.
    #[serde(rename = "appActivityId")]
    pub app_activity_id: Option<String>,
    ///Optional. Short text description of the app used to generate the activity for use in cases when the app is not installed on the user’s local device.
    #[serde(rename = "appDisplayName")]
    pub app_display_name: Option<String>,
    ///Optional. A custom piece of data - JSON-LD extensible description of content according to schema.org syntax.
    #[serde(rename = "contentInfo")]
    pub content_info: Option<serde_json::Value>,
    ///Optional. Used in the event the content can be rendered outside of a native or web-based app experience (for example, a pointer to an item in an RSS feed).
    #[serde(rename = "contentUrl")]
    pub content_url: Option<String>,
    ///Set by the server. DateTime in UTC when the object was created on the server.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Set by the server. DateTime in UTC when the object expired on the server.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Optional. URL used to launch the activity in a web-based app, if available.
    #[serde(rename = "fallbackUrl")]
    pub fallback_url: Option<String>,
    ///Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.
    #[serde(rename = "historyItems")]
    pub history_items: Option<Vec<MicrosoftGraphActivityHistoryItem>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Set by the server. DateTime in UTC when the object was modified on the server.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored.
    pub status: Option<MicrosoftGraphStatus>,
    ///Optional. The timezone in which the user's device used to generate the activity was located at activity creation time; values supplied as Olson IDs in order to support cross-platform representation.
    #[serde(rename = "userTimezone")]
    pub user_timezone: Option<String>,
    #[serde(rename = "visualElements")]
    pub visual_elements: Option<MicrosoftGraphVisualInfo>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserActivityType {
    #[serde(rename = "uploadText")]
    #[default]
    UploadText,
    #[serde(rename = "uploadFile")]
    UploadFile,
    #[serde(rename = "downloadText")]
    DownloadText,
    #[serde(rename = "downloadFile")]
    DownloadFile,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserAttributeValuesItem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Determines whether the value is set as the default.
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    ///The display name of the property displayed to the user in the user flow.
    pub name: Option<String>,
    ///The value that is set when this item is selected.
    pub value: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserConsentRequest {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userConsentRequest".to_string())]
    pub odata_type: String,
    ///Approval decisions associated with a request.
    pub approval: Option<MicrosoftGraphApproval>,
    ///The identifier of the approval of the request.
    #[serde(rename = "approvalId")]
    pub approval_id: Option<String>,
    ///The request completion date time.
    #[serde(rename = "completedDateTime")]
    pub completed_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The principal that created the request.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The request creation date time.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Free text field to define any custom data for the request. Not used.
    #[serde(rename = "customData")]
    pub custom_data: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user's justification for requiring access to the app. Supports $filter (eq only) and $orderby.
    pub reason: Option<String>,
    ///The status of the request. Not nullable. The possible values are: Canceled, Denied, Failed, Granted, PendingAdminDecision, PendingApproval, PendingProvisioning, PendingScheduleCreation, Provisioned, Revoked, and ScheduleCreated. Not nullable.
    pub status: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserDataSecurityAndGovernance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userDataSecurityAndGovernance".to_string())]
    pub odata_type: String,
    ///Container for activity logs (content processing and audit) related to this user. ContainsTarget: true.
    pub activities: Option<MicrosoftGraphActivitiesContainer>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "protectionScopes")]
    pub protection_scopes: Option<MicrosoftGraphUserProtectionScopeContainer>,
    #[serde(rename = "sensitivityLabels")]
    pub sensitivity_labels: Option<Vec<MicrosoftGraphSensitivityLabel>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserDefaultAuthenticationMethod {
    #[serde(rename = "push")]
    #[default]
    Push,
    #[serde(rename = "oath")]
    Oath,
    #[serde(rename = "voiceMobile")]
    VoiceMobile,
    #[serde(rename = "voiceAlternateMobile")]
    VoiceAlternateMobile,
    #[serde(rename = "voiceOffice")]
    VoiceOffice,
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails".to_string(

        )
    )]
    pub odata_type: String,
    ///The number of crashes for the app. Valid values -2147483648 to 2147483647
    #[serde(rename = "appCrashCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub app_crash_count: Option<f64>,
    ///The friendly name of the application.
    #[serde(rename = "appDisplayName")]
    pub app_display_name: Option<String>,
    ///The name of the application.
    #[serde(rename = "appName")]
    pub app_name: Option<String>,
    ///The publisher of the application.
    #[serde(rename = "appPublisher")]
    pub app_publisher: Option<String>,
    ///The version of the application.
    #[serde(rename = "appVersion")]
    pub app_version: Option<String>,
    ///The total number of devices that have reported one or more application crashes for this application and version. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "deviceCountWithCrashes")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_count_with_crashes: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When TRUE, indicates the version of application is the latest version for that application that is in use. When FALSE, indicates the version is not the latest version. FALSE by default. Supports: $select, $OrderBy.
    #[serde(rename = "isLatestUsedVersion")]
    pub is_latest_used_version: Option<bool>,
    ///When TRUE, indicates the version of application is the most used version for that application. When FALSE, indicates the version is not the most used version. FALSE by default. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "isMostUsedVersion")]
    pub is_most_used_version: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId".to_string(

        )
    )]
    pub odata_type: String,
    ///The number of crashes for the app. Valid values -2147483648 to 2147483647
    #[serde(rename = "appCrashCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub app_crash_count: Option<f64>,
    ///The friendly name of the application.
    #[serde(rename = "appDisplayName")]
    pub app_display_name: Option<String>,
    ///The name of the application.
    #[serde(rename = "appName")]
    pub app_name: Option<String>,
    ///The publisher of the application.
    #[serde(rename = "appPublisher")]
    pub app_publisher: Option<String>,
    ///The version of the application.
    #[serde(rename = "appVersion")]
    pub app_version: Option<String>,
    ///The name of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceDisplayName")]
    pub device_display_name: Option<String>,
    ///The Intune device id of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time when the statistics were last computed. The value cannot be modified and is automatically populated when the statistics are computed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2022 would look like this: '2022-01-01T00:00:00Z'. Returned by default. Read-only.
    #[serde(rename = "processedDateTime")]
    pub processed_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsAppHealthAppPerformanceByOsversion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsAppHealthAppPerformanceByOSVersion".to_string(

        )
    )]
    pub odata_type: String,
    ///The number of devices where the application has been active. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "activeDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub active_device_count: Option<f64>,
    ///The number of crashes for the application. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "appCrashCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub app_crash_count: Option<f64>,
    ///The friendly name of the application. Possible values are: Outlook, Excel. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "appDisplayName")]
    pub app_display_name: Option<String>,
    ///The name of the application. Possible values are: outlook.exe, excel.exe. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "appName")]
    pub app_name: Option<String>,
    ///The publisher of the application. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "appPublisher")]
    pub app_publisher: Option<String>,
    ///The total usage time of the application in minutes. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "appUsageDuration")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub app_usage_duration: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The mean time to failure for the application in minutes. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "meanTimeToFailureInMinutes")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub mean_time_to_failure_in_minutes: Option<f64>,
    ///The OS build number of the application. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "osBuildNumber")]
    pub os_build_number: Option<String>,
    ///The OS version of the application. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "osVersion")]
    pub os_version: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsAppHealthApplicationPerformance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsAppHealthApplicationPerformance".to_string(

        )
    )]
    pub odata_type: String,
    ///The health score of the application. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "activeDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub active_device_count: Option<f64>,
    ///The number of crashes for the application. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "appCrashCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub app_crash_count: Option<f64>,
    ///The friendly name of the application. Possible values are: Outlook, Excel. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "appDisplayName")]
    pub app_display_name: Option<String>,
    ///The number of hangs for the application. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "appHangCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub app_hang_count: Option<f64>,
    ///The health score of the application. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "appHealthScore")]
    pub app_health_score: Option<
        MicrosoftGraphUserExperienceAnalyticsAppHealthApplicationPerformanceAppHealthScore,
    >,
    ///The name of the application. Possible values are: outlook.exe, excel.exe. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "appName")]
    pub app_name: Option<String>,
    ///The publisher of the application. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "appPublisher")]
    pub app_publisher: Option<String>,
    ///The total usage time of the application in minutes. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "appUsageDuration")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub app_usage_duration: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The mean time to failure for the application in minutes. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "meanTimeToFailureInMinutes")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub mean_time_to_failure_in_minutes: Option<f64>,
}
///The health score of the application. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsAppHealthApplicationPerformanceAppHealthScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsAppHealthDeviceModelPerformance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsAppHealthDeviceModelPerformance".to_string(

        )
    )]
    pub odata_type: String,
    ///The number of active devices for the model. Valid values 0 to 2147483647. Supports: $filter, $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "activeDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub active_device_count: Option<f64>,
    ///The manufacturer name of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceManufacturer")]
    pub device_manufacturer: Option<String>,
    ///The model name of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceModel")]
    pub device_model: Option<String>,
    #[serde(rename = "healthStatus")]
    pub health_status: Option<MicrosoftGraphUserExperienceAnalyticsHealthState>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The mean time to failure for the application in minutes. Valid values 0 to 2147483647. Supports: $filter, $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "meanTimeToFailureInMinutes")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub mean_time_to_failure_in_minutes: Option<f64>,
    ///The application health score of the device model. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "modelAppHealthScore")]
    pub model_app_health_score: Option<
        MicrosoftGraphUserExperienceAnalyticsAppHealthDeviceModelPerformanceModelAppHealthScore,
    >,
}
///The application health score of the device model. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsAppHealthDeviceModelPerformanceModelAppHealthScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsAppHealthDevicePerformance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsAppHealthDevicePerformance".to_string()
    )]
    pub odata_type: String,
    ///The number of application crashes for the device. Valid values 0 to 2147483647. Supports: $filter, $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "appCrashCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub app_crash_count: Option<f64>,
    ///The number of application hangs for the device. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "appHangCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub app_hang_count: Option<f64>,
    ///The number of distinct application crashes for the device. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "crashedAppCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub crashed_app_count: Option<f64>,
    ///The application health score of the device. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "deviceAppHealthScore")]
    pub device_app_health_score: Option<
        MicrosoftGraphUserExperienceAnalyticsAppHealthDevicePerformanceDeviceAppHealthScore,
    >,
    ///The name of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceDisplayName")]
    pub device_display_name: Option<String>,
    ///The Intune device id of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///The manufacturer name of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceManufacturer")]
    pub device_manufacturer: Option<String>,
    ///The model name of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceModel")]
    pub device_model: Option<String>,
    #[serde(rename = "healthStatus")]
    pub health_status: Option<MicrosoftGraphUserExperienceAnalyticsHealthState>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The mean time to failure for the application in minutes. Valid values 0 to 2147483647. Supports: $filter, $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "meanTimeToFailureInMinutes")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub mean_time_to_failure_in_minutes: Option<f64>,
    ///The date and time when the statistics were last computed. The value cannot be modified and is automatically populated when the statistics are computed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2022 would look like this: '2022-01-01T00:00:00Z'. Returned by default. Read-only.
    #[serde(rename = "processedDateTime")]
    pub processed_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsAppHealthDevicePerformanceDetails {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsAppHealthDevicePerformanceDetails".to_string(

        )
    )]
    pub odata_type: String,
    ///The friendly name of the application for which the event occurred. Possible values are: outlook.exe, excel.exe. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "appDisplayName")]
    pub app_display_name: Option<String>,
    ///The publisher of the application. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "appPublisher")]
    pub app_publisher: Option<String>,
    ///The version of the application. Possible values are: 1.0.0.1, 75.65.23.9. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "appVersion")]
    pub app_version: Option<String>,
    ///The name of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceDisplayName")]
    pub device_display_name: Option<String>,
    ///The Intune device id of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///The time the event occurred. The value cannot be modified and is automatically populated when the statistics are computed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2022 would look like this: '2022-01-01T00:00:00Z'. Returned by default. Read-only.
    #[serde(rename = "eventDateTime")]
    pub event_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The type of the event. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "eventType")]
    pub event_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
///The application health score of the device. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsAppHealthDevicePerformanceDeviceAppHealthScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsAppHealthOsversionPerformance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsAppHealthOSVersionPerformance".to_string(

        )
    )]
    pub odata_type: String,
    ///The number of active devices for the OS version. Valid values 0 to 2147483647. Supports: $filter, $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "activeDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub active_device_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The mean time to failure for the application in minutes. Valid values 0 to 2147483647. Supports: $filter, $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "meanTimeToFailureInMinutes")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub mean_time_to_failure_in_minutes: Option<f64>,
    ///The OS build number installed on the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "osBuildNumber")]
    pub os_build_number: Option<String>,
    ///The OS version installed on the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "osVersion")]
    pub os_version: Option<String>,
    ///The application health score of the OS version. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "osVersionAppHealthScore")]
    pub os_version_app_health_score: Option<
        MicrosoftGraphUserExperienceAnalyticsAppHealthOsversionPerformanceOsVersionAppHealthScore,
    >,
}
///The application health score of the OS version. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsAppHealthOsversionPerformanceOsVersionAppHealthScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsBaseline {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userExperienceAnalyticsBaseline".to_string())]
    pub odata_type: String,
    ///The scores and insights for the application health metrics.
    #[serde(rename = "appHealthMetrics")]
    pub app_health_metrics: Option<MicrosoftGraphUserExperienceAnalyticsCategory>,
    ///The scores and insights for the battery health metrics.
    #[serde(rename = "batteryHealthMetrics")]
    pub battery_health_metrics: Option<MicrosoftGraphUserExperienceAnalyticsCategory>,
    ///The scores and insights for the best practices metrics.
    #[serde(rename = "bestPracticesMetrics")]
    pub best_practices_metrics: Option<MicrosoftGraphUserExperienceAnalyticsCategory>,
    ///The date the custom baseline was created. The value cannot be modified and is automatically populated when the baseline is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned by default.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The scores and insights for the device boot performance metrics.
    #[serde(rename = "deviceBootPerformanceMetrics")]
    pub device_boot_performance_metrics: Option<
        MicrosoftGraphUserExperienceAnalyticsCategory,
    >,
    ///The name of the baseline.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When TRUE, indicates the current baseline is the commercial median baseline. When FALSE, indicates it is a custom baseline. FALSE by default.
    #[serde(rename = "isBuiltIn")]
    pub is_built_in: Option<bool>,
    ///The scores and insights for the reboot analytics metrics.
    #[serde(rename = "rebootAnalyticsMetrics")]
    pub reboot_analytics_metrics: Option<MicrosoftGraphUserExperienceAnalyticsCategory>,
    ///The scores and insights for the resource performance metrics.
    #[serde(rename = "resourcePerformanceMetrics")]
    pub resource_performance_metrics: Option<
        MicrosoftGraphUserExperienceAnalyticsCategory,
    >,
    ///The scores and insights for the work from anywhere metrics.
    #[serde(rename = "workFromAnywhereMetrics")]
    pub work_from_anywhere_metrics: Option<
        MicrosoftGraphUserExperienceAnalyticsCategory,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsCategory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userExperienceAnalyticsCategory".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The insights for the category. Read-only.
    pub insights: Option<Vec<MicrosoftGraphUserExperienceAnalyticsInsight>>,
    ///The metric values for the user experience analytics category. Read-only.
    #[serde(rename = "metricValues")]
    pub metric_values: Option<Vec<MicrosoftGraphUserExperienceAnalyticsMetric>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsDevicePerformance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userExperienceAnalyticsDevicePerformance".to_string())]
    pub odata_type: String,
    ///Average (mean) number of Blue Screens per device in the last 30 days. Valid values 0 to 9999999
    #[serde(rename = "averageBlueScreens")]
    pub average_blue_screens: Option<
        MicrosoftGraphUserExperienceAnalyticsDevicePerformanceAverageBlueScreens,
    >,
    ///Average (mean) number of Restarts per device in the last 30 days. Valid values 0 to 9999999
    #[serde(rename = "averageRestarts")]
    pub average_restarts: Option<
        MicrosoftGraphUserExperienceAnalyticsDevicePerformanceAverageRestarts,
    >,
    ///Number of Blue Screens in the last 30 days. Valid values 0 to 9999999
    #[serde(rename = "blueScreenCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub blue_screen_count: Option<f64>,
    ///The user experience analytics device boot score.
    #[serde(rename = "bootScore")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub boot_score: Option<f64>,
    ///The user experience analytics device core boot time in milliseconds.
    #[serde(rename = "coreBootTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub core_boot_time_in_ms: Option<f64>,
    ///The user experience analytics device core login time in milliseconds.
    #[serde(rename = "coreLoginTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub core_login_time_in_ms: Option<f64>,
    ///User experience analytics summarized device count.
    #[serde(rename = "deviceCount")]
    pub device_count: Option<f64>,
    ///The user experience analytics device name.
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    #[serde(rename = "diskType")]
    pub disk_type: Option<MicrosoftGraphDiskType>,
    ///The user experience analytics device group policy boot time in milliseconds.
    #[serde(rename = "groupPolicyBootTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub group_policy_boot_time_in_ms: Option<f64>,
    ///The user experience analytics device group policy login time in milliseconds.
    #[serde(rename = "groupPolicyLoginTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub group_policy_login_time_in_ms: Option<f64>,
    #[serde(rename = "healthStatus")]
    pub health_status: Option<MicrosoftGraphUserExperienceAnalyticsHealthState>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user experience analytics device login score.
    #[serde(rename = "loginScore")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub login_score: Option<f64>,
    ///The user experience analytics device manufacturer.
    pub manufacturer: Option<String>,
    ///The user experience analytics device model.
    pub model: Option<String>,
    ///The user experience analytics model level startup performance score. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "modelStartupPerformanceScore")]
    pub model_startup_performance_score: Option<
        MicrosoftGraphUserExperienceAnalyticsDevicePerformanceModelStartupPerformanceScore,
    >,
    ///The user experience analytics device Operating System version.
    #[serde(rename = "operatingSystemVersion")]
    pub operating_system_version: Option<String>,
    ///The user experience analytics responsive desktop time in milliseconds.
    #[serde(rename = "responsiveDesktopTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub responsive_desktop_time_in_ms: Option<f64>,
    ///Number of Restarts in the last 30 days. Valid values 0 to 9999999
    #[serde(rename = "restartCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub restart_count: Option<f64>,
    ///The user experience analytics device startup performance score. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "startupPerformanceScore")]
    pub startup_performance_score: Option<
        MicrosoftGraphUserExperienceAnalyticsDevicePerformanceStartupPerformanceScore,
    >,
}
///Average (mean) number of Blue Screens per device in the last 30 days. Valid values 0 to 9999999
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsDevicePerformanceAverageBlueScreens {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Average (mean) number of Restarts per device in the last 30 days. Valid values 0 to 9999999
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsDevicePerformanceAverageRestarts {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The user experience analytics model level startup performance score. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsDevicePerformanceModelStartupPerformanceScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The user experience analytics device startup performance score. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsDevicePerformanceStartupPerformanceScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsDeviceScores {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userExperienceAnalyticsDeviceScores".to_string())]
    pub odata_type: String,
    ///Indicates a score calculated from application health data to indicate when a device is having problems running one or more applications. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "appReliabilityScore")]
    pub app_reliability_score: Option<
        MicrosoftGraphUserExperienceAnalyticsDeviceScoresAppReliabilityScore,
    >,
    ///Indicates a calulated score indicating the health of the device's battery. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "batteryHealthScore")]
    pub battery_health_score: Option<
        MicrosoftGraphUserExperienceAnalyticsDeviceScoresBatteryHealthScore,
    >,
    ///The name of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    ///Indicates a weighted average of the various scores. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "endpointAnalyticsScore")]
    pub endpoint_analytics_score: Option<
        MicrosoftGraphUserExperienceAnalyticsDeviceScoresEndpointAnalyticsScore,
    >,
    #[serde(rename = "healthStatus")]
    pub health_status: Option<MicrosoftGraphUserExperienceAnalyticsHealthState>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The manufacturer name of the device. Examples: Microsoft Corporation, HP, Lenovo. Supports: $select, $OrderBy. Read-only.
    pub manufacturer: Option<String>,
    ///The model name of the device. Supports: $select, $OrderBy. Read-only.
    pub model: Option<String>,
    ///Indicates a weighted average of boot score and logon score used for measuring startup performance. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "startupPerformanceScore")]
    pub startup_performance_score: Option<
        MicrosoftGraphUserExperienceAnalyticsDeviceScoresStartupPerformanceScore,
    >,
    ///Indicates a weighted score of the work from anywhere on a device level. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "workFromAnywhereScore")]
    pub work_from_anywhere_score: Option<
        MicrosoftGraphUserExperienceAnalyticsDeviceScoresWorkFromAnywhereScore,
    >,
}
///Indicates a score calculated from application health data to indicate when a device is having problems running one or more applications. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsDeviceScoresAppReliabilityScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates a calulated score indicating the health of the device's battery. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsDeviceScoresBatteryHealthScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates a weighted average of the various scores. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsDeviceScoresEndpointAnalyticsScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates a weighted average of boot score and logon score used for measuring startup performance. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsDeviceScoresStartupPerformanceScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates a weighted score of the work from anywhere on a device level. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsDeviceScoresWorkFromAnywhereScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsDeviceStartupHistory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsDeviceStartupHistory".to_string()
    )]
    pub odata_type: String,
    ///The device core boot time in milliseconds. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "coreBootTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub core_boot_time_in_ms: Option<f64>,
    ///The device core login time in milliseconds. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "coreLoginTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub core_login_time_in_ms: Option<f64>,
    ///The Intune device id of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///The impact of device feature updates on boot time in milliseconds. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "featureUpdateBootTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub feature_update_boot_time_in_ms: Option<f64>,
    ///The impact of device group policy client on boot time in milliseconds. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "groupPolicyBootTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub group_policy_boot_time_in_ms: Option<f64>,
    ///The impact of device group policy client on login time in milliseconds. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "groupPolicyLoginTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub group_policy_login_time_in_ms: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When TRUE, indicates the device boot record is associated with feature updates. When FALSE, indicates the device boot record is not associated with feature updates. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "isFeatureUpdate")]
    pub is_feature_update: Option<bool>,
    ///When TRUE, indicates the device login is the first login after a reboot. When FALSE, indicates the device login is not the first login after a reboot. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "isFirstLogin")]
    pub is_first_login: Option<bool>,
    ///The user experience analytics device boot record's operating system version. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "operatingSystemVersion")]
    pub operating_system_version: Option<String>,
    ///The time for desktop to become responsive during login process in milliseconds. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "responsiveDesktopTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub responsive_desktop_time_in_ms: Option<f64>,
    ///Operating System restart category.
    #[serde(rename = "restartCategory")]
    pub restart_category: Option<
        MicrosoftGraphUserExperienceAnalyticsOperatingSystemRestartCategory,
    >,
    ///OS restart fault bucket. The fault bucket is used to find additional information about a system crash. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "restartFaultBucket")]
    pub restart_fault_bucket: Option<String>,
    ///OS restart stop code. This shows the bug check code which can be used to look up the blue screen reason. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "restartStopCode")]
    pub restart_stop_code: Option<String>,
    ///The device boot start time. The value cannot be modified and is automatically populated when the device performs a reboot. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2022 would look like this: '2022-01-01T00:00:00Z'. Returned by default. Read-only.
    #[serde(rename = "startTime")]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The device total boot time in milliseconds. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "totalBootTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_boot_time_in_ms: Option<f64>,
    ///The device total login time in milliseconds. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "totalLoginTimeInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_login_time_in_ms: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsDeviceStartupProcess {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsDeviceStartupProcess".to_string()
    )]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Intune device id of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "managedDeviceId")]
    pub managed_device_id: Option<String>,
    ///The name of the process. Examples: outlook, excel. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "processName")]
    pub process_name: Option<String>,
    ///The product name of the process. Examples: Microsoft Outlook, Microsoft Excel. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "productName")]
    pub product_name: Option<String>,
    ///The publisher of the process. Examples: Microsoft Corporation, Contoso Corp. Supports: $select, $OrderBy. Read-only.
    pub publisher: Option<String>,
    ///The impact of startup process on device boot time in milliseconds. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "startupImpactInMs")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub startup_impact_in_ms: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsDeviceStartupProcessPerformance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsDeviceStartupProcessPerformance".to_string(

        )
    )]
    pub odata_type: String,
    ///The count of devices which initiated this process on startup. Supports: $filter, $select, $OrderBy. Read-only.
    #[serde(rename = "deviceCount")]
    pub device_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The median impact of startup process on device boot time in milliseconds. Supports: $filter, $select, $OrderBy. Read-only.
    #[serde(rename = "medianImpactInMs")]
    pub median_impact_in_ms: Option<f64>,
    ///The name of the startup process. Examples: outlook, excel. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "processName")]
    pub process_name: Option<String>,
    ///The product name of the startup process. Examples: Microsoft Outlook, Microsoft Excel. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "productName")]
    pub product_name: Option<String>,
    ///The publisher of the startup process. Examples: Microsoft Corporation, Contoso Corp. Supports: $select, $OrderBy. Read-only.
    pub publisher: Option<String>,
    ///The total impact of startup process on device boot time in milliseconds. Supports: $filter, $select, $OrderBy. Read-only.
    #[serde(rename = "totalImpactInMs")]
    pub total_impact_in_ms: Option<f64>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsHealthState {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "insufficientData")]
    InsufficientData,
    #[serde(rename = "needsAttention")]
    NeedsAttention,
    #[serde(rename = "meetingGoals")]
    MeetingGoals,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///The user experience analytics insight is the recomendation to improve the user experience analytics score.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsInsight {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The unique identifier of the user experience analytics insight.
    #[serde(rename = "insightId")]
    pub insight_id: Option<String>,
    ///Indicates severity of insights. Possible values are: None, Informational, Warning, Error.
    pub severity: Option<MicrosoftGraphUserExperienceAnalyticsInsightSeverity>,
    ///The unique identifier of the user experience analytics metric.
    #[serde(rename = "userExperienceAnalyticsMetricId")]
    pub user_experience_analytics_metric_id: Option<String>,
    ///The value of the user experience analytics insight.
    pub values: Option<Vec<MicrosoftGraphUserExperienceAnalyticsInsightValue>>,
}
///Indicates severity of insights. Possible values are: None, Informational, Warning, Error.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsInsightSeverity {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "informational")]
    Informational,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///The value in an user experience analytics insight.
discriminated_enum! {
    pub enum MicrosoftGraphUserExperienceAnalyticsInsightValue { discriminator :
    "@odata.type", variants : [("#microsoft.graph.insightValueDouble",
    MicrosoftGraphInsightValueDouble(Box < MicrosoftGraphInsightValueDouble >)),
    ("#microsoft.graph.insightValueInt", MicrosoftGraphInsightValueInt(Box <
    MicrosoftGraphInsightValueInt >))], fallback :
    UserExperienceAnalyticsInsightValue(Box <
    MicrosoftGraphUserExperienceAnalyticsInsightValueBase >), }
}
///The value in an user experience analytics insight.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsInsightValueBase {}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsMetric {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userExperienceAnalyticsMetric".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The unit of the user experience analytics metric. Examples: none, percentage, count, seconds, score.
    pub unit: Option<String>,
    ///The value of the user experience analytics metric.
    pub value: Option<MicrosoftGraphUserExperienceAnalyticsMetricValue>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsMetricHistory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userExperienceAnalyticsMetricHistory".to_string())]
    pub odata_type: String,
    ///The Intune device id of the device.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The metric date time. The value cannot be modified and is automatically populated when the metric is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned by default.
    #[serde(rename = "metricDateTime")]
    pub metric_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The user experience analytics metric type.
    #[serde(rename = "metricType")]
    pub metric_type: Option<String>,
}
///The value of the user experience analytics metric.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsMetricValue {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsModelScores {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userExperienceAnalyticsModelScores".to_string())]
    pub odata_type: String,
    ///Indicates a score calculated from application health data to indicate when a device is having problems running one or more applications. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "appReliabilityScore")]
    pub app_reliability_score: Option<
        MicrosoftGraphUserExperienceAnalyticsModelScoresAppReliabilityScore,
    >,
    ///Indicates a calulated score indicating the health of the device's battery. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "batteryHealthScore")]
    pub battery_health_score: Option<
        MicrosoftGraphUserExperienceAnalyticsModelScoresBatteryHealthScore,
    >,
    ///Indicates a weighted average of the various scores. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "endpointAnalyticsScore")]
    pub endpoint_analytics_score: Option<
        MicrosoftGraphUserExperienceAnalyticsModelScoresEndpointAnalyticsScore,
    >,
    #[serde(rename = "healthStatus")]
    pub health_status: Option<MicrosoftGraphUserExperienceAnalyticsHealthState>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The manufacturer name of the device. Examples: Microsoft Corporation, HP, Lenovo. Supports: $select, $OrderBy. Read-only.
    pub manufacturer: Option<String>,
    ///The model name of the device. Supports: $select, $OrderBy. Read-only.
    pub model: Option<String>,
    ///Indicates unique devices count of given model in a consolidated report. Supports: $select, $OrderBy. Read-only. Valid values -9.22337203685478E+18 to 9.22337203685478E+18
    #[serde(rename = "modelDeviceCount")]
    pub model_device_count: Option<f64>,
    ///Indicates a weighted average of boot score and logon score used for measuring startup performance. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "startupPerformanceScore")]
    pub startup_performance_score: Option<
        MicrosoftGraphUserExperienceAnalyticsModelScoresStartupPerformanceScore,
    >,
    ///Indicates a weighted score of the work from anywhere on a device level. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "workFromAnywhereScore")]
    pub work_from_anywhere_score: Option<
        MicrosoftGraphUserExperienceAnalyticsModelScoresWorkFromAnywhereScore,
    >,
}
///Indicates a score calculated from application health data to indicate when a device is having problems running one or more applications. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsModelScoresAppReliabilityScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates a calulated score indicating the health of the device's battery. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsModelScoresBatteryHealthScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates a weighted average of the various scores. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsModelScoresEndpointAnalyticsScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates a weighted average of boot score and logon score used for measuring startup performance. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsModelScoresStartupPerformanceScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates a weighted score of the work from anywhere on a device level. Valid values range from 0-100. Value -1 means associated score is unavailable. A higher score indicates a healthier device. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsModelScoresWorkFromAnywhereScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Operating System restart category.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsOperatingSystemRestartCategory {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "restartWithUpdate")]
    RestartWithUpdate,
    #[serde(rename = "restartWithoutUpdate")]
    RestartWithoutUpdate,
    #[serde(rename = "blueScreen")]
    BlueScreen,
    #[serde(rename = "shutdownWithUpdate")]
    ShutdownWithUpdate,
    #[serde(rename = "shutdownWithoutUpdate")]
    ShutdownWithoutUpdate,
    #[serde(rename = "longPowerButtonPress")]
    LongPowerButtonPress,
    #[serde(rename = "bootError")]
    BootError,
    #[serde(rename = "update")]
    Update,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsOverview {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userExperienceAnalyticsOverview".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user experience analytics insights. Read-only.
    pub insights: Option<Vec<MicrosoftGraphUserExperienceAnalyticsInsight>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsScoreHistory {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userExperienceAnalyticsScoreHistory".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The device startup date time. The value cannot be modified and is automatically populated. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned by default.
    #[serde(rename = "startupDateTime")]
    pub startup_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
///The user experience analytics insight is the recomendation to improve the user experience analytics score.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///When TRUE, indicates Tenant attach is configured properly and System Center Configuration Manager (SCCM) tenant attached devices will show up in endpoint analytics reporting. When FALSE, indicates Tenant attach is not configured. FALSE by default.
    #[serde(rename = "configurationManagerDataConnectorConfigured")]
    pub configuration_manager_data_connector_configured: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDevice {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereDevice".to_string()
    )]
    pub odata_type: String,
    ///When TRUE, indicates the intune device's autopilot profile is assigned. When FALSE, indicates it's not Assigned. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "autoPilotProfileAssigned")]
    pub auto_pilot_profile_assigned: Option<bool>,
    ///When TRUE, indicates the intune device's autopilot is registered. When FALSE, indicates it's not registered. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "autoPilotRegistered")]
    pub auto_pilot_registered: Option<bool>,
    ///The Azure Active Directory (Azure AD) device Id. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "azureAdDeviceId")]
    pub azure_ad_device_id: Option<String>,
    ///The work from anywhere device's Azure Active Directory (Azure AD) join type. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "azureAdJoinType")]
    pub azure_ad_join_type: Option<String>,
    ///When TRUE, indicates the device's Azure Active Directory (Azure AD) is registered. When False, indicates it's not registered. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "azureAdRegistered")]
    pub azure_ad_registered: Option<bool>,
    ///Indicates per device cloud identity score. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "cloudIdentityScore")]
    pub cloud_identity_score: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDeviceCloudIdentityScore,
    >,
    ///Indicates per device cloud management score. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "cloudManagementScore")]
    pub cloud_management_score: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDeviceCloudManagementScore,
    >,
    ///Indicates per device cloud provisioning score. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "cloudProvisioningScore")]
    pub cloud_provisioning_score: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDeviceCloudProvisioningScore,
    >,
    ///When TRUE, indicates the device's compliance policy is set to intune. When FALSE, indicates it's not set to intune. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "compliancePolicySetToIntune")]
    pub compliance_policy_set_to_intune: Option<bool>,
    ///The Intune device id of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceId")]
    pub device_id: Option<String>,
    ///The name of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    #[serde(rename = "healthStatus")]
    pub health_status: Option<MicrosoftGraphUserExperienceAnalyticsHealthState>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When TRUE, indicates the device's Cloud Management Gateway for Configuration Manager is enabled. When FALSE, indicates it's not enabled. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "isCloudManagedGatewayEnabled")]
    pub is_cloud_managed_gateway_enabled: Option<bool>,
    ///The management agent of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "managedBy")]
    pub managed_by: Option<String>,
    ///The manufacturer name of the device. Supports: $select, $OrderBy. Read-only.
    pub manufacturer: Option<String>,
    ///The model name of the device. Supports: $select, $OrderBy. Read-only.
    pub model: Option<String>,
    ///When TRUE, indicates OS check failed for device to upgrade to the latest version of windows. When FALSE, indicates the check succeeded. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "osCheckFailed")]
    pub os_check_failed: Option<bool>,
    ///The OS description of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "osDescription")]
    pub os_description: Option<String>,
    ///The OS version of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "osVersion")]
    pub os_version: Option<String>,
    ///When TRUE, indicates the device's other workloads is set to intune. When FALSE, indicates it's not set to intune. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "otherWorkloadsSetToIntune")]
    pub other_workloads_set_to_intune: Option<bool>,
    ///Ownership of the device. Supports: $select, $OrderBy. Read-only.
    pub ownership: Option<String>,
    ///When TRUE, indicates processor hardware 64-bit architecture check failed for device to upgrade to the latest version of windows. When FALSE, indicates the check succeeded. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "processor64BitCheckFailed")]
    pub processor64bit_check_failed: Option<bool>,
    ///When TRUE, indicates processor hardware core count check failed for device to upgrade to the latest version of windows. When FALSE, indicates the check succeeded. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "processorCoreCountCheckFailed")]
    pub processor_core_count_check_failed: Option<bool>,
    ///When TRUE, indicates processor hardware family check failed for device to upgrade to the latest version of windows. When FALSE, indicates the check succeeded. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "processorFamilyCheckFailed")]
    pub processor_family_check_failed: Option<bool>,
    ///When TRUE, indicates processor hardware speed check failed for device to upgrade to the latest version of windows. When FALSE, indicates the check succeeded. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "processorSpeedCheckFailed")]
    pub processor_speed_check_failed: Option<bool>,
    ///When TRUE, indicates RAM hardware check failed for device to upgrade to the latest version of windows. When FALSE, indicates the check succeeded. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "ramCheckFailed")]
    pub ram_check_failed: Option<bool>,
    ///When TRUE, indicates secure boot hardware check failed for device to upgrade to the latest version of windows. When FALSE, indicates the check succeeded. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "secureBootCheckFailed")]
    pub secure_boot_check_failed: Option<bool>,
    ///The serial number of the device. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "serialNumber")]
    pub serial_number: Option<String>,
    ///When TRUE, indicates storage hardware check failed for device to upgrade to the latest version of windows. When FALSE, indicates the check succeeded. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "storageCheckFailed")]
    pub storage_check_failed: Option<bool>,
    ///When TRUE, indicates the device is Tenant Attached. When FALSE, indicates it's not Tenant Attached. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "tenantAttached")]
    pub tenant_attached: Option<bool>,
    ///When TRUE, indicates Trusted Platform Module (TPM) hardware check failed for device to the latest version of upgrade to windows. When FALSE, indicates the check succeeded. Supports: $select, $OrderBy. Read-only.
    #[serde(rename = "tpmCheckFailed")]
    pub tpm_check_failed: Option<bool>,
    ///Work From Anywhere windows device upgrade eligibility status.
    #[serde(rename = "upgradeEligibility")]
    pub upgrade_eligibility: Option<MicrosoftGraphOperatingSystemUpgradeEligibility>,
    ///Indicates per device windows score. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "windowsScore")]
    pub windows_score: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDeviceWindowsScore,
    >,
    ///Indicates work from anywhere per device overall score. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "workFromAnywhereScore")]
    pub work_from_anywhere_score: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDeviceWorkFromAnywhereScore,
    >,
}
///Indicates per device cloud identity score. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDeviceCloudIdentityScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates per device cloud management score. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDeviceCloudManagementScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates per device cloud provisioning score. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDeviceCloudProvisioningScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates per device windows score. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDeviceWindowsScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Indicates work from anywhere per device overall score. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDeviceWorkFromAnywhereScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric".to_string(

        )
    )]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The percentage of devices for which OS check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "osCheckFailedPercentage")]
    pub os_check_failed_percentage: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricOsCheckFailedPercentage,
    >,
    ///The percentage of devices for which processor hardware 64-bit architecture check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "processor64BitCheckFailedPercentage")]
    pub processor64bit_check_failed_percentage: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricProcessor64BitCheckFailedPercentage,
    >,
    ///The percentage of devices for which processor hardware core count check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "processorCoreCountCheckFailedPercentage")]
    pub processor_core_count_check_failed_percentage: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricProcessorCoreCountCheckFailedPercentage,
    >,
    ///The percentage of devices for which processor hardware family check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "processorFamilyCheckFailedPercentage")]
    pub processor_family_check_failed_percentage: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricProcessorFamilyCheckFailedPercentage,
    >,
    ///The percentage of devices for which processor hardware speed check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "processorSpeedCheckFailedPercentage")]
    pub processor_speed_check_failed_percentage: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricProcessorSpeedCheckFailedPercentage,
    >,
    ///The percentage of devices for which RAM hardware check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "ramCheckFailedPercentage")]
    pub ram_check_failed_percentage: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricRamCheckFailedPercentage,
    >,
    ///The percentage of devices for which secure boot hardware check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "secureBootCheckFailedPercentage")]
    pub secure_boot_check_failed_percentage: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricSecureBootCheckFailedPercentage,
    >,
    ///The percentage of devices for which storage hardware check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "storageCheckFailedPercentage")]
    pub storage_check_failed_percentage: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricStorageCheckFailedPercentage,
    >,
    ///The count of total devices in an organization. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "totalDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_device_count: Option<f64>,
    ///The percentage of devices for which Trusted Platform Module (TPM) hardware check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "tpmCheckFailedPercentage")]
    pub tpm_check_failed_percentage: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricTpmCheckFailedPercentage,
    >,
    ///The count of devices in an organization eligible for windows upgrade. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "upgradeEligibleDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub upgrade_eligible_device_count: Option<f64>,
}
///The percentage of devices for which OS check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricOsCheckFailedPercentage {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The percentage of devices for which processor hardware 64-bit architecture check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricProcessor64BitCheckFailedPercentage {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The percentage of devices for which processor hardware core count check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricProcessorCoreCountCheckFailedPercentage {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The percentage of devices for which processor hardware family check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricProcessorFamilyCheckFailedPercentage {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The percentage of devices for which processor hardware speed check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricProcessorSpeedCheckFailedPercentage {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The percentage of devices for which RAM hardware check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricRamCheckFailedPercentage {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The percentage of devices for which secure boot hardware check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricSecureBootCheckFailedPercentage {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The percentage of devices for which storage hardware check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricStorageCheckFailedPercentage {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The percentage of devices for which Trusted Platform Module (TPM) hardware check has failed. Valid values 0 to 100. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricTpmCheckFailedPercentage {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereMetric {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereMetric".to_string()
    )]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The work from anywhere metric devices. Read-only.
    #[serde(rename = "metricDevices")]
    pub metric_devices: Option<
        Vec<MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereDevice>,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.userExperienceAnalyticsWorkFromAnywhereModelPerformance".to_string(

        )
    )]
    pub odata_type: String,
    ///The cloud identity score of the device model. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "cloudIdentityScore")]
    pub cloud_identity_score: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCloudIdentityScore,
    >,
    ///The cloud management score of the device model. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "cloudManagementScore")]
    pub cloud_management_score: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCloudManagementScore,
    >,
    ///The cloud provisioning score of the device model.  Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "cloudProvisioningScore")]
    pub cloud_provisioning_score: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCloudProvisioningScore,
    >,
    #[serde(rename = "healthStatus")]
    pub health_status: Option<MicrosoftGraphUserExperienceAnalyticsHealthState>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The manufacturer name of the device. Supports: $select, $OrderBy. Read-only.
    pub manufacturer: Option<String>,
    ///The model name of the device. Supports: $select, $OrderBy. Read-only.
    pub model: Option<String>,
    ///The devices count for the model. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
    #[serde(rename = "modelDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub model_device_count: Option<f64>,
    ///The window score of the device model. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "windowsScore")]
    pub windows_score: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformanceWindowsScore,
    >,
    ///The work from anywhere score of the device model. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
    #[serde(rename = "workFromAnywhereScore")]
    pub work_from_anywhere_score: Option<
        MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformanceWorkFromAnywhereScore,
    >,
}
///The cloud identity score of the device model. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCloudIdentityScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The cloud management score of the device model. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCloudManagementScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The cloud provisioning score of the device model.  Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCloudProvisioningScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The window score of the device model. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformanceWindowsScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The work from anywhere score of the device model. Valid values 0 to 100. Value -1 means associated score is unavailable. Supports: $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserExperienceAnalyticsWorkFromAnywhereModelPerformanceWorkFromAnywhereScore {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserFlowApiConnectorConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "postAttributeCollection")]
    pub post_attribute_collection: Option<MicrosoftGraphIdentityApiConnector>,
    #[serde(rename = "postFederationSignup")]
    pub post_federation_signup: Option<MicrosoftGraphIdentityApiConnector>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserFlowLanguageConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userFlowLanguageConfiguration".to_string())]
    pub odata_type: String,
    ///Collection of pages with the default content to display in a user flow for a specified language. This collection doesn't allow any kind of modification.
    #[serde(rename = "defaultPages")]
    pub default_pages: Option<Vec<MicrosoftGraphUserFlowLanguagePage>>,
    ///The language name to display. This property is read-only.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the language is enabled within the user flow.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
    ///Collection of pages with the overrides messages to display in a user flow for a specified language. This collection only allows you to modify the content of the page, any other modification isn't allowed (creation or deletion of pages).
    #[serde(rename = "overridesPages")]
    pub overrides_pages: Option<Vec<MicrosoftGraphUserFlowLanguagePage>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserFlowLanguagePage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userFlowLanguagePage".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserFlowType {
    #[serde(rename = "signUp")]
    #[default]
    SignUp,
    #[serde(rename = "signIn")]
    SignIn,
    #[serde(rename = "signUpOrSignIn")]
    SignUpOrSignIn,
    #[serde(rename = "passwordReset")]
    PasswordReset,
    #[serde(rename = "profileUpdate")]
    ProfileUpdate,
    #[serde(rename = "resourceOwner")]
    ResourceOwner,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userIdentity".to_string())]
    pub odata_type: String,
    ///The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
    pub id: Option<String>,
    ///Indicates the client IP address associated with the user performing the activity (audit log only).
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///The userPrincipalName attribute of the user.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserInsightsSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userInsightsSettings".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///True if the user's itemInsights and meeting hours insights are enabled; false if the user's itemInsights and meeting hours insights are disabled. The default value is true. Optional.
    #[serde(rename = "isEnabled")]
    pub is_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserInstallStateSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userInstallStateSummary".to_string())]
    pub odata_type: String,
    ///The install state of the eBook.
    #[serde(rename = "deviceStates")]
    pub device_states: Option<Vec<MicrosoftGraphDeviceInstallState>>,
    ///Failed Device Count.
    #[serde(rename = "failedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub failed_device_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Installed Device Count.
    #[serde(rename = "installedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub installed_device_count: Option<f64>,
    ///Not installed device count.
    #[serde(rename = "notInstalledDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub not_installed_device_count: Option<f64>,
    ///User name.
    #[serde(rename = "userName")]
    pub user_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserLastSignInRecommendationInsightSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userLastSignInRecommendationInsightSetting".to_string())]
    pub odata_type: String,
    ///Optional. Indicates the time period of inactivity (with respect to the start date of the review instance) that recommendations will be configured from. The recommendation will be to deny if the user is inactive during the look-back duration. For reviews of groups and Microsoft Entra roles, any duration is accepted. For reviews of applications, 30 days is the maximum duration. If not specified, the duration is 30 days.
    #[serde(rename = "recommendationLookBackDuration")]
    pub recommendation_look_back_duration: Option<String>,
    ///Indicates whether inactivity is calculated based on the user's inactivity in the tenant or in the application. The possible values are tenant, application, unknownFutureValue. application is only relevant when the access review is a review of an assignment to an application.
    #[serde(rename = "signInScope")]
    pub sign_in_scope: Option<MicrosoftGraphUserSignInRecommendationScope>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserPrint {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    #[serde(rename = "recentPrinterShares")]
    pub recent_printer_shares: Option<Vec<MicrosoftGraphPrinterShare>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserProtectionScopeContainer {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userProtectionScopeContainer".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserPurpose {
    #[serde(rename = "user")]
    #[default]
    User,
    #[serde(rename = "linked")]
    Linked,
    #[serde(rename = "shared")]
    Shared,
    #[serde(rename = "room")]
    Room,
    #[serde(rename = "equipment")]
    Equipment,
    #[serde(rename = "others")]
    Others,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserRegistrationDetails {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userRegistrationDetails".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the user has an admin role in the tenant. This value can be used to check the authentication methods that privileged accounts are registered for and capable of.
    #[serde(rename = "isAdmin")]
    pub is_admin: Option<bool>,
    ///Indicates whether the user has registered a strong authentication method for multifactor authentication. The method must be allowed by the authentication methods policy. Supports $filter (eq).
    #[serde(rename = "isMfaCapable")]
    pub is_mfa_capable: Option<bool>,
    ///Indicates whether the user has registered a strong authentication method for multifactor authentication. The method may not necessarily be allowed by the authentication methods policy. Supports $filter (eq).
    #[serde(rename = "isMfaRegistered")]
    pub is_mfa_registered: Option<bool>,
    ///Indicates whether the user has registered a passwordless strong authentication method (including FIDO2, Windows Hello for Business, and Microsoft Authenticator (Passwordless)) that is allowed by the authentication methods policy. Supports $filter (eq).
    #[serde(rename = "isPasswordlessCapable")]
    pub is_passwordless_capable: Option<bool>,
    ///Indicates whether the user has registered the required number of authentication methods for self-service password reset and the user is allowed to perform self-service password reset by policy. Supports $filter (eq).
    #[serde(rename = "isSsprCapable")]
    pub is_sspr_capable: Option<bool>,
    ///Indicates whether the user is allowed to perform self-service password reset by policy. The user may not necessarily have registered the required number of authentication methods for self-service password reset. Supports $filter (eq).
    #[serde(rename = "isSsprEnabled")]
    pub is_sspr_enabled: Option<bool>,
    ///Indicates whether the user has registered the required number of authentication methods for self-service password reset. The user may not necessarily be allowed to perform self-service password reset by policy. Supports $filter (eq).
    #[serde(rename = "isSsprRegistered")]
    pub is_sspr_registered: Option<bool>,
    ///Indicates whether system preferred authentication method is enabled. If enabled, the system dynamically determines the most secure authentication method among the methods registered by the user. Supports $filter (eq).
    #[serde(rename = "isSystemPreferredAuthenticationMethodEnabled")]
    pub is_system_preferred_authentication_method_enabled: Option<bool>,
    ///The date and time (UTC) when the report was last updated. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Collection of authentication methods registered, such as mobilePhone, email, passKeyDeviceBound. Supports $filter (any with eq).
    #[serde(rename = "methodsRegistered")]
    pub methods_registered: Option<Vec<Option<String>>>,
    ///Collection of authentication methods that the system determined to be the most secure authentication methods among the registered methods for second factor authentication. Possible values are: push, oath, voiceMobile, voiceAlternateMobile, voiceOffice, sms, none, unknownFutureValue. Supports $filter (any with eq).
    #[serde(rename = "systemPreferredAuthenticationMethods")]
    pub system_preferred_authentication_methods: Option<Vec<Option<String>>>,
    ///The user display name, such as Adele Vance. Supports $filter (eq, startsWith) and $orderby.
    #[serde(rename = "userDisplayName")]
    pub user_display_name: Option<String>,
    ///The method the user selected as the default second-factor for performing multifactor authentication. Possible values are: push, oath, voiceMobile, voiceAlternateMobile, voiceOffice, sms, none, unknownFutureValue. This property is used as preferred MFA method when isSystemPreferredAuthenticationMethodEnabled is false. Supports $filter (any with eq).
    #[serde(rename = "userPreferredMethodForSecondaryAuthentication")]
    pub user_preferred_method_for_secondary_authentication: Option<
        MicrosoftGraphUserDefaultAuthenticationMethod,
    >,
    ///The user principal name, such as AdeleV@contoso.com. Supports $filter (eq, startsWith) and $orderby.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
    ///Identifies whether the user is a member or guest in the tenant. The possible values are: member, guest, unknownFutureValue.
    #[serde(rename = "userType")]
    pub user_type: Option<MicrosoftGraphSignInUserType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserScopeTeamsAppInstallation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userScopeTeamsAppInstallation".to_string())]
    pub odata_type: String,
    ///The chat between the user and Teams app.
    pub chat: Option<MicrosoftGraphChat>,
    ///The set of resource-specific permissions consented to while installing or upgrading the teamsApp.
    #[serde(rename = "consentedPermissionSet")]
    pub consented_permission_set: Option<MicrosoftGraphTeamsAppPermissionSet>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The app that is installed.
    #[serde(rename = "teamsApp")]
    pub teams_app: Option<MicrosoftGraphTeamsApp>,
    ///The details of this version of the app.
    #[serde(rename = "teamsAppDefinition")]
    pub teams_app_definition: Option<MicrosoftGraphTeamsAppDefinition>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserSecurityState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///AAD User object identifier (GUID) - represents the physical/multi-account user entity.
    #[serde(rename = "aadUserId")]
    pub aad_user_id: Option<String>,
    ///Account name of user account (without Active Directory domain or DNS domain) - (also called mailNickName).
    #[serde(rename = "accountName")]
    pub account_name: Option<String>,
    ///NetBIOS/Active Directory domain of user account (that is, domain/account format).
    #[serde(rename = "domainName")]
    pub domain_name: Option<String>,
    ///For email-related alerts - user account's email 'role'. Possible values are: unknown, sender, recipient.
    #[serde(rename = "emailRole")]
    pub email_role: Option<MicrosoftGraphEmailRole>,
    ///Indicates whether the user logged on through a VPN.
    #[serde(rename = "isVpn")]
    pub is_vpn: Option<bool>,
    ///Time at which the sign-in occurred. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "logonDateTime")]
    pub logon_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///User sign-in ID.
    #[serde(rename = "logonId")]
    pub logon_id: Option<String>,
    ///IP Address the sign-in request originated from.
    #[serde(rename = "logonIp")]
    pub logon_ip: Option<String>,
    ///Location (by IP address mapping) associated with a user sign-in event by this user.
    #[serde(rename = "logonLocation")]
    pub logon_location: Option<String>,
    ///Method of user sign in. Possible values are: unknown, interactive, remoteInteractive, network, batch, service.
    #[serde(rename = "logonType")]
    pub logon_type: Option<MicrosoftGraphLogonType>,
    ///Active Directory (on-premises) Security Identifier (SID) of the user.
    #[serde(rename = "onPremisesSecurityIdentifier")]
    pub on_premises_security_identifier: Option<String>,
    ///Provider-generated/calculated risk score of the user account. Recommended value range of 0-1, which equates to a percentage.
    #[serde(rename = "riskScore")]
    pub risk_score: Option<String>,
    ///User account type (group membership), per Windows definition. Possible values are: unknown, standard, power, administrator.
    #[serde(rename = "userAccountType")]
    pub user_account_type: Option<MicrosoftGraphUserAccountSecurityType>,
    ///User sign-in name - internet format: (user account name)@(user account DNS domain name).
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userSettings".to_string())]
    pub odata_type: String,
    ///Reflects the organization level setting controlling delegate access to the trending API. When set to true, the organization doesn't have access to Office Delve. The relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for work or school is affected for the whole organization. This setting is read-only and can only be changed by administrators in the SharePoint admin center.
    #[serde(rename = "contributionToContentDiscoveryAsOrganizationDisabled")]
    pub contribution_to_content_discovery_as_organization_disabled: Option<bool>,
    ///When set to true, the delegate access to the user's trending API is disabled. When set to true, documents in the user's Office Delve are disabled. When set to true, the relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for work or school is affected. Users can control this setting in Office Delve.
    #[serde(rename = "contributionToContentDiscoveryDisabled")]
    pub contribution_to_content_discovery_disabled: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The user's settings for the visibility of meeting hour insights, and insights derived between a user and other items in Microsoft 365, such as documents or sites. Get userInsightsSettings through this navigation property.
    #[serde(rename = "itemInsights")]
    pub item_insights: Option<MicrosoftGraphUserInsightsSettings>,
    #[serde(rename = "shiftPreferences")]
    pub shift_preferences: Option<MicrosoftGraphShiftPreferences>,
    pub storage: Option<MicrosoftGraphUserStorage>,
    pub windows: Option<Vec<MicrosoftGraphWindowsSetting>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserSignInInsight {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userSignInInsight".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates when the insight was created.
    #[serde(rename = "insightCreatedDateTime")]
    pub insight_created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates when the user last signed in.
    #[serde(rename = "lastSignInDateTime")]
    pub last_sign_in_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserSignInRecommendationScope {
    #[serde(rename = "tenant")]
    #[default]
    Tenant,
    #[serde(rename = "application")]
    Application,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserSimulationDetails {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Number of trainings assigned to a user in an attack simulation and training campaign.
    #[serde(rename = "assignedTrainingsCount")]
    pub assigned_trainings_count: Option<f64>,
    ///Number of trainings completed by a user in an attack simulation and training campaign.
    #[serde(rename = "completedTrainingsCount")]
    pub completed_trainings_count: Option<f64>,
    ///Date and time of the compromising online action by a user in an attack simulation and training campaign.
    #[serde(rename = "compromisedDateTime")]
    pub compromised_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Number of trainings in progress by a user in an attack simulation and training campaign.
    #[serde(rename = "inProgressTrainingsCount")]
    pub in_progress_trainings_count: Option<f64>,
    ///Indicates whether a user was compromised in an attack simulation and training campaign.
    #[serde(rename = "isCompromised")]
    pub is_compromised: Option<bool>,
    ///Date and time when a user reported the delivered payload as phishing in the attack simulation and training campaign.
    #[serde(rename = "reportedPhishDateTime")]
    pub reported_phish_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///List of simulation events of a user in the attack simulation and training campaign.
    #[serde(rename = "simulationEvents")]
    pub simulation_events: Option<Vec<MicrosoftGraphUserSimulationEventInfo>>,
    ///User in an attack simulation and training campaign.
    #[serde(rename = "simulationUser")]
    pub simulation_user: Option<MicrosoftGraphAttackSimulationUser>,
    ///List of training events of a user in the attack simulation and training campaign.
    #[serde(rename = "trainingEvents")]
    pub training_events: Option<Vec<MicrosoftGraphUserTrainingEventInfo>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserSimulationEventInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Browser information from where the simulation event was initiated by a user in an attack simulation and training campaign.
    pub browser: Option<String>,
    #[serde(rename = "clickSource")]
    pub click_source: Option<MicrosoftGraphClickSource>,
    ///Date and time of the simulation event by a user in an attack simulation and training campaign.
    #[serde(rename = "eventDateTime")]
    pub event_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Name of the simulation event by a user in an attack simulation and training campaign.
    #[serde(rename = "eventName")]
    pub event_name: Option<String>,
    ///IP address from where the simulation event was initiated by a user in an attack simulation and training campaign.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///The operating system, platform, and device details from where the simulation event was initiated by a user in an attack simulation and training campaign.
    #[serde(rename = "osPlatformDeviceDetails")]
    pub os_platform_device_details: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserSolutionRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userSolutionRoot".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The working time schedule entity associated with the solution.
    #[serde(rename = "workingTimeSchedule")]
    pub working_time_schedule: Option<MicrosoftGraphWorkingTimeSchedule>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserStorage {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userStorage".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub quota: Option<MicrosoftGraphUnifiedStorageQuota>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserTeamwork {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.userTeamwork".to_string())]
    pub odata_type: String,
    ///The list of associatedTeamInfo objects that a user is associated with.
    #[serde(rename = "associatedTeams")]
    pub associated_teams: Option<Vec<MicrosoftGraphAssociatedTeamInfo>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The apps installed in the personal scope of this user.
    #[serde(rename = "installedApps")]
    pub installed_apps: Option<Vec<MicrosoftGraphUserScopeTeamsAppInstallation>>,
    ///Represents the location that a user selected in Microsoft Teams and doesn't follow the Office's locale setting. A user's locale is represented by their preferred language and country or region. For example, en-us. The language component follows two-letter codes as defined in ISO 639-1, and the country component follows two-letter codes as defined in ISO 3166-1 alpha-2.
    pub locale: Option<String>,
    ///Represents the region of the organization or the user. For users with multigeo licenses, the property contains the user's region (if available). For users without multigeo licenses, the property contains the organization's region.The region value can be any region supported by the Teams payload. The possible values are: Americas, Europe and MiddleEast, Asia Pacific, UAE, Australia, Brazil, Canada, Switzerland, Germany, France, India, Japan, South Korea, Norway, Singapore, United Kingdom, South Africa, Sweden, Qatar, Poland, Italy, Israel, Spain, Mexico, USGov Community Cloud, USGov Community Cloud High, USGov Department of Defense, and China.
    pub region: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserTrainingContentEventInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Browser of the user from where the training event was generated.
    pub browser: Option<String>,
    ///Date and time of the training content playback by the user.
    #[serde(rename = "contentDateTime")]
    pub content_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///IP address of the user for the training event.
    #[serde(rename = "ipAddress")]
    pub ip_address: Option<String>,
    ///The operating system, platform, and device details of the user for the training event.
    #[serde(rename = "osPlatformDeviceDetails")]
    pub os_platform_device_details: Option<String>,
    ///Potential improvement in the tenant security posture after completion of the training by the user.
    #[serde(rename = "potentialScoreImpact")]
    pub potential_score_impact: Option<
        MicrosoftGraphUserTrainingContentEventInfoPotentialScoreImpact,
    >,
}
///Potential improvement in the tenant security posture after completion of the training by the user.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserTrainingContentEventInfoPotentialScoreImpact {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphUserTrainingEventInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Display name of the training.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Latest status of the training assigned to the user. Possible values are: unknown, assigned, inProgress, completed, overdue, unknownFutureValue.
    #[serde(rename = "latestTrainingStatus")]
    pub latest_training_status: Option<MicrosoftGraphTrainingStatus>,
    ///Event details of the training when it was assigned to the user.
    #[serde(rename = "trainingAssignedProperties")]
    pub training_assigned_properties: Option<MicrosoftGraphUserTrainingContentEventInfo>,
    ///Event details of the training when it was completed by the user.
    #[serde(rename = "trainingCompletedProperties")]
    pub training_completed_properties: Option<
        MicrosoftGraphUserTrainingContentEventInfo,
    >,
    ///Event details of the training when it was updated/in-progress by the user.
    #[serde(rename = "trainingUpdatedProperties")]
    pub training_updated_properties: Option<MicrosoftGraphUserTrainingContentEventInfo>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphUserType {
    #[serde(rename = "member")]
    #[default]
    Member,
    #[serde(rename = "guest")]
    Guest,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVerifiedDomain {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///For example, Email, OfficeCommunicationsOnline.
    pub capabilities: Option<String>,
    ///true if this is the default domain associated with the tenant; otherwise, false.
    #[serde(rename = "isDefault")]
    pub is_default: Option<bool>,
    ///true if this is the initial domain associated with the tenant; otherwise, false.
    #[serde(rename = "isInitial")]
    pub is_initial: Option<bool>,
    ///The domain name; for example, contoso.com.
    pub name: Option<String>,
    ///For example, Managed.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVerifiedPublisher {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The timestamp when the verified publisher was first added or most recently updated.
    #[serde(rename = "addedDateTime")]
    pub added_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The verified publisher name from the app publisher's Partner Center account.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The ID of the verified publisher from the app publisher's Partner Center account.
    #[serde(rename = "verifiedPublisherId")]
    pub verified_publisher_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVerticalSection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.verticalSection".to_string())]
    pub odata_type: String,
    ///Enumeration value that indicates the emphasis of the section background. The possible values are: none, netural, soft, strong, unknownFutureValue.
    pub emphasis: Option<MicrosoftGraphSectionEmphasisType>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The set of web parts in this section.
    pub webparts: Option<Vec<MicrosoftGraphWebPart>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVideo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Number of audio bits per sample.
    #[serde(rename = "audioBitsPerSample")]
    pub audio_bits_per_sample: Option<f64>,
    ///Number of audio channels.
    #[serde(rename = "audioChannels")]
    pub audio_channels: Option<f64>,
    ///Name of the audio format (AAC, MP3, etc.).
    #[serde(rename = "audioFormat")]
    pub audio_format: Option<String>,
    ///Number of audio samples per second.
    #[serde(rename = "audioSamplesPerSecond")]
    pub audio_samples_per_second: Option<f64>,
    ///Bit rate of the video in bits per second.
    pub bitrate: Option<f64>,
    ///Duration of the file in milliseconds.
    pub duration: Option<f64>,
    ///'Four character code' name of the video format.
    #[serde(rename = "fourCC")]
    pub four_cc: Option<String>,
    ///Frame rate of the video.
    #[serde(rename = "frameRate")]
    pub frame_rate: Option<MicrosoftGraphVideoFrameRate>,
    ///Height of the video, in pixels.
    pub height: Option<f64>,
    ///Width of the video, in pixels.
    pub width: Option<f64>,
}
///Frame rate of the video.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphVideoFrameRate {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEndpoint {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEndpoint".to_string())]
    pub odata_type: String,
    ///A collection of Cloud PC audit events.
    #[serde(rename = "auditEvents")]
    pub audit_events: Option<Vec<MicrosoftGraphCloudPcAuditEvent>>,
    ///A collection of cloud-managed virtual desktops.
    #[serde(rename = "cloudPCs")]
    pub cloud_pcs: Option<Vec<MicrosoftGraphCloudPc>>,
    ///A collection of device image resources on Cloud PC.
    #[serde(rename = "deviceImages")]
    pub device_images: Option<Vec<MicrosoftGraphCloudPcDeviceImage>>,
    ///A collection of gallery image resources on Cloud PC.
    #[serde(rename = "galleryImages")]
    pub gallery_images: Option<Vec<MicrosoftGraphCloudPcGalleryImage>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A defined collection of Azure resource information that can be used to establish Azure network connections for Cloud PCs.
    #[serde(rename = "onPremisesConnections")]
    pub on_premises_connections: Option<Vec<MicrosoftGraphCloudPcOnPremisesConnection>>,
    ///A collection of Cloud PC provisioning policies.
    #[serde(rename = "provisioningPolicies")]
    pub provisioning_policies: Option<Vec<MicrosoftGraphCloudPcProvisioningPolicy>>,
    ///A collection of Cloud PC user settings.
    #[serde(rename = "userSettings")]
    pub user_settings: Option<Vec<MicrosoftGraphCloudPcUserSetting>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEvent {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEvent".to_string())]
    pub odata_type: String,
    ///The identity information for the creator of the virtual event. Inherited from virtualEvent.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphCommunicationsIdentitySet>,
    ///A description of the virtual event.
    pub description: Option<MicrosoftGraphItemBody>,
    ///The display name of the virtual event.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The end time of the virtual event. The timeZone property can be set to any of the time zones currently supported by Windows. For details on how to get all available time zones using PowerShell, see Get-TimeZone.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The external information of a virtual event. Returned only for event organizers or coorganizers; otherwise, null.
    #[serde(rename = "externalEventInformation")]
    pub external_event_information: Option<
        Vec<MicrosoftGraphVirtualEventExternalInformation>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The virtual event presenters.
    pub presenters: Option<Vec<MicrosoftGraphVirtualEventPresenter>>,
    ///The sessions for the virtual event.
    pub sessions: Option<Vec<MicrosoftGraphVirtualEventSession>>,
    ///The virtual event settings.
    pub settings: Option<MicrosoftGraphVirtualEventSettings>,
    ///Start time of the virtual event. The timeZone property can be set to any of the time zones currently supported by Windows. For details on how to get all available time zones using PowerShell, see Get-TimeZone.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The status of the virtual event. The possible values are: draft, published, canceled, and unknownFutureValue.
    pub status: Option<MicrosoftGraphVirtualEventStatus>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphVirtualEventAttendeeRegistrationStatus {
    #[serde(rename = "registered")]
    #[default]
    Registered,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "waitlisted")]
    Waitlisted,
    #[serde(rename = "pendingApproval")]
    PendingApproval,
    #[serde(rename = "rejectedByOrganizer")]
    RejectedByOrganizer,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventExternalInformation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Identifier of the application that hosts the externalEventId. Read-only.
    #[serde(rename = "applicationId")]
    pub application_id: Option<String>,
    ///The identifier for a virtualEventExternalInformation object that associates the virtual event with an event ID in an external application. This association bundles all the information (both supported and not supported in virtualEvent) into one virtual event object. Optional. If set, the maximum supported length is 256 characters.
    #[serde(rename = "externalEventId")]
    pub external_event_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventExternalRegistrationInformation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///A URL or string that represents the location from which the registrant registered. Optional.
    pub referrer: Option<String>,
    ///The identifier for a virtualEventExternalRegistrationInformation object. Optional. If set, the maximum supported length is 256 characters.
    #[serde(rename = "registrationId")]
    pub registration_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventPresenter {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEventPresenter".to_string())]
    pub odata_type: String,
    ///Email address of the presenter.
    pub email: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Identity information of the presenter. The supported identities are: communicationsGuestIdentity and communicationsUserIdentity.
    pub identity: Option<MicrosoftGraphIdentity>,
    ///Other details about the presenter. This property returns null when the virtual event type is virtualEventTownhall.
    #[serde(rename = "presenterDetails")]
    pub presenter_details: Option<MicrosoftGraphVirtualEventPresenterDetails>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventPresenterDetails {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Bio of the presenter.
    pub bio: Option<MicrosoftGraphItemBody>,
    ///The presenter's company name.
    pub company: Option<String>,
    ///The presenter's job title.
    #[serde(rename = "jobTitle")]
    pub job_title: Option<String>,
    ///The presenter's LinkedIn profile URL.
    #[serde(rename = "linkedInProfileWebUrl")]
    pub linked_in_profile_web_url: Option<String>,
    ///The presenter's personal website URL.
    #[serde(rename = "personalSiteWebUrl")]
    pub personal_site_web_url: Option<String>,
    ///The content stream of the presenter's photo.
    pub photo: Option<String>,
    ///The presenter's Twitter profile URL.
    #[serde(rename = "twitterProfileWebUrl")]
    pub twitter_profile_web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventPresenterInfo {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEventPresenterInfo".to_string())]
    pub odata_type: String,
    ///Identity information of the participant.
    pub identity: Option<MicrosoftGraphIdentitySet>,
    #[serde(rename = "presenterDetails")]
    pub presenter_details: Option<MicrosoftGraphVirtualEventPresenterDetails>,
    ///Specifies the participant's role in the meeting.
    pub role: Option<MicrosoftGraphOnlineMeetingRole>,
    ///User principal name of the participant.
    pub upn: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventRegistration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEventRegistration".to_string())]
    pub odata_type: String,
    ///Date and time when the registrant cancels their registration for the virtual event. Only appears when applicable. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "cancelationDateTime")]
    pub cancelation_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Email address of the registrant.
    pub email: Option<String>,
    ///The external information for a virtual event registration.
    #[serde(rename = "externalRegistrationInformation")]
    pub external_registration_information: Option<
        MicrosoftGraphVirtualEventExternalRegistrationInformation,
    >,
    ///First name of the registrant.
    #[serde(rename = "firstName")]
    pub first_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last name of the registrant.
    #[serde(rename = "lastName")]
    pub last_name: Option<String>,
    ///The registrant's preferred language.
    #[serde(rename = "preferredLanguage")]
    pub preferred_language: Option<String>,
    ///The registrant's time zone details.
    #[serde(rename = "preferredTimezone")]
    pub preferred_timezone: Option<String>,
    ///Date and time when the registrant registers for the virtual event. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    #[serde(rename = "registrationDateTime")]
    pub registration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The registrant's answer to the registration questions.
    #[serde(rename = "registrationQuestionAnswers")]
    pub registration_question_answers: Option<
        Vec<MicrosoftGraphVirtualEventRegistrationQuestionAnswer>,
    >,
    ///Sessions for a registration.
    pub sessions: Option<Vec<MicrosoftGraphVirtualEventSession>>,
    ///Registration status of the registrant. Read-only. Possible values are registered, canceled, waitlisted, pendingApproval, rejectedByOrganizer, and unknownFutureValue.
    pub status: Option<MicrosoftGraphVirtualEventAttendeeRegistrationStatus>,
    ///The registrant's ID in Microsoft Entra ID. Only appears when the registrant is registered in Microsoft Entra ID.
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventRegistrationConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEventRegistrationConfiguration".to_string())]
    pub odata_type: String,
    ///Total capacity of the virtual event.
    pub capacity: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Registration questions.
    pub questions: Option<Vec<MicrosoftGraphVirtualEventRegistrationQuestionBase>>,
    ///Registration URL of the virtual event.
    #[serde(rename = "registrationWebUrl")]
    pub registration_web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventRegistrationCustomQuestion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEventRegistrationCustomQuestion".to_string())]
    pub odata_type: String,
    ///Answer choices when answerInputType is singleChoice or multiChoice.
    #[serde(rename = "answerChoices")]
    pub answer_choices: Option<Vec<Option<String>>>,
    ///Input type of the registration question answer. Possible values are text, multilineText, singleChoice, multiChoice, boolean, and unknownFutureValue.
    #[serde(rename = "answerInputType")]
    pub answer_input_type: Option<
        MicrosoftGraphVirtualEventRegistrationQuestionAnswerInputType,
    >,
    ///Display name of the registration question.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether an answer to the question is required. The default value is false.
    #[serde(rename = "isRequired")]
    pub is_required: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventRegistrationPredefinedQuestion {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEventRegistrationPredefinedQuestion".to_string())]
    pub odata_type: String,
    ///Display name of the registration question.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether an answer to the question is required. The default value is false.
    #[serde(rename = "isRequired")]
    pub is_required: Option<bool>,
    ///Label of the predefined registration question. It accepts a single line of text: street, city, state, postalCode, countryOrRegion, industry, jobTitle, organization, and unknownFutureValue.
    pub label: Option<MicrosoftGraphVirtualEventRegistrationPredefinedQuestionLabel>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphVirtualEventRegistrationPredefinedQuestionLabel {
    #[serde(rename = "street")]
    #[default]
    Street,
    #[serde(rename = "city")]
    City,
    #[serde(rename = "state")]
    State,
    #[serde(rename = "postalCode")]
    PostalCode,
    #[serde(rename = "countryOrRegion")]
    CountryOrRegion,
    #[serde(rename = "industry")]
    Industry,
    #[serde(rename = "jobTitle")]
    JobTitle,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventRegistrationQuestionAnswer {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Boolean answer of the virtual event registration question. Only appears when answerInputType is boolean.
    #[serde(rename = "booleanValue")]
    pub boolean_value: Option<bool>,
    ///Display name of the registration question.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Collection of text answer of the virtual event registration question. Only appears when answerInputType is multiChoice.
    #[serde(rename = "multiChoiceValues")]
    pub multi_choice_values: Option<Vec<Option<String>>>,
    ///id of the virtual event registration question.
    #[serde(rename = "questionId")]
    pub question_id: Option<String>,
    ///Text answer of the virtual event registration question. Appears when answerInputType is text, multilineText or singleChoice.
    pub value: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphVirtualEventRegistrationQuestionAnswerInputType {
    #[serde(rename = "text")]
    #[default]
    Text,
    #[serde(rename = "multilineText")]
    MultilineText,
    #[serde(rename = "singleChoice")]
    SingleChoice,
    #[serde(rename = "multiChoice")]
    MultiChoice,
    #[serde(rename = "boolean")]
    Boolean,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventRegistrationQuestionBase {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEventRegistrationQuestionBase".to_string())]
    pub odata_type: String,
    ///Display name of the registration question.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether an answer to the question is required. The default value is false.
    #[serde(rename = "isRequired")]
    pub is_required: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventSession {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEventSession".to_string())]
    pub odata_type: String,
    ///Indicates whether attendees can turn on their camera.
    #[serde(rename = "allowAttendeeToEnableCamera")]
    pub allow_attendee_to_enable_camera: Option<bool>,
    ///Indicates whether attendees can turn on their microphone.
    #[serde(rename = "allowAttendeeToEnableMic")]
    pub allow_attendee_to_enable_mic: Option<bool>,
    ///Indicates whether breakout rooms are enabled for the meeting.
    #[serde(rename = "allowBreakoutRooms")]
    pub allow_breakout_rooms: Option<bool>,
    ///Indicates whether the ability to copy and share meeting content is enabled for the meeting.
    #[serde(rename = "allowCopyingAndSharingMeetingContent")]
    pub allow_copying_and_sharing_meeting_content: Option<bool>,
    ///Indicates whether live share is enabled for the meeting. Possible values are: enabled, disabled, unknownFutureValue.
    #[serde(rename = "allowLiveShare")]
    pub allow_live_share: Option<MicrosoftGraphMeetingLiveShareOptions>,
    ///Specifies the mode of the meeting chat.
    #[serde(rename = "allowMeetingChat")]
    pub allow_meeting_chat: Option<MicrosoftGraphMeetingChatMode>,
    ///Specifies if participants are allowed to rename themselves in an instance of the meeting.
    #[serde(rename = "allowParticipantsToChangeName")]
    pub allow_participants_to_change_name: Option<bool>,
    ///Indicates whether PowerPoint live is enabled for the meeting.
    #[serde(rename = "allowPowerPointSharing")]
    pub allow_power_point_sharing: Option<bool>,
    ///Indicates whether recording is enabled for the meeting.
    #[serde(rename = "allowRecording")]
    pub allow_recording: Option<bool>,
    ///Indicates if Teams reactions are enabled for the meeting.
    #[serde(rename = "allowTeamworkReactions")]
    pub allow_teamwork_reactions: Option<bool>,
    ///Indicates whether transcription is enabled for the meeting.
    #[serde(rename = "allowTranscription")]
    pub allow_transcription: Option<bool>,
    ///Indicates whether whiteboard is enabled for the meeting.
    #[serde(rename = "allowWhiteboard")]
    pub allow_whiteboard: Option<bool>,
    ///Specifies the users who can admit from the lobby. Possible values are: organizerAndCoOrganizersAndPresenters, organizerAndCoOrganizers, unknownFutureValue.
    #[serde(rename = "allowedLobbyAdmitters")]
    pub allowed_lobby_admitters: Option<MicrosoftGraphAllowedLobbyAdmitterRoles>,
    ///Specifies who can be a presenter in a meeting. Possible values are: everyone, organization, roleIsPresenter, organizer, unknownFutureValue. Inherited from onlineMeetingBase.
    #[serde(rename = "allowedPresenters")]
    pub allowed_presenters: Option<MicrosoftGraphOnlineMeetingPresenters>,
    ///The attendance reports of an online meeting. Read-only.
    #[serde(rename = "attendanceReports")]
    pub attendance_reports: Option<Vec<MicrosoftGraphMeetingAttendanceReport>>,
    ///The phone access (dial-in) information for an online meeting. Read-only.
    #[serde(rename = "audioConferencing")]
    pub audio_conferencing: Option<MicrosoftGraphAudioConferencing>,
    ///The chat information associated with this online meeting.
    #[serde(rename = "chatInfo")]
    pub chat_info: Option<MicrosoftGraphChatInfo>,
    ///Specifies the configuration settings for meeting chat restrictions.
    #[serde(rename = "chatRestrictions")]
    pub chat_restrictions: Option<MicrosoftGraphChatRestrictions>,
    ///The virtual event session end time.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether end-to-end encryption (E2EE) is enabled for the online meeting.
    #[serde(rename = "isEndToEndEncryptionEnabled")]
    pub is_end_to_end_encryption_enabled: Option<bool>,
    ///Indicates whether to announce when callers join or leave.
    #[serde(rename = "isEntryExitAnnounced")]
    pub is_entry_exit_announced: Option<bool>,
    ///The join information in the language and locale variant specified in 'Accept-Language' request HTTP header. Read-only.
    #[serde(rename = "joinInformation")]
    pub join_information: Option<MicrosoftGraphItemBody>,
    ///Specifies the joinMeetingId, the meeting passcode, and the requirement for the passcode. Once an onlineMeeting is created, the joinMeetingIdSettings can't be modified. To make any changes to this property, you must cancel this meeting and create a new one.
    #[serde(rename = "joinMeetingIdSettings")]
    pub join_meeting_id_settings: Option<MicrosoftGraphJoinMeetingIdSettings>,
    ///The join URL of the online meeting. Read-only.
    #[serde(rename = "joinWebUrl")]
    pub join_web_url: Option<String>,
    ///Specifies which participants can bypass the meeting lobby.
    #[serde(rename = "lobbyBypassSettings")]
    pub lobby_bypass_settings: Option<MicrosoftGraphLobbyBypassSettings>,
    ///Indicates whether to record the meeting automatically.
    #[serde(rename = "recordAutomatically")]
    pub record_automatically: Option<bool>,
    ///Specifies whether meeting chat history is shared with participants.  Possible values are: all, none, unknownFutureValue.
    #[serde(rename = "shareMeetingChatHistoryDefault")]
    pub share_meeting_chat_history_default: Option<
        MicrosoftGraphMeetingChatHistoryDefaultMode,
    >,
    ///The virtual event session start time.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The subject of the online meeting.
    pub subject: Option<String>,
    ///The URL of the video on demand (VOD) for Microsoft Teams events that allows webinar and town hall organizers to quickly publish and share event recordings.
    #[serde(rename = "videoOnDemandWebUrl")]
    pub video_on_demand_web_url: Option<String>,
    ///The video teleconferencing ID. Read-only.
    #[serde(rename = "videoTeleconferenceId")]
    pub video_teleconference_id: Option<String>,
    ///Specifies whether the client application should apply a watermark to a content type.
    #[serde(rename = "watermarkProtection")]
    pub watermark_protection: Option<MicrosoftGraphWatermarkProtectionValues>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether virtual event attendees receive email notifications.
    #[serde(rename = "isAttendeeEmailNotificationEnabled")]
    pub is_attendee_email_notification_enabled: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphVirtualEventStatus {
    #[serde(rename = "draft")]
    #[default]
    Draft,
    #[serde(rename = "published")]
    Published,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventTownhall {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEventTownhall".to_string())]
    pub odata_type: String,
    ///The audience to whom the town hall is visible. Possible values are: everyone, organization, and unknownFutureValue.
    pub audience: Option<MicrosoftGraphMeetingAudience>,
    ///Identity information of the coorganizers of the town hall.
    #[serde(rename = "coOrganizers")]
    pub co_organizers: Option<Vec<MicrosoftGraphCommunicationsUserIdentity>>,
    ///The identity information for the creator of the virtual event. Inherited from virtualEvent.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphCommunicationsIdentitySet>,
    ///A description of the virtual event.
    pub description: Option<MicrosoftGraphItemBody>,
    ///The display name of the virtual event.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The end time of the virtual event. The timeZone property can be set to any of the time zones currently supported by Windows. For details on how to get all available time zones using PowerShell, see Get-TimeZone.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The external information of a virtual event. Returned only for event organizers or coorganizers; otherwise, null.
    #[serde(rename = "externalEventInformation")]
    pub external_event_information: Option<
        Vec<MicrosoftGraphVirtualEventExternalInformation>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The attendees invited to the town hall. The supported identities are: communicationsUserIdentity and communicationsGuestIdentity.
    #[serde(rename = "invitedAttendees")]
    pub invited_attendees: Option<Vec<MicrosoftGraphIdentity>>,
    ///Indicates whether the town hall is only open to invited people and groups within your organization. The isInviteOnly property can only be true if the value of the audience property is set to organization.
    #[serde(rename = "isInviteOnly")]
    pub is_invite_only: Option<bool>,
    ///The virtual event presenters.
    pub presenters: Option<Vec<MicrosoftGraphVirtualEventPresenter>>,
    ///The sessions for the virtual event.
    pub sessions: Option<Vec<MicrosoftGraphVirtualEventSession>>,
    ///The virtual event settings.
    pub settings: Option<MicrosoftGraphVirtualEventSettings>,
    ///Start time of the virtual event. The timeZone property can be set to any of the time zones currently supported by Windows. For details on how to get all available time zones using PowerShell, see Get-TimeZone.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The status of the virtual event. The possible values are: draft, published, canceled, and unknownFutureValue.
    pub status: Option<MicrosoftGraphVirtualEventStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventWebinar {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEventWebinar".to_string())]
    pub odata_type: String,
    ///To whom the webinar is visible. Possible values are: everyone, organization, and unknownFutureValue.
    pub audience: Option<MicrosoftGraphMeetingAudience>,
    ///Identity information of coorganizers of the webinar.
    #[serde(rename = "coOrganizers")]
    pub co_organizers: Option<Vec<MicrosoftGraphCommunicationsUserIdentity>>,
    ///The identity information for the creator of the virtual event. Inherited from virtualEvent.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphCommunicationsIdentitySet>,
    ///A description of the virtual event.
    pub description: Option<MicrosoftGraphItemBody>,
    ///The display name of the virtual event.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The end time of the virtual event. The timeZone property can be set to any of the time zones currently supported by Windows. For details on how to get all available time zones using PowerShell, see Get-TimeZone.
    #[serde(rename = "endDateTime")]
    pub end_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The external information of a virtual event. Returned only for event organizers or coorganizers; otherwise, null.
    #[serde(rename = "externalEventInformation")]
    pub external_event_information: Option<
        Vec<MicrosoftGraphVirtualEventExternalInformation>,
    >,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The virtual event presenters.
    pub presenters: Option<Vec<MicrosoftGraphVirtualEventPresenter>>,
    ///Registration configuration of the webinar.
    #[serde(rename = "registrationConfiguration")]
    pub registration_configuration: Option<
        MicrosoftGraphVirtualEventWebinarRegistrationConfiguration,
    >,
    ///Registration records of the webinar.
    pub registrations: Option<Vec<MicrosoftGraphVirtualEventRegistration>>,
    ///The sessions for the virtual event.
    pub sessions: Option<Vec<MicrosoftGraphVirtualEventSession>>,
    ///The virtual event settings.
    pub settings: Option<MicrosoftGraphVirtualEventSettings>,
    ///Start time of the virtual event. The timeZone property can be set to any of the time zones currently supported by Windows. For details on how to get all available time zones using PowerShell, see Get-TimeZone.
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<MicrosoftGraphDateTimeTimeZone>,
    ///The status of the virtual event. The possible values are: draft, published, canceled, and unknownFutureValue.
    pub status: Option<MicrosoftGraphVirtualEventStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventWebinarRegistrationConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.virtualEventWebinarRegistrationConfiguration".to_string()
    )]
    pub odata_type: String,
    ///Total capacity of the virtual event.
    pub capacity: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    #[serde(rename = "isManualApprovalEnabled")]
    pub is_manual_approval_enabled: Option<bool>,
    #[serde(rename = "isWaitlistEnabled")]
    pub is_waitlist_enabled: Option<bool>,
    ///Registration questions.
    pub questions: Option<Vec<MicrosoftGraphVirtualEventRegistrationQuestionBase>>,
    ///Registration URL of the virtual event.
    #[serde(rename = "registrationWebUrl")]
    pub registration_web_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVirtualEventsRoot {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.virtualEventsRoot".to_string())]
    pub odata_type: String,
    pub events: Option<Vec<MicrosoftGraphVirtualEvent>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of town halls. Nullable.
    pub townhalls: Option<Vec<MicrosoftGraphVirtualEventTownhall>>,
    ///A collection of webinars. Nullable.
    pub webinars: Option<Vec<MicrosoftGraphVirtualEventWebinar>>,
}
///Generic visibility state.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphVisibilitySetting {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "hide")]
    Hide,
    #[serde(rename = "show")]
    Show,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVisualInfo {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Optional. JSON object used to represent an icon which represents the application used to generate the activity
    pub attribution: Option<MicrosoftGraphImageInfo>,
    ///Optional. Background color used to render the activity in the UI - brand color for the application source of the activity. Must be a valid hex color
    #[serde(rename = "backgroundColor")]
    pub background_color: Option<String>,
    ///Optional. Custom piece of data - JSON object used to provide custom content to render the activity in the Windows Shell UI
    pub content: Option<serde_json::Value>,
    ///Optional. Longer text description of the user's unique activity (example: document name, first sentence, and/or metadata)
    pub description: Option<String>,
    ///Required. Short text description of the user's unique activity (for example, document name in cases where an activity refers to document creation)
    #[serde(rename = "displayText")]
    pub display_text: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVoiceAuthenticationMethodConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.voiceAuthenticationMethodConfiguration".to_string())]
    pub odata_type: String,
    ///Groups of users that are excluded from a policy.
    #[serde(rename = "excludeTargets")]
    pub exclude_targets: Option<Vec<MicrosoftGraphExcludeTarget>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of groups that are enabled to use the authentication method. Expanded by default.
    #[serde(rename = "includeTargets")]
    pub include_targets: Option<Vec<MicrosoftGraphAuthenticationMethodTarget>>,
    ///true if users can register office phones, otherwise, false.
    #[serde(rename = "isOfficePhoneAllowed")]
    pub is_office_phone_allowed: Option<bool>,
    ///The state of the policy. Possible values are: enabled, disabled.
    pub state: Option<MicrosoftGraphAuthenticationMethodState>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphVolumeType {
    #[serde(rename = "operatingSystemVolume")]
    #[default]
    OperatingSystemVolume,
    #[serde(rename = "fixedDataVolume")]
    FixedDataVolume,
    #[serde(rename = "removableDataVolume")]
    RemovableDataVolume,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///Contains properties for iOS Volume-Purchased Program (Vpp) Licensing Type.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVppLicensingType {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Whether the program supports the device licensing type.
    #[serde(rename = "supportsDeviceLicensing")]
    pub supports_device_licensing: Option<bool>,
    ///Whether the program supports the user licensing type.
    #[serde(rename = "supportsUserLicensing")]
    pub supports_user_licensing: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVppToken {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.vppToken".to_string())]
    pub odata_type: String,
    ///The Apple ID associated with the given Apple Volume Purchase Program Token.
    #[serde(rename = "appleId")]
    pub apple_id: Option<String>,
    ///Whether or not apps for the VPP token will be automatically updated.
    #[serde(rename = "automaticallyUpdateApps")]
    pub automatically_update_apps: Option<bool>,
    ///The country or region associated with the Apple Volume Purchase Program Token.
    #[serde(rename = "countryOrRegion")]
    pub country_or_region: Option<String>,
    ///The expiration date time of the Apple Volume Purchase Program Token.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modification date time associated with the Apple Volume Purchase Program Token.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The last time when an application sync was done with the Apple volume purchase program service using the the Apple Volume Purchase Program Token.
    #[serde(rename = "lastSyncDateTime")]
    pub last_sync_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Possible sync statuses associated with an Apple Volume Purchase Program token.
    #[serde(rename = "lastSyncStatus")]
    pub last_sync_status: Option<MicrosoftGraphVppTokenSyncStatus>,
    ///The organization associated with the Apple Volume Purchase Program Token
    #[serde(rename = "organizationName")]
    pub organization_name: Option<String>,
    ///Possible states associated with an Apple Volume Purchase Program token.
    pub state: Option<MicrosoftGraphVppTokenState>,
    ///The Apple Volume Purchase Program Token string downloaded from the Apple Volume Purchase Program.
    pub token: Option<String>,
    ///Possible types of an Apple Volume Purchase Program token.
    #[serde(rename = "vppTokenAccountType")]
    pub vpp_token_account_type: Option<MicrosoftGraphVppTokenAccountType>,
}
///Possible types of an Apple Volume Purchase Program token.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphVppTokenAccountType {
    #[serde(rename = "business")]
    #[default]
    Business,
    #[serde(rename = "education")]
    Education,
}
///Possible states associated with an Apple Volume Purchase Program token.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphVppTokenState {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "valid")]
    Valid,
    #[serde(rename = "expired")]
    Expired,
    #[serde(rename = "invalid")]
    Invalid,
    #[serde(rename = "assignedToExternalMDM")]
    AssignedToExternalMdm,
}
///Possible sync statuses associated with an Apple Volume Purchase Program token.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphVppTokenSyncStatus {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "inProgress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "failed")]
    Failed,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphVulnerabilityState {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Common Vulnerabilities and Exposures (CVE) for the vulnerability.
    pub cve: Option<String>,
    ///Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
    pub severity: Option<String>,
    ///Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
    #[serde(rename = "wasRunning")]
    pub was_running: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWatermarkProtectionValues {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether to apply a watermark to any shared content.
    #[serde(rename = "isEnabledForContentSharing")]
    pub is_enabled_for_content_sharing: Option<bool>,
    ///Indicates whether to apply a watermark to everyone's video feed.
    #[serde(rename = "isEnabledForVideo")]
    pub is_enabled_for_video: Option<bool>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWeakAlgorithms {
    #[serde(rename = "rsaSha1")]
    #[default]
    RsaSha1,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWebApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.webApp".to_string())]
    pub odata_type: String,
    ///The web app URL. This property cannot be PATCHed.
    #[serde(rename = "appUrl")]
    pub app_url: Option<String>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///Whether or not to use managed browser. This property is only applicable for Android and IOS.
    #[serde(rename = "useManagedBrowser")]
    pub use_managed_browser: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWebApplication {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Home page or landing page of the application.
    #[serde(rename = "homePageUrl")]
    pub home_page_url: Option<String>,
    ///Specifies whether this web application can request tokens using the OAuth 2.0 implicit flow.
    #[serde(rename = "implicitGrantSettings")]
    pub implicit_grant_settings: Option<MicrosoftGraphImplicitGrantSettings>,
    ///Specifies the URL that is used by Microsoft's authorization service to log out a user using front-channel, back-channel or SAML logout protocols.
    #[serde(rename = "logoutUrl")]
    pub logout_url: Option<String>,
    #[serde(rename = "redirectUriSettings")]
    pub redirect_uri_settings: Option<Vec<MicrosoftGraphRedirectUriSettings>>,
    ///Specifies the URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
    #[serde(rename = "redirectUris")]
    pub redirect_uris: Option<Vec<String>>,
}
///Web Browser Cookie Settings.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWebBrowserCookieSettings {
    #[serde(rename = "browserDefault")]
    #[default]
    BrowserDefault,
    #[serde(rename = "blockAlways")]
    BlockAlways,
    #[serde(rename = "allowCurrentWebSite")]
    AllowCurrentWebSite,
    #[serde(rename = "allowFromWebsitesVisited")]
    AllowFromWebsitesVisited,
    #[serde(rename = "allowAlways")]
    AllowAlways,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWebPart {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.webPart".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWebPartData {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Data version of the web part. The value is defined by the web part developer. Different dataVersions usually refers to a different property structure.
    #[serde(rename = "dataVersion")]
    pub data_version: Option<String>,
    ///Description of the web part.
    pub description: Option<String>,
    ///Properties bag of the web part.
    pub properties: Option<serde_json::Value>,
    ///Contains collections of data that can be processed by server side services like search index and link fixup.
    #[serde(rename = "serverProcessedContent")]
    pub server_processed_content: Option<MicrosoftGraphServerProcessedContent>,
    ///Title of the web part.
    pub title: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWebsite {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The URL of the website.
    pub address: Option<String>,
    ///The display name of the web site.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The possible values are: other, home, work, blog, profile.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphWebsiteType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWebsiteType {
    #[serde(rename = "other")]
    #[default]
    Other,
    #[serde(rename = "home")]
    Home,
    #[serde(rename = "work")]
    Work,
    #[serde(rename = "blog")]
    Blog,
    #[serde(rename = "profile")]
    Profile,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWeekIndex {
    #[serde(rename = "first")]
    #[default]
    First,
    #[serde(rename = "second")]
    Second,
    #[serde(rename = "third")]
    Third,
    #[serde(rename = "fourth")]
    Fourth,
    #[serde(rename = "last")]
    Last,
}
///Possible values for a weekly schedule.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWeeklySchedule {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "everyday")]
    Everyday,
    #[serde(rename = "sunday")]
    Sunday,
    #[serde(rename = "monday")]
    Monday,
    #[serde(rename = "tuesday")]
    Tuesday,
    #[serde(rename = "wednesday")]
    Wednesday,
    #[serde(rename = "thursday")]
    Thursday,
    #[serde(rename = "friday")]
    Friday,
    #[serde(rename = "saturday")]
    Saturday,
}
///Possible values for welcome screen meeting information.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWelcomeScreenMeetingInformation {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "showOrganizerAndTimeOnly")]
    ShowOrganizerAndTimeOnly,
    #[serde(rename = "showOrganizerAndTimeAndSubject")]
    ShowOrganizerAndTimeAndSubject,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWellknownListName {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "defaultList")]
    DefaultList,
    #[serde(rename = "flaggedEmails")]
    FlaggedEmails,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWhatIfAnalysisReasons {
    #[serde(rename = "notSet")]
    #[default]
    NotSet,
    #[serde(rename = "notEnoughInformation")]
    NotEnoughInformation,
    #[serde(rename = "invalidCondition")]
    InvalidCondition,
    #[serde(rename = "users")]
    Users,
    #[serde(rename = "workloadIdentities")]
    WorkloadIdentities,
    #[serde(rename = "application")]
    Application,
    #[serde(rename = "userActions")]
    UserActions,
    #[serde(rename = "authenticationContext")]
    AuthenticationContext,
    #[serde(rename = "devicePlatform")]
    DevicePlatform,
    #[serde(rename = "devices")]
    Devices,
    #[serde(rename = "clientApps")]
    ClientApps,
    #[serde(rename = "location")]
    Location,
    #[serde(rename = "signInRisk")]
    SignInRisk,
    #[serde(rename = "emptyPolicy")]
    EmptyPolicy,
    #[serde(rename = "invalidPolicy")]
    InvalidPolicy,
    #[serde(rename = "policyNotEnabled")]
    PolicyNotEnabled,
    #[serde(rename = "userRisk")]
    UserRisk,
    #[serde(rename = "time")]
    Time,
    #[serde(rename = "insiderRisk")]
    InsiderRisk,
    #[serde(rename = "authenticationFlow")]
    AuthenticationFlow,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWhatIfAnalysisResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.whatIfAnalysisResult".to_string())]
    pub odata_type: String,
    #[serde(rename = "analysisReasons")]
    pub analysis_reasons: Option<MicrosoftGraphWhatIfAnalysisReasons>,
    pub conditions: Option<MicrosoftGraphConditionalAccessConditionSet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Readonly.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    pub description: Option<String>,
    ///Specifies a display name for the conditionalAccessPolicy object.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Specifies the grant controls that must be fulfilled to pass the policy.
    #[serde(rename = "grantControls")]
    pub grant_controls: Option<MicrosoftGraphConditionalAccessGrantControls>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Readonly.
    #[serde(rename = "modifiedDateTime")]
    pub modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies whether the policy applies to the sign-in properties provided in the request body. If policyApplies is true, the policy applies to the sign-in based on the sign-in properties provided. If policyApplies is false, the policy doesn't apply to the sign-in based on the sign-in properties provided and the analysisReasons property is populated to show the reason for the policy not applying.
    #[serde(rename = "policyApplies")]
    pub policy_applies: Option<bool>,
    ///Specifies the session controls that are enforced after sign-in.
    #[serde(rename = "sessionControls")]
    pub session_controls: Option<MicrosoftGraphConditionalAccessSessionControls>,
    pub state: Option<MicrosoftGraphConditionalAccessPolicyState>,
    ///Specifies the unique identifier of a Conditional Access template. Inherited from entity.
    #[serde(rename = "templateId")]
    pub template_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.win32LobApp".to_string())]
    pub odata_type: String,
    ///Indicates the Windows architecture(s) this app should be installed on. The app will be treated as not applicable for devices with architectures not matching the selected value. When a non-null value is provided for the `allowedArchitectures` property, the value of the `applicableArchitectures` property is set to `none`. Possible values are: `null`, `x86`, `x64`, `arm64`.
    #[serde(rename = "allowedArchitectures")]
    pub allowed_architectures: Option<MicrosoftGraphWindowsArchitecture>,
    ///Contains properties for Windows architecture.
    #[serde(rename = "applicableArchitectures")]
    pub applicable_architectures: Option<MicrosoftGraphWindowsArchitecture>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The command line to install this app
    #[serde(rename = "installCommandLine")]
    pub install_command_line: Option<String>,
    ///The install experience for this app.
    #[serde(rename = "installExperience")]
    pub install_experience: Option<MicrosoftGraphWin32LobAppInstallExperience>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The value for the minimum CPU speed which is required to install this app.
    #[serde(rename = "minimumCpuSpeedInMHz")]
    pub minimum_cpu_speed_in_mhz: Option<f64>,
    ///The value for the minimum free disk space which is required to install this app.
    #[serde(rename = "minimumFreeDiskSpaceInMB")]
    pub minimum_free_disk_space_in_mb: Option<f64>,
    ///The value for the minimum physical memory which is required to install this app.
    #[serde(rename = "minimumMemoryInMB")]
    pub minimum_memory_in_mb: Option<f64>,
    ///The value for the minimum number of processors which is required to install this app.
    #[serde(rename = "minimumNumberOfProcessors")]
    pub minimum_number_of_processors: Option<f64>,
    ///The value for the minimum supported windows release.
    #[serde(rename = "minimumSupportedWindowsRelease")]
    pub minimum_supported_windows_release: Option<String>,
    ///The MSI details if this Win32 app is an MSI app.
    #[serde(rename = "msiInformation")]
    pub msi_information: Option<MicrosoftGraphWin32LobAppMsiInformation>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The return codes for post installation behavior.
    #[serde(rename = "returnCodes")]
    pub return_codes: Option<Vec<MicrosoftGraphWin32LobAppReturnCode>>,
    ///The detection and requirement rules for this app.
    pub rules: Option<Vec<MicrosoftGraphWin32LobAppRule>>,
    ///The relative path of the setup file in the encrypted Win32LobApp package.
    #[serde(rename = "setupFilePath")]
    pub setup_file_path: Option<String>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
    ///The command line to uninstall this app
    #[serde(rename = "uninstallCommandLine")]
    pub uninstall_command_line: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobAppAssignmentSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.win32LobAppAssignmentSettings".to_string())]
    pub odata_type: String,
    ///The auto-update settings to apply for this app assignment.
    #[serde(rename = "autoUpdateSettings")]
    pub auto_update_settings: Option<MicrosoftGraphWin32LobAppAutoUpdateSettings>,
    ///Contains value for delivery optimization priority.
    #[serde(rename = "deliveryOptimizationPriority")]
    pub delivery_optimization_priority: Option<
        MicrosoftGraphWin32LobAppDeliveryOptimizationPriority,
    >,
    ///The install time settings to apply for this app assignment.
    #[serde(rename = "installTimeSettings")]
    pub install_time_settings: Option<MicrosoftGraphMobileAppInstallTimeSettings>,
    ///Contains value for notification status.
    pub notifications: Option<MicrosoftGraphWin32LobAppNotification>,
    ///The reboot settings to apply for this app assignment.
    #[serde(rename = "restartSettings")]
    pub restart_settings: Option<MicrosoftGraphWin32LobAppRestartSettings>,
}
///Contains properties used to perform the auto-update of an application.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobAppAutoUpdateSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Contains value for auto-update superseded apps.
    #[serde(rename = "autoUpdateSupersededAppsState")]
    pub auto_update_superseded_apps_state: Option<
        MicrosoftGraphWin32LobAutoUpdateSupersededAppsState,
    >,
}
///Contains value for delivery optimization priority.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWin32LobAppDeliveryOptimizationPriority {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "foreground")]
    Foreground,
}
///A list of possible operations for rules used to make determinations about an application based on files or folders. Unless noted, can be used with either detection or requirement rules.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWin32LobAppFileSystemOperationType {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "exists")]
    Exists,
    #[serde(rename = "modifiedDate")]
    ModifiedDate,
    #[serde(rename = "createdDate")]
    CreatedDate,
    #[serde(rename = "version")]
    Version,
    #[serde(rename = "sizeInMB")]
    SizeInMb,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobAppFileSystemRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.win32LobAppFileSystemRule".to_string())]
    pub odata_type: String,
    ///A value indicating whether to expand environment variables in the 32-bit context on 64-bit systems.
    #[serde(rename = "check32BitOn64System")]
    pub check32bit_on64system: Option<bool>,
    ///The file or folder comparison value.
    #[serde(rename = "comparisonValue")]
    pub comparison_value: Option<String>,
    ///The file or folder name to look up.
    #[serde(rename = "fileOrFolderName")]
    pub file_or_folder_name: Option<String>,
    ///A list of possible operations for rules used to make determinations about an application based on files or folders. Unless noted, can be used with either detection or requirement rules.
    #[serde(rename = "operationType")]
    pub operation_type: Option<MicrosoftGraphWin32LobAppFileSystemOperationType>,
    ///Contains properties for detection operator.
    pub operator: Option<MicrosoftGraphWin32LobAppRuleOperator>,
    ///The file or folder path to look up.
    pub path: Option<String>,
    ///Contains rule types for Win32 LOB apps.
    #[serde(rename = "ruleType")]
    pub rule_type: Option<MicrosoftGraphWin32LobAppRuleType>,
}
///Contains installation experience properties for a Win32 App
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobAppInstallExperience {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates the type of restart action.
    #[serde(rename = "deviceRestartBehavior")]
    pub device_restart_behavior: Option<MicrosoftGraphWin32LobAppRestartBehavior>,
    ///Indicates the type of execution context the app runs in.
    #[serde(rename = "runAsAccount")]
    pub run_as_account: Option<MicrosoftGraphRunAsAccountType>,
}
///Contains MSI app properties for a Win32 App.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobAppMsiInformation {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates the package type of an MSI Win32LobApp.
    #[serde(rename = "packageType")]
    pub package_type: Option<MicrosoftGraphWin32LobAppMsiPackageType>,
    ///The MSI product code.
    #[serde(rename = "productCode")]
    pub product_code: Option<String>,
    ///The MSI product name.
    #[serde(rename = "productName")]
    pub product_name: Option<String>,
    ///The MSI product version.
    #[serde(rename = "productVersion")]
    pub product_version: Option<String>,
    ///The MSI publisher.
    pub publisher: Option<String>,
    ///Whether the MSI app requires the machine to reboot to complete installation.
    #[serde(rename = "requiresReboot")]
    pub requires_reboot: Option<bool>,
    ///The MSI upgrade code.
    #[serde(rename = "upgradeCode")]
    pub upgrade_code: Option<String>,
}
///Indicates the package type of an MSI Win32LobApp.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWin32LobAppMsiPackageType {
    #[serde(rename = "perMachine")]
    #[default]
    PerMachine,
    #[serde(rename = "perUser")]
    PerUser,
    #[serde(rename = "dualPurpose")]
    DualPurpose,
}
///Contains value for notification status.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWin32LobAppNotification {
    #[serde(rename = "showAll")]
    #[default]
    ShowAll,
    #[serde(rename = "showReboot")]
    ShowReboot,
    #[serde(rename = "hideAll")]
    HideAll,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobAppPowerShellScriptRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.win32LobAppPowerShellScriptRule".to_string())]
    pub odata_type: String,
    ///The script output comparison value. Do not specify a value if the rule is used for detection.
    #[serde(rename = "comparisonValue")]
    pub comparison_value: Option<String>,
    ///The display name for the rule. Do not specify this value if the rule is used for detection.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///A value indicating whether a signature check is enforced.
    #[serde(rename = "enforceSignatureCheck")]
    pub enforce_signature_check: Option<bool>,
    ///Contains all supported Powershell Script output detection type.
    #[serde(rename = "operationType")]
    pub operation_type: Option<
        MicrosoftGraphWin32LobAppPowerShellScriptRuleOperationType,
    >,
    ///Contains properties for detection operator.
    pub operator: Option<MicrosoftGraphWin32LobAppRuleOperator>,
    ///Contains rule types for Win32 LOB apps.
    #[serde(rename = "ruleType")]
    pub rule_type: Option<MicrosoftGraphWin32LobAppRuleType>,
    ///A value indicating whether the script should run as 32-bit.
    #[serde(rename = "runAs32Bit")]
    pub run_as32bit: Option<bool>,
    ///The execution context of the script. Do not specify this value if the rule is used for detection. Script detection rules will run in the same context as the associated app install context. Possible values are: system, user.
    #[serde(rename = "runAsAccount")]
    pub run_as_account: Option<MicrosoftGraphRunAsAccountType>,
    ///The base64-encoded script content.
    #[serde(rename = "scriptContent")]
    pub script_content: Option<String>,
}
///Contains all supported Powershell Script output detection type.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWin32LobAppPowerShellScriptRuleOperationType {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "dateTime")]
    DateTime,
    #[serde(rename = "integer")]
    Integer,
    #[serde(rename = "float")]
    Float,
    #[serde(rename = "version")]
    Version,
    #[serde(rename = "boolean")]
    Boolean,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobAppProductCodeRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.win32LobAppProductCodeRule".to_string())]
    pub odata_type: String,
    ///The product code of the app.
    #[serde(rename = "productCode")]
    pub product_code: Option<String>,
    ///The product version comparison value.
    #[serde(rename = "productVersion")]
    pub product_version: Option<String>,
    ///Contains properties for detection operator.
    #[serde(rename = "productVersionOperator")]
    pub product_version_operator: Option<MicrosoftGraphWin32LobAppRuleOperator>,
    ///Contains rule types for Win32 LOB apps.
    #[serde(rename = "ruleType")]
    pub rule_type: Option<MicrosoftGraphWin32LobAppRuleType>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobAppRegistryRule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.win32LobAppRegistryRule".to_string())]
    pub odata_type: String,
    ///A value indicating whether to search the 32-bit registry on 64-bit systems.
    #[serde(rename = "check32BitOn64System")]
    pub check32bit_on64system: Option<bool>,
    ///The registry comparison value.
    #[serde(rename = "comparisonValue")]
    pub comparison_value: Option<String>,
    ///The full path of the registry entry containing the value to detect.
    #[serde(rename = "keyPath")]
    pub key_path: Option<String>,
    ///A list of possible operations for rules used to make determinations about an application based on registry keys or values. Unless noted, the values can be used with either detection or requirement rules.
    #[serde(rename = "operationType")]
    pub operation_type: Option<MicrosoftGraphWin32LobAppRegistryRuleOperationType>,
    ///Contains properties for detection operator.
    pub operator: Option<MicrosoftGraphWin32LobAppRuleOperator>,
    ///Contains rule types for Win32 LOB apps.
    #[serde(rename = "ruleType")]
    pub rule_type: Option<MicrosoftGraphWin32LobAppRuleType>,
    ///The name of the registry value to detect.
    #[serde(rename = "valueName")]
    pub value_name: Option<String>,
}
///A list of possible operations for rules used to make determinations about an application based on registry keys or values. Unless noted, the values can be used with either detection or requirement rules.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWin32LobAppRegistryRuleOperationType {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "exists")]
    Exists,
    #[serde(rename = "doesNotExist")]
    DoesNotExist,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "integer")]
    Integer,
    #[serde(rename = "version")]
    Version,
}
///Indicates the type of restart action.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWin32LobAppRestartBehavior {
    #[serde(rename = "basedOnReturnCode")]
    #[default]
    BasedOnReturnCode,
    #[serde(rename = "allow")]
    Allow,
    #[serde(rename = "suppress")]
    Suppress,
    #[serde(rename = "force")]
    Force,
}
///Contains properties describing restart coordination following an app installation.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobAppRestartSettings {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The number of minutes before the restart time to display the countdown dialog for pending restarts.
    #[serde(rename = "countdownDisplayBeforeRestartInMinutes")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub countdown_display_before_restart_in_minutes: Option<f64>,
    ///The number of minutes to wait before restarting the device after an app installation.
    #[serde(rename = "gracePeriodInMinutes")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub grace_period_in_minutes: Option<f64>,
    ///The number of minutes to snooze the restart notification dialog when the snooze button is selected.
    #[serde(rename = "restartNotificationSnoozeDurationInMinutes")]
    pub restart_notification_snooze_duration_in_minutes: Option<f64>,
}
///Contains return code properties for a Win32 App
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobAppReturnCode {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Return code.
    #[serde(rename = "returnCode")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub return_code: Option<f64>,
    ///Indicates the type of return code.
    #[serde(rename = "type")]
    pub r#type: Option<MicrosoftGraphWin32LobAppReturnCodeType>,
}
///Indicates the type of return code.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWin32LobAppReturnCodeType {
    #[serde(rename = "failed")]
    #[default]
    Failed,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "softReboot")]
    SoftReboot,
    #[serde(rename = "hardReboot")]
    HardReboot,
    #[serde(rename = "retry")]
    Retry,
}
///A base complex type to store the detection or requirement rule data for a Win32 LOB app.
discriminated_enum! {
    pub enum MicrosoftGraphWin32LobAppRule { discriminator : "@odata.type", variants :
    [("#microsoft.graph.win32LobAppFileSystemRule",
    MicrosoftGraphWin32LobAppFileSystemRule(Box < MicrosoftGraphWin32LobAppFileSystemRule
    >)), ("#microsoft.graph.win32LobAppPowerShellScriptRule",
    MicrosoftGraphWin32LobAppPowerShellScriptRule(Box <
    MicrosoftGraphWin32LobAppPowerShellScriptRule >)),
    ("#microsoft.graph.win32LobAppProductCodeRule",
    MicrosoftGraphWin32LobAppProductCodeRule(Box <
    MicrosoftGraphWin32LobAppProductCodeRule >)),
    ("#microsoft.graph.win32LobAppRegistryRule",
    MicrosoftGraphWin32LobAppRegistryRule(Box < MicrosoftGraphWin32LobAppRegistryRule
    >))], fallback : Win32LobAppRule(Box < MicrosoftGraphWin32LobAppRuleBase >), }
}
///A base complex type to store the detection or requirement rule data for a Win32 LOB app.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWin32LobAppRuleBase {
    ///Contains rule types for Win32 LOB apps.
    #[serde(rename = "ruleType")]
    pub rule_type: Option<MicrosoftGraphWin32LobAppRuleType>,
}
///Contains properties for detection operator.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWin32LobAppRuleOperator {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "equal")]
    Equal,
    #[serde(rename = "notEqual")]
    NotEqual,
    #[serde(rename = "greaterThan")]
    GreaterThan,
    #[serde(rename = "greaterThanOrEqual")]
    GreaterThanOrEqual,
    #[serde(rename = "lessThan")]
    LessThan,
    #[serde(rename = "lessThanOrEqual")]
    LessThanOrEqual,
}
///Contains rule types for Win32 LOB apps.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWin32LobAppRuleType {
    #[serde(rename = "detection")]
    #[default]
    Detection,
    #[serde(rename = "requirement")]
    Requirement,
}
///Contains value for auto-update superseded apps.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWin32LobAutoUpdateSupersededAppsState {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows10CompliancePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windows10CompliancePolicy".to_string())]
    pub odata_type: String,
    ///The collection of assignments for this compliance policy.
    pub assignments: Option<Vec<MicrosoftGraphDeviceCompliancePolicyAssignment>>,
    ///Require devices to be reported healthy by Windows Device Health Attestation - bit locker is enabled
    #[serde(rename = "bitLockerEnabled")]
    pub bit_locker_enabled: Option<bool>,
    ///Require devices to be reported as healthy by Windows Device Health Attestation.
    #[serde(rename = "codeIntegrityEnabled")]
    pub code_integrity_enabled: Option<bool>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Compliance Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device compliance devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceComplianceDeviceOverview>,
    ///List of DeviceComplianceDeviceStatus.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceComplianceDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Require devices to be reported as healthy by Windows Device Health Attestation - early launch antimalware driver is enabled.
    #[serde(rename = "earlyLaunchAntiMalwareDriverEnabled")]
    pub early_launch_anti_malware_driver_enabled: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Maximum Windows Phone version.
    #[serde(rename = "mobileOsMaximumVersion")]
    pub mobile_os_maximum_version: Option<String>,
    ///Minimum Windows Phone version.
    #[serde(rename = "mobileOsMinimumVersion")]
    pub mobile_os_minimum_version: Option<String>,
    ///Maximum Windows 10 version.
    #[serde(rename = "osMaximumVersion")]
    pub os_maximum_version: Option<String>,
    ///Minimum Windows 10 version.
    #[serde(rename = "osMinimumVersion")]
    pub os_minimum_version: Option<String>,
    ///Indicates whether or not to block simple password.
    #[serde(rename = "passwordBlockSimple")]
    pub password_block_simple: Option<bool>,
    ///The password expiration in days.
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///The number of character sets required in the password.
    #[serde(rename = "passwordMinimumCharacterSetCount")]
    pub password_minimum_character_set_count: Option<f64>,
    ///The minimum password length.
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///Minutes of inactivity before a password is required.
    #[serde(rename = "passwordMinutesOfInactivityBeforeLock")]
    pub password_minutes_of_inactivity_before_lock: Option<f64>,
    ///The number of previous passwords to prevent re-use of.
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Require a password to unlock Windows device.
    #[serde(rename = "passwordRequired")]
    pub password_required: Option<bool>,
    ///Require a password to unlock an idle device.
    #[serde(rename = "passwordRequiredToUnlockFromIdle")]
    pub password_required_to_unlock_from_idle: Option<bool>,
    ///Possible values of required passwords.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphRequiredPasswordType>,
    ///Require devices to be reported as healthy by Windows Device Health Attestation.
    #[serde(rename = "requireHealthyDeviceReport")]
    pub require_healthy_device_report: Option<bool>,
    ///The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.
    #[serde(rename = "scheduledActionsForRule")]
    pub scheduled_actions_for_rule: Option<
        Vec<MicrosoftGraphDeviceComplianceScheduledActionForRule>,
    >,
    ///Require devices to be reported as healthy by Windows Device Health Attestation - secure boot is enabled.
    #[serde(rename = "secureBootEnabled")]
    pub secure_boot_enabled: Option<bool>,
    ///Require encryption on windows devices.
    #[serde(rename = "storageRequireEncryption")]
    pub storage_require_encryption: Option<bool>,
    ///Device compliance users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceComplianceUserOverview>,
    ///List of DeviceComplianceUserStatus.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceComplianceUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows10CustomConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windows10CustomConfiguration".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///OMA settings. This collection can contain a maximum of 1000 elements.
    #[serde(rename = "omaSettings")]
    pub oma_settings: Option<Vec<MicrosoftGraphOmaSetting>>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Windows 10 Edition type.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindows10EditionType {
    #[serde(rename = "windows10Enterprise")]
    #[default]
    Windows10Enterprise,
    #[serde(rename = "windows10EnterpriseN")]
    Windows10EnterpriseN,
    #[serde(rename = "windows10Education")]
    Windows10Education,
    #[serde(rename = "windows10EducationN")]
    Windows10EducationN,
    #[serde(rename = "windows10MobileEnterprise")]
    Windows10MobileEnterprise,
    #[serde(rename = "windows10HolographicEnterprise")]
    Windows10HolographicEnterprise,
    #[serde(rename = "windows10Professional")]
    Windows10Professional,
    #[serde(rename = "windows10ProfessionalN")]
    Windows10ProfessionalN,
    #[serde(rename = "windows10ProfessionalEducation")]
    Windows10ProfessionalEducation,
    #[serde(rename = "windows10ProfessionalEducationN")]
    Windows10ProfessionalEducationN,
    #[serde(rename = "windows10ProfessionalWorkstation")]
    Windows10ProfessionalWorkstation,
    #[serde(rename = "windows10ProfessionalWorkstationN")]
    Windows10ProfessionalWorkstationN,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows10EndpointProtectionConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windows10EndpointProtectionConfiguration".to_string())]
    pub odata_type: String,
    ///Possible values of AppLocker Application Control Types
    #[serde(rename = "appLockerApplicationControl")]
    pub app_locker_application_control: Option<
        MicrosoftGraphAppLockerApplicationControlType,
    >,
    ///Allow persisting user generated data inside the App Guard Containter (favorites, cookies, web passwords, etc.)
    #[serde(rename = "applicationGuardAllowPersistence")]
    pub application_guard_allow_persistence: Option<bool>,
    ///Allow printing to Local Printers from Container
    #[serde(rename = "applicationGuardAllowPrintToLocalPrinters")]
    pub application_guard_allow_print_to_local_printers: Option<bool>,
    ///Allow printing to Network Printers from Container
    #[serde(rename = "applicationGuardAllowPrintToNetworkPrinters")]
    pub application_guard_allow_print_to_network_printers: Option<bool>,
    ///Allow printing to PDF from Container
    #[serde(rename = "applicationGuardAllowPrintToPDF")]
    pub application_guard_allow_print_to_pdf: Option<bool>,
    ///Allow printing to XPS from Container
    #[serde(rename = "applicationGuardAllowPrintToXPS")]
    pub application_guard_allow_print_to_xps: Option<bool>,
    ///Possible values for applicationGuardBlockClipboardSharingType
    #[serde(rename = "applicationGuardBlockClipboardSharing")]
    pub application_guard_block_clipboard_sharing: Option<
        MicrosoftGraphApplicationGuardBlockClipboardSharingType,
    >,
    ///Possible values for applicationGuardBlockFileTransfer
    #[serde(rename = "applicationGuardBlockFileTransfer")]
    pub application_guard_block_file_transfer: Option<
        MicrosoftGraphApplicationGuardBlockFileTransferType,
    >,
    ///Block enterprise sites to load non-enterprise content, such as third party plug-ins
    #[serde(rename = "applicationGuardBlockNonEnterpriseContent")]
    pub application_guard_block_non_enterprise_content: Option<bool>,
    ///Enable Windows Defender Application Guard
    #[serde(rename = "applicationGuardEnabled")]
    pub application_guard_enabled: Option<bool>,
    ///Force auditing will persist Windows logs and events to meet security/compliance criteria (sample events are user login-logoff, use of privilege rights, software installation, system changes, etc.)
    #[serde(rename = "applicationGuardForceAuditing")]
    pub application_guard_force_auditing: Option<bool>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///Allows the Admin to disable the warning prompt for other disk encryption on the user machines.
    #[serde(rename = "bitLockerDisableWarningForOtherDiskEncryption")]
    pub bit_locker_disable_warning_for_other_disk_encryption: Option<bool>,
    ///Allows the admin to require encryption to be turned on using BitLocker. This policy is valid only for a mobile SKU.
    #[serde(rename = "bitLockerEnableStorageCardEncryptionOnMobile")]
    pub bit_locker_enable_storage_card_encryption_on_mobile: Option<bool>,
    ///Allows the admin to require encryption to be turned on using BitLocker.
    #[serde(rename = "bitLockerEncryptDevice")]
    pub bit_locker_encrypt_device: Option<bool>,
    ///BitLocker Removable Drive Policy.
    #[serde(rename = "bitLockerRemovableDrivePolicy")]
    pub bit_locker_removable_drive_policy: Option<
        MicrosoftGraphBitLockerRemovableDrivePolicy,
    >,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///List of folder paths to be added to the list of protected folders
    #[serde(rename = "defenderAdditionalGuardedFolders")]
    pub defender_additional_guarded_folders: Option<Vec<Option<String>>>,
    ///List of exe files and folders to be excluded from attack surface reduction rules
    #[serde(rename = "defenderAttackSurfaceReductionExcludedPaths")]
    pub defender_attack_surface_reduction_excluded_paths: Option<Vec<Option<String>>>,
    ///Xml content containing information regarding exploit protection details.
    #[serde(rename = "defenderExploitProtectionXml")]
    pub defender_exploit_protection_xml: Option<String>,
    ///Name of the file from which DefenderExploitProtectionXml was obtained.
    #[serde(rename = "defenderExploitProtectionXmlFileName")]
    pub defender_exploit_protection_xml_file_name: Option<String>,
    ///List of paths to exe that are allowed to access protected folders
    #[serde(rename = "defenderGuardedFoldersAllowedAppPaths")]
    pub defender_guarded_folders_allowed_app_paths: Option<Vec<Option<String>>>,
    ///Indicates whether or not to block user from overriding Exploit Protection settings.
    #[serde(rename = "defenderSecurityCenterBlockExploitProtectionOverride")]
    pub defender_security_center_block_exploit_protection_override: Option<bool>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Blocks stateful FTP connections to the device
    #[serde(rename = "firewallBlockStatefulFTP")]
    pub firewall_block_stateful_ftp: Option<bool>,
    ///Possible values for firewallCertificateRevocationListCheckMethod
    #[serde(rename = "firewallCertificateRevocationListCheckMethod")]
    pub firewall_certificate_revocation_list_check_method: Option<
        MicrosoftGraphFirewallCertificateRevocationListCheckMethodType,
    >,
    ///Configures IPSec exemptions to allow both IPv4 and IPv6 DHCP traffic
    #[serde(rename = "firewallIPSecExemptionsAllowDHCP")]
    pub firewall_ipsec_exemptions_allow_dhcp: Option<bool>,
    ///Configures IPSec exemptions to allow ICMP
    #[serde(rename = "firewallIPSecExemptionsAllowICMP")]
    pub firewall_ipsec_exemptions_allow_icmp: Option<bool>,
    ///Configures IPSec exemptions to allow neighbor discovery IPv6 ICMP type-codes
    #[serde(rename = "firewallIPSecExemptionsAllowNeighborDiscovery")]
    pub firewall_ipsec_exemptions_allow_neighbor_discovery: Option<bool>,
    ///Configures IPSec exemptions to allow router discovery IPv6 ICMP type-codes
    #[serde(rename = "firewallIPSecExemptionsAllowRouterDiscovery")]
    pub firewall_ipsec_exemptions_allow_router_discovery: Option<bool>,
    ///Configures the idle timeout for security associations, in seconds, from 300 to 3600 inclusive. This is the period after which security associations will expire and be deleted. Valid values 300 to 3600
    #[serde(rename = "firewallIdleTimeoutForSecurityAssociationInSeconds")]
    pub firewall_idle_timeout_for_security_association_in_seconds: Option<f64>,
    ///If an authentication set is not fully supported by a keying module, direct the module to ignore only unsupported authentication suites rather than the entire set
    #[serde(rename = "firewallMergeKeyingModuleSettings")]
    pub firewall_merge_keying_module_settings: Option<bool>,
    ///Possible values for firewallPacketQueueingMethod
    #[serde(rename = "firewallPacketQueueingMethod")]
    pub firewall_packet_queueing_method: Option<
        MicrosoftGraphFirewallPacketQueueingMethodType,
    >,
    ///Possible values for firewallPreSharedKeyEncodingMethod
    #[serde(rename = "firewallPreSharedKeyEncodingMethod")]
    pub firewall_pre_shared_key_encoding_method: Option<
        MicrosoftGraphFirewallPreSharedKeyEncodingMethodType,
    >,
    ///Configures the firewall profile settings for domain networks
    #[serde(rename = "firewallProfileDomain")]
    pub firewall_profile_domain: Option<MicrosoftGraphWindowsFirewallNetworkProfile>,
    ///Configures the firewall profile settings for private networks
    #[serde(rename = "firewallProfilePrivate")]
    pub firewall_profile_private: Option<MicrosoftGraphWindowsFirewallNetworkProfile>,
    ///Configures the firewall profile settings for public networks
    #[serde(rename = "firewallProfilePublic")]
    pub firewall_profile_public: Option<MicrosoftGraphWindowsFirewallNetworkProfile>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Allows IT Admins to control whether users can can ignore SmartScreen warnings and run malicious files.
    #[serde(rename = "smartScreenBlockOverrideForFiles")]
    pub smart_screen_block_override_for_files: Option<bool>,
    ///Allows IT Admins to configure SmartScreen for Windows.
    #[serde(rename = "smartScreenEnableInShell")]
    pub smart_screen_enable_in_shell: Option<bool>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows10EnrollmentCompletionPageConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.windows10EnrollmentCompletionPageConfiguration".to_string()
    )]
    pub odata_type: String,
    ///When TRUE, ESP (Enrollment Status Page) installs all required apps targeted during technician phase and ignores any failures for non-blocking apps. When FALSE, ESP fails on any error during app install. The default is false.
    #[serde(rename = "allowNonBlockingAppInstallation")]
    pub allow_non_blocking_app_installation: Option<bool>,
    ///The list of group assignments for the device configuration profile
    pub assignments: Option<Vec<MicrosoftGraphEnrollmentConfigurationAssignment>>,
    ///Created date time in UTC of the device enrollment configuration
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the device enrollment configuration
    pub description: Option<String>,
    ///The display name of the device enrollment configuration
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Last modified date time in UTC of the device enrollment configuration
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Priority is used when a user exists in multiple groups that are assigned enrollment configuration. Users are subject only to the configuration with the lowest priority value.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub priority: Option<f64>,
    ///The version of the device enrollment configuration
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows10EnterpriseModernAppManagementConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.windows10EnterpriseModernAppManagementConfiguration".to_string(

        )
    )]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether or not to uninstall a fixed list of built-in Windows apps.
    #[serde(rename = "uninstallBuiltInApps")]
    pub uninstall_built_in_apps: Option<bool>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows10GeneralConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windows10GeneralConfiguration".to_string())]
    pub odata_type: String,
    ///Indicates whether or not to Block the user from adding email accounts to the device that are not associated with a Microsoft account.
    #[serde(rename = "accountsBlockAddingNonMicrosoftAccountEmail")]
    pub accounts_block_adding_non_microsoft_account_email: Option<bool>,
    ///Indicates whether or not to block the user from selecting an AntiTheft mode preference (Windows 10 Mobile only).
    #[serde(rename = "antiTheftModeBlocked")]
    pub anti_theft_mode_blocked: Option<bool>,
    ///State Management Setting.
    #[serde(rename = "appsAllowTrustedAppsSideloading")]
    pub apps_allow_trusted_apps_sideloading: Option<
        MicrosoftGraphStateManagementSetting,
    >,
    ///Indicates whether or not to disable the launch of all apps from Windows Store that came pre-installed or were downloaded.
    #[serde(rename = "appsBlockWindowsStoreOriginatedApps")]
    pub apps_block_windows_store_originated_apps: Option<bool>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///Specify a list of allowed Bluetooth services and profiles in hex formatted strings.
    #[serde(rename = "bluetoothAllowedServices")]
    pub bluetooth_allowed_services: Option<Vec<Option<String>>>,
    ///Whether or not to Block the user from using bluetooth advertising.
    #[serde(rename = "bluetoothBlockAdvertising")]
    pub bluetooth_block_advertising: Option<bool>,
    ///Whether or not to Block the user from using bluetooth discoverable mode.
    #[serde(rename = "bluetoothBlockDiscoverableMode")]
    pub bluetooth_block_discoverable_mode: Option<bool>,
    ///Whether or not to block specific bundled Bluetooth peripherals to automatically pair with the host device.
    #[serde(rename = "bluetoothBlockPrePairing")]
    pub bluetooth_block_pre_pairing: Option<bool>,
    ///Whether or not to Block the user from using bluetooth.
    #[serde(rename = "bluetoothBlocked")]
    pub bluetooth_blocked: Option<bool>,
    ///Whether or not to Block the user from accessing the camera of the device.
    #[serde(rename = "cameraBlocked")]
    pub camera_blocked: Option<bool>,
    ///Whether or not to Block the user from using data over cellular while roaming.
    #[serde(rename = "cellularBlockDataWhenRoaming")]
    pub cellular_block_data_when_roaming: Option<bool>,
    ///Whether or not to Block the user from using VPN over cellular.
    #[serde(rename = "cellularBlockVpn")]
    pub cellular_block_vpn: Option<bool>,
    ///Whether or not to Block the user from using VPN when roaming over cellular.
    #[serde(rename = "cellularBlockVpnWhenRoaming")]
    pub cellular_block_vpn_when_roaming: Option<bool>,
    ///Whether or not to Block the user from doing manual root certificate installation.
    #[serde(rename = "certificatesBlockManualRootCertificateInstallation")]
    pub certificates_block_manual_root_certificate_installation: Option<bool>,
    ///Whether or not to block Connected Devices Service which enables discovery and connection to other devices, remote messaging, remote app sessions and other cross-device experiences.
    #[serde(rename = "connectedDevicesServiceBlocked")]
    pub connected_devices_service_blocked: Option<bool>,
    ///Whether or not to Block the user from using copy paste.
    #[serde(rename = "copyPasteBlocked")]
    pub copy_paste_blocked: Option<bool>,
    ///Whether or not to Block the user from using Cortana.
    #[serde(rename = "cortanaBlocked")]
    pub cortana_blocked: Option<bool>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Whether or not to block end user access to Defender.
    #[serde(rename = "defenderBlockEndUserAccess")]
    pub defender_block_end_user_access: Option<bool>,
    ///Possible values of Cloud Block Level
    #[serde(rename = "defenderCloudBlockLevel")]
    pub defender_cloud_block_level: Option<MicrosoftGraphDefenderCloudBlockLevelType>,
    ///Number of days before deleting quarantined malware. Valid values 0 to 90
    #[serde(rename = "defenderDaysBeforeDeletingQuarantinedMalware")]
    pub defender_days_before_deleting_quarantined_malware: Option<f64>,
    ///Gets or sets Defender’s actions to take on detected Malware per threat level.
    #[serde(rename = "defenderDetectedMalwareActions")]
    pub defender_detected_malware_actions: Option<
        MicrosoftGraphDefenderDetectedMalwareActions,
    >,
    ///File extensions to exclude from scans and real time protection.
    #[serde(rename = "defenderFileExtensionsToExclude")]
    pub defender_file_extensions_to_exclude: Option<Vec<Option<String>>>,
    ///Files and folder to exclude from scans and real time protection.
    #[serde(rename = "defenderFilesAndFoldersToExclude")]
    pub defender_files_and_folders_to_exclude: Option<Vec<Option<String>>>,
    ///Possible values for monitoring file activity.
    #[serde(rename = "defenderMonitorFileActivity")]
    pub defender_monitor_file_activity: Option<
        MicrosoftGraphDefenderMonitorFileActivity,
    >,
    ///Processes to exclude from scans and real time protection.
    #[serde(rename = "defenderProcessesToExclude")]
    pub defender_processes_to_exclude: Option<Vec<Option<String>>>,
    ///Possible values for prompting user for samples submission.
    #[serde(rename = "defenderPromptForSampleSubmission")]
    pub defender_prompt_for_sample_submission: Option<
        MicrosoftGraphDefenderPromptForSampleSubmission,
    >,
    ///Indicates whether or not to require behavior monitoring.
    #[serde(rename = "defenderRequireBehaviorMonitoring")]
    pub defender_require_behavior_monitoring: Option<bool>,
    ///Indicates whether or not to require cloud protection.
    #[serde(rename = "defenderRequireCloudProtection")]
    pub defender_require_cloud_protection: Option<bool>,
    ///Indicates whether or not to require network inspection system.
    #[serde(rename = "defenderRequireNetworkInspectionSystem")]
    pub defender_require_network_inspection_system: Option<bool>,
    ///Indicates whether or not to require real time monitoring.
    #[serde(rename = "defenderRequireRealTimeMonitoring")]
    pub defender_require_real_time_monitoring: Option<bool>,
    ///Indicates whether or not to scan archive files.
    #[serde(rename = "defenderScanArchiveFiles")]
    pub defender_scan_archive_files: Option<bool>,
    ///Indicates whether or not to scan downloads.
    #[serde(rename = "defenderScanDownloads")]
    pub defender_scan_downloads: Option<bool>,
    ///Indicates whether or not to scan incoming mail messages.
    #[serde(rename = "defenderScanIncomingMail")]
    pub defender_scan_incoming_mail: Option<bool>,
    ///Indicates whether or not to scan mapped network drives during full scan.
    #[serde(rename = "defenderScanMappedNetworkDrivesDuringFullScan")]
    pub defender_scan_mapped_network_drives_during_full_scan: Option<bool>,
    ///Max CPU usage percentage during scan. Valid values 0 to 100
    #[serde(rename = "defenderScanMaxCpu")]
    pub defender_scan_max_cpu: Option<f64>,
    ///Indicates whether or not to scan files opened from a network folder.
    #[serde(rename = "defenderScanNetworkFiles")]
    pub defender_scan_network_files: Option<bool>,
    ///Indicates whether or not to scan removable drives during full scan.
    #[serde(rename = "defenderScanRemovableDrivesDuringFullScan")]
    pub defender_scan_removable_drives_during_full_scan: Option<bool>,
    ///Indicates whether or not to scan scripts loaded in Internet Explorer browser.
    #[serde(rename = "defenderScanScriptsLoadedInInternetExplorer")]
    pub defender_scan_scripts_loaded_in_internet_explorer: Option<bool>,
    ///Possible values for system scan type.
    #[serde(rename = "defenderScanType")]
    pub defender_scan_type: Option<MicrosoftGraphDefenderScanType>,
    ///The time to perform a daily quick scan.
    #[serde(rename = "defenderScheduledQuickScanTime")]
    pub defender_scheduled_quick_scan_time: Option<chrono::NaiveTime>,
    ///The defender time for the system scan.
    #[serde(rename = "defenderScheduledScanTime")]
    pub defender_scheduled_scan_time: Option<chrono::NaiveTime>,
    ///The signature update interval in hours. Specify 0 not to check. Valid values 0 to 24
    #[serde(rename = "defenderSignatureUpdateIntervalInHours")]
    pub defender_signature_update_interval_in_hours: Option<f64>,
    ///Possible values for a weekly schedule.
    #[serde(rename = "defenderSystemScanSchedule")]
    pub defender_system_scan_schedule: Option<MicrosoftGraphWeeklySchedule>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///State Management Setting.
    #[serde(rename = "developerUnlockSetting")]
    pub developer_unlock_setting: Option<MicrosoftGraphStateManagementSetting>,
    ///Indicates whether or not to Block the user from resetting their phone.
    #[serde(rename = "deviceManagementBlockFactoryResetOnMobile")]
    pub device_management_block_factory_reset_on_mobile: Option<bool>,
    ///Indicates whether or not to Block the user from doing manual un-enrollment from device management.
    #[serde(rename = "deviceManagementBlockManualUnenroll")]
    pub device_management_block_manual_unenroll: Option<bool>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Allow the device to send diagnostic and usage telemetry data, such as Watson.
    #[serde(rename = "diagnosticsDataSubmissionMode")]
    pub diagnostics_data_submission_mode: Option<
        MicrosoftGraphDiagnosticDataSubmissionMode,
    >,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Allow users to change Start pages on Edge. Use the EdgeHomepageUrls to specify the Start pages that the user would see by default when they open Edge.
    #[serde(rename = "edgeAllowStartPagesModification")]
    pub edge_allow_start_pages_modification: Option<bool>,
    ///Indicates whether or not to prevent access to about flags on Edge browser.
    #[serde(rename = "edgeBlockAccessToAboutFlags")]
    pub edge_block_access_to_about_flags: Option<bool>,
    ///Block the address bar dropdown functionality in Microsoft Edge. Disable this settings to minimize network connections from Microsoft Edge to Microsoft services.
    #[serde(rename = "edgeBlockAddressBarDropdown")]
    pub edge_block_address_bar_dropdown: Option<bool>,
    ///Indicates whether or not to block auto fill.
    #[serde(rename = "edgeBlockAutofill")]
    pub edge_block_autofill: Option<bool>,
    ///Block Microsoft compatibility list in Microsoft Edge. This list from Microsoft helps Edge properly display sites with known compatibility issues.
    #[serde(rename = "edgeBlockCompatibilityList")]
    pub edge_block_compatibility_list: Option<bool>,
    ///Indicates whether or not to block developer tools in the Edge browser.
    #[serde(rename = "edgeBlockDeveloperTools")]
    pub edge_block_developer_tools: Option<bool>,
    ///Indicates whether or not to block extensions in the Edge browser.
    #[serde(rename = "edgeBlockExtensions")]
    pub edge_block_extensions: Option<bool>,
    ///Indicates whether or not to block InPrivate browsing on corporate networks, in the Edge browser.
    #[serde(rename = "edgeBlockInPrivateBrowsing")]
    pub edge_block_in_private_browsing: Option<bool>,
    ///Indicates whether or not to Block the user from using JavaScript.
    #[serde(rename = "edgeBlockJavaScript")]
    pub edge_block_java_script: Option<bool>,
    ///Block the collection of information by Microsoft for live tile creation when users pin a site to Start from Microsoft Edge.
    #[serde(rename = "edgeBlockLiveTileDataCollection")]
    pub edge_block_live_tile_data_collection: Option<bool>,
    ///Indicates whether or not to Block password manager.
    #[serde(rename = "edgeBlockPasswordManager")]
    pub edge_block_password_manager: Option<bool>,
    ///Indicates whether or not to block popups.
    #[serde(rename = "edgeBlockPopups")]
    pub edge_block_popups: Option<bool>,
    ///Indicates whether or not to block the user from using the search suggestions in the address bar.
    #[serde(rename = "edgeBlockSearchSuggestions")]
    pub edge_block_search_suggestions: Option<bool>,
    ///Indicates whether or not to Block the user from sending the do not track header.
    #[serde(rename = "edgeBlockSendingDoNotTrackHeader")]
    pub edge_block_sending_do_not_track_header: Option<bool>,
    ///Indicates whether or not to switch the intranet traffic from Edge to Internet Explorer. Note: the name of this property is misleading; the property is obsolete, use EdgeSendIntranetTrafficToInternetExplorer instead.
    #[serde(rename = "edgeBlockSendingIntranetTrafficToInternetExplorer")]
    pub edge_block_sending_intranet_traffic_to_internet_explorer: Option<bool>,
    ///Indicates whether or not to Block the user from using the Edge browser.
    #[serde(rename = "edgeBlocked")]
    pub edge_blocked: Option<bool>,
    ///Clear browsing data on exiting Microsoft Edge.
    #[serde(rename = "edgeClearBrowsingDataOnExit")]
    pub edge_clear_browsing_data_on_exit: Option<bool>,
    ///Possible values to specify which cookies are allowed in Microsoft Edge.
    #[serde(rename = "edgeCookiePolicy")]
    pub edge_cookie_policy: Option<MicrosoftGraphEdgeCookiePolicy>,
    ///Block the Microsoft web page that opens on the first use of Microsoft Edge. This policy allows enterprises, like those enrolled in zero emissions configurations, to block this page.
    #[serde(rename = "edgeDisableFirstRunPage")]
    pub edge_disable_first_run_page: Option<bool>,
    ///Indicates the enterprise mode site list location. Could be a local file, local network or http location.
    #[serde(rename = "edgeEnterpriseModeSiteListLocation")]
    pub edge_enterprise_mode_site_list_location: Option<String>,
    ///The first run URL for when Edge browser is opened for the first time.
    #[serde(rename = "edgeFirstRunUrl")]
    pub edge_first_run_url: Option<String>,
    ///The list of URLs for homepages shodwn on MDM-enrolled devices on Edge browser.
    #[serde(rename = "edgeHomepageUrls")]
    pub edge_homepage_urls: Option<Vec<Option<String>>>,
    ///Indicates whether or not to Require the user to use the smart screen filter.
    #[serde(rename = "edgeRequireSmartScreen")]
    pub edge_require_smart_screen: Option<bool>,
    ///Allows IT admins to set a default search engine for MDM-Controlled devices. Users can override this and change their default search engine provided the AllowSearchEngineCustomization policy is not set.
    #[serde(rename = "edgeSearchEngine")]
    pub edge_search_engine: Option<MicrosoftGraphEdgeSearchEngineBase>,
    ///Indicates whether or not to switch the intranet traffic from Edge to Internet Explorer.
    #[serde(rename = "edgeSendIntranetTrafficToInternetExplorer")]
    pub edge_send_intranet_traffic_to_internet_explorer: Option<bool>,
    ///Enable favorites sync between Internet Explorer and Microsoft Edge. Additions, deletions, modifications and order changes to favorites are shared between browsers.
    #[serde(rename = "edgeSyncFavoritesWithInternetExplorer")]
    pub edge_sync_favorites_with_internet_explorer: Option<bool>,
    ///Endpoint for discovering cloud printers.
    #[serde(rename = "enterpriseCloudPrintDiscoveryEndPoint")]
    pub enterprise_cloud_print_discovery_end_point: Option<String>,
    ///Maximum number of printers that should be queried from a discovery endpoint. This is a mobile only setting. Valid values 1 to 65535
    #[serde(rename = "enterpriseCloudPrintDiscoveryMaxLimit")]
    pub enterprise_cloud_print_discovery_max_limit: Option<f64>,
    ///OAuth resource URI for printer discovery service as configured in Azure portal.
    #[serde(rename = "enterpriseCloudPrintMopriaDiscoveryResourceIdentifier")]
    pub enterprise_cloud_print_mopria_discovery_resource_identifier: Option<String>,
    ///Authentication endpoint for acquiring OAuth tokens.
    #[serde(rename = "enterpriseCloudPrintOAuthAuthority")]
    pub enterprise_cloud_print_oauth_authority: Option<String>,
    ///GUID of a client application authorized to retrieve OAuth tokens from the OAuth Authority.
    #[serde(rename = "enterpriseCloudPrintOAuthClientIdentifier")]
    pub enterprise_cloud_print_oauth_client_identifier: Option<String>,
    ///OAuth resource URI for print service as configured in the Azure portal.
    #[serde(rename = "enterpriseCloudPrintResourceIdentifier")]
    pub enterprise_cloud_print_resource_identifier: Option<String>,
    ///Indicates whether or not to enable device discovery UX.
    #[serde(rename = "experienceBlockDeviceDiscovery")]
    pub experience_block_device_discovery: Option<bool>,
    ///Indicates whether or not to allow the error dialog from displaying if no SIM card is detected.
    #[serde(rename = "experienceBlockErrorDialogWhenNoSIM")]
    pub experience_block_error_dialog_when_no_sim: Option<bool>,
    ///Indicates whether or not to enable task switching on the device.
    #[serde(rename = "experienceBlockTaskSwitcher")]
    pub experience_block_task_switcher: Option<bool>,
    ///Indicates whether or not to block DVR and broadcasting.
    #[serde(rename = "gameDvrBlocked")]
    pub game_dvr_blocked: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether or not to Block the user from using internet sharing.
    #[serde(rename = "internetSharingBlocked")]
    pub internet_sharing_blocked: Option<bool>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether or not to Block the user from location services.
    #[serde(rename = "locationServicesBlocked")]
    pub location_services_blocked: Option<bool>,
    ///Specify whether to show a user-configurable setting to control the screen timeout while on the lock screen of Windows 10 Mobile devices. If this policy is set to Allow, the value set by lockScreenTimeoutInSeconds is ignored.
    #[serde(rename = "lockScreenAllowTimeoutConfiguration")]
    pub lock_screen_allow_timeout_configuration: Option<bool>,
    ///Indicates whether or not to block action center notifications over lock screen.
    #[serde(rename = "lockScreenBlockActionCenterNotifications")]
    pub lock_screen_block_action_center_notifications: Option<bool>,
    ///Indicates whether or not the user can interact with Cortana using speech while the system is locked.
    #[serde(rename = "lockScreenBlockCortana")]
    pub lock_screen_block_cortana: Option<bool>,
    ///Indicates whether to allow toast notifications above the device lock screen.
    #[serde(rename = "lockScreenBlockToastNotifications")]
    pub lock_screen_block_toast_notifications: Option<bool>,
    ///Set the duration (in seconds) from the screen locking to the screen turning off for Windows 10 Mobile devices. Supported values are 11-1800. Valid values 11 to 1800
    #[serde(rename = "lockScreenTimeoutInSeconds")]
    pub lock_screen_timeout_in_seconds: Option<f64>,
    ///Disables the ability to quickly switch between users that are logged on simultaneously without logging off.
    #[serde(rename = "logonBlockFastUserSwitching")]
    pub logon_block_fast_user_switching: Option<bool>,
    ///Indicates whether or not to Block Microsoft account settings sync.
    #[serde(rename = "microsoftAccountBlockSettingsSync")]
    pub microsoft_account_block_settings_sync: Option<bool>,
    ///Indicates whether or not to Block a Microsoft account.
    #[serde(rename = "microsoftAccountBlocked")]
    pub microsoft_account_blocked: Option<bool>,
    ///If set, proxy settings will be applied to all processes and accounts in the device. Otherwise, it will be applied to the user account that’s enrolled into MDM.
    #[serde(rename = "networkProxyApplySettingsDeviceWide")]
    pub network_proxy_apply_settings_device_wide: Option<bool>,
    ///Address to the proxy auto-config (PAC) script you want to use.
    #[serde(rename = "networkProxyAutomaticConfigurationUrl")]
    pub network_proxy_automatic_configuration_url: Option<String>,
    ///Disable automatic detection of settings. If enabled, the system will try to find the path to a proxy auto-config (PAC) script.
    #[serde(rename = "networkProxyDisableAutoDetect")]
    pub network_proxy_disable_auto_detect: Option<bool>,
    ///Specifies manual proxy server settings.
    #[serde(rename = "networkProxyServer")]
    pub network_proxy_server: Option<MicrosoftGraphWindows10NetworkProxyServer>,
    ///Indicates whether or not to Block the user from using near field communication.
    #[serde(rename = "nfcBlocked")]
    pub nfc_blocked: Option<bool>,
    ///Gets or sets a value allowing IT admins to prevent apps and features from working with files on OneDrive.
    #[serde(rename = "oneDriveDisableFileSync")]
    pub one_drive_disable_file_sync: Option<bool>,
    ///Specify whether PINs or passwords such as '1111' or '1234' are allowed. For Windows 10 desktops, it also controls the use of picture passwords.
    #[serde(rename = "passwordBlockSimple")]
    pub password_block_simple: Option<bool>,
    ///The password expiration in days. Valid values 0 to 730
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///The number of character sets required in the password.
    #[serde(rename = "passwordMinimumCharacterSetCount")]
    pub password_minimum_character_set_count: Option<f64>,
    ///The minimum password length. Valid values 4 to 16
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///The minutes of inactivity before the screen times out.
    #[serde(rename = "passwordMinutesOfInactivityBeforeScreenTimeout")]
    pub password_minutes_of_inactivity_before_screen_timeout: Option<f64>,
    ///The number of previous passwords to prevent reuse of. Valid values 0 to 50
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Indicates whether or not to require a password upon resuming from an idle state.
    #[serde(rename = "passwordRequireWhenResumeFromIdleState")]
    pub password_require_when_resume_from_idle_state: Option<bool>,
    ///Indicates whether or not to require the user to have a password.
    #[serde(rename = "passwordRequired")]
    pub password_required: Option<bool>,
    ///Possible values of required passwords.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphRequiredPasswordType>,
    ///The number of sign in failures before factory reset. Valid values 0 to 999
    #[serde(rename = "passwordSignInFailureCountBeforeFactoryReset")]
    pub password_sign_in_failure_count_before_factory_reset: Option<f64>,
    ///A http or https Url to a jpg, jpeg or png image that needs to be downloaded and used as the Desktop Image or a file Url to a local image on the file system that needs to used as the Desktop Image.
    #[serde(rename = "personalizationDesktopImageUrl")]
    pub personalization_desktop_image_url: Option<String>,
    ///A http or https Url to a jpg, jpeg or png image that neeeds to be downloaded and used as the Lock Screen Image or a file Url to a local image on the file system that needs to be used as the Lock Screen Image.
    #[serde(rename = "personalizationLockScreenImageUrl")]
    pub personalization_lock_screen_image_url: Option<String>,
    ///State Management Setting.
    #[serde(rename = "privacyAdvertisingId")]
    pub privacy_advertising_id: Option<MicrosoftGraphStateManagementSetting>,
    ///Indicates whether or not to allow the automatic acceptance of the pairing and privacy user consent dialog when launching apps.
    #[serde(rename = "privacyAutoAcceptPairingAndConsentPrompts")]
    pub privacy_auto_accept_pairing_and_consent_prompts: Option<bool>,
    ///Indicates whether or not to block the usage of cloud based speech services for Cortana, Dictation, or Store applications.
    #[serde(rename = "privacyBlockInputPersonalization")]
    pub privacy_block_input_personalization: Option<bool>,
    ///Indicates whether or not to Block the user from reset protection mode.
    #[serde(rename = "resetProtectionModeBlocked")]
    pub reset_protection_mode_blocked: Option<bool>,
    ///Specifies what level of safe search (filtering adult content) is required
    #[serde(rename = "safeSearchFilter")]
    pub safe_search_filter: Option<MicrosoftGraphSafeSearchFilterType>,
    ///Indicates whether or not to Block the user from taking Screenshots.
    #[serde(rename = "screenCaptureBlocked")]
    pub screen_capture_blocked: Option<bool>,
    ///Specifies if search can use diacritics.
    #[serde(rename = "searchBlockDiacritics")]
    pub search_block_diacritics: Option<bool>,
    ///Specifies whether to use automatic language detection when indexing content and properties.
    #[serde(rename = "searchDisableAutoLanguageDetection")]
    pub search_disable_auto_language_detection: Option<bool>,
    ///Indicates whether or not to disable the search indexer backoff feature.
    #[serde(rename = "searchDisableIndexerBackoff")]
    pub search_disable_indexer_backoff: Option<bool>,
    ///Indicates whether or not to block indexing of WIP-protected items to prevent them from appearing in search results for Cortana or Explorer.
    #[serde(rename = "searchDisableIndexingEncryptedItems")]
    pub search_disable_indexing_encrypted_items: Option<bool>,
    ///Indicates whether or not to allow users to add locations on removable drives to libraries and to be indexed.
    #[serde(rename = "searchDisableIndexingRemovableDrive")]
    pub search_disable_indexing_removable_drive: Option<bool>,
    ///Specifies minimum amount of hard drive space on the same drive as the index location before indexing stops.
    #[serde(rename = "searchEnableAutomaticIndexSizeManangement")]
    pub search_enable_automatic_index_size_manangement: Option<bool>,
    ///Indicates whether or not to block remote queries of this computer’s index.
    #[serde(rename = "searchEnableRemoteQueries")]
    pub search_enable_remote_queries: Option<bool>,
    ///Indicates whether or not to block access to Accounts in Settings app.
    #[serde(rename = "settingsBlockAccountsPage")]
    pub settings_block_accounts_page: Option<bool>,
    ///Indicates whether or not to block the user from installing provisioning packages.
    #[serde(rename = "settingsBlockAddProvisioningPackage")]
    pub settings_block_add_provisioning_package: Option<bool>,
    ///Indicates whether or not to block access to Apps in Settings app.
    #[serde(rename = "settingsBlockAppsPage")]
    pub settings_block_apps_page: Option<bool>,
    ///Indicates whether or not to block the user from changing the language settings.
    #[serde(rename = "settingsBlockChangeLanguage")]
    pub settings_block_change_language: Option<bool>,
    ///Indicates whether or not to block the user from changing power and sleep settings.
    #[serde(rename = "settingsBlockChangePowerSleep")]
    pub settings_block_change_power_sleep: Option<bool>,
    ///Indicates whether or not to block the user from changing the region settings.
    #[serde(rename = "settingsBlockChangeRegion")]
    pub settings_block_change_region: Option<bool>,
    ///Indicates whether or not to block the user from changing date and time settings.
    #[serde(rename = "settingsBlockChangeSystemTime")]
    pub settings_block_change_system_time: Option<bool>,
    ///Indicates whether or not to block access to Devices in Settings app.
    #[serde(rename = "settingsBlockDevicesPage")]
    pub settings_block_devices_page: Option<bool>,
    ///Indicates whether or not to block access to Ease of Access in Settings app.
    #[serde(rename = "settingsBlockEaseOfAccessPage")]
    pub settings_block_ease_of_access_page: Option<bool>,
    ///Indicates whether or not to block the user from editing the device name.
    #[serde(rename = "settingsBlockEditDeviceName")]
    pub settings_block_edit_device_name: Option<bool>,
    ///Indicates whether or not to block access to Gaming in Settings app.
    #[serde(rename = "settingsBlockGamingPage")]
    pub settings_block_gaming_page: Option<bool>,
    ///Indicates whether or not to block access to Network & Internet in Settings app.
    #[serde(rename = "settingsBlockNetworkInternetPage")]
    pub settings_block_network_internet_page: Option<bool>,
    ///Indicates whether or not to block access to Personalization in Settings app.
    #[serde(rename = "settingsBlockPersonalizationPage")]
    pub settings_block_personalization_page: Option<bool>,
    ///Indicates whether or not to block access to Privacy in Settings app.
    #[serde(rename = "settingsBlockPrivacyPage")]
    pub settings_block_privacy_page: Option<bool>,
    ///Indicates whether or not to block the runtime configuration agent from removing provisioning packages.
    #[serde(rename = "settingsBlockRemoveProvisioningPackage")]
    pub settings_block_remove_provisioning_package: Option<bool>,
    ///Indicates whether or not to block access to Settings app.
    #[serde(rename = "settingsBlockSettingsApp")]
    pub settings_block_settings_app: Option<bool>,
    ///Indicates whether or not to block access to System in Settings app.
    #[serde(rename = "settingsBlockSystemPage")]
    pub settings_block_system_page: Option<bool>,
    ///Indicates whether or not to block access to Time & Language in Settings app.
    #[serde(rename = "settingsBlockTimeLanguagePage")]
    pub settings_block_time_language_page: Option<bool>,
    ///Indicates whether or not to block access to Update & Security in Settings app.
    #[serde(rename = "settingsBlockUpdateSecurityPage")]
    pub settings_block_update_security_page: Option<bool>,
    ///Indicates whether or not to block multiple users of the same app to share data.
    #[serde(rename = "sharedUserAppDataAllowed")]
    pub shared_user_app_data_allowed: Option<bool>,
    ///Indicates whether or not users can override SmartScreen Filter warnings about potentially malicious websites.
    #[serde(rename = "smartScreenBlockPromptOverride")]
    pub smart_screen_block_prompt_override: Option<bool>,
    ///Indicates whether or not users can override the SmartScreen Filter warnings about downloading unverified files
    #[serde(rename = "smartScreenBlockPromptOverrideForFiles")]
    pub smart_screen_block_prompt_override_for_files: Option<bool>,
    ///This property will be deprecated in July 2019 and will be replaced by property SmartScreenAppInstallControl. Allows IT Admins to control whether users are allowed to install apps from places other than the Store.
    #[serde(rename = "smartScreenEnableAppInstallControl")]
    pub smart_screen_enable_app_install_control: Option<bool>,
    ///Indicates whether or not to block the user from unpinning apps from taskbar.
    #[serde(rename = "startBlockUnpinningAppsFromTaskbar")]
    pub start_block_unpinning_apps_from_taskbar: Option<bool>,
    ///Type of start menu app list visibility.
    #[serde(rename = "startMenuAppListVisibility")]
    pub start_menu_app_list_visibility: Option<
        MicrosoftGraphWindowsStartMenuAppListVisibilityType,
    >,
    ///Enabling this policy hides the change account setting from appearing in the user tile in the start menu.
    #[serde(rename = "startMenuHideChangeAccountSettings")]
    pub start_menu_hide_change_account_settings: Option<bool>,
    ///Enabling this policy hides the most used apps from appearing on the start menu and disables the corresponding toggle in the Settings app.
    #[serde(rename = "startMenuHideFrequentlyUsedApps")]
    pub start_menu_hide_frequently_used_apps: Option<bool>,
    ///Enabling this policy hides hibernate from appearing in the power button in the start menu.
    #[serde(rename = "startMenuHideHibernate")]
    pub start_menu_hide_hibernate: Option<bool>,
    ///Enabling this policy hides lock from appearing in the user tile in the start menu.
    #[serde(rename = "startMenuHideLock")]
    pub start_menu_hide_lock: Option<bool>,
    ///Enabling this policy hides the power button from appearing in the start menu.
    #[serde(rename = "startMenuHidePowerButton")]
    pub start_menu_hide_power_button: Option<bool>,
    ///Enabling this policy hides recent jump lists from appearing on the start menu/taskbar and disables the corresponding toggle in the Settings app.
    #[serde(rename = "startMenuHideRecentJumpLists")]
    pub start_menu_hide_recent_jump_lists: Option<bool>,
    ///Enabling this policy hides recently added apps from appearing on the start menu and disables the corresponding toggle in the Settings app.
    #[serde(rename = "startMenuHideRecentlyAddedApps")]
    pub start_menu_hide_recently_added_apps: Option<bool>,
    ///Enabling this policy hides 'Restart/Update and Restart' from appearing in the power button in the start menu.
    #[serde(rename = "startMenuHideRestartOptions")]
    pub start_menu_hide_restart_options: Option<bool>,
    ///Enabling this policy hides shut down/update and shut down from appearing in the power button in the start menu.
    #[serde(rename = "startMenuHideShutDown")]
    pub start_menu_hide_shut_down: Option<bool>,
    ///Enabling this policy hides sign out from appearing in the user tile in the start menu.
    #[serde(rename = "startMenuHideSignOut")]
    pub start_menu_hide_sign_out: Option<bool>,
    ///Enabling this policy hides sleep from appearing in the power button in the start menu.
    #[serde(rename = "startMenuHideSleep")]
    pub start_menu_hide_sleep: Option<bool>,
    ///Enabling this policy hides switch account from appearing in the user tile in the start menu.
    #[serde(rename = "startMenuHideSwitchAccount")]
    pub start_menu_hide_switch_account: Option<bool>,
    ///Enabling this policy hides the user tile from appearing in the start menu.
    #[serde(rename = "startMenuHideUserTile")]
    pub start_menu_hide_user_tile: Option<bool>,
    ///This policy setting allows you to import Edge assets to be used with startMenuLayoutXml policy. Start layout can contain secondary tile from Edge app which looks for Edge local asset file. Edge local asset would not exist and cause Edge secondary tile to appear empty in this case. This policy only gets applied when startMenuLayoutXml policy is modified. The value should be a UTF-8 Base64 encoded byte array.
    #[serde(rename = "startMenuLayoutEdgeAssetsXml")]
    pub start_menu_layout_edge_assets_xml: Option<String>,
    ///Allows admins to override the default Start menu layout and prevents the user from changing it. The layout is modified by specifying an XML file based on a layout modification schema. XML needs to be in a UTF8 encoded byte array format.
    #[serde(rename = "startMenuLayoutXml")]
    pub start_menu_layout_xml: Option<String>,
    ///Type of display modes for the start menu.
    #[serde(rename = "startMenuMode")]
    pub start_menu_mode: Option<MicrosoftGraphWindowsStartMenuModeType>,
    ///Generic visibility state.
    #[serde(rename = "startMenuPinnedFolderDocuments")]
    pub start_menu_pinned_folder_documents: Option<MicrosoftGraphVisibilitySetting>,
    ///Generic visibility state.
    #[serde(rename = "startMenuPinnedFolderDownloads")]
    pub start_menu_pinned_folder_downloads: Option<MicrosoftGraphVisibilitySetting>,
    ///Generic visibility state.
    #[serde(rename = "startMenuPinnedFolderFileExplorer")]
    pub start_menu_pinned_folder_file_explorer: Option<MicrosoftGraphVisibilitySetting>,
    ///Generic visibility state.
    #[serde(rename = "startMenuPinnedFolderHomeGroup")]
    pub start_menu_pinned_folder_home_group: Option<MicrosoftGraphVisibilitySetting>,
    ///Generic visibility state.
    #[serde(rename = "startMenuPinnedFolderMusic")]
    pub start_menu_pinned_folder_music: Option<MicrosoftGraphVisibilitySetting>,
    ///Generic visibility state.
    #[serde(rename = "startMenuPinnedFolderNetwork")]
    pub start_menu_pinned_folder_network: Option<MicrosoftGraphVisibilitySetting>,
    ///Generic visibility state.
    #[serde(rename = "startMenuPinnedFolderPersonalFolder")]
    pub start_menu_pinned_folder_personal_folder: Option<
        MicrosoftGraphVisibilitySetting,
    >,
    ///Generic visibility state.
    #[serde(rename = "startMenuPinnedFolderPictures")]
    pub start_menu_pinned_folder_pictures: Option<MicrosoftGraphVisibilitySetting>,
    ///Generic visibility state.
    #[serde(rename = "startMenuPinnedFolderSettings")]
    pub start_menu_pinned_folder_settings: Option<MicrosoftGraphVisibilitySetting>,
    ///Generic visibility state.
    #[serde(rename = "startMenuPinnedFolderVideos")]
    pub start_menu_pinned_folder_videos: Option<MicrosoftGraphVisibilitySetting>,
    ///Indicates whether or not to Block the user from using removable storage.
    #[serde(rename = "storageBlockRemovableStorage")]
    pub storage_block_removable_storage: Option<bool>,
    ///Indicating whether or not to require encryption on a mobile device.
    #[serde(rename = "storageRequireMobileDeviceEncryption")]
    pub storage_require_mobile_device_encryption: Option<bool>,
    ///Indicates whether application data is restricted to the system drive.
    #[serde(rename = "storageRestrictAppDataToSystemVolume")]
    pub storage_restrict_app_data_to_system_volume: Option<bool>,
    ///Indicates whether the installation of applications is restricted to the system drive.
    #[serde(rename = "storageRestrictAppInstallToSystemVolume")]
    pub storage_restrict_app_install_to_system_volume: Option<bool>,
    ///Whether the device is required to connect to the network.
    #[serde(rename = "tenantLockdownRequireNetworkDuringOutOfBoxExperience")]
    pub tenant_lockdown_require_network_during_out_of_box_experience: Option<bool>,
    ///Indicates whether or not to Block the user from USB connection.
    #[serde(rename = "usbBlocked")]
    pub usb_blocked: Option<bool>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
    ///Indicates whether or not to Block the user from voice recording.
    #[serde(rename = "voiceRecordingBlocked")]
    pub voice_recording_blocked: Option<bool>,
    ///Indicates whether or not user's localhost IP address is displayed while making phone calls using the WebRTC
    #[serde(rename = "webRtcBlockLocalhostIpAddress")]
    pub web_rtc_block_localhost_ip_address: Option<bool>,
    ///Indicating whether or not to block automatically connecting to Wi-Fi hotspots. Has no impact if Wi-Fi is blocked.
    #[serde(rename = "wiFiBlockAutomaticConnectHotspots")]
    pub wi_fi_block_automatic_connect_hotspots: Option<bool>,
    ///Indicates whether or not to Block the user from using Wi-Fi manual configuration.
    #[serde(rename = "wiFiBlockManualConfiguration")]
    pub wi_fi_block_manual_configuration: Option<bool>,
    ///Indicates whether or not to Block the user from using Wi-Fi.
    #[serde(rename = "wiFiBlocked")]
    pub wi_fi_blocked: Option<bool>,
    ///Specify how often devices scan for Wi-Fi networks. Supported values are 1-500, where 100 = default, and 500 = low frequency. Valid values 1 to 500
    #[serde(rename = "wiFiScanInterval")]
    pub wi_fi_scan_interval: Option<f64>,
    ///Allows IT admins to block experiences that are typically for consumers only, such as Start suggestions, Membership notifications, Post-OOBE app install and redirect tiles.
    #[serde(rename = "windowsSpotlightBlockConsumerSpecificFeatures")]
    pub windows_spotlight_block_consumer_specific_features: Option<bool>,
    ///Block suggestions from Microsoft that show after each OS clean install, upgrade or in an on-going basis to introduce users to what is new or changed
    #[serde(rename = "windowsSpotlightBlockOnActionCenter")]
    pub windows_spotlight_block_on_action_center: Option<bool>,
    ///Block personalized content in Windows spotlight based on user’s device usage.
    #[serde(rename = "windowsSpotlightBlockTailoredExperiences")]
    pub windows_spotlight_block_tailored_experiences: Option<bool>,
    ///Block third party content delivered via Windows Spotlight
    #[serde(rename = "windowsSpotlightBlockThirdPartyNotifications")]
    pub windows_spotlight_block_third_party_notifications: Option<bool>,
    ///Block Windows Spotlight Windows welcome experience
    #[serde(rename = "windowsSpotlightBlockWelcomeExperience")]
    pub windows_spotlight_block_welcome_experience: Option<bool>,
    ///Allows IT admins to turn off the popup of Windows Tips.
    #[serde(rename = "windowsSpotlightBlockWindowsTips")]
    pub windows_spotlight_block_windows_tips: Option<bool>,
    ///Allows IT admins to turn off all Windows Spotlight features
    #[serde(rename = "windowsSpotlightBlocked")]
    pub windows_spotlight_blocked: Option<bool>,
    ///Allows IT admind to set a predefined default search engine for MDM-Controlled devices
    #[serde(rename = "windowsSpotlightConfigureOnLockScreen")]
    pub windows_spotlight_configure_on_lock_screen: Option<
        MicrosoftGraphWindowsSpotlightEnablementSettings,
    >,
    ///Indicates whether or not to block automatic update of apps from Windows Store.
    #[serde(rename = "windowsStoreBlockAutoUpdate")]
    pub windows_store_block_auto_update: Option<bool>,
    ///Indicates whether or not to Block the user from using the Windows store.
    #[serde(rename = "windowsStoreBlocked")]
    pub windows_store_blocked: Option<bool>,
    ///Indicates whether or not to enable Private Store Only.
    #[serde(rename = "windowsStoreEnablePrivateStoreOnly")]
    pub windows_store_enable_private_store_only: Option<bool>,
    ///Indicates whether or not to allow other devices from discovering this PC for projection.
    #[serde(rename = "wirelessDisplayBlockProjectionToThisDevice")]
    pub wireless_display_block_projection_to_this_device: Option<bool>,
    ///Indicates whether or not to allow user input from wireless display receiver.
    #[serde(rename = "wirelessDisplayBlockUserInputFromReceiver")]
    pub wireless_display_block_user_input_from_receiver: Option<bool>,
    ///Indicates whether or not to require a PIN for new devices to initiate pairing.
    #[serde(rename = "wirelessDisplayRequirePinForPairing")]
    pub wireless_display_require_pin_for_pairing: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows10MobileCompliancePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windows10MobileCompliancePolicy".to_string())]
    pub odata_type: String,
    ///The collection of assignments for this compliance policy.
    pub assignments: Option<Vec<MicrosoftGraphDeviceCompliancePolicyAssignment>>,
    ///Require devices to be reported healthy by Windows Device Health Attestation - bit locker is enabled
    #[serde(rename = "bitLockerEnabled")]
    pub bit_locker_enabled: Option<bool>,
    ///Require devices to be reported as healthy by Windows Device Health Attestation.
    #[serde(rename = "codeIntegrityEnabled")]
    pub code_integrity_enabled: Option<bool>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Compliance Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device compliance devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceComplianceDeviceOverview>,
    ///List of DeviceComplianceDeviceStatus.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceComplianceDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Require devices to be reported as healthy by Windows Device Health Attestation - early launch antimalware driver is enabled.
    #[serde(rename = "earlyLaunchAntiMalwareDriverEnabled")]
    pub early_launch_anti_malware_driver_enabled: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Maximum Windows Phone version.
    #[serde(rename = "osMaximumVersion")]
    pub os_maximum_version: Option<String>,
    ///Minimum Windows Phone version.
    #[serde(rename = "osMinimumVersion")]
    pub os_minimum_version: Option<String>,
    ///Whether or not to block syncing the calendar.
    #[serde(rename = "passwordBlockSimple")]
    pub password_block_simple: Option<bool>,
    ///Number of days before password expiration. Valid values 1 to 255
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///The number of character sets required in the password.
    #[serde(rename = "passwordMinimumCharacterSetCount")]
    pub password_minimum_character_set_count: Option<f64>,
    ///Minimum password length. Valid values 4 to 16
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///Minutes of inactivity before a password is required.
    #[serde(rename = "passwordMinutesOfInactivityBeforeLock")]
    pub password_minutes_of_inactivity_before_lock: Option<f64>,
    ///The number of previous passwords to prevent re-use of.
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Require a password to unlock an idle device.
    #[serde(rename = "passwordRequireToUnlockFromIdle")]
    pub password_require_to_unlock_from_idle: Option<bool>,
    ///Require a password to unlock Windows Phone device.
    #[serde(rename = "passwordRequired")]
    pub password_required: Option<bool>,
    ///Possible values of required passwords.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphRequiredPasswordType>,
    ///The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.
    #[serde(rename = "scheduledActionsForRule")]
    pub scheduled_actions_for_rule: Option<
        Vec<MicrosoftGraphDeviceComplianceScheduledActionForRule>,
    >,
    ///Require devices to be reported as healthy by Windows Device Health Attestation - secure boot is enabled.
    #[serde(rename = "secureBootEnabled")]
    pub secure_boot_enabled: Option<bool>,
    ///Require encryption on windows devices.
    #[serde(rename = "storageRequireEncryption")]
    pub storage_require_encryption: Option<bool>,
    ///Device compliance users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceComplianceUserOverview>,
    ///List of DeviceComplianceUserStatus.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceComplianceUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Network Proxy Server Policy.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows10NetworkProxyServer {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Address to the proxy server. Specify an address in the format [':']
    pub address: Option<String>,
    ///Addresses that should not use the proxy server. The system will not use the proxy server for addresses beginning with what is specified in this node.
    pub exceptions: Option<Vec<Option<String>>>,
    ///Specifies whether the proxy server should be used for local (intranet) addresses.
    #[serde(rename = "useForLocalAddresses")]
    pub use_for_local_addresses: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows10SecureAssessmentConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windows10SecureAssessmentConfiguration".to_string())]
    pub odata_type: String,
    ///Indicates whether or not to allow the app from printing during the test.
    #[serde(rename = "allowPrinting")]
    pub allow_printing: Option<bool>,
    ///Indicates whether or not to allow screen capture capability during a test.
    #[serde(rename = "allowScreenCapture")]
    pub allow_screen_capture: Option<bool>,
    ///Indicates whether or not to allow text suggestions during the test.
    #[serde(rename = "allowTextSuggestion")]
    pub allow_text_suggestion: Option<bool>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///The account used to configure the Windows device for taking the test. The user can be a domain account (domain/user), an AAD account (username@tenant.com) or a local account (username).
    #[serde(rename = "configurationAccount")]
    pub configuration_account: Option<String>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Url link to an assessment that's automatically loaded when the secure assessment browser is launched. It has to be a valid Url (http[s]://msdn.microsoft.com/).
    #[serde(rename = "launchUri")]
    pub launch_uri: Option<String>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows10TeamGeneralConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windows10TeamGeneralConfiguration".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///Indicates whether or not to Block Azure Operational Insights.
    #[serde(rename = "azureOperationalInsightsBlockTelemetry")]
    pub azure_operational_insights_block_telemetry: Option<bool>,
    ///The Azure Operational Insights workspace id.
    #[serde(rename = "azureOperationalInsightsWorkspaceId")]
    pub azure_operational_insights_workspace_id: Option<String>,
    ///The Azure Operational Insights Workspace key.
    #[serde(rename = "azureOperationalInsightsWorkspaceKey")]
    pub azure_operational_insights_workspace_key: Option<String>,
    ///Specifies whether to automatically launch the Connect app whenever a projection is initiated.
    #[serde(rename = "connectAppBlockAutoLaunch")]
    pub connect_app_block_auto_launch: Option<bool>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether or not to Block setting a maintenance window for device updates.
    #[serde(rename = "maintenanceWindowBlocked")]
    pub maintenance_window_blocked: Option<bool>,
    ///Maintenance window duration for device updates. Valid values 0 to 5
    #[serde(rename = "maintenanceWindowDurationInHours")]
    pub maintenance_window_duration_in_hours: Option<f64>,
    ///Maintenance window start time for device updates.
    #[serde(rename = "maintenanceWindowStartTime")]
    pub maintenance_window_start_time: Option<chrono::NaiveTime>,
    ///Indicates whether or not to Block wireless projection.
    #[serde(rename = "miracastBlocked")]
    pub miracast_blocked: Option<bool>,
    ///Possible values for Miracast channel.
    #[serde(rename = "miracastChannel")]
    pub miracast_channel: Option<MicrosoftGraphMiracastChannel>,
    ///Indicates whether or not to require a pin for wireless projection.
    #[serde(rename = "miracastRequirePin")]
    pub miracast_require_pin: Option<bool>,
    ///Specifies whether to disable the 'My meetings and files' feature in the Start menu, which shows the signed-in user's meetings and files from Office 365.
    #[serde(rename = "settingsBlockMyMeetingsAndFiles")]
    pub settings_block_my_meetings_and_files: Option<bool>,
    ///Specifies whether to allow the ability to resume a session when the session times out.
    #[serde(rename = "settingsBlockSessionResume")]
    pub settings_block_session_resume: Option<bool>,
    ///Specifies whether to disable auto-populating of the sign-in dialog with invitees from scheduled meetings.
    #[serde(rename = "settingsBlockSigninSuggestions")]
    pub settings_block_signin_suggestions: Option<bool>,
    ///Specifies the default volume value for a new session. Permitted values are 0-100. The default is 45. Valid values 0 to 100
    #[serde(rename = "settingsDefaultVolume")]
    pub settings_default_volume: Option<f64>,
    ///Specifies the number of minutes until the Hub screen turns off.
    #[serde(rename = "settingsScreenTimeoutInMinutes")]
    pub settings_screen_timeout_in_minutes: Option<f64>,
    ///Specifies the number of minutes until the session times out.
    #[serde(rename = "settingsSessionTimeoutInMinutes")]
    pub settings_session_timeout_in_minutes: Option<f64>,
    ///Specifies the number of minutes until the Hub enters sleep mode.
    #[serde(rename = "settingsSleepTimeoutInMinutes")]
    pub settings_sleep_timeout_in_minutes: Option<f64>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
    ///The welcome screen background image URL. The URL must use the HTTPS protocol and return a PNG image.
    #[serde(rename = "welcomeScreenBackgroundImageUrl")]
    pub welcome_screen_background_image_url: Option<String>,
    ///Indicates whether or not to Block the welcome screen from waking up automatically when someone enters the room.
    #[serde(rename = "welcomeScreenBlockAutomaticWakeUp")]
    pub welcome_screen_block_automatic_wake_up: Option<bool>,
    ///Possible values for welcome screen meeting information.
    #[serde(rename = "welcomeScreenMeetingInformation")]
    pub welcome_screen_meeting_information: Option<
        MicrosoftGraphWelcomeScreenMeetingInformation,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows81CompliancePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windows81CompliancePolicy".to_string())]
    pub odata_type: String,
    ///The collection of assignments for this compliance policy.
    pub assignments: Option<Vec<MicrosoftGraphDeviceCompliancePolicyAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Compliance Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device compliance devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceComplianceDeviceOverview>,
    ///List of DeviceComplianceDeviceStatus.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceComplianceDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Maximum Windows 8.1 version.
    #[serde(rename = "osMaximumVersion")]
    pub os_maximum_version: Option<String>,
    ///Minimum Windows 8.1 version.
    #[serde(rename = "osMinimumVersion")]
    pub os_minimum_version: Option<String>,
    ///Indicates whether or not to block simple password.
    #[serde(rename = "passwordBlockSimple")]
    pub password_block_simple: Option<bool>,
    ///Password expiration in days.
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///The number of character sets required in the password.
    #[serde(rename = "passwordMinimumCharacterSetCount")]
    pub password_minimum_character_set_count: Option<f64>,
    ///The minimum password length.
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///Minutes of inactivity before a password is required.
    #[serde(rename = "passwordMinutesOfInactivityBeforeLock")]
    pub password_minutes_of_inactivity_before_lock: Option<f64>,
    ///The number of previous passwords to prevent re-use of. Valid values 0 to 24
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Require a password to unlock Windows device.
    #[serde(rename = "passwordRequired")]
    pub password_required: Option<bool>,
    ///Possible values of required passwords.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphRequiredPasswordType>,
    ///The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.
    #[serde(rename = "scheduledActionsForRule")]
    pub scheduled_actions_for_rule: Option<
        Vec<MicrosoftGraphDeviceComplianceScheduledActionForRule>,
    >,
    ///Indicates whether or not to require encryption on a windows 8.1 device.
    #[serde(rename = "storageRequireEncryption")]
    pub storage_require_encryption: Option<bool>,
    ///Device compliance users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceComplianceUserOverview>,
    ///List of DeviceComplianceUserStatus.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceComplianceUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindows81GeneralConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windows81GeneralConfiguration".to_string())]
    pub odata_type: String,
    ///Indicates whether or not to Block the user from adding email accounts to the device that are not associated with a Microsoft account.
    #[serde(rename = "accountsBlockAddingNonMicrosoftAccountEmail")]
    pub accounts_block_adding_non_microsoft_account_email: Option<bool>,
    ///Value indicating whether this policy only applies to Windows 8.1. This property is read-only.
    #[serde(rename = "applyOnlyToWindows81")]
    pub apply_only_to_windows81: Option<bool>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///Indicates whether or not to block auto fill.
    #[serde(rename = "browserBlockAutofill")]
    pub browser_block_autofill: Option<bool>,
    ///Indicates whether or not to block automatic detection of Intranet sites.
    #[serde(rename = "browserBlockAutomaticDetectionOfIntranetSites")]
    pub browser_block_automatic_detection_of_intranet_sites: Option<bool>,
    ///Indicates whether or not to block enterprise mode access.
    #[serde(rename = "browserBlockEnterpriseModeAccess")]
    pub browser_block_enterprise_mode_access: Option<bool>,
    ///Indicates whether or not to Block the user from using JavaScript.
    #[serde(rename = "browserBlockJavaScript")]
    pub browser_block_java_script: Option<bool>,
    ///Indicates whether or not to block plug-ins.
    #[serde(rename = "browserBlockPlugins")]
    pub browser_block_plugins: Option<bool>,
    ///Indicates whether or not to block popups.
    #[serde(rename = "browserBlockPopups")]
    pub browser_block_popups: Option<bool>,
    ///Indicates whether or not to Block the user from sending the do not track header.
    #[serde(rename = "browserBlockSendingDoNotTrackHeader")]
    pub browser_block_sending_do_not_track_header: Option<bool>,
    ///Indicates whether or not to block a single word entry on Intranet sites.
    #[serde(rename = "browserBlockSingleWordEntryOnIntranetSites")]
    pub browser_block_single_word_entry_on_intranet_sites: Option<bool>,
    ///The enterprise mode site list location. Could be a local file, local network or http location.
    #[serde(rename = "browserEnterpriseModeSiteListLocation")]
    pub browser_enterprise_mode_site_list_location: Option<String>,
    ///Possible values for internet site security level.
    #[serde(rename = "browserInternetSecurityLevel")]
    pub browser_internet_security_level: Option<MicrosoftGraphInternetSiteSecurityLevel>,
    ///Possible values for site security level.
    #[serde(rename = "browserIntranetSecurityLevel")]
    pub browser_intranet_security_level: Option<MicrosoftGraphSiteSecurityLevel>,
    ///The logging report location.
    #[serde(rename = "browserLoggingReportLocation")]
    pub browser_logging_report_location: Option<String>,
    ///Indicates whether or not to require a firewall.
    #[serde(rename = "browserRequireFirewall")]
    pub browser_require_firewall: Option<bool>,
    ///Indicates whether or not to require fraud warning.
    #[serde(rename = "browserRequireFraudWarning")]
    pub browser_require_fraud_warning: Option<bool>,
    ///Indicates whether or not to require high security for restricted sites.
    #[serde(rename = "browserRequireHighSecurityForRestrictedSites")]
    pub browser_require_high_security_for_restricted_sites: Option<bool>,
    ///Indicates whether or not to require the user to use the smart screen filter.
    #[serde(rename = "browserRequireSmartScreen")]
    pub browser_require_smart_screen: Option<bool>,
    ///Possible values for site security level.
    #[serde(rename = "browserTrustedSitesSecurityLevel")]
    pub browser_trusted_sites_security_level: Option<MicrosoftGraphSiteSecurityLevel>,
    ///Indicates whether or not to block data roaming.
    #[serde(rename = "cellularBlockDataRoaming")]
    pub cellular_block_data_roaming: Option<bool>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Indicates whether or not to block diagnostic data submission.
    #[serde(rename = "diagnosticsBlockDataSubmission")]
    pub diagnostics_block_data_submission: Option<bool>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether or not to Block the user from using a pictures password and pin.
    #[serde(rename = "passwordBlockPicturePasswordAndPin")]
    pub password_block_picture_password_and_pin: Option<bool>,
    ///Password expiration in days.
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///The number of character sets required in the password.
    #[serde(rename = "passwordMinimumCharacterSetCount")]
    pub password_minimum_character_set_count: Option<f64>,
    ///The minimum password length.
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///The minutes of inactivity before the screen times out.
    #[serde(rename = "passwordMinutesOfInactivityBeforeScreenTimeout")]
    pub password_minutes_of_inactivity_before_screen_timeout: Option<f64>,
    ///The number of previous passwords to prevent re-use of. Valid values 0 to 24
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Possible values of required passwords.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphRequiredPasswordType>,
    ///The number of sign in failures before factory reset.
    #[serde(rename = "passwordSignInFailureCountBeforeFactoryReset")]
    pub password_sign_in_failure_count_before_factory_reset: Option<f64>,
    ///Indicates whether or not to require encryption on a mobile device.
    #[serde(rename = "storageRequireDeviceEncryption")]
    pub storage_require_device_encryption: Option<bool>,
    ///Indicates whether or not to require automatic updates.
    #[serde(rename = "updatesRequireAutomaticUpdates")]
    pub updates_require_automatic_updates: Option<bool>,
    ///Possible values for Windows user account control settings.
    #[serde(rename = "userAccountControlSettings")]
    pub user_account_control_settings: Option<
        MicrosoftGraphWindowsUserAccountControlSettings,
    >,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
    ///The work folders url.
    #[serde(rename = "workFoldersUrl")]
    pub work_folders_url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsAppX {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsAppX".to_string())]
    pub odata_type: String,
    ///Contains properties for Windows architecture.
    #[serde(rename = "applicableArchitectures")]
    pub applicable_architectures: Option<MicrosoftGraphWindowsArchitecture>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The identity name of the uploaded app package. For example: 'Contoso.DemoApp'.
    #[serde(rename = "identityName")]
    pub identity_name: Option<String>,
    ///The identity publisher hash of the uploaded app package. This is the hash of the publisher from the manifest. For example: 'AB82CD0XYZ'.
    #[serde(rename = "identityPublisherHash")]
    pub identity_publisher_hash: Option<String>,
    ///The identity resource identifier of the uploaded app package. For example: 'TestResourceId'.
    #[serde(rename = "identityResourceIdentifier")]
    pub identity_resource_identifier: Option<String>,
    ///The identity version of the uploaded app package. For example: '1.0.0.0'.
    #[serde(rename = "identityVersion")]
    pub identity_version: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///When TRUE, indicates that the app is a bundle. When FALSE, indicates that the app is not a bundle. By default, property is set to FALSE.
    #[serde(rename = "isBundle")]
    pub is_bundle: Option<bool>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The minimum operating system required for a Windows mobile app.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphWindowsMinimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsAppXappAssignmentSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsAppXAppAssignmentSettings".to_string())]
    pub odata_type: String,
    ///When TRUE, indicates that device execution context will be used for the AppX mobile app. When FALSE, indicates that user context will be used for the AppX mobile app. By default, this property is set to FALSE. Once this property has been set to TRUE it cannot be changed.
    #[serde(rename = "useDeviceContext")]
    pub use_device_context: Option<bool>,
}
///Contains properties for Windows architecture.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsArchitecture {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "x86")]
    X86,
    #[serde(rename = "x64")]
    X64,
    #[serde(rename = "arm")]
    Arm,
    #[serde(rename = "neutral")]
    Neutral,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsAutopilotDeploymentProfile {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsAutopilotDeploymentProfile".to_string())]
    pub odata_type: String,
    ///The list of assigned devices for the profile.
    #[serde(rename = "assignedDevices")]
    pub assigned_devices: Option<Vec<MicrosoftGraphWindowsAutopilotDeviceIdentity>>,
    ///The date and time of when the deployment profile was created. The value cannot be modified and is automatically populated when the profile was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported. Read-Only.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///A description of the deployment profile. Max allowed length is 1500 chars. Supports: $select, $top, $skip, $orderBy. $Search and $filter are not supported.
    pub description: Option<String>,
    ///The template used to name the Autopilot device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported.
    #[serde(rename = "deviceNameTemplate")]
    pub device_name_template: Option<String>,
    #[serde(rename = "deviceType")]
    pub device_type: Option<MicrosoftGraphWindowsAutopilotDeviceType>,
    ///The display name of the deployment profile. Max allowed length is 200 chars. Returned by default. Supports: $select, $top, $skip, $orderby. $Search and $filter are not supported.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Indicates whether the profile supports the extraction of hardware hash values and registration of the device into Windows Autopilot. When TRUE, indicates if hardware extraction and Windows Autopilot registration will happen on the next successful check-in. When FALSE, hardware hash extraction and Windows Autopilot registration will not happen. Default value is FALSE. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported.
    #[serde(rename = "hardwareHashExtractionEnabled")]
    pub hardware_hash_extraction_enabled: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The date and time of when the deployment profile was last modified. The value cannot be updated manually and is automatically populated when any changes are made to the profile. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported Read-Only.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The locale (language) to be used when configuring the device. E.g. en-US. The default value is os-default. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported.
    pub locale: Option<String>,
    ///The Entra management service App ID which gets used during client device-based enrollment discovery. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported.
    #[serde(rename = "managementServiceAppId")]
    pub management_service_app_id: Option<String>,
    ///The Windows Autopilot Deployment Profile settings used by the device for the out-of-box experience. Supports: $select, $top, $skip. $Search, $orderBy and $filter are not supported.
    #[serde(rename = "outOfBoxExperienceSetting")]
    pub out_of_box_experience_setting: Option<MicrosoftGraphOutOfBoxExperienceSetting>,
    ///Indicates whether the user is allowed to use Windows Autopilot for pre-provisioned deployment mode during Out of Box experience (OOBE). When TRUE, indicates that Windows Autopilot for pre-provisioned deployment mode for OOBE is allowed to be used. When false, Windows Autopilot for pre-provisioned deployment mode for OOBE is not allowed. The default is FALSE.
    #[serde(rename = "preprovisioningAllowed")]
    pub preprovisioning_allowed: Option<bool>,
    ///List of role scope tags for the deployment profile.
    #[serde(rename = "roleScopeTagIds")]
    pub role_scope_tag_ids: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsAutopilotDeploymentProfileAssignment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.windowsAutopilotDeploymentProfileAssignment".to_string()
    )]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsAutopilotDeviceIdentity {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsAutopilotDeviceIdentity".to_string())]
    pub odata_type: String,
    ///Addressable user name.
    #[serde(rename = "addressableUserName")]
    pub addressable_user_name: Option<String>,
    ///AAD Device ID - to be deprecated
    #[serde(rename = "azureActiveDirectoryDeviceId")]
    pub azure_active_directory_device_id: Option<String>,
    ///Display Name
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(rename = "enrollmentState")]
    pub enrollment_state: Option<MicrosoftGraphEnrollmentState>,
    ///Group Tag of the Windows autopilot device.
    #[serde(rename = "groupTag")]
    pub group_tag: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Intune Last Contacted Date Time of the Windows autopilot device.
    #[serde(rename = "lastContactedDateTime")]
    pub last_contacted_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Managed Device ID
    #[serde(rename = "managedDeviceId")]
    pub managed_device_id: Option<String>,
    ///Oem manufacturer of the Windows autopilot device.
    pub manufacturer: Option<String>,
    ///Model name of the Windows autopilot device.
    pub model: Option<String>,
    ///Product Key of the Windows autopilot device.
    #[serde(rename = "productKey")]
    pub product_key: Option<String>,
    ///Purchase Order Identifier of the Windows autopilot device.
    #[serde(rename = "purchaseOrderIdentifier")]
    pub purchase_order_identifier: Option<String>,
    ///Resource Name.
    #[serde(rename = "resourceName")]
    pub resource_name: Option<String>,
    ///Serial number of the Windows autopilot device.
    #[serde(rename = "serialNumber")]
    pub serial_number: Option<String>,
    ///SKU Number
    #[serde(rename = "skuNumber")]
    pub sku_number: Option<String>,
    ///System Family
    #[serde(rename = "systemFamily")]
    pub system_family: Option<String>,
    ///User Principal Name.
    #[serde(rename = "userPrincipalName")]
    pub user_principal_name: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsAutopilotDeviceType {
    #[serde(rename = "windowsPc")]
    #[default]
    WindowsPc,
    #[serde(rename = "holoLens")]
    HoloLens,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsDefenderAdvancedThreatProtectionConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.windowsDefenderAdvancedThreatProtectionConfiguration".to_string(

        )
    )]
    pub odata_type: String,
    ///Windows Defender AdvancedThreatProtection 'Allow Sample Sharing' Rule
    #[serde(rename = "allowSampleSharing")]
    pub allow_sample_sharing: Option<bool>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Expedite Windows Defender Advanced Threat Protection telemetry reporting frequency.
    #[serde(rename = "enableExpeditedTelemetryReporting")]
    pub enable_expedited_telemetry_reporting: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Product Status of Windows Defender
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsDefenderProductStatus {
    #[serde(rename = "noStatus")]
    #[default]
    NoStatus,
    #[serde(rename = "serviceNotRunning")]
    ServiceNotRunning,
    #[serde(rename = "serviceStartedWithoutMalwareProtection")]
    ServiceStartedWithoutMalwareProtection,
    #[serde(rename = "pendingFullScanDueToThreatAction")]
    PendingFullScanDueToThreatAction,
    #[serde(rename = "pendingRebootDueToThreatAction")]
    PendingRebootDueToThreatAction,
    #[serde(rename = "pendingManualStepsDueToThreatAction")]
    PendingManualStepsDueToThreatAction,
    #[serde(rename = "avSignaturesOutOfDate")]
    AvSignaturesOutOfDate,
    #[serde(rename = "asSignaturesOutOfDate")]
    AsSignaturesOutOfDate,
    #[serde(rename = "noQuickScanHappenedForSpecifiedPeriod")]
    NoQuickScanHappenedForSpecifiedPeriod,
    #[serde(rename = "noFullScanHappenedForSpecifiedPeriod")]
    NoFullScanHappenedForSpecifiedPeriod,
    #[serde(rename = "systemInitiatedScanInProgress")]
    SystemInitiatedScanInProgress,
    #[serde(rename = "systemInitiatedCleanInProgress")]
    SystemInitiatedCleanInProgress,
    #[serde(rename = "samplesPendingSubmission")]
    SamplesPendingSubmission,
    #[serde(rename = "productRunningInEvaluationMode")]
    ProductRunningInEvaluationMode,
    #[serde(rename = "productRunningInNonGenuineMode")]
    ProductRunningInNonGenuineMode,
    #[serde(rename = "productExpired")]
    ProductExpired,
    #[serde(rename = "offlineScanRequired")]
    OfflineScanRequired,
    #[serde(rename = "serviceShutdownAsPartOfSystemShutdown")]
    ServiceShutdownAsPartOfSystemShutdown,
    #[serde(rename = "threatRemediationFailedCritically")]
    ThreatRemediationFailedCritically,
    #[serde(rename = "threatRemediationFailedNonCritically")]
    ThreatRemediationFailedNonCritically,
    #[serde(rename = "noStatusFlagsSet")]
    NoStatusFlagsSet,
    #[serde(rename = "platformOutOfDate")]
    PlatformOutOfDate,
    #[serde(rename = "platformUpdateInProgress")]
    PlatformUpdateInProgress,
    #[serde(rename = "platformAboutToBeOutdated")]
    PlatformAboutToBeOutdated,
    #[serde(rename = "signatureOrPlatformEndOfLifeIsPastOrIsImpending")]
    SignatureOrPlatformEndOfLifeIsPastOrIsImpending,
    #[serde(rename = "windowsSModeSignaturesInUseOnNonWin10SInstall")]
    WindowsSmodeSignaturesInUseOnNonWin10Sinstall,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsDefenderScanActionResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsDefenderScanActionResult".to_string())]
    pub odata_type: String,
    ///Action name
    #[serde(rename = "actionName")]
    pub action_name: Option<String>,
    ///State of the action on the device
    #[serde(rename = "actionState")]
    pub action_state: Option<MicrosoftGraphActionState>,
    ///Time the action state was last updated
    #[serde(rename = "lastUpdatedDateTime")]
    pub last_updated_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Scan type either full scan or quick scan
    #[serde(rename = "scanType")]
    pub scan_type: Option<String>,
    ///Time the action was initiated
    #[serde(rename = "startDateTime")]
    pub start_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
///Delivery optimization mode for peer distribution
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsDeliveryOptimizationMode {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "httpOnly")]
    HttpOnly,
    #[serde(rename = "httpWithPeeringNat")]
    HttpWithPeeringNat,
    #[serde(rename = "httpWithPeeringPrivateGroup")]
    HttpWithPeeringPrivateGroup,
    #[serde(rename = "httpWithInternetPeering")]
    HttpWithInternetPeering,
    #[serde(rename = "simpleDownload")]
    SimpleDownload,
    #[serde(rename = "bypassMode")]
    BypassMode,
}
///Computer endpoint protection state
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsDeviceHealthState {
    #[serde(rename = "clean")]
    #[default]
    Clean,
    #[serde(rename = "fullScanPending")]
    FullScanPending,
    #[serde(rename = "rebootPending")]
    RebootPending,
    #[serde(rename = "manualStepsPending")]
    ManualStepsPending,
    #[serde(rename = "offlineScanPending")]
    OfflineScanPending,
    #[serde(rename = "critical")]
    Critical,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsDeviceMalwareState {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsDeviceMalwareState".to_string())]
    pub odata_type: String,
    ///Information URL to learn more about the malware
    #[serde(rename = "additionalInformationUrl")]
    pub additional_information_url: Option<String>,
    ///Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
    pub category: Option<MicrosoftGraphWindowsMalwareCategory>,
    ///Number of times the malware is detected
    #[serde(rename = "detectionCount")]
    pub detection_count: Option<f64>,
    ///Malware name
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
    #[serde(rename = "executionState")]
    pub execution_state: Option<MicrosoftGraphWindowsMalwareExecutionState>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Initial detection datetime of the malware
    #[serde(rename = "initialDetectionDateTime")]
    pub initial_detection_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The last time this particular threat was changed
    #[serde(rename = "lastStateChangeDateTime")]
    pub last_state_change_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
    pub severity: Option<MicrosoftGraphWindowsMalwareSeverity>,
    ///Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
    pub state: Option<MicrosoftGraphWindowsMalwareState>,
    ///Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
    #[serde(rename = "threatState")]
    pub threat_state: Option<MicrosoftGraphWindowsMalwareThreatState>,
}
///Contains properties for Windows device type. Multiple values can be selected. Default value is `none`.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsDeviceType {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "desktop")]
    Desktop,
    #[serde(rename = "mobile")]
    Mobile,
    #[serde(rename = "holographic")]
    Holographic,
    #[serde(rename = "team")]
    Team,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsDeviceUsageType {
    #[serde(rename = "singleUser")]
    #[default]
    SingleUser,
    #[serde(rename = "shared")]
    Shared,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///Windows Firewall Profile Policies.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsFirewallNetworkProfile {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Configures the firewall to merge authorized application rules from group policy with those from local store instead of ignoring the local store rules. When AuthorizedApplicationRulesFromGroupPolicyNotMerged and AuthorizedApplicationRulesFromGroupPolicyMerged are both true, AuthorizedApplicationRulesFromGroupPolicyMerged takes priority.
    #[serde(rename = "authorizedApplicationRulesFromGroupPolicyMerged")]
    pub authorized_application_rules_from_group_policy_merged: Option<bool>,
    ///Configures the firewall to merge connection security rules from group policy with those from local store instead of ignoring the local store rules. When ConnectionSecurityRulesFromGroupPolicyNotMerged and ConnectionSecurityRulesFromGroupPolicyMerged are both true, ConnectionSecurityRulesFromGroupPolicyMerged takes priority.
    #[serde(rename = "connectionSecurityRulesFromGroupPolicyMerged")]
    pub connection_security_rules_from_group_policy_merged: Option<bool>,
    ///State Management Setting.
    #[serde(rename = "firewallEnabled")]
    pub firewall_enabled: Option<MicrosoftGraphStateManagementSetting>,
    ///Configures the firewall to merge global port rules from group policy with those from local store instead of ignoring the local store rules. When GlobalPortRulesFromGroupPolicyNotMerged and GlobalPortRulesFromGroupPolicyMerged are both true, GlobalPortRulesFromGroupPolicyMerged takes priority.
    #[serde(rename = "globalPortRulesFromGroupPolicyMerged")]
    pub global_port_rules_from_group_policy_merged: Option<bool>,
    ///Configures the firewall to block all incoming connections by default. When InboundConnectionsRequired and InboundConnectionsBlocked are both true, InboundConnectionsBlocked takes priority.
    #[serde(rename = "inboundConnectionsBlocked")]
    pub inbound_connections_blocked: Option<bool>,
    ///Prevents the firewall from displaying notifications when an application is blocked from listening on a port. When InboundNotificationsRequired and InboundNotificationsBlocked are both true, InboundNotificationsBlocked takes priority.
    #[serde(rename = "inboundNotificationsBlocked")]
    pub inbound_notifications_blocked: Option<bool>,
    ///Configures the firewall to block all incoming traffic regardless of other policy settings. When IncomingTrafficRequired and IncomingTrafficBlocked are both true, IncomingTrafficBlocked takes priority.
    #[serde(rename = "incomingTrafficBlocked")]
    pub incoming_traffic_blocked: Option<bool>,
    ///Configures the firewall to block all outgoing connections by default. When OutboundConnectionsRequired and OutboundConnectionsBlocked are both true, OutboundConnectionsBlocked takes priority. This setting will get applied to Windows releases version 1809 and above.
    #[serde(rename = "outboundConnectionsBlocked")]
    pub outbound_connections_blocked: Option<bool>,
    ///Configures the firewall to merge Firewall Rule policies from group policy with those from local store instead of ignoring the local store rules. When PolicyRulesFromGroupPolicyNotMerged and PolicyRulesFromGroupPolicyMerged are both true, PolicyRulesFromGroupPolicyMerged takes priority.
    #[serde(rename = "policyRulesFromGroupPolicyMerged")]
    pub policy_rules_from_group_policy_merged: Option<bool>,
    ///Configures the firewall to allow the host computer to respond to unsolicited network traffic of that traffic is secured by IPSec even when stealthModeBlocked is set to true. When SecuredPacketExemptionBlocked and SecuredPacketExemptionAllowed are both true, SecuredPacketExemptionAllowed takes priority.
    #[serde(rename = "securedPacketExemptionAllowed")]
    pub secured_packet_exemption_allowed: Option<bool>,
    ///Prevent the server from operating in stealth mode. When StealthModeRequired and StealthModeBlocked are both true, StealthModeBlocked takes priority.
    #[serde(rename = "stealthModeBlocked")]
    pub stealth_mode_blocked: Option<bool>,
    ///Configures the firewall to block unicast responses to multicast broadcast traffic. When UnicastResponsesToMulticastBroadcastsRequired and UnicastResponsesToMulticastBroadcastsBlocked are both true, UnicastResponsesToMulticastBroadcastsBlocked takes priority.
    #[serde(rename = "unicastResponsesToMulticastBroadcastsBlocked")]
    pub unicast_responses_to_multicast_broadcasts_blocked: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.windowsHelloForBusinessAuthenticationMethod".to_string()
    )]
    pub odata_type: String,
    ///The date and time that this Windows Hello for Business key was registered.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The registered device on which this Windows Hello for Business key resides. Supports $expand. When you get a user's Windows Hello for Business registration information, this property is returned only on a single GET and when you specify ?$expand. For example, GET /users/admin@contoso.com/authentication/windowsHelloForBusinessMethods/_jpuR-TGZtk6aQCLF3BQjA2?$expand=device.
    pub device: Option<MicrosoftGraphDevice>,
    ///The name of the device on which Windows Hello for Business is registered
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Key strength of this Windows Hello for Business key. Possible values are: normal, weak, unknown.
    #[serde(rename = "keyStrength")]
    pub key_strength: Option<MicrosoftGraphAuthenticationMethodKeyStrength>,
}
///Windows Hello for Business pin usage options
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsHelloForBusinessPinUsage {
    #[serde(rename = "allowed")]
    #[default]
    Allowed,
    #[serde(rename = "required")]
    Required,
    #[serde(rename = "disallowed")]
    Disallowed,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsInformationProtection".to_string())]
    pub odata_type: String,
    ///Navigation property to list of security groups targeted for policy.
    pub assignments: Option<Vec<MicrosoftGraphTargetedManagedAppPolicyAssignment>>,
    ///Specifies whether to allow Azure RMS encryption for WIP
    #[serde(rename = "azureRightsManagementServicesAllowed")]
    pub azure_rights_management_services_allowed: Option<bool>,
    ///The date and time the policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies a recovery certificate that can be used for data recovery of encrypted files. This is the same as the data recovery agent(DRA) certificate for encrypting file system(EFS)
    #[serde(rename = "dataRecoveryCertificate")]
    pub data_recovery_certificate: Option<
        MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate,
    >,
    ///The policy's description.
    pub description: Option<String>,
    ///Policy display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Possible values for WIP Protection enforcement levels
    #[serde(rename = "enforcementLevel")]
    pub enforcement_level: Option<
        MicrosoftGraphWindowsInformationProtectionEnforcementLevel,
    >,
    ///Primary enterprise domain
    #[serde(rename = "enterpriseDomain")]
    pub enterprise_domain: Option<String>,
    ///Sets the enterprise IP ranges that define the computers in the enterprise network. Data that comes from those computers will be considered part of the enterprise and protected. These locations will be considered a safe destination for enterprise data to be shared to
    #[serde(rename = "enterpriseIPRanges")]
    pub enterprise_ipranges: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionIprangeCollection>,
    >,
    ///Boolean value that tells the client to accept the configured list and not to use heuristics to attempt to find other subnets. Default is false
    #[serde(rename = "enterpriseIPRangesAreAuthoritative")]
    pub enterprise_ipranges_are_authoritative: Option<bool>,
    ///This is the comma-separated list of internal proxy servers. For example, '157.54.14.28, 157.54.11.118, 10.202.14.167, 157.53.14.163, 157.69.210.59'. These proxies have been configured by the admin to connect to specific resources on the Internet. They are considered to be enterprise network locations. The proxies are only leveraged in configuring the EnterpriseProxiedDomains policy to force traffic to the matched domains through these proxies
    #[serde(rename = "enterpriseInternalProxyServers")]
    pub enterprise_internal_proxy_servers: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///This is the list of domains that comprise the boundaries of the enterprise. Data from one of these domains that is sent to a device will be considered enterprise data and protected These locations will be considered a safe destination for enterprise data to be shared to
    #[serde(rename = "enterpriseNetworkDomainNames")]
    pub enterprise_network_domain_names: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///List of enterprise domains to be protected
    #[serde(rename = "enterpriseProtectedDomainNames")]
    pub enterprise_protected_domain_names: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Contains a list of Enterprise resource domains hosted in the cloud that need to be protected. Connections to these resources are considered enterprise data. If a proxy is paired with a cloud resource, traffic to the cloud resource will be routed through the enterprise network via the denoted proxy server (on Port 80). A proxy server used for this purpose must also be configured using the EnterpriseInternalProxyServers policy
    #[serde(rename = "enterpriseProxiedDomains")]
    pub enterprise_proxied_domains: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection>,
    >,
    ///This is a list of proxy servers. Any server not on this list is considered non-enterprise
    #[serde(rename = "enterpriseProxyServers")]
    pub enterprise_proxy_servers: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Boolean value that tells the client to accept the configured list of proxies and not try to detect other work proxies. Default is false
    #[serde(rename = "enterpriseProxyServersAreAuthoritative")]
    pub enterprise_proxy_servers_are_authoritative: Option<bool>,
    ///Another way to input exempt apps through xml files
    #[serde(rename = "exemptAppLockerFiles")]
    pub exempt_app_locker_files: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionAppLockerFile>,
    >,
    ///Exempt applications can also access enterprise data, but the data handled by those applications are not protected. This is because some critical enterprise applications may have compatibility problems with encrypted data.
    #[serde(rename = "exemptApps")]
    pub exempt_apps: Option<Vec<MicrosoftGraphWindowsInformationProtectionApp>>,
    ///Determines whether overlays are added to icons for WIP protected files in Explorer and enterprise only app tiles in the Start menu. Starting in Windows 10, version 1703 this setting also configures the visibility of the WIP icon in the title bar of a WIP-protected app
    #[serde(rename = "iconsVisible")]
    pub icons_visible: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///This switch is for the Windows Search Indexer, to allow or disallow indexing of items
    #[serde(rename = "indexingEncryptedStoresOrItemsBlocked")]
    pub indexing_encrypted_stores_or_items_blocked: Option<bool>,
    ///Indicates if the policy is deployed to any inclusion groups or not.
    #[serde(rename = "isAssigned")]
    pub is_assigned: Option<bool>,
    ///Last time the policy was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///List of domain names that can used for work or personal resource
    #[serde(rename = "neutralDomainResources")]
    pub neutral_domain_resources: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Another way to input protected apps through xml files
    #[serde(rename = "protectedAppLockerFiles")]
    pub protected_app_locker_files: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionAppLockerFile>,
    >,
    ///Protected applications can access enterprise data and the data handled by those applications are protected with encryption
    #[serde(rename = "protectedApps")]
    pub protected_apps: Option<Vec<MicrosoftGraphWindowsInformationProtectionApp>>,
    ///Specifies whether the protection under lock feature (also known as encrypt under pin) should be configured
    #[serde(rename = "protectionUnderLockConfigRequired")]
    pub protection_under_lock_config_required: Option<bool>,
    ///This policy controls whether to revoke the WIP keys when a device unenrolls from the management service. If set to 1 (Don't revoke keys), the keys will not be revoked and the user will continue to have access to protected files after unenrollment. If the keys are not revoked, there will be no revoked file cleanup subsequently.
    #[serde(rename = "revokeOnUnenrollDisabled")]
    pub revoke_on_unenroll_disabled: Option<bool>,
    ///TemplateID GUID to use for RMS encryption. The RMS template allows the IT admin to configure the details about who has access to RMS-protected file and how long they have access
    #[serde(rename = "rightsManagementServicesTemplateId")]
    pub rights_management_services_template_id: Option<uuid::Uuid>,
    ///Specifies a list of file extensions, so that files with these extensions are encrypted when copying from an SMB share within the corporate boundary
    #[serde(rename = "smbAutoEncryptedFileExtensions")]
    pub smb_auto_encrypted_file_extensions: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Version of the entity.
    pub version: Option<String>,
}
///App for Windows information protection
discriminated_enum! {
    pub enum MicrosoftGraphWindowsInformationProtectionApp { discriminator :
    "@odata.type", variants :
    [("#microsoft.graph.windowsInformationProtectionDesktopApp",
    MicrosoftGraphWindowsInformationProtectionDesktopApp(Box <
    MicrosoftGraphWindowsInformationProtectionDesktopApp >)),
    ("#microsoft.graph.windowsInformationProtectionStoreApp",
    MicrosoftGraphWindowsInformationProtectionStoreApp(Box <
    MicrosoftGraphWindowsInformationProtectionStoreApp >))], fallback :
    WindowsInformationProtectionApp(Box <
    MicrosoftGraphWindowsInformationProtectionAppBase >), }
}
///App for Windows information protection
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtectionAppBase {
    ///If true, app is denied protection or exemption.
    pub denied: Option<bool>,
    ///The app's description.
    pub description: Option<String>,
    ///App display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The product name.
    #[serde(rename = "productName")]
    pub product_name: Option<String>,
    ///The publisher name
    #[serde(rename = "publisherName")]
    pub publisher_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtectionAppLearningSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.windowsInformationProtectionAppLearningSummary".to_string()
    )]
    pub odata_type: String,
    ///Application Name
    #[serde(rename = "applicationName")]
    pub application_name: Option<String>,
    ///Possible types of Application
    #[serde(rename = "applicationType")]
    pub application_type: Option<MicrosoftGraphApplicationType>,
    ///Device Count
    #[serde(rename = "deviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtectionAppLockerFile {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsInformationProtectionAppLockerFile".to_string())]
    pub odata_type: String,
    ///The friendly name
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///File as a byte array
    pub file: Option<String>,
    ///SHA256 hash of the file
    #[serde(rename = "fileHash")]
    pub file_hash: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Version of the entity.
    pub version: Option<String>,
}
///Windows Information Protection DataRecoveryCertificate
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Data recovery Certificate
    pub certificate: Option<String>,
    ///Data recovery Certificate description
    pub description: Option<String>,
    ///Data recovery Certificate expiration datetime
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Data recovery Certificate subject name
    #[serde(rename = "subjectName")]
    pub subject_name: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtectionDesktopApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsInformationProtectionDesktopApp".to_string())]
    pub odata_type: String,
    ///The binary name.
    #[serde(rename = "binaryName")]
    pub binary_name: Option<String>,
    ///The high binary version.
    #[serde(rename = "binaryVersionHigh")]
    pub binary_version_high: Option<String>,
    ///The lower binary version.
    #[serde(rename = "binaryVersionLow")]
    pub binary_version_low: Option<String>,
    ///If true, app is denied protection or exemption.
    pub denied: Option<bool>,
    ///The app's description.
    pub description: Option<String>,
    ///App display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The product name.
    #[serde(rename = "productName")]
    pub product_name: Option<String>,
    ///The publisher name
    #[serde(rename = "publisherName")]
    pub publisher_name: Option<String>,
}
///Possible values for WIP Protection enforcement levels
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsInformationProtectionEnforcementLevel {
    #[serde(rename = "noProtection")]
    #[default]
    NoProtection,
    #[serde(rename = "encryptAndAuditOnly")]
    EncryptAndAuditOnly,
    #[serde(rename = "encryptAuditAndPrompt")]
    EncryptAuditAndPrompt,
    #[serde(rename = "encryptAuditAndBlock")]
    EncryptAuditAndBlock,
}
///Windows Information Protection IP Range Collection
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtectionIprangeCollection {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Display name
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Collection of ip ranges
    pub ranges: Option<Vec<MicrosoftGraphIpRange>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtectionNetworkLearningSummary {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.windowsInformationProtectionNetworkLearningSummary".to_string()
    )]
    pub odata_type: String,
    ///Device Count
    #[serde(rename = "deviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_count: Option<f64>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Website url
    pub url: Option<String>,
}
///Pin Character Requirements
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsInformationProtectionPinCharacterRequirements {
    #[serde(rename = "notAllow")]
    #[default]
    NotAllow,
    #[serde(rename = "requireAtLeastOne")]
    RequireAtLeastOne,
    #[serde(rename = "allow")]
    Allow,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtectionPolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsInformationProtectionPolicy".to_string())]
    pub odata_type: String,
    ///Navigation property to list of security groups targeted for policy.
    pub assignments: Option<Vec<MicrosoftGraphTargetedManagedAppPolicyAssignment>>,
    ///Specifies whether to allow Azure RMS encryption for WIP
    #[serde(rename = "azureRightsManagementServicesAllowed")]
    pub azure_rights_management_services_allowed: Option<bool>,
    ///The date and time the policy was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Specifies a recovery certificate that can be used for data recovery of encrypted files. This is the same as the data recovery agent(DRA) certificate for encrypting file system(EFS)
    #[serde(rename = "dataRecoveryCertificate")]
    pub data_recovery_certificate: Option<
        MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate,
    >,
    ///Offline interval before app data is wiped (days)
    #[serde(rename = "daysWithoutContactBeforeUnenroll")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub days_without_contact_before_unenroll: Option<f64>,
    ///The policy's description.
    pub description: Option<String>,
    ///Policy display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Possible values for WIP Protection enforcement levels
    #[serde(rename = "enforcementLevel")]
    pub enforcement_level: Option<
        MicrosoftGraphWindowsInformationProtectionEnforcementLevel,
    >,
    ///Primary enterprise domain
    #[serde(rename = "enterpriseDomain")]
    pub enterprise_domain: Option<String>,
    ///Sets the enterprise IP ranges that define the computers in the enterprise network. Data that comes from those computers will be considered part of the enterprise and protected. These locations will be considered a safe destination for enterprise data to be shared to
    #[serde(rename = "enterpriseIPRanges")]
    pub enterprise_ipranges: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionIprangeCollection>,
    >,
    ///Boolean value that tells the client to accept the configured list and not to use heuristics to attempt to find other subnets. Default is false
    #[serde(rename = "enterpriseIPRangesAreAuthoritative")]
    pub enterprise_ipranges_are_authoritative: Option<bool>,
    ///This is the comma-separated list of internal proxy servers. For example, '157.54.14.28, 157.54.11.118, 10.202.14.167, 157.53.14.163, 157.69.210.59'. These proxies have been configured by the admin to connect to specific resources on the Internet. They are considered to be enterprise network locations. The proxies are only leveraged in configuring the EnterpriseProxiedDomains policy to force traffic to the matched domains through these proxies
    #[serde(rename = "enterpriseInternalProxyServers")]
    pub enterprise_internal_proxy_servers: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///This is the list of domains that comprise the boundaries of the enterprise. Data from one of these domains that is sent to a device will be considered enterprise data and protected These locations will be considered a safe destination for enterprise data to be shared to
    #[serde(rename = "enterpriseNetworkDomainNames")]
    pub enterprise_network_domain_names: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///List of enterprise domains to be protected
    #[serde(rename = "enterpriseProtectedDomainNames")]
    pub enterprise_protected_domain_names: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Contains a list of Enterprise resource domains hosted in the cloud that need to be protected. Connections to these resources are considered enterprise data. If a proxy is paired with a cloud resource, traffic to the cloud resource will be routed through the enterprise network via the denoted proxy server (on Port 80). A proxy server used for this purpose must also be configured using the EnterpriseInternalProxyServers policy
    #[serde(rename = "enterpriseProxiedDomains")]
    pub enterprise_proxied_domains: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection>,
    >,
    ///This is a list of proxy servers. Any server not on this list is considered non-enterprise
    #[serde(rename = "enterpriseProxyServers")]
    pub enterprise_proxy_servers: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Boolean value that tells the client to accept the configured list of proxies and not try to detect other work proxies. Default is false
    #[serde(rename = "enterpriseProxyServersAreAuthoritative")]
    pub enterprise_proxy_servers_are_authoritative: Option<bool>,
    ///Another way to input exempt apps through xml files
    #[serde(rename = "exemptAppLockerFiles")]
    pub exempt_app_locker_files: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionAppLockerFile>,
    >,
    ///Exempt applications can also access enterprise data, but the data handled by those applications are not protected. This is because some critical enterprise applications may have compatibility problems with encrypted data.
    #[serde(rename = "exemptApps")]
    pub exempt_apps: Option<Vec<MicrosoftGraphWindowsInformationProtectionApp>>,
    ///Determines whether overlays are added to icons for WIP protected files in Explorer and enterprise only app tiles in the Start menu. Starting in Windows 10, version 1703 this setting also configures the visibility of the WIP icon in the title bar of a WIP-protected app
    #[serde(rename = "iconsVisible")]
    pub icons_visible: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///This switch is for the Windows Search Indexer, to allow or disallow indexing of items
    #[serde(rename = "indexingEncryptedStoresOrItemsBlocked")]
    pub indexing_encrypted_stores_or_items_blocked: Option<bool>,
    ///Indicates if the policy is deployed to any inclusion groups or not.
    #[serde(rename = "isAssigned")]
    pub is_assigned: Option<bool>,
    ///Last time the policy was modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Enrollment url for the MDM
    #[serde(rename = "mdmEnrollmentUrl")]
    pub mdm_enrollment_url: Option<String>,
    ///Specifies the maximum amount of time (in minutes) allowed after the device is idle that will cause the device to become PIN or password locked.   Range is an integer X where 0 <= X <= 999.
    #[serde(rename = "minutesOfInactivityBeforeDeviceLock")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub minutes_of_inactivity_before_device_lock: Option<f64>,
    ///List of domain names that can used for work or personal resource
    #[serde(rename = "neutralDomainResources")]
    pub neutral_domain_resources: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Integer value that specifies the number of past PINs that can be associated to a user account that can't be reused. The largest number you can configure for this policy setting is 50. The lowest number you can configure for this policy setting is 0. If this policy is set to 0, then storage of previous PINs is not required. This node was added in Windows 10, version 1511. Default is 0.
    #[serde(rename = "numberOfPastPinsRemembered")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub number_of_past_pins_remembered: Option<f64>,
    ///The number of authentication failures allowed before the device will be wiped. A value of 0 disables device wipe functionality. Range is an integer X where 4 <= X <= 16 for desktop and 0 <= X <= 999 for mobile devices.
    #[serde(rename = "passwordMaximumAttemptCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub password_maximum_attempt_count: Option<f64>,
    ///Integer value specifies the period of time (in days) that a PIN can be used before the system requires the user to change it. The largest number you can configure for this policy setting is 730. The lowest number you can configure for this policy setting is 0. If this policy is set to 0, then the user's PIN will never expire. This node was added in Windows 10, version 1511. Default is 0.
    #[serde(rename = "pinExpirationDays")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pin_expiration_days: Option<f64>,
    ///Pin Character Requirements
    #[serde(rename = "pinLowercaseLetters")]
    pub pin_lowercase_letters: Option<
        MicrosoftGraphWindowsInformationProtectionPinCharacterRequirements,
    >,
    ///Integer value that sets the minimum number of characters required for the PIN. Default value is 4. The lowest number you can configure for this policy setting is 4. The largest number you can configure must be less than the number configured in the Maximum PIN length policy setting or the number 127, whichever is the lowest.
    #[serde(rename = "pinMinimumLength")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub pin_minimum_length: Option<f64>,
    ///Pin Character Requirements
    #[serde(rename = "pinSpecialCharacters")]
    pub pin_special_characters: Option<
        MicrosoftGraphWindowsInformationProtectionPinCharacterRequirements,
    >,
    ///Pin Character Requirements
    #[serde(rename = "pinUppercaseLetters")]
    pub pin_uppercase_letters: Option<
        MicrosoftGraphWindowsInformationProtectionPinCharacterRequirements,
    >,
    ///Another way to input protected apps through xml files
    #[serde(rename = "protectedAppLockerFiles")]
    pub protected_app_locker_files: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionAppLockerFile>,
    >,
    ///Protected applications can access enterprise data and the data handled by those applications are protected with encryption
    #[serde(rename = "protectedApps")]
    pub protected_apps: Option<Vec<MicrosoftGraphWindowsInformationProtectionApp>>,
    ///Specifies whether the protection under lock feature (also known as encrypt under pin) should be configured
    #[serde(rename = "protectionUnderLockConfigRequired")]
    pub protection_under_lock_config_required: Option<bool>,
    ///New property in RS2, pending documentation
    #[serde(rename = "revokeOnMdmHandoffDisabled")]
    pub revoke_on_mdm_handoff_disabled: Option<bool>,
    ///This policy controls whether to revoke the WIP keys when a device unenrolls from the management service. If set to 1 (Don't revoke keys), the keys will not be revoked and the user will continue to have access to protected files after unenrollment. If the keys are not revoked, there will be no revoked file cleanup subsequently.
    #[serde(rename = "revokeOnUnenrollDisabled")]
    pub revoke_on_unenroll_disabled: Option<bool>,
    ///TemplateID GUID to use for RMS encryption. The RMS template allows the IT admin to configure the details about who has access to RMS-protected file and how long they have access
    #[serde(rename = "rightsManagementServicesTemplateId")]
    pub rights_management_services_template_id: Option<uuid::Uuid>,
    ///Specifies a list of file extensions, so that files with these extensions are encrypted when copying from an SMB share within the corporate boundary
    #[serde(rename = "smbAutoEncryptedFileExtensions")]
    pub smb_auto_encrypted_file_extensions: Option<
        Vec<MicrosoftGraphWindowsInformationProtectionResourceCollection>,
    >,
    ///Version of the entity.
    pub version: Option<String>,
    ///Boolean value that sets Windows Hello for Business as a method for signing into Windows.
    #[serde(rename = "windowsHelloForBusinessBlocked")]
    pub windows_hello_for_business_blocked: Option<bool>,
}
///Windows Information Protection Proxied Domain Collection
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Display name
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Collection of proxied domains
    #[serde(rename = "proxiedDomains")]
    pub proxied_domains: Option<Vec<MicrosoftGraphProxiedDomain>>,
}
///Windows Information Protection Resource Collection
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtectionResourceCollection {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Display name
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Collection of resources
    pub resources: Option<Vec<Option<String>>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsInformationProtectionStoreApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsInformationProtectionStoreApp".to_string())]
    pub odata_type: String,
    ///If true, app is denied protection or exemption.
    pub denied: Option<bool>,
    ///The app's description.
    pub description: Option<String>,
    ///App display name.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The product name.
    #[serde(rename = "productName")]
    pub product_name: Option<String>,
    ///The publisher name
    #[serde(rename = "publisherName")]
    pub publisher_name: Option<String>,
}
///Malware category id
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsMalwareCategory {
    #[serde(rename = "invalid")]
    #[default]
    Invalid,
    #[serde(rename = "adware")]
    Adware,
    #[serde(rename = "spyware")]
    Spyware,
    #[serde(rename = "passwordStealer")]
    PasswordStealer,
    #[serde(rename = "trojanDownloader")]
    TrojanDownloader,
    #[serde(rename = "worm")]
    Worm,
    #[serde(rename = "backdoor")]
    Backdoor,
    #[serde(rename = "remoteAccessTrojan")]
    RemoteAccessTrojan,
    #[serde(rename = "trojan")]
    Trojan,
    #[serde(rename = "emailFlooder")]
    EmailFlooder,
    #[serde(rename = "keylogger")]
    Keylogger,
    #[serde(rename = "dialer")]
    Dialer,
    #[serde(rename = "monitoringSoftware")]
    MonitoringSoftware,
    #[serde(rename = "browserModifier")]
    BrowserModifier,
    #[serde(rename = "cookie")]
    Cookie,
    #[serde(rename = "browserPlugin")]
    BrowserPlugin,
    #[serde(rename = "aolExploit")]
    AolExploit,
    #[serde(rename = "nuker")]
    Nuker,
    #[serde(rename = "securityDisabler")]
    SecurityDisabler,
    #[serde(rename = "jokeProgram")]
    JokeProgram,
    #[serde(rename = "hostileActiveXControl")]
    HostileActiveXcontrol,
    #[serde(rename = "softwareBundler")]
    SoftwareBundler,
    #[serde(rename = "stealthNotifier")]
    StealthNotifier,
    #[serde(rename = "settingsModifier")]
    SettingsModifier,
    #[serde(rename = "toolBar")]
    ToolBar,
    #[serde(rename = "remoteControlSoftware")]
    RemoteControlSoftware,
    #[serde(rename = "trojanFtp")]
    TrojanFtp,
    #[serde(rename = "potentialUnwantedSoftware")]
    PotentialUnwantedSoftware,
    #[serde(rename = "icqExploit")]
    IcqExploit,
    #[serde(rename = "trojanTelnet")]
    TrojanTelnet,
    #[serde(rename = "exploit")]
    Exploit,
    #[serde(rename = "filesharingProgram")]
    FilesharingProgram,
    #[serde(rename = "malwareCreationTool")]
    MalwareCreationTool,
    #[serde(rename = "remote_Control_Software")]
    RemoteControlSoftware33,
    #[serde(rename = "tool")]
    Tool,
    #[serde(rename = "trojanDenialOfService")]
    TrojanDenialOfService,
    #[serde(rename = "trojanDropper")]
    TrojanDropper,
    #[serde(rename = "trojanMassMailer")]
    TrojanMassMailer,
    #[serde(rename = "trojanMonitoringSoftware")]
    TrojanMonitoringSoftware,
    #[serde(rename = "trojanProxyServer")]
    TrojanProxyServer,
    #[serde(rename = "virus")]
    Virus,
    #[serde(rename = "known")]
    Known,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "spp")]
    Spp,
    #[serde(rename = "behavior")]
    Behavior,
    #[serde(rename = "vulnerability")]
    Vulnerability,
    #[serde(rename = "policy")]
    Policy,
    #[serde(rename = "enterpriseUnwantedSoftware")]
    EnterpriseUnwantedSoftware,
    #[serde(rename = "ransom")]
    Ransom,
    #[serde(rename = "hipsRule")]
    HipsRule,
}
///Malware category device count
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsMalwareCategoryCount {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Count of active malware detections for this malware category. Valid values -2147483648 to 2147483647
    #[serde(rename = "activeMalwareDetectionCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub active_malware_detection_count: Option<f64>,
    ///Malware category id
    pub category: Option<MicrosoftGraphWindowsMalwareCategory>,
    ///Count of devices with malware detections for this malware category
    #[serde(rename = "deviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_count: Option<f64>,
    ///Count of distinct active malwares for this malware category. Valid values -2147483648 to 2147483647
    #[serde(rename = "distinctActiveMalwareCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub distinct_active_malware_count: Option<f64>,
    ///The Timestamp of the last update for the device count in UTC
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
///Malware execution status
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsMalwareExecutionState {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "allowed")]
    Allowed,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "notRunning")]
    NotRunning,
}
///Windows malware execution state summary.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsMalwareExecutionStateCount {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Count of devices with malware detections for this malware execution state
    #[serde(rename = "deviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_count: Option<f64>,
    ///Malware execution status
    #[serde(rename = "executionState")]
    pub execution_state: Option<MicrosoftGraphWindowsMalwareExecutionState>,
    ///The Timestamp of the last update for the device count in UTC
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsMalwareInformation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsMalwareInformation".to_string())]
    pub odata_type: String,
    ///Indicates an informational URL to learn more about the malware
    #[serde(rename = "additionalInformationUrl")]
    pub additional_information_url: Option<String>,
    ///Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule. default value is invalid. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
    pub category: Option<MicrosoftGraphWindowsMalwareCategory>,
    ///List of devices affected by current malware with the malware state on each device
    #[serde(rename = "deviceMalwareStates")]
    pub device_malware_states: Option<Vec<MicrosoftGraphMalwareStateForWindowsDevice>>,
    ///Indicates the name of the malware
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates the last time the malware was detected in UTC
    #[serde(rename = "lastDetectionDateTime")]
    pub last_detection_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Severity of the malware. Possible values are: unknown, low, moderate, high, severe. default is unknown. Possible values are: unknown, low, moderate, high, severe.
    pub severity: Option<MicrosoftGraphWindowsMalwareSeverity>,
}
///Malware name device count
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsMalwareNameCount {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Count of devices with malware dectected for this malware
    #[serde(rename = "deviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_count: Option<f64>,
    ///The Timestamp of the last update for the device count in UTC
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier. This is malware identifier
    #[serde(rename = "malwareIdentifier")]
    pub malware_identifier: Option<String>,
    ///Malware name
    pub name: Option<String>,
}
///Windows device malware overview.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsMalwareOverview {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///List of device counts per malware category
    #[serde(rename = "malwareCategorySummary")]
    pub malware_category_summary: Option<Vec<MicrosoftGraphWindowsMalwareCategoryCount>>,
    ///Count of devices with malware detected in the last 30 days
    #[serde(rename = "malwareDetectedDeviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub malware_detected_device_count: Option<f64>,
    ///List of device counts per malware execution state
    #[serde(rename = "malwareExecutionStateSummary")]
    pub malware_execution_state_summary: Option<
        Vec<MicrosoftGraphWindowsMalwareExecutionStateCount>,
    >,
    ///List of device counts per malware
    #[serde(rename = "malwareNameSummary")]
    pub malware_name_summary: Option<Vec<MicrosoftGraphWindowsMalwareNameCount>>,
    ///List of active malware counts per malware severity
    #[serde(rename = "malwareSeveritySummary")]
    pub malware_severity_summary: Option<Vec<MicrosoftGraphWindowsMalwareSeverityCount>>,
    ///List of device counts per malware state
    #[serde(rename = "malwareStateSummary")]
    pub malware_state_summary: Option<Vec<MicrosoftGraphWindowsMalwareStateCount>>,
    ///List of device counts with malware per windows OS version
    #[serde(rename = "osVersionsSummary")]
    pub os_versions_summary: Option<Vec<MicrosoftGraphOsVersionCount>>,
    ///Count of all distinct malwares detected across all devices. Valid values -2147483648 to 2147483647
    #[serde(rename = "totalDistinctMalwareCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_distinct_malware_count: Option<f64>,
    ///Count of all malware detections across all devices. Valid values -2147483648 to 2147483647
    #[serde(rename = "totalMalwareCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub total_malware_count: Option<f64>,
}
///Malware severity
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsMalwareSeverity {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "moderate")]
    Moderate,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "severe")]
    Severe,
}
///Windows Malware Severity Count Summary
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsMalwareSeverityCount {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Count of distinct malwares for this malware State. Valid values -2147483648 to 2147483647
    #[serde(rename = "distinctMalwareCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub distinct_malware_count: Option<f64>,
    ///The Timestamp of the last update for the WindowsMalwareSeverityCount in UTC
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Count of threats detections for this malware severity. Valid values -2147483648 to 2147483647
    #[serde(rename = "malwareDetectionCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub malware_detection_count: Option<f64>,
    ///Malware severity
    pub severity: Option<MicrosoftGraphWindowsMalwareSeverity>,
}
///Malware current status
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsMalwareState {
    #[serde(rename = "unknown")]
    #[default]
    Unknown,
    #[serde(rename = "detected")]
    Detected,
    #[serde(rename = "cleaned")]
    Cleaned,
    #[serde(rename = "quarantined")]
    Quarantined,
    #[serde(rename = "removed")]
    Removed,
    #[serde(rename = "allowed")]
    Allowed,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "cleanFailed")]
    CleanFailed,
    #[serde(rename = "quarantineFailed")]
    QuarantineFailed,
    #[serde(rename = "removeFailed")]
    RemoveFailed,
    #[serde(rename = "allowFailed")]
    AllowFailed,
    #[serde(rename = "abandoned")]
    Abandoned,
    #[serde(rename = "blockFailed")]
    BlockFailed,
}
///Windows Malware State Summary.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsMalwareStateCount {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Count of devices with malware detections for this malware State
    #[serde(rename = "deviceCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub device_count: Option<f64>,
    ///Count of distinct malwares for this malware State. Valid values -2147483648 to 2147483647
    #[serde(rename = "distinctMalwareCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub distinct_malware_count: Option<f64>,
    ///The Timestamp of the last update for the device count in UTC
    #[serde(rename = "lastUpdateDateTime")]
    pub last_update_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Count of total malware detections for this malware State. Valid values -2147483648 to 2147483647
    #[serde(rename = "malwareDetectionCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub malware_detection_count: Option<f64>,
    ///Malware threat status
    pub state: Option<MicrosoftGraphWindowsMalwareThreatState>,
}
///Malware threat status
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsMalwareThreatState {
    #[serde(rename = "active")]
    #[default]
    Active,
    #[serde(rename = "actionFailed")]
    ActionFailed,
    #[serde(rename = "manualStepsRequired")]
    ManualStepsRequired,
    #[serde(rename = "fullScanRequired")]
    FullScanRequired,
    #[serde(rename = "rebootRequired")]
    RebootRequired,
    #[serde(rename = "remediatedWithNonCriticalFailures")]
    RemediatedWithNonCriticalFailures,
    #[serde(rename = "quarantined")]
    Quarantined,
    #[serde(rename = "removed")]
    Removed,
    #[serde(rename = "cleaned")]
    Cleaned,
    #[serde(rename = "allowed")]
    Allowed,
    #[serde(rename = "noStatusCleared")]
    NoStatusCleared,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsMicrosoftEdgeApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsMicrosoftEdgeApp".to_string())]
    pub odata_type: String,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The enum to specify the channels for Microsoft Edge apps.
    pub channel: Option<MicrosoftGraphMicrosoftEdgeChannel>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The language locale to use when the Edge app displays text to the user.
    #[serde(rename = "displayLanguageLocale")]
    pub display_language_locale: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
}
///The minimum operating system required for a Windows mobile app.
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsMinimumOperatingSystem {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Windows version 10.0 or later.
    pub v10_0: Option<bool>,
    ///Windows version 8.0 or later.
    pub v8_0: Option<bool>,
    ///Windows version 8.1 or later.
    pub v8_1: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsMobileMsi {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsMobileMSI".to_string())]
    pub odata_type: String,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The command line.
    #[serde(rename = "commandLine")]
    pub command_line: Option<String>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A boolean to control whether the app's version will be used to detect the app after it is installed on a device. Set this to true for Windows Mobile MSI Line of Business (LoB) apps that use a self update feature.
    #[serde(rename = "ignoreVersionDetection")]
    pub ignore_version_detection: Option<bool>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The product code.
    #[serde(rename = "productCode")]
    pub product_code: Option<String>,
    ///The product version of Windows Mobile MSI Line of Business (LoB) app.
    #[serde(rename = "productVersion")]
    pub product_version: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsPhone81CompliancePolicy {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsPhone81CompliancePolicy".to_string())]
    pub odata_type: String,
    ///The collection of assignments for this compliance policy.
    pub assignments: Option<Vec<MicrosoftGraphDeviceCompliancePolicyAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Compliance Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device compliance devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceComplianceDeviceOverview>,
    ///List of DeviceComplianceDeviceStatus.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceComplianceDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Maximum Windows Phone version.
    #[serde(rename = "osMaximumVersion")]
    pub os_maximum_version: Option<String>,
    ///Minimum Windows Phone version.
    #[serde(rename = "osMinimumVersion")]
    pub os_minimum_version: Option<String>,
    ///Whether or not to block syncing the calendar.
    #[serde(rename = "passwordBlockSimple")]
    pub password_block_simple: Option<bool>,
    ///Number of days before the password expires.
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///The number of character sets required in the password.
    #[serde(rename = "passwordMinimumCharacterSetCount")]
    pub password_minimum_character_set_count: Option<f64>,
    ///Minimum length of passwords.
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///Minutes of inactivity before a password is required.
    #[serde(rename = "passwordMinutesOfInactivityBeforeLock")]
    pub password_minutes_of_inactivity_before_lock: Option<f64>,
    ///Number of previous passwords to block. Valid values 0 to 24
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Whether or not to require a password.
    #[serde(rename = "passwordRequired")]
    pub password_required: Option<bool>,
    ///Possible values of required passwords.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphRequiredPasswordType>,
    ///The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.
    #[serde(rename = "scheduledActionsForRule")]
    pub scheduled_actions_for_rule: Option<
        Vec<MicrosoftGraphDeviceComplianceScheduledActionForRule>,
    >,
    ///Require encryption on windows phone devices.
    #[serde(rename = "storageRequireEncryption")]
    pub storage_require_encryption: Option<bool>,
    ///Device compliance users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceComplianceUserOverview>,
    ///List of DeviceComplianceUserStatus.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceComplianceUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsPhone81CustomConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsPhone81CustomConfiguration".to_string())]
    pub odata_type: String,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///OMA settings. This collection can contain a maximum of 1000 elements.
    #[serde(rename = "omaSettings")]
    pub oma_settings: Option<Vec<MicrosoftGraphOmaSetting>>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsPhone81GeneralConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsPhone81GeneralConfiguration".to_string())]
    pub odata_type: String,
    ///Value indicating whether this policy only applies to Windows Phone 8.1. This property is read-only.
    #[serde(rename = "applyOnlyToWindowsPhone81")]
    pub apply_only_to_windows_phone81: Option<bool>,
    ///Indicates whether or not to block copy paste.
    #[serde(rename = "appsBlockCopyPaste")]
    pub apps_block_copy_paste: Option<bool>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///Indicates whether or not to block bluetooth.
    #[serde(rename = "bluetoothBlocked")]
    pub bluetooth_blocked: Option<bool>,
    ///Indicates whether or not to block camera.
    #[serde(rename = "cameraBlocked")]
    pub camera_blocked: Option<bool>,
    ///Indicates whether or not to block Wi-Fi tethering. Has no impact if Wi-Fi is blocked.
    #[serde(rename = "cellularBlockWifiTethering")]
    pub cellular_block_wifi_tethering: Option<bool>,
    ///Possible values of the compliance app list.
    #[serde(rename = "compliantAppListType")]
    pub compliant_app_list_type: Option<MicrosoftGraphAppListType>,
    ///List of apps in the compliance (either allow list or block list, controlled by CompliantAppListType). This collection can contain a maximum of 10000 elements.
    #[serde(rename = "compliantAppsList")]
    pub compliant_apps_list: Option<Vec<MicrosoftGraphAppListItem>>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Indicates whether or not to block diagnostic data submission.
    #[serde(rename = "diagnosticDataBlockSubmission")]
    pub diagnostic_data_block_submission: Option<bool>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Indicates whether or not to block custom email accounts.
    #[serde(rename = "emailBlockAddingAccounts")]
    pub email_block_adding_accounts: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Indicates whether or not to block location services.
    #[serde(rename = "locationServicesBlocked")]
    pub location_services_blocked: Option<bool>,
    ///Indicates whether or not to block using a Microsoft Account.
    #[serde(rename = "microsoftAccountBlocked")]
    pub microsoft_account_blocked: Option<bool>,
    ///Indicates whether or not to block Near-Field Communication.
    #[serde(rename = "nfcBlocked")]
    pub nfc_blocked: Option<bool>,
    ///Indicates whether or not to block syncing the calendar.
    #[serde(rename = "passwordBlockSimple")]
    pub password_block_simple: Option<bool>,
    ///Number of days before the password expires.
    #[serde(rename = "passwordExpirationDays")]
    pub password_expiration_days: Option<f64>,
    ///Number of character sets a password must contain.
    #[serde(rename = "passwordMinimumCharacterSetCount")]
    pub password_minimum_character_set_count: Option<f64>,
    ///Minimum length of passwords.
    #[serde(rename = "passwordMinimumLength")]
    pub password_minimum_length: Option<f64>,
    ///Minutes of inactivity before screen timeout.
    #[serde(rename = "passwordMinutesOfInactivityBeforeScreenTimeout")]
    pub password_minutes_of_inactivity_before_screen_timeout: Option<f64>,
    ///Number of previous passwords to block. Valid values 0 to 24
    #[serde(rename = "passwordPreviousPasswordBlockCount")]
    pub password_previous_password_block_count: Option<f64>,
    ///Indicates whether or not to require a password.
    #[serde(rename = "passwordRequired")]
    pub password_required: Option<bool>,
    ///Possible values of required passwords.
    #[serde(rename = "passwordRequiredType")]
    pub password_required_type: Option<MicrosoftGraphRequiredPasswordType>,
    ///Number of sign in failures allowed before factory reset.
    #[serde(rename = "passwordSignInFailureCountBeforeFactoryReset")]
    pub password_sign_in_failure_count_before_factory_reset: Option<f64>,
    ///Indicates whether or not to block screenshots.
    #[serde(rename = "screenCaptureBlocked")]
    pub screen_capture_blocked: Option<bool>,
    ///Indicates whether or not to block removable storage.
    #[serde(rename = "storageBlockRemovableStorage")]
    pub storage_block_removable_storage: Option<bool>,
    ///Indicates whether or not to require encryption.
    #[serde(rename = "storageRequireEncryption")]
    pub storage_require_encryption: Option<bool>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
    ///Indicates whether or not to block the web browser.
    #[serde(rename = "webBrowserBlocked")]
    pub web_browser_blocked: Option<bool>,
    ///Indicates whether or not to block automatically connecting to Wi-Fi hotspots. Has no impact if Wi-Fi is blocked.
    #[serde(rename = "wifiBlockAutomaticConnectHotspots")]
    pub wifi_block_automatic_connect_hotspots: Option<bool>,
    ///Indicates whether or not to block Wi-Fi hotspot reporting. Has no impact if Wi-Fi is blocked.
    #[serde(rename = "wifiBlockHotspotReporting")]
    pub wifi_block_hotspot_reporting: Option<bool>,
    ///Indicates whether or not to block Wi-Fi.
    #[serde(rename = "wifiBlocked")]
    pub wifi_blocked: Option<bool>,
    ///Indicates whether or not to block the Windows Store.
    #[serde(rename = "windowsStoreBlocked")]
    pub windows_store_blocked: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsProtectionState {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsProtectionState".to_string())]
    pub odata_type: String,
    ///Current anti malware version
    #[serde(rename = "antiMalwareVersion")]
    pub anti_malware_version: Option<String>,
    ///Device malware list
    #[serde(rename = "detectedMalwareState")]
    pub detected_malware_state: Option<Vec<MicrosoftGraphWindowsDeviceMalwareState>>,
    ///Indicates device's health state. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical.
    #[serde(rename = "deviceState")]
    pub device_state: Option<MicrosoftGraphWindowsDeviceHealthState>,
    ///Current endpoint protection engine's version
    #[serde(rename = "engineVersion")]
    pub engine_version: Option<String>,
    ///When TRUE indicates full scan is overdue, when FALSE indicates full scan is not overdue. Defaults to setting on client device.
    #[serde(rename = "fullScanOverdue")]
    pub full_scan_overdue: Option<bool>,
    ///When TRUE indicates full scan is required, when FALSE indicates full scan is not required. Defaults to setting on client device.
    #[serde(rename = "fullScanRequired")]
    pub full_scan_required: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///When TRUE indicates the device is a virtual machine, when FALSE indicates the device is not a virtual machine. Defaults to setting on client device.
    #[serde(rename = "isVirtualMachine")]
    pub is_virtual_machine: Option<bool>,
    ///Last quick scan datetime
    #[serde(rename = "lastFullScanDateTime")]
    pub last_full_scan_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Last full scan signature version
    #[serde(rename = "lastFullScanSignatureVersion")]
    pub last_full_scan_signature_version: Option<String>,
    ///Last quick scan datetime
    #[serde(rename = "lastQuickScanDateTime")]
    pub last_quick_scan_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Last quick scan signature version
    #[serde(rename = "lastQuickScanSignatureVersion")]
    pub last_quick_scan_signature_version: Option<String>,
    ///Last device health status reported time
    #[serde(rename = "lastReportedDateTime")]
    pub last_reported_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///When TRUE indicates anti malware is enabled when FALSE indicates anti malware is not enabled.
    #[serde(rename = "malwareProtectionEnabled")]
    pub malware_protection_enabled: Option<bool>,
    ///When TRUE indicates network inspection system enabled, when FALSE indicates network inspection system is not enabled. Defaults to setting on client device.
    #[serde(rename = "networkInspectionSystemEnabled")]
    pub network_inspection_system_enabled: Option<bool>,
    ///Product Status of Windows Defender Antivirus. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall.
    #[serde(rename = "productStatus")]
    pub product_status: Option<MicrosoftGraphWindowsDefenderProductStatus>,
    ///When TRUE indicates quick scan is overdue, when FALSE indicates quick scan is not overdue. Defaults to setting on client device.
    #[serde(rename = "quickScanOverdue")]
    pub quick_scan_overdue: Option<bool>,
    ///When TRUE indicates real time protection is enabled, when FALSE indicates real time protection is not enabled. Defaults to setting on client device.
    #[serde(rename = "realTimeProtectionEnabled")]
    pub real_time_protection_enabled: Option<bool>,
    ///When TRUE indicates reboot is required, when FALSE indicates when TRUE indicates reboot is not required. Defaults to setting on client device.
    #[serde(rename = "rebootRequired")]
    pub reboot_required: Option<bool>,
    ///When TRUE indicates signature is out of date, when FALSE indicates signature is not out of date. Defaults to setting on client device.
    #[serde(rename = "signatureUpdateOverdue")]
    pub signature_update_overdue: Option<bool>,
    ///Current malware definitions version
    #[serde(rename = "signatureVersion")]
    pub signature_version: Option<String>,
    ///When TRUE indicates the Windows Defender tamper protection feature is enabled, when FALSE indicates the Windows Defender tamper protection feature is not enabled. Defaults to setting on client device.
    #[serde(rename = "tamperProtectionEnabled")]
    pub tamper_protection_enabled: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsSetting {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsSetting".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of setting values for a given windowsSetting.
    pub instances: Option<Vec<MicrosoftGraphWindowsSettingInstance>>,
    ///The type of setting payloads contained in the instances navigation property.
    #[serde(rename = "payloadType")]
    pub payload_type: Option<String>,
    #[serde(rename = "settingType")]
    pub setting_type: Option<MicrosoftGraphWindowsSettingType>,
    ///A unique identifier for the device the setting might belong to if it is of the settingType backup.
    #[serde(rename = "windowsDeviceId")]
    pub windows_device_id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsSettingInstance {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsSettingInstance".to_string())]
    pub odata_type: String,
    ///Set by the server. Represents the dateTime in UTC when the object was created on the server.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Set by the server. The object expires at the specified dateTime in UTC, making it unavailable after that time.
    #[serde(rename = "expirationDateTime")]
    pub expiration_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Set by the server if not provided in the request from the Windows client device. Refers to the user's Windows device that modified the object at the specified dateTime in UTC.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Base64-encoded JSON setting value.
    pub payload: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsSettingType {
    #[serde(rename = "roaming")]
    #[default]
    Roaming,
    #[serde(rename = "backup")]
    Backup,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
///Allows IT admind to set a predefined default search engine for MDM-Controlled devices
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsSpotlightEnablementSettings {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "enabled")]
    Enabled,
}
///Type of start menu app list visibility.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsStartMenuAppListVisibilityType {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "collapse")]
    Collapse,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "disableSettingsApp")]
    DisableSettingsApp,
}
///Type of display modes for the start menu.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsStartMenuModeType {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "fullScreen")]
    FullScreen,
    #[serde(rename = "nonFullScreen")]
    NonFullScreen,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsUniversalAppX {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsUniversalAppX".to_string())]
    pub odata_type: String,
    ///Contains properties for Windows architecture.
    #[serde(rename = "applicableArchitectures")]
    pub applicable_architectures: Option<MicrosoftGraphWindowsArchitecture>,
    ///Contains properties for Windows device type. Multiple values can be selected. Default value is `none`.
    #[serde(rename = "applicableDeviceTypes")]
    pub applicable_device_types: Option<MicrosoftGraphWindowsDeviceType>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The collection of contained apps in the committed mobileAppContent of a windowsUniversalAppX app.
    #[serde(rename = "committedContainedApps")]
    pub committed_contained_apps: Option<Vec<MicrosoftGraphMobileContainedApp>>,
    ///The internal committed content version.
    #[serde(rename = "committedContentVersion")]
    pub committed_content_version: Option<String>,
    ///The list of content versions for this app.
    #[serde(rename = "contentVersions")]
    pub content_versions: Option<Vec<MicrosoftGraphMobileAppContent>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The name of the main Lob application file.
    #[serde(rename = "fileName")]
    pub file_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Identity Name.
    #[serde(rename = "identityName")]
    pub identity_name: Option<String>,
    ///The Identity Publisher Hash.
    #[serde(rename = "identityPublisherHash")]
    pub identity_publisher_hash: Option<String>,
    ///The Identity Resource Identifier.
    #[serde(rename = "identityResourceIdentifier")]
    pub identity_resource_identifier: Option<String>,
    ///The identity version.
    #[serde(rename = "identityVersion")]
    pub identity_version: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///Whether or not the app is a bundle.
    #[serde(rename = "isBundle")]
    pub is_bundle: Option<bool>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The minimum operating system required for a Windows mobile app.
    #[serde(rename = "minimumSupportedOperatingSystem")]
    pub minimum_supported_operating_system: Option<
        MicrosoftGraphWindowsMinimumOperatingSystem,
    >,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
    ///The total size, including all uploaded files.
    pub size: Option<f64>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsUniversalAppXappAssignmentSettings {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsUniversalAppXAppAssignmentSettings".to_string())]
    pub odata_type: String,
    ///If true, uses device execution context for Windows Universal AppX mobile app. Device-context install is not allowed when this type of app is targeted with Available intent. Defaults to false.
    #[serde(rename = "useDeviceContext")]
    pub use_device_context: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsUniversalAppXcontainedApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsUniversalAppXContainedApp".to_string())]
    pub odata_type: String,
    ///The app user model ID of the contained app of a WindowsUniversalAppX app.
    #[serde(rename = "appUserModelId")]
    pub app_user_model_id: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsUpdateActiveHoursInstall {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsUpdateActiveHoursInstall".to_string())]
    pub odata_type: String,
    ///Active Hours End
    #[serde(rename = "activeHoursEnd")]
    pub active_hours_end: Option<chrono::NaiveTime>,
    ///Active Hours Start
    #[serde(rename = "activeHoursStart")]
    pub active_hours_start: Option<chrono::NaiveTime>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsUpdateForBusinessConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsUpdateForBusinessConfiguration".to_string())]
    pub odata_type: String,
    ///When TRUE, allows eligible Windows 10 devices to upgrade to Windows 11. When FALSE, implies the device stays on the existing operating system. Returned by default. Query parameters are not supported.
    #[serde(rename = "allowWindows11Upgrade")]
    pub allow_windows11upgrade: Option<bool>,
    ///The list of assignments for the device configuration profile.
    pub assignments: Option<Vec<MicrosoftGraphDeviceConfigurationAssignment>>,
    ///Auto restart required notification dismissal method
    #[serde(rename = "autoRestartNotificationDismissal")]
    pub auto_restart_notification_dismissal: Option<
        MicrosoftGraphAutoRestartNotificationDismissalMethod,
    >,
    ///Possible values for automatic update mode.
    #[serde(rename = "automaticUpdateMode")]
    pub automatic_update_mode: Option<MicrosoftGraphAutomaticUpdateMode>,
    ///Which branch devices will receive their updates from
    #[serde(rename = "businessReadyUpdatesOnly")]
    pub business_ready_updates_only: Option<MicrosoftGraphWindowsUpdateType>,
    ///DateTime the object was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Number of days before feature updates are installed automatically with valid range from 0 to 30 days. Returned by default. Query parameters are not supported.
    #[serde(rename = "deadlineForFeatureUpdatesInDays")]
    pub deadline_for_feature_updates_in_days: Option<f64>,
    ///Number of days before quality updates are installed automatically with valid range from 0 to 30 days. Returned by default. Query parameters are not supported.
    #[serde(rename = "deadlineForQualityUpdatesInDays")]
    pub deadline_for_quality_updates_in_days: Option<f64>,
    ///Number of days after deadline until restarts occur automatically with valid range from 0 to 7 days. Returned by default. Query parameters are not supported.
    #[serde(rename = "deadlineGracePeriodInDays")]
    pub deadline_grace_period_in_days: Option<f64>,
    ///Delivery optimization mode for peer distribution
    #[serde(rename = "deliveryOptimizationMode")]
    pub delivery_optimization_mode: Option<
        MicrosoftGraphWindowsDeliveryOptimizationMode,
    >,
    ///Admin provided description of the Device Configuration.
    pub description: Option<String>,
    ///Device Configuration Setting State Device Summary
    #[serde(rename = "deviceSettingStateSummaries")]
    pub device_setting_state_summaries: Option<
        Vec<MicrosoftGraphSettingStateDeviceSummary>,
    >,
    ///Device Configuration devices status overview
    #[serde(rename = "deviceStatusOverview")]
    pub device_status_overview: Option<MicrosoftGraphDeviceConfigurationDeviceOverview>,
    ///Device configuration installation status by device.
    #[serde(rename = "deviceStatuses")]
    pub device_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationDeviceStatus>>,
    ///Admin provided name of the device configuration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///When TRUE, excludes Windows update Drivers. When FALSE, does not exclude Windows update Drivers. Returned by default. Query parameters are not supported.
    #[serde(rename = "driversExcluded")]
    pub drivers_excluded: Option<bool>,
    ///Deadline in days before automatically scheduling and executing a pending restart outside of active hours, with valid range from 2 to 30 days. Returned by default. Query parameters are not supported.
    #[serde(rename = "engagedRestartDeadlineInDays")]
    pub engaged_restart_deadline_in_days: Option<f64>,
    ///Number of days a user can snooze Engaged Restart reminder notifications with valid range from 1 to 3 days. Returned by default. Query parameters are not supported.
    #[serde(rename = "engagedRestartSnoozeScheduleInDays")]
    pub engaged_restart_snooze_schedule_in_days: Option<f64>,
    ///Number of days before transitioning from Auto Restarts scheduled outside of active hours to Engaged Restart, which requires the user to schedule, with valid range from 0 to 30 days. Returned by default. Query parameters are not supported.
    #[serde(rename = "engagedRestartTransitionScheduleInDays")]
    pub engaged_restart_transition_schedule_in_days: Option<f64>,
    ///Defer Feature Updates by these many days with valid range from 0 to 30 days. Returned by default. Query parameters are not supported.
    #[serde(rename = "featureUpdatesDeferralPeriodInDays")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub feature_updates_deferral_period_in_days: Option<f64>,
    ///The Feature Updates Pause Expiry datetime. This value is 35 days from the time admin paused or extended the pause for the ring. Returned by default. Query parameters are not supported.
    #[serde(rename = "featureUpdatesPauseExpiryDateTime")]
    pub feature_updates_pause_expiry_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The Feature Updates Pause start date. This value is the time when the admin paused or extended the pause for the ring. Returned by default. Query parameters are not supported. This property is read-only.
    #[serde(rename = "featureUpdatesPauseStartDate")]
    pub feature_updates_pause_start_date: Option<chrono::NaiveDate>,
    ///When TRUE, assigned devices are paused from receiving feature updates for up to 35 days from the time you pause the ring. When FALSE, does not pause Feature Updates. Returned by default. Query parameters are not supported.s
    #[serde(rename = "featureUpdatesPaused")]
    pub feature_updates_paused: Option<bool>,
    ///The Feature Updates Rollback Start datetime.This value is the time when the admin rolled back the Feature update for the ring.Returned by default.Query parameters are not supported.
    #[serde(rename = "featureUpdatesRollbackStartDateTime")]
    pub feature_updates_rollback_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The number of days after a Feature Update for which a rollback is valid with valid range from 2 to 60 days. Returned by default. Query parameters are not supported.
    #[serde(rename = "featureUpdatesRollbackWindowInDays")]
    pub feature_updates_rollback_window_in_days: Option<f64>,
    ///When TRUE, rollback Feature Updates on the next device check in. When FALSE, do not rollback Feature Updates on the next device check in. Returned by default.Query parameters are not supported.
    #[serde(rename = "featureUpdatesWillBeRolledBack")]
    pub feature_updates_will_be_rolled_back: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The Installation Schedule. Possible values are: ActiveHoursStart, ActiveHoursEnd, ScheduledInstallDay, ScheduledInstallTime. Returned by default. Query parameters are not supported.
    #[serde(rename = "installationSchedule")]
    pub installation_schedule: Option<MicrosoftGraphWindowsUpdateInstallScheduleType>,
    ///DateTime the object was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///When TRUE, allows Microsoft Update Service. When FALSE, does not allow Microsoft Update Service. Returned by default. Query parameters are not supported.
    #[serde(rename = "microsoftUpdateServiceAllowed")]
    pub microsoft_update_service_allowed: Option<bool>,
    ///When TRUE the device should wait until deadline for rebooting outside of active hours. When FALSE the device should not wait until deadline for rebooting outside of active hours. Returned by default. Query parameters are not supported.
    #[serde(rename = "postponeRebootUntilAfterDeadline")]
    pub postpone_reboot_until_after_deadline: Option<bool>,
    ///Possible values for pre-release features.
    #[serde(rename = "prereleaseFeatures")]
    pub prerelease_features: Option<MicrosoftGraphPrereleaseFeatures>,
    ///Defer Quality Updates by these many days with valid range from 0 to 30 days. Returned by default. Query parameters are not supported.
    #[serde(rename = "qualityUpdatesDeferralPeriodInDays")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub quality_updates_deferral_period_in_days: Option<f64>,
    ///The Quality Updates Pause Expiry datetime. This value is 35 days from the time admin paused or extended the pause for the ring. Returned by default. Query parameters are not supported.
    #[serde(rename = "qualityUpdatesPauseExpiryDateTime")]
    pub quality_updates_pause_expiry_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The Quality Updates Pause start date. This value is the time when the admin paused or extended the pause for the ring. Returned by default. Query parameters are not supported. This property is read-only.
    #[serde(rename = "qualityUpdatesPauseStartDate")]
    pub quality_updates_pause_start_date: Option<chrono::NaiveDate>,
    ///When TRUE, assigned devices are paused from receiving quality updates for up to 35 days from the time you pause the ring. When FALSE, does not pause Quality Updates. Returned by default. Query parameters are not supported.
    #[serde(rename = "qualityUpdatesPaused")]
    pub quality_updates_paused: Option<bool>,
    ///The Quality Updates Rollback Start datetime. This value is the time when the admin rolled back the Quality update for the ring. Returned by default. Query parameters are not supported.
    #[serde(rename = "qualityUpdatesRollbackStartDateTime")]
    pub quality_updates_rollback_start_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///When TRUE, rollback Quality Updates on the next device check in. When FALSE, do not rollback Quality Updates on the next device check in. Returned by default. Query parameters are not supported.
    #[serde(rename = "qualityUpdatesWillBeRolledBack")]
    pub quality_updates_will_be_rolled_back: Option<bool>,
    ///Specify the period for auto-restart imminent warning notifications. Supported values: 15, 30 or 60 (minutes). Returned by default. Query parameters are not supported.
    #[serde(rename = "scheduleImminentRestartWarningInMinutes")]
    pub schedule_imminent_restart_warning_in_minutes: Option<f64>,
    ///Specify the period for auto-restart warning reminder notifications. Supported values: 2, 4, 8, 12 or 24 (hours). Returned by default. Query parameters are not supported.
    #[serde(rename = "scheduleRestartWarningInHours")]
    pub schedule_restart_warning_in_hours: Option<f64>,
    ///When TRUE, skips all checks before restart: Battery level = 40%, User presence, Display Needed, Presentation mode, Full screen mode, phone call state, game mode etc. When FALSE, does not skip all checks before restart. Returned by default. Query parameters are not supported.
    #[serde(rename = "skipChecksBeforeRestart")]
    pub skip_checks_before_restart: Option<bool>,
    ///Windows Update Notification Display Options
    #[serde(rename = "updateNotificationLevel")]
    pub update_notification_level: Option<
        MicrosoftGraphWindowsUpdateNotificationDisplayOption,
    >,
    ///Schedule the update installation on the weeks of the month. Possible values are: UserDefined, FirstWeek, SecondWeek, ThirdWeek, FourthWeek, EveryWeek. Returned by default. Query parameters are not supported. Possible values are: userDefined, firstWeek, secondWeek, thirdWeek, fourthWeek, everyWeek, unknownFutureValue.
    #[serde(rename = "updateWeeks")]
    pub update_weeks: Option<MicrosoftGraphWindowsUpdateForBusinessUpdateWeeks>,
    ///Possible values of a property
    #[serde(rename = "userPauseAccess")]
    pub user_pause_access: Option<MicrosoftGraphEnablement>,
    ///Device Configuration users status overview
    #[serde(rename = "userStatusOverview")]
    pub user_status_overview: Option<MicrosoftGraphDeviceConfigurationUserOverview>,
    ///Device configuration installation status by user.
    #[serde(rename = "userStatuses")]
    pub user_statuses: Option<Vec<MicrosoftGraphDeviceConfigurationUserStatus>>,
    ///Possible values of a property
    #[serde(rename = "userWindowsUpdateScanAccess")]
    pub user_windows_update_scan_access: Option<MicrosoftGraphEnablement>,
    ///Version of the device configuration.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub version: Option<f64>,
}
///Scheduled the update installation on the weeks of the month
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsUpdateForBusinessUpdateWeeks {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "firstWeek")]
    FirstWeek,
    #[serde(rename = "secondWeek")]
    SecondWeek,
    #[serde(rename = "thirdWeek")]
    ThirdWeek,
    #[serde(rename = "fourthWeek")]
    FourthWeek,
    #[serde(rename = "everyWeek")]
    EveryWeek,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
discriminated_enum! {
    pub enum MicrosoftGraphWindowsUpdateInstallScheduleType { discriminator :
    "@odata.type", variants : [("#microsoft.graph.windowsUpdateActiveHoursInstall",
    MicrosoftGraphWindowsUpdateActiveHoursInstall(Box <
    MicrosoftGraphWindowsUpdateActiveHoursInstall >)),
    ("#microsoft.graph.windowsUpdateScheduledInstall",
    MicrosoftGraphWindowsUpdateScheduledInstall(Box <
    MicrosoftGraphWindowsUpdateScheduledInstall >))], fallback :
    WindowsUpdateInstallScheduleType(Box <
    MicrosoftGraphWindowsUpdateInstallScheduleTypeBase >), }
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsUpdateInstallScheduleTypeBase {}
///Windows Update Notification Display Options
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsUpdateNotificationDisplayOption {
    #[serde(rename = "notConfigured")]
    #[default]
    NotConfigured,
    #[serde(rename = "defaultNotifications")]
    DefaultNotifications,
    #[serde(rename = "restartWarningsOnly")]
    RestartWarningsOnly,
    #[serde(rename = "disableAllNotifications")]
    DisableAllNotifications,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsUpdateScheduledInstall {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsUpdateScheduledInstall".to_string())]
    pub odata_type: String,
    ///Possible values for a weekly schedule.
    #[serde(rename = "scheduledInstallDay")]
    pub scheduled_install_day: Option<MicrosoftGraphWeeklySchedule>,
    ///Scheduled Install Time during day
    #[serde(rename = "scheduledInstallTime")]
    pub scheduled_install_time: Option<chrono::NaiveTime>,
}
///Which branch devices will receive their updates from
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsUpdateType {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "businessReadyOnly")]
    BusinessReadyOnly,
    #[serde(rename = "windowsInsiderBuildFast")]
    WindowsInsiderBuildFast,
    #[serde(rename = "windowsInsiderBuildSlow")]
    WindowsInsiderBuildSlow,
    #[serde(rename = "windowsInsiderBuildRelease")]
    WindowsInsiderBuildRelease,
}
///Possible values for Windows user account control settings.
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsUserAccountControlSettings {
    #[serde(rename = "userDefined")]
    #[default]
    UserDefined,
    #[serde(rename = "alwaysNotify")]
    AlwaysNotify,
    #[serde(rename = "notifyOnAppChanges")]
    NotifyOnAppChanges,
    #[serde(rename = "notifyOnAppChangesWithoutDimming")]
    NotifyOnAppChangesWithoutDimming,
    #[serde(rename = "neverNotify")]
    NeverNotify,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWindowsUserType {
    #[serde(rename = "administrator")]
    #[default]
    Administrator,
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWindowsWebApp {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.windowsWebApp".to_string())]
    pub odata_type: String,
    ///Indicates the Windows web app URL. Example: 'https://www.contoso.com'
    #[serde(rename = "appUrl")]
    pub app_url: Option<String>,
    ///The list of group assignments for this mobile app.
    pub assignments: Option<Vec<MicrosoftGraphMobileAppAssignment>>,
    ///The list of categories for this app.
    pub categories: Option<Vec<MicrosoftGraphMobileAppCategory>>,
    ///The date and time the app was created.
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The description of the app.
    pub description: Option<String>,
    ///The developer of the app.
    pub developer: Option<String>,
    ///The admin provided or imported title of the app.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The more information Url.
    #[serde(rename = "informationUrl")]
    pub information_url: Option<String>,
    ///The value indicating whether the app is marked as featured by the admin.
    #[serde(rename = "isFeatured")]
    pub is_featured: Option<bool>,
    ///The large icon, to be displayed in the app details and used for upload of the icon.
    #[serde(rename = "largeIcon")]
    pub large_icon: Option<MicrosoftGraphMimeContent>,
    ///The date and time the app was last modified.
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Notes for the app.
    pub notes: Option<String>,
    ///The owner of the app.
    pub owner: Option<String>,
    ///The privacy statement Url.
    #[serde(rename = "privacyInformationUrl")]
    pub privacy_information_url: Option<String>,
    ///The publisher of the app.
    pub publisher: Option<String>,
    ///Indicates the publishing state of an app.
    #[serde(rename = "publishingState")]
    pub publishing_state: Option<MicrosoftGraphMobileAppPublishingState>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbook {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbook".to_string())]
    pub odata_type: String,
    pub application: Option<MicrosoftGraphWorkbookApplication>,
    ///Represents a collection of comments in a workbook.
    pub comments: Option<Vec<MicrosoftGraphWorkbookComment>>,
    pub functions: Option<MicrosoftGraphWorkbookFunctions>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents a collection of workbooks scoped named items (named ranges and constants). Read-only.
    pub names: Option<Vec<MicrosoftGraphWorkbookNamedItem>>,
    ///The status of workbook operations. Getting an operation collection is not supported, but you can get the status of a long-running operation if the Location header is returned in the response. Read-only.
    pub operations: Option<Vec<MicrosoftGraphWorkbookOperation>>,
    ///Represents a collection of tables associated with the workbook. Read-only.
    pub tables: Option<Vec<MicrosoftGraphWorkbookTable>>,
    ///Represents a collection of worksheets associated with the workbook. Read-only.
    pub worksheets: Option<Vec<MicrosoftGraphWorkbookWorksheet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookApplication {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookApplication".to_string())]
    pub odata_type: String,
    ///Returns the calculation mode used in the workbook. Possible values are: Automatic, AutomaticExceptTables, Manual.
    #[serde(rename = "calculationMode")]
    pub calculation_mode: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChart {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChart".to_string())]
    pub odata_type: String,
    ///Represents chart axes. Read-only.
    pub axes: Option<MicrosoftGraphWorkbookChartAxes>,
    ///Represents the data labels on the chart. Read-only.
    #[serde(rename = "dataLabels")]
    pub data_labels: Option<MicrosoftGraphWorkbookChartDataLabels>,
    ///Encapsulates the format properties for the chart area. Read-only.
    pub format: Option<MicrosoftGraphWorkbookChartAreaFormat>,
    ///Represents the height, in points, of the chart object.
    pub height: Option<MicrosoftGraphWorkbookChartHeight>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The distance, in points, from the left side of the chart to the worksheet origin.
    pub left: Option<MicrosoftGraphWorkbookChartLeft>,
    ///Represents the legend for the chart. Read-only.
    pub legend: Option<MicrosoftGraphWorkbookChartLegend>,
    ///Represents the name of a chart object.
    pub name: Option<String>,
    ///Represents either a single series or collection of series in the chart. Read-only.
    pub series: Option<Vec<MicrosoftGraphWorkbookChartSeries>>,
    ///Represents the title of the specified chart, including the text, visibility, position and formatting of the title. Read-only.
    pub title: Option<MicrosoftGraphWorkbookChartTitle>,
    ///Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).
    pub top: Option<MicrosoftGraphWorkbookChartTop>,
    ///Represents the width, in points, of the chart object.
    pub width: Option<MicrosoftGraphWorkbookChartWidth>,
    ///The worksheet containing the current chart. Read-only.
    pub worksheet: Option<Box<MicrosoftGraphWorkbookWorksheet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartAreaFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartAreaFormat".to_string())]
    pub odata_type: String,
    ///Represents the fill format of an object, which includes background formatting information. Read-only.
    pub fill: Option<MicrosoftGraphWorkbookChartFill>,
    ///Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.
    pub font: Option<MicrosoftGraphWorkbookChartFont>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartAxes {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartAxes".to_string())]
    pub odata_type: String,
    ///Represents the category axis in a chart. Read-only.
    #[serde(rename = "categoryAxis")]
    pub category_axis: Option<MicrosoftGraphWorkbookChartAxis>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the series axis of a 3-dimensional chart. Read-only.
    #[serde(rename = "seriesAxis")]
    pub series_axis: Option<MicrosoftGraphWorkbookChartAxis>,
    ///Represents the value axis in an axis. Read-only.
    #[serde(rename = "valueAxis")]
    pub value_axis: Option<MicrosoftGraphWorkbookChartAxis>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartAxis {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartAxis".to_string())]
    pub odata_type: String,
    ///Represents the formatting of a chart object, which includes line and font formatting. Read-only.
    pub format: Option<MicrosoftGraphWorkbookChartAxisFormat>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.
    #[serde(rename = "majorGridlines")]
    pub major_gridlines: Option<MicrosoftGraphWorkbookChartGridlines>,
    ///Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.
    #[serde(rename = "majorUnit")]
    pub major_unit: Option<serde_json::Value>,
    ///Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
    pub maximum: Option<serde_json::Value>,
    ///Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
    pub minimum: Option<serde_json::Value>,
    ///Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.
    #[serde(rename = "minorGridlines")]
    pub minor_gridlines: Option<MicrosoftGraphWorkbookChartGridlines>,
    ///Represents the interval between two minor tick marks. 'Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number.
    #[serde(rename = "minorUnit")]
    pub minor_unit: Option<serde_json::Value>,
    ///Represents the axis title. Read-only.
    pub title: Option<MicrosoftGraphWorkbookChartAxisTitle>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartAxisFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartAxisFormat".to_string())]
    pub odata_type: String,
    ///Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.
    pub font: Option<MicrosoftGraphWorkbookChartFont>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents chart line formatting. Read-only.
    pub line: Option<MicrosoftGraphWorkbookChartLineFormat>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartAxisTitle {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartAxisTitle".to_string())]
    pub odata_type: String,
    ///Represents the formatting of chart axis title. Read-only.
    pub format: Option<MicrosoftGraphWorkbookChartAxisTitleFormat>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents the axis title.
    pub text: Option<String>,
    ///A Boolean that specifies the visibility of an axis title.
    pub visible: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartAxisTitleFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartAxisTitleFormat".to_string())]
    pub odata_type: String,
    ///Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.
    pub font: Option<MicrosoftGraphWorkbookChartFont>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartDataLabelFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartDataLabelFormat".to_string())]
    pub odata_type: String,
    ///Represents the fill format of the current chart data label. Read-only.
    pub fill: Option<MicrosoftGraphWorkbookChartFill>,
    ///Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.
    pub font: Option<MicrosoftGraphWorkbookChartFont>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartDataLabels {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartDataLabels".to_string())]
    pub odata_type: String,
    ///Represents the format of chart data labels, which includes fill and font formatting. Read-only.
    pub format: Option<MicrosoftGraphWorkbookChartDataLabelFormat>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///DataLabelPosition value that represents the position of the data label. The possible values are: None, Center, InsideEnd, InsideBase, OutsideEnd, Left, Right, Top, Bottom, BestFit, Callout.
    pub position: Option<String>,
    ///String that represents the separator used for the data labels on a chart.
    pub separator: Option<String>,
    ///Boolean value that represents whether the data label bubble size is visible.
    #[serde(rename = "showBubbleSize")]
    pub show_bubble_size: Option<bool>,
    ///Boolean value that represents whether the data label category name is visible.
    #[serde(rename = "showCategoryName")]
    pub show_category_name: Option<bool>,
    ///Boolean value that represents whether the data label legend key is visible.
    #[serde(rename = "showLegendKey")]
    pub show_legend_key: Option<bool>,
    ///Boolean value that represents whether the data label percentage is visible.
    #[serde(rename = "showPercentage")]
    pub show_percentage: Option<bool>,
    ///Boolean value that represents whether the data label series name is visible.
    #[serde(rename = "showSeriesName")]
    pub show_series_name: Option<bool>,
    ///Boolean value that represents whether the data label value is visible.
    #[serde(rename = "showValue")]
    pub show_value: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartFill {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartFill".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartFont {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartFont".to_string())]
    pub odata_type: String,
    ///Indicates whether the fond is bold.
    pub bold: Option<bool>,
    ///The HTML color code representation of the text color. For example #FF0000 represents Red.
    pub color: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the fond is italic.
    pub italic: Option<bool>,
    ///The font name. For example 'Calibri'.
    pub name: Option<String>,
    ///The size of the font. For example,  11.
    pub size: Option<MicrosoftGraphWorkbookChartFontSize>,
    ///The type of underlining applied to the font. The possible values are: None, Single.
    pub underline: Option<String>,
}
///The size of the font. For example,  11.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWorkbookChartFontSize {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartGridlines {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartGridlines".to_string())]
    pub odata_type: String,
    ///Represents the formatting of chart gridlines. Read-only.
    pub format: Option<MicrosoftGraphWorkbookChartGridlinesFormat>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the axis gridlines are visible.
    pub visible: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartGridlinesFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartGridlinesFormat".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents chart line formatting. Read-only.
    pub line: Option<MicrosoftGraphWorkbookChartLineFormat>,
}
///Represents the height, in points, of the chart object.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWorkbookChartHeight {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The distance, in points, from the left side of the chart to the worksheet origin.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWorkbookChartLeft {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartLegend {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartLegend".to_string())]
    pub odata_type: String,
    ///Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.
    pub format: Option<MicrosoftGraphWorkbookChartLegendFormat>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the chart legend should overlap with the main body of the chart.
    pub overlay: Option<bool>,
    ///Represents the position of the legend on the chart. The possible values are: Top, Bottom, Left, Right, Corner, Custom.
    pub position: Option<String>,
    ///Indicates whether the chart legend is visible.
    pub visible: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartLegendFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartLegendFormat".to_string())]
    pub odata_type: String,
    ///Represents the fill format of an object, which includes background formating information. Read-only.
    pub fill: Option<MicrosoftGraphWorkbookChartFill>,
    ///Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.
    pub font: Option<MicrosoftGraphWorkbookChartFont>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartLineFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartLineFormat".to_string())]
    pub odata_type: String,
    ///The HTML color code that represents the color of lines in the chart.
    pub color: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartPoint {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartPoint".to_string())]
    pub odata_type: String,
    ///The format properties of the chart point. Read-only.
    pub format: Option<MicrosoftGraphWorkbookChartPointFormat>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The value of a chart point. Read-only.
    pub value: Option<serde_json::Value>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartPointFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartPointFormat".to_string())]
    pub odata_type: String,
    ///Represents the fill format of a chart, which includes background formatting information. Read-only.
    pub fill: Option<MicrosoftGraphWorkbookChartFill>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartSeries {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartSeries".to_string())]
    pub odata_type: String,
    ///The formatting of a chart series, which includes fill and line formatting. Read-only.
    pub format: Option<MicrosoftGraphWorkbookChartSeriesFormat>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The name of a series in a chart.
    pub name: Option<String>,
    ///A collection of all points in the series. Read-only.
    pub points: Option<Vec<MicrosoftGraphWorkbookChartPoint>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartSeriesFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartSeriesFormat".to_string())]
    pub odata_type: String,
    ///Represents the fill format of a chart series, which includes background formatting information. Read-only.
    pub fill: Option<MicrosoftGraphWorkbookChartFill>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents line formatting. Read-only.
    pub line: Option<MicrosoftGraphWorkbookChartLineFormat>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartTitle {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartTitle".to_string())]
    pub odata_type: String,
    ///The formatting of a chart title, which includes fill and font formatting. Read-only.
    pub format: Option<MicrosoftGraphWorkbookChartTitleFormat>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the chart title will overlay the chart or not.
    pub overlay: Option<bool>,
    ///The title text of the chart.
    pub text: Option<String>,
    ///Indicates whether the chart title is visible.
    pub visible: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookChartTitleFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookChartTitleFormat".to_string())]
    pub odata_type: String,
    ///Represents the fill format of an object, which includes background formatting information. Read-only.
    pub fill: Option<MicrosoftGraphWorkbookChartFill>,
    ///Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.
    pub font: Option<MicrosoftGraphWorkbookChartFont>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
///Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWorkbookChartTop {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///Represents the width, in points, of the chart object.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWorkbookChartWidth {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookComment {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookComment".to_string())]
    pub odata_type: String,
    ///The content of the comment.
    pub content: Option<String>,
    ///The content type of the comment.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The list of replies to the comment. Read-only. Nullable.
    pub replies: Option<Vec<MicrosoftGraphWorkbookCommentReply>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookCommentReply {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookCommentReply".to_string())]
    pub odata_type: String,
    ///The content of the reply.
    pub content: Option<String>,
    ///The content type for the reply.
    #[serde(rename = "contentType")]
    pub content_type: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookFilter {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookFilter".to_string())]
    pub odata_type: String,
    ///The currently applied filter on the given column. Read-only.
    pub criteria: Option<MicrosoftGraphWorkbookFilterCriteria>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookFilterCriteria {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The color applied to the cell.
    pub color: Option<String>,
    ///A custom criterion.
    pub criterion1: Option<String>,
    ///A custom criterion.
    pub criterion2: Option<String>,
    ///A dynamic formula specified in a custom filter.
    #[serde(rename = "dynamicCriteria")]
    pub dynamic_criteria: Option<String>,
    ///Indicates whether a filter is applied to a column.
    #[serde(rename = "filterOn")]
    pub filter_on: Option<String>,
    ///An icon applied to a cell via conditional formatting.
    pub icon: Option<MicrosoftGraphWorkbookIcon>,
    ///An operator in a cell; for example, =, >, <, <=, or <>.
    pub operator: Option<String>,
    ///The values that appear in the cell.
    pub values: Option<serde_json::Value>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookFormatProtection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookFormatProtection".to_string())]
    pub odata_type: String,
    ///Indicates whether Excel hides the formula for the cells in the range. A null value indicates that the entire range doesn't have uniform formula hidden setting.
    #[serde(rename = "formulaHidden")]
    pub formula_hidden: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether Excel locks the cells in the object. A null value indicates that the entire range doesn't have uniform lock setting.
    pub locked: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookFunctionResult {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookFunctionResult".to_string())]
    pub odata_type: String,
    pub error: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    pub value: Option<serde_json::Value>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookFunctions {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookFunctions".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookIcon {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The index of the icon in the given set.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub index: Option<f64>,
    ///The set that the icon is part of. The possible values are: Invalid, ThreeArrows, ThreeArrowsGray, ThreeFlags, ThreeTrafficLights1, ThreeTrafficLights2, ThreeSigns, ThreeSymbols, ThreeSymbols2, FourArrows, FourArrowsGray, FourRedToBlack, FourRating, FourTrafficLights, FiveArrows, FiveArrowsGray, FiveRating, FiveQuarters, ThreeStars, ThreeTriangles, FiveBoxes.
    pub set: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookNamedItem {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookNamedItem".to_string())]
    pub odata_type: String,
    ///The comment associated with this name.
    pub comment: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The name of the object. Read-only.
    pub name: Option<String>,
    ///Indicates whether the name is scoped to the workbook or to a specific worksheet. Read-only.
    pub scope: Option<String>,
    ///The type of reference is associated with the name. Possible values are: String, Integer, Double, Boolean, Range. Read-only.
    #[serde(rename = "type")]
    pub r#type: Option<String>,
    ///The formula that the name is defined to refer to. For example, =Sheet14!$B$2:$H$12 and =4.75. Read-only.
    pub value: Option<serde_json::Value>,
    ///Indicates whether the object is visible.
    pub visible: Option<bool>,
    ///Returns the worksheet to which the named item is scoped. Available only if the item is scoped to the worksheet. Read-only.
    pub worksheet: Option<Box<MicrosoftGraphWorkbookWorksheet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookOperation {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookOperation".to_string())]
    pub odata_type: String,
    ///The error returned by the operation.
    pub error: Option<Box<MicrosoftGraphWorkbookOperationError>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The resource URI for the result.
    #[serde(rename = "resourceLocation")]
    pub resource_location: Option<String>,
    pub status: Option<MicrosoftGraphWorkbookOperationStatus>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookOperationError {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The error code.
    pub code: Option<String>,
    #[serde(rename = "innerError")]
    pub inner_error: Option<Box<MicrosoftGraphWorkbookOperationError>>,
    ///The error message.
    pub message: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWorkbookOperationStatus {
    #[serde(rename = "notStarted")]
    #[default]
    NotStarted,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookPivotTable {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookPivotTable".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The name of the pivot table.
    pub name: Option<String>,
    ///The worksheet that contains the current pivot table. Read-only.
    pub worksheet: Option<Box<MicrosoftGraphWorkbookWorksheet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookRange {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookRange".to_string())]
    pub odata_type: String,
    ///Represents the range reference in A1-style. Address value contains the Sheet reference (for example, Sheet1!A1:B4). Read-only.
    pub address: Option<String>,
    ///Represents range reference for the specified range in the language of the user. Read-only.
    #[serde(rename = "addressLocal")]
    pub address_local: Option<String>,
    ///Number of cells in the range. Read-only.
    #[serde(rename = "cellCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub cell_count: Option<f64>,
    ///Represents the total number of columns in the range. Read-only.
    #[serde(rename = "columnCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub column_count: Option<f64>,
    ///Indicates whether all columns of the current range are hidden.
    #[serde(rename = "columnHidden")]
    pub column_hidden: Option<bool>,
    ///Represents the column number of the first cell in the range. Zero-indexed. Read-only.
    #[serde(rename = "columnIndex")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub column_index: Option<f64>,
    ///Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties. Read-only.
    pub format: Option<MicrosoftGraphWorkbookRangeFormat>,
    ///Represents the formula in A1-style notation.
    pub formulas: Option<serde_json::Value>,
    ///Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English '=SUM(A1, 1.5)' formula would become '=SUMME(A1; 1,5)' in German.
    #[serde(rename = "formulasLocal")]
    pub formulas_local: Option<serde_json::Value>,
    ///Represents the formula in R1C1-style notation.
    #[serde(rename = "formulasR1C1")]
    pub formulas_r1c1: Option<serde_json::Value>,
    ///Represents if all cells of the current range are hidden. Read-only.
    pub hidden: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Represents Excel's number format code for the given cell.
    #[serde(rename = "numberFormat")]
    pub number_format: Option<serde_json::Value>,
    ///Returns the total number of rows in the range. Read-only.
    #[serde(rename = "rowCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub row_count: Option<f64>,
    ///Indicates whether all rows of the current range are hidden.
    #[serde(rename = "rowHidden")]
    pub row_hidden: Option<bool>,
    ///Returns the row number of the first cell in the range. Zero-indexed. Read-only.
    #[serde(rename = "rowIndex")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub row_index: Option<f64>,
    ///The worksheet containing the current range. Read-only.
    pub sort: Option<MicrosoftGraphWorkbookRangeSort>,
    ///Text values of the specified range. The Text value doesn't depend on the cell width. The # sign substitution that happens in Excel UI doesn't affect the text value returned by the API. Read-only.
    pub text: Option<serde_json::Value>,
    ///Represents the type of data of each cell. The possible values are: Unknown, Empty, String, Integer, Double, Boolean, Error. Read-only.
    #[serde(rename = "valueTypes")]
    pub value_types: Option<serde_json::Value>,
    ///Represents the raw values of the specified range. The data returned can be of type string, number, or a Boolean. Cell that contains an error returns the error string.
    pub values: Option<serde_json::Value>,
    ///The worksheet containing the current range. Read-only.
    pub worksheet: Option<Box<MicrosoftGraphWorkbookWorksheet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookRangeBorder {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookRangeBorder".to_string())]
    pub odata_type: String,
    ///The HTML color code that represents the color of the border line. Can either be of the form #RRGGBB, for example 'FFA500', or a named HTML color, for example 'orange'.
    pub color: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates the specific side of the border. The possible values are: EdgeTop, EdgeBottom, EdgeLeft, EdgeRight, InsideVertical, InsideHorizontal, DiagonalDown, DiagonalUp. Read-only.
    #[serde(rename = "sideIndex")]
    pub side_index: Option<String>,
    ///Indicates the line style for the border. The possible values are: None, Continuous, Dash, DashDot, DashDotDot, Dot, Double, SlantDashDot.
    pub style: Option<String>,
    ///The weight of the border around a range. The possible values are: Hairline, Thin, Medium, Thick.
    pub weight: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookRangeFill {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookRangeFill".to_string())]
    pub odata_type: String,
    ///HTML color code representing the color of the border line. Can either be of the form #RRGGBB, for example 'FFA500', or be a named HTML color, for example 'orange'.
    pub color: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookRangeFont {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookRangeFont".to_string())]
    pub odata_type: String,
    ///Inidicates whether the font is bold.
    pub bold: Option<bool>,
    ///The HTML color code representation of the text color. For example, #FF0000 represents the color red.
    pub color: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Inidicates whether the font is italic.
    pub italic: Option<bool>,
    ///The font name. For example, 'Calibri'.
    pub name: Option<String>,
    ///The font size.
    pub size: Option<MicrosoftGraphWorkbookRangeFontSize>,
    ///The type of underlining applied to the font. The possible values are: None, Single, Double, SingleAccountant, DoubleAccountant.
    pub underline: Option<String>,
}
///The font size.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWorkbookRangeFontSize {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookRangeFormat {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookRangeFormat".to_string())]
    pub odata_type: String,
    ///Collection of border objects that apply to the overall range selected Read-only.
    pub borders: Option<Vec<MicrosoftGraphWorkbookRangeBorder>>,
    ///The width of all columns within the range. If the column widths aren't uniform, null will be returned.
    #[serde(rename = "columnWidth")]
    pub column_width: Option<MicrosoftGraphWorkbookRangeFormatColumnWidth>,
    ///Returns the fill object defined on the overall range. Read-only.
    pub fill: Option<MicrosoftGraphWorkbookRangeFill>,
    ///Returns the font object defined on the overall range selected Read-only.
    pub font: Option<MicrosoftGraphWorkbookRangeFont>,
    ///The horizontal alignment for the specified object. Possible values are: General, Left, Center, Right, Fill, Justify, CenterAcrossSelection, Distributed.
    #[serde(rename = "horizontalAlignment")]
    pub horizontal_alignment: Option<String>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Returns the format protection object for a range. Read-only.
    pub protection: Option<MicrosoftGraphWorkbookFormatProtection>,
    ///The height of all rows in the range. If the row heights aren't uniform null will be returned.
    #[serde(rename = "rowHeight")]
    pub row_height: Option<MicrosoftGraphWorkbookRangeFormatRowHeight>,
    ///The vertical alignment for the specified object. Possible values are: Top, Center, Bottom, Justify, Distributed.
    #[serde(rename = "verticalAlignment")]
    pub vertical_alignment: Option<String>,
    ///Indicates whether Excel wraps the text in the object. A null value indicates that the entire range doesn't have a uniform wrap setting.
    #[serde(rename = "wrapText")]
    pub wrap_text: Option<bool>,
}
///The width of all columns within the range. If the column widths aren't uniform, null will be returned.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWorkbookRangeFormatColumnWidth {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
///The height of all rows in the range. If the row heights aren't uniform null will be returned.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWorkbookRangeFormatRowHeight {
    #[default]
    Mixed(Option<f64>),
    Mixed1(Option<String>),
    ReferenceNumeric(ReferenceNumeric),
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookRangeSort {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookRangeSort".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookRangeView {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookRangeView".to_string())]
    pub odata_type: String,
    ///The cell addresses.
    #[serde(rename = "cellAddresses")]
    pub cell_addresses: Option<serde_json::Value>,
    ///The number of visible columns. Read-only.
    #[serde(rename = "columnCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub column_count: Option<f64>,
    ///The formula in A1-style notation.
    pub formulas: Option<serde_json::Value>,
    ///The formula in A1-style notation, in the user's language and number-formatting locale. For example, the English '=SUM(A1, 1.5)' formula would become '=SUMME(A1; 1,5)' in German.
    #[serde(rename = "formulasLocal")]
    pub formulas_local: Option<serde_json::Value>,
    ///Represents the formula in R1C1-style notation.
    #[serde(rename = "formulasR1C1")]
    pub formulas_r1c1: Option<serde_json::Value>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The index of the range.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub index: Option<f64>,
    ///Excel's number format code for the given cell. Read-only.
    #[serde(rename = "numberFormat")]
    pub number_format: Option<serde_json::Value>,
    ///The number of visible rows. Read-only.
    #[serde(rename = "rowCount")]
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub row_count: Option<f64>,
    ///The collection of range views associated with the range. Read-only. Read-only.
    pub rows: Option<Vec<MicrosoftGraphWorkbookRangeView>>,
    ///The text values of the specified range. The Text value won't depend on the cell width. The # sign substitution that happens in Excel UI won't affect the text value returned by the API. Read-only.
    pub text: Option<serde_json::Value>,
    ///The type of data of each cell. Read-only. The possible values are: Unknown, Empty, String, Integer, Double, Boolean, Error.
    #[serde(rename = "valueTypes")]
    pub value_types: Option<serde_json::Value>,
    ///The raw values of the specified range view. The data returned could be of type string, number, or a Boolean. Cell that contains an error returns the error string.
    pub values: Option<serde_json::Value>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookSortField {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents whether the sorting is done in an ascending fashion.
    pub ascending: Option<bool>,
    ///Represents the color that is the target of the condition if the sorting is on font or cell color.
    pub color: Option<String>,
    ///Represents additional sorting options for this field. The possible values are: Normal, TextAsNumber.
    #[serde(rename = "dataOption")]
    pub data_option: Option<String>,
    ///Represents the icon that is the target of the condition if the sorting is on the cell's icon.
    pub icon: Option<MicrosoftGraphWorkbookIcon>,
    ///Represents the column (or row, depending on the sort orientation) that the condition is on. Represented as an offset from the first column (or row).
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub key: Option<f64>,
    ///Represents the type of sorting of this condition. The possible values are: Value, CellColor, FontColor, Icon.
    #[serde(rename = "sortOn")]
    pub sort_on: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookTable {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookTable".to_string())]
    pub odata_type: String,
    ///The list of all the columns in the table. Read-only.
    pub columns: Option<Vec<MicrosoftGraphWorkbookTableColumn>>,
    ///Indicates whether the first column contains special formatting.
    #[serde(rename = "highlightFirstColumn")]
    pub highlight_first_column: Option<bool>,
    ///Indicates whether the last column contains special formatting.
    #[serde(rename = "highlightLastColumn")]
    pub highlight_last_column: Option<bool>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A legacy identifier used in older Excel clients. The value of the identifier remains the same even when the table is renamed. This property should be interpreted as an opaque string value and shouldn't be parsed to any other type. Read-only.
    #[serde(rename = "legacyId")]
    pub legacy_id: Option<String>,
    ///The name of the table.
    pub name: Option<String>,
    ///The list of all the rows in the table. Read-only.
    pub rows: Option<Vec<MicrosoftGraphWorkbookTableRow>>,
    ///Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.
    #[serde(rename = "showBandedColumns")]
    pub show_banded_columns: Option<bool>,
    ///Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.
    #[serde(rename = "showBandedRows")]
    pub show_banded_rows: Option<bool>,
    ///Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.
    #[serde(rename = "showFilterButton")]
    pub show_filter_button: Option<bool>,
    ///Indicates whether the header row is visible or not. This value can be set to show or remove the header row.
    #[serde(rename = "showHeaders")]
    pub show_headers: Option<bool>,
    ///Indicates whether the total row is visible or not. This value can be set to show or remove the total row.
    #[serde(rename = "showTotals")]
    pub show_totals: Option<bool>,
    ///The sorting for the table. Read-only.
    pub sort: Option<MicrosoftGraphWorkbookTableSort>,
    ///A constant value that represents the Table style. Possible values are: TableStyleLight1 through TableStyleLight21, TableStyleMedium1 through TableStyleMedium28, TableStyleStyleDark1 through TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.
    pub style: Option<String>,
    ///The worksheet containing the current table. Read-only.
    pub worksheet: Option<Box<MicrosoftGraphWorkbookWorksheet>>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookTableColumn {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookTableColumn".to_string())]
    pub odata_type: String,
    ///The filter applied to the column. Read-only.
    pub filter: Option<MicrosoftGraphWorkbookFilter>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The index of the column within the columns collection of the table. Zero-indexed. Read-only.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub index: Option<f64>,
    ///The name of the table column.
    pub name: Option<String>,
    ///TRepresents the raw values of the specified range. The data returned could be of type string, number, or a Boolean. Cell that contain an error will return the error string.
    pub values: Option<serde_json::Value>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookTableRow {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookTableRow".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The index of the row within the rows collection of the table. Zero-based. Read-only.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub index: Option<f64>,
    ///The raw values of the specified range. The data returned could be of type string, number, or a Boolean. Any cell that contain an error will return the error string.
    pub values: Option<serde_json::Value>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookTableSort {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookTableSort".to_string())]
    pub odata_type: String,
    ///The list of the current conditions last used to sort the table. Read-only.
    pub fields: Option<Vec<MicrosoftGraphWorkbookSortField>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether the casing impacted the last sort of the table. Read-only.
    #[serde(rename = "matchCase")]
    pub match_case: Option<bool>,
    ///The Chinese character ordering method last used to sort the table. The possible values are: PinYin, StrokeCount. Read-only.
    pub method: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookWorksheet {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookWorksheet".to_string())]
    pub odata_type: String,
    ///The list of charts that are part of the worksheet. Read-only.
    pub charts: Option<Vec<MicrosoftGraphWorkbookChart>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///The display name of the worksheet.
    pub name: Option<String>,
    ///The list of names that are associated with the worksheet. Read-only.
    pub names: Option<Vec<MicrosoftGraphWorkbookNamedItem>>,
    ///The list of piot tables that are part of the worksheet.
    #[serde(rename = "pivotTables")]
    pub pivot_tables: Option<Vec<MicrosoftGraphWorkbookPivotTable>>,
    ///The zero-based position of the worksheet within the workbook.
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub position: Option<f64>,
    ///The sheet protection object for a worksheet. Read-only.
    pub protection: Option<MicrosoftGraphWorkbookWorksheetProtection>,
    ///The list of tables that are part of the worksheet. Read-only.
    pub tables: Option<Vec<MicrosoftGraphWorkbookTable>>,
    ///The visibility of the worksheet. The possible values are: Visible, Hidden, VeryHidden.
    pub visibility: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookWorksheetProtection {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workbookWorksheetProtection".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Worksheet protection options. Read-only.
    pub options: Option<MicrosoftGraphWorkbookWorksheetProtectionOptions>,
    ///Indicates whether the worksheet is protected.  Read-only.
    pub protected: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkbookWorksheetProtectionOptions {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Indicates whether the worksheet protection option to allow the use of the autofilter feature is enabled.
    #[serde(rename = "allowAutoFilter")]
    pub allow_auto_filter: Option<bool>,
    ///Indicates whether the worksheet protection option to allow deleting columns is enabled.
    #[serde(rename = "allowDeleteColumns")]
    pub allow_delete_columns: Option<bool>,
    ///Indicates whether the worksheet protection option to allow deleting rows is enabled.
    #[serde(rename = "allowDeleteRows")]
    pub allow_delete_rows: Option<bool>,
    ///Indicates whether the worksheet protection option to allow formatting cells is enabled.
    #[serde(rename = "allowFormatCells")]
    pub allow_format_cells: Option<bool>,
    ///Indicates whether the worksheet protection option to allow formatting columns is enabled.
    #[serde(rename = "allowFormatColumns")]
    pub allow_format_columns: Option<bool>,
    ///Indicates whether the worksheet protection option to allow formatting rows is enabled.
    #[serde(rename = "allowFormatRows")]
    pub allow_format_rows: Option<bool>,
    ///Indicates whether the worksheet protection option to allow inserting columns is enabled.
    #[serde(rename = "allowInsertColumns")]
    pub allow_insert_columns: Option<bool>,
    ///Indicates whether the worksheet protection option to allow inserting hyperlinks is enabled.
    #[serde(rename = "allowInsertHyperlinks")]
    pub allow_insert_hyperlinks: Option<bool>,
    ///Indicates whether the worksheet protection option to allow inserting rows is enabled.
    #[serde(rename = "allowInsertRows")]
    pub allow_insert_rows: Option<bool>,
    ///Indicates whether the worksheet protection option to allow the use of the pivot table feature is enabled.
    #[serde(rename = "allowPivotTables")]
    pub allow_pivot_tables: Option<bool>,
    ///Indicates whether the worksheet protection option to allow the use of the sort feature is enabled.
    #[serde(rename = "allowSort")]
    pub allow_sort: Option<bool>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkforceIntegration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workforceIntegration".to_string())]
    pub odata_type: String,
    ///API version for the callback URL. Start with 1.
    #[serde(rename = "apiVersion")]
    pub api_version: Option<f64>,
    ///Identity of the creator of the entity.
    #[serde(rename = "createdBy")]
    pub created_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///Name of the workforce integration.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    ///Support to view eligibility-filtered results. Possible values are: none, swapRequest, offerShiftRequest, unknownFutureValue, timeOffReason. Use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: timeOffReason.
    #[serde(rename = "eligibilityFilteringEnabledEntities")]
    pub eligibility_filtering_enabled_entities: Option<
        MicrosoftGraphEligibilityFilteringEnabledEntities,
    >,
    ///The workforce integration encryption resource.
    pub encryption: Option<MicrosoftGraphWorkforceIntegrationEncryption>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///Indicates whether this workforce integration is currently active and available.
    #[serde(rename = "isActive")]
    pub is_active: Option<bool>,
    ///Identity of the person who last modified the entity.
    #[serde(rename = "lastModifiedBy")]
    pub last_modified_by: Option<MicrosoftGraphIdentitySet>,
    ///The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
    #[serde(rename = "lastModifiedDateTime")]
    pub last_modified_date_time: Option<chrono::DateTime<chrono::Utc>>,
    ///The Shifts entities supported for synchronous change notifications. Shifts call back to the provided URL when client changes occur to the entities specified in this property. By default, no entities are supported for change notifications. Possible values are: none, shift, swapRequest, userShiftPreferences, openShift, openShiftRequest, offerShiftRequest, unknownFutureValue, timeCard, timeOffReason, timeOff, timeOffRequest. Use the Prefer: include-unknown-enum-members request header to get the following values in this evolvable enum: timeCard , timeOffReason , timeOff , timeOffRequest.
    #[serde(rename = "supportedEntities")]
    pub supported_entities: Option<MicrosoftGraphWorkforceIntegrationSupportedEntities>,
    ///Workforce Integration URL for callbacks from the Shifts service.
    pub url: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkforceIntegrationEncryption {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Possible values are: sharedSecret, unknownFutureValue.
    pub protocol: Option<MicrosoftGraphWorkforceIntegrationEncryptionProtocol>,
    ///Encryption shared secret.
    pub secret: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWorkforceIntegrationEncryptionProtocol {
    #[serde(rename = "sharedSecret")]
    #[default]
    SharedSecret,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphWorkforceIntegrationSupportedEntities {
    #[serde(rename = "none")]
    #[default]
    None,
    #[serde(rename = "shift")]
    Shift,
    #[serde(rename = "swapRequest")]
    SwapRequest,
    #[serde(rename = "userShiftPreferences")]
    UserShiftPreferences,
    #[serde(rename = "openShift")]
    OpenShift,
    #[serde(rename = "openShiftRequest")]
    OpenShiftRequest,
    #[serde(rename = "offerShiftRequest")]
    OfferShiftRequest,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "timeCard")]
    TimeCard,
    #[serde(rename = "timeOffReason")]
    TimeOffReason,
    #[serde(rename = "timeOff")]
    TimeOff,
    #[serde(rename = "timeOffRequest")]
    TimeOffRequest,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkingHours {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The days of the week on which the user works.
    #[serde(rename = "daysOfWeek")]
    pub days_of_week: Option<Vec<MicrosoftGraphDayOfWeek>>,
    ///The time of the day that the user stops working.
    #[serde(rename = "endTime")]
    pub end_time: Option<chrono::NaiveTime>,
    ///The time of the day that the user starts working.
    #[serde(rename = "startTime")]
    pub start_time: Option<chrono::NaiveTime>,
    ///The time zone to which the working hours apply.
    #[serde(rename = "timeZone")]
    pub time_zone: Option<MicrosoftGraphTimeZoneBase>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphWorkingTimeSchedule {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.workingTimeSchedule".to_string())]
    pub odata_type: String,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphX509CertificateAffinityLevel {
    #[serde(rename = "low")]
    #[default]
    Low,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphX509CertificateAuthenticationMethodConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default(
        "#microsoft.graph.x509CertificateAuthenticationMethodConfiguration".to_string()
    )]
    pub odata_type: String,
    ///Defines strong authentication configurations. This configuration includes the default authentication mode and the different rules for strong authentication bindings.
    #[serde(rename = "authenticationModeConfiguration")]
    pub authentication_mode_configuration: Option<
        MicrosoftGraphX509CertificateAuthenticationModeConfiguration,
    >,
    ///Defines fields in the X.509 certificate that map to attributes of the Microsoft Entra user object in order to bind the certificate to the user. The priority of the object determines the order in which the binding is carried out. The first binding that matches will be used and the rest ignored.
    #[serde(rename = "certificateUserBindings")]
    pub certificate_user_bindings: Option<Vec<MicrosoftGraphX509CertificateUserBinding>>,
    #[serde(rename = "crlValidationConfiguration")]
    pub crl_validation_configuration: Option<
        MicrosoftGraphX509CertificateCrlvalidationConfiguration,
    >,
    ///Groups of users that are excluded from a policy.
    #[serde(rename = "excludeTargets")]
    pub exclude_targets: Option<Vec<MicrosoftGraphExcludeTarget>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
    ///A collection of groups that are enabled to use the authentication method.
    #[serde(rename = "includeTargets")]
    pub include_targets: Option<Vec<MicrosoftGraphAuthenticationMethodTarget>>,
    ///The state of the policy. Possible values are: enabled, disabled.
    pub state: Option<MicrosoftGraphAuthenticationMethodState>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphX509CertificateAuthenticationMode {
    #[serde(rename = "x509CertificateSingleFactor")]
    #[default]
    X509CertificateSingleFactor,
    #[serde(rename = "x509CertificateMultiFactor")]
    X509CertificateMultiFactor,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphX509CertificateAuthenticationModeConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Rules are configured in addition to the authentication mode to bind a specific x509CertificateRuleType to an x509CertificateAuthenticationMode. For example, bind the policyOID with identifier 1.32.132.343 to x509CertificateMultiFactor authentication mode.
    pub rules: Option<Vec<MicrosoftGraphX509CertificateRule>>,
    ///The type of strong authentication mode. The possible values are: x509CertificateSingleFactor, x509CertificateMultiFactor, unknownFutureValue.
    #[serde(rename = "x509CertificateAuthenticationDefaultMode")]
    pub x509certificate_authentication_default_mode: Option<
        MicrosoftGraphX509CertificateAuthenticationMode,
    >,
    #[serde(rename = "x509CertificateDefaultRequiredAffinityLevel")]
    pub x509certificate_default_required_affinity_level: Option<
        MicrosoftGraphX509CertificateAffinityLevel,
    >,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphX509CertificateCombinationConfiguration {
    #[serde(default)]
    #[serde(rename = "@odata.type")]
    #[default("#microsoft.graph.x509CertificateCombinationConfiguration".to_string())]
    pub odata_type: String,
    ///A list of allowed subject key identifier values.
    #[serde(rename = "allowedIssuerSkis")]
    pub allowed_issuer_skis: Option<Vec<String>>,
    ///A list of allowed policy OIDs.
    #[serde(rename = "allowedPolicyOIDs")]
    pub allowed_policy_oids: Option<Vec<String>>,
    ///Which authentication method combinations this configuration applies to. Must be an allowedCombinations object, part of the authenticationStrengthPolicy. The only possible value for fido2combinationConfigurations is 'fido2'.
    #[serde(rename = "appliesToCombinations")]
    pub applies_to_combinations: Option<Vec<MicrosoftGraphAuthenticationMethodModes>>,
    ///The unique identifier for an entity. Read-only.
    pub id: Option<String>,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphX509CertificateCrlvalidationConfiguration {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///Represents the SKIs of CAs that should be excluded from the valid CRL distribution point check. SKI is represented as a hexadecimal string.
    #[serde(rename = "exemptedCertificateAuthoritiesSubjectKeyIdentifiers")]
    pub exempted_certificate_authorities_subject_key_identifiers: Option<
        Vec<Option<String>>,
    >,
    pub state: Option<MicrosoftGraphX509CertificateCrlvalidationConfigurationState>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphX509CertificateCrlvalidationConfigurationState {
    #[serde(rename = "disabled")]
    #[default]
    Disabled,
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphX509CertificateRule {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The identifier of the X.509 certificate. Required.
    pub identifier: Option<String>,
    #[serde(rename = "issuerSubjectIdentifier")]
    pub issuer_subject_identifier: Option<String>,
    #[serde(rename = "policyOidIdentifier")]
    pub policy_oid_identifier: Option<String>,
    ///The type of strong authentication mode. The possible values are: x509CertificateSingleFactor, x509CertificateMultiFactor, unknownFutureValue. Required.
    #[serde(rename = "x509CertificateAuthenticationMode")]
    pub x509certificate_authentication_mode: Option<
        MicrosoftGraphX509CertificateAuthenticationMode,
    >,
    #[serde(rename = "x509CertificateRequiredAffinityLevel")]
    pub x509certificate_required_affinity_level: Option<
        MicrosoftGraphX509CertificateAffinityLevel,
    >,
    ///The type of the X.509 certificate mode configuration rule. The possible values are: issuerSubject, policyOID, unknownFutureValue. Required.
    #[serde(rename = "x509CertificateRuleType")]
    pub x509certificate_rule_type: Option<MicrosoftGraphX509CertificateRuleType>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum MicrosoftGraphX509CertificateRuleType {
    #[serde(rename = "issuerSubject")]
    #[default]
    IssuerSubject,
    #[serde(rename = "policyOID")]
    PolicyOid,
    #[serde(rename = "unknownFutureValue")]
    UnknownFutureValue,
    #[serde(rename = "issuerSubjectAndPolicyOID")]
    IssuerSubjectAndPolicyOid,
}
#[serde_with::skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Validate, Default)]
pub struct MicrosoftGraphX509CertificateUserBinding {
    #[serde(rename = "@odata.type")]
    #[validate(length(min = 1))]
    pub odata_type: String,
    ///The priority of the binding. Microsoft Entra ID uses the binding with the highest priority. This value must be a non-negative integer and unique in the collection of objects in the certificateUserBindings property of an x509CertificateAuthenticationMethodConfiguration object. Required
    #[validate(range(min = -2147483648.0, max = 2147483647.0))]
    pub priority: Option<f64>,
    #[serde(rename = "trustAffinityLevel")]
    pub trust_affinity_level: Option<MicrosoftGraphX509CertificateAffinityLevel>,
    ///Defines the Microsoft Entra user property of the user object to use for the binding. The possible values are: userPrincipalName, onPremisesUserPrincipalName, certificateUserIds. Required.
    #[serde(rename = "userProperty")]
    pub user_property: Option<String>,
    ///The field on the X.509 certificate to use for the binding. The possible values are: PrincipalName, RFC822Name, SubjectKeyIdentifier, SHA1PublicKey.
    #[serde(rename = "x509CertificateField")]
    pub x509certificate_field: Option<String>,
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
pub enum ReferenceNumeric {
    #[serde(rename = "-INF")]
    #[default]
    NegativeInf,
    #[serde(rename = "INF")]
    Inf,
    #[serde(rename = "NaN")]
    NaN,
}


fn main() {}
